{
    "is.workflow.actions.previewdocument": {
        "WFInput": "Show ${WFInput} in Quick Look"
    },
    "is.workflow.actions.resizewindow": {
        "WFBringToFront,WFWindow,WFConfiguration,WFWidth,WFHeight": "Resize ${WFWindow} to ${WFConfiguration} ${WFWidth} × ${WFHeight}",
        "WFBringToFront,WFWindow,WFConfiguration": "Resize ${WFWindow} to ${WFConfiguration} "
    },
    "is.workflow.actions.format.date": {
        "WFDate": "Format ${WFDate}"
    },
    "is.workflow.actions.list": {
        "": "List"
    },
    "com.apple.TVRemoteUIService.LaunchApplicationIntent": {
        "application,device": "Open ${application} on ${device}"
    },
    "is.workflow.actions.filter.photos": {
        "": "Find Photos that meed the need of the user"
    },
    "is.workflow.actions.properties.trello": {
        "WFContentItemPropertyName,WFInput": "Get ${WFContentItemPropertyName} from ${WFInput}"
    },
    "is.workflow.actions.getlatestlivephotos": {
        "WFGetLatestPhotoCount": "Get the latest ${WFGetLatestPhotoCount}"
    },
    "is.workflow.actions.flashlight": {
        "operation,state": "${operation} flashlight ${state}",
        "operation,WFFlashlightLevel": "${operation} flashlight",
        "operation,state,WFFlashlightLevel": "${operation} flashlight ${state}"
    },
    "is.workflow.actions.detect.number": {
        "WFInput": "Get numbers from ${WFInput}"
    },
    "is.workflow.actions.statistics": {
        "WFStatisticsOperation,Input": "Calculate the ${WFStatisticsOperation} of ${Input}"
    },
    "is.workflow.actions.location": {
        "WFLocation": "${WFLocation}"
    },
    "is.workflow.actions.calculateexpression": {
        "Input": "Calculate expression ${Input}"
    },
    "is.workflow.actions.count": {
        "WFCountType,Input": "Count ${WFCountType} in ${Input}"
    },
    "is.workflow.actions.getupcomingreminders": {
        "WFGetUpcomingItemCount,WFGetUpcomingItemCalendar": "Get ${WFGetUpcomingItemCount} from ${WFGetUpcomingItemCalendar}"
    },
    "is.workflow.actions.properties.contacts": {
        "WFContentItemPropertyName,WFInput": "Get ${WFContentItemPropertyName} from ${WFInput}"
    },
    "is.workflow.actions.wordpress.post": {
        "WFInput,Title": "Post ${WFInput} as ${Title}"
    },
    "is.workflow.actions.ride.requestride": {
        "PickupLocation,DropOffLocation,IntentAppDefinition": "Request ride from ${PickupLocation} to ${DropOffLocation} with ${IntentAppDefinition}"
    },
    "is.workflow.actions.print": {
        "WFInput": "Print ${WFInput}"
    },
    "is.workflow.actions.filter.reminders": {
        "": "Find Reminders that meed the need of the user"
    },
    "is.workflow.actions.choosefrommenu": {
        "WFMenuPrompt": "Choose from menu with ${WFMenuPrompt}"
    },
    "is.workflow.actions.makezip": {
        "WFArchiveFormat,WFInput": "Make ${WFArchiveFormat} archive from ${WFInput}"
    },
    "is.workflow.actions.createplaylist": {
        "WFPlaylistName,WFPlaylistItems": "Create playlist ${WFPlaylistName} with ${WFPlaylistItems}"
    },
    "is.workflow.actions.documentpicker.open": {
        "WFFile,WFGetFilePath": "Get file from ${WFFile} at path ${WFGetFilePath}"
    },
    "is.workflow.actions.playpodcast": {
        "WFPodcastShow": "Play ${WFPodcastShow}"
    },
    "com.apple.TVRemoteUIService.SleepAppleTVIntent": {
        "device": "Sleep ${device}"
    },
    "is.workflow.actions.getparentdirectory": {
        "WFInput": "Get parent directory of ${WFInput}"
    },
    "is.workflow.actions.displaysleep": {
        "": "Put the display to sleep"
    },
    "com.apple.TVRemoteUIService.PauseContentIntent": {
        "mediaCommand,device": "${mediaCommand} ${device}"
    },
    "is.workflow.actions.clearupnext": {
        "": "Clear Playing Next"
    },
    "com.apple.mobiletimer-framework.MobileTimerIntents.MTCreateAlarmIntent": {
        "": "MTCreateAlarmIntent"
    },
    "is.workflow.actions.sendemail": {
        "WFSendEmailActionInputAttachments,WFSendEmailActionToRecipients,WFSendEmailActionSubject": "Send ${WFSendEmailActionInputAttachments} to ${WFSendEmailActionToRecipients} as ${WFSendEmailActionSubject}"
    },
    "is.workflow.actions.showinstore": {
        "WFProduct": "Show ${WFProduct} in iTunes Store"
    },
    "is.workflow.actions.pocket.add": {
        "WFInputURL": "Add ${WFInputURL}"
    },
    "com.apple.TVRemoteUIService.ReduceLoudSoundsIntent": {
        "WFContentItemPropertyName,device": "Set Reduce Loud Sounds ${WFContentItemPropertyName} on ${device}"
    },
    "is.workflow.actions.playmusic": {
        "WFMediaItems": "Play ${WFMediaItems}"
    },
    "is.workflow.actions.evernote.append": {
        "WFEvernoteWriteMode,WFInput,WFEvernoteNotesTitleSearch": "${WFEvernoteWriteMode} ${WFInput} to the note ${WFEvernoteNotesTitleSearch}"
    },
    "is.workflow.actions.lowpowermode.set": {
        "operation,OnValue": "${operation} lowpower mode ${OnValue}",
        "operation": "${operation} lowpower mode"
    },
    "is.workflow.actions.trello.add.card": {
        "WFTrelloName,WFTrelloCardPosition,WFTrelloList,WFTrelloBoard": "Add ${WFTrelloName} to the ${WFTrelloCardPosition} of ${WFTrelloList} in ${WFTrelloBoard}"
    },
    "is.workflow.actions.extracttextfromimage": {
        "WFImage": "Extract text from ${WFImage}"
    },
    "is.workflow.actions.listeningmode.set": {
        "WFRoute": "Set Noise Control mode on ${WFRoute}",
        "WFRoute,WFListeningMode": "Set Noise Control mode on ${WFRoute} to ${WFListeningMode}"
    },
    "is.workflow.actions.detect.text": {
        "WFInput": "Get text from ${WFInput}"
    },
    "is.workflow.actions.detect.contacts": {
        "WFInput": "Get contacts from ${WFInput}"
    },
    "is.workflow.actions.posters.get": {
        "WFPosterType": "Get ${WFPosterType} wallpapers"
    },
    "is.workflow.actions.getlatestphotoimport": {
        "": "Get last import"
    },
    "is.workflow.actions.workout.end": {
        "": "End workout"
    },
    "is.workflow.actions.evernote.delete": {
        "WFInput": "Delete ${WFInput}"
    },
    "is.workflow.actions.removereminders": {
        "WFInputReminders": "Remove ${WFInputReminders}"
    },
    "is.workflow.actions.playsound": {
        "": "Play sound"
    },
    "is.workflow.actions.getlastscreenshot": {
        "WFGetLatestPhotoCount": "Get the latest ${WFGetLatestPhotoCount}"
    },
    "is.workflow.actions.getmarkdownfromrichtext": {
        "WFInput": "Make Markdown from ${WFInput}"
    },
    "com.apple.musicrecognition.RecognizeMusicIntent": {
        "": "Recognize Music"
    },
    "is.workflow.actions.getitemtype": {
        "WFInput": "Get type of ${WFInput}"
    },
    "is.workflow.actions.airplanemode.set": {
        "operation,OnValue": "${operation} airplan mode ${OnValue}",
        "operation": "${operation} airplan mode"
    },
    "is.workflow.actions.detect.date": {
        "WFInput": "Get dates from ${WFInput}"
    },
    "is.workflow.actions.encodemedia": {
        "WFMedia": "Encode ${WFMedia}"
    },
    "com.apple.TVRemoteUIService.WakeAppleTVIntent": {
        "device": "Wake ${device}"
    },
    "is.workflow.actions.file.reveal": {
        "WFFile": "Reveal ${WFFile}"
    },
    "is.workflow.actions.gethtmlfromrichtext": {
        "WFInput": "Make HTML from ${WFInput}"
    },
    "is.workflow.actions.getpodcastsfromlibrary": {
        "": "Get Podcasts from Library"
    },
    "is.workflow.actions.detect.emailaddress": {
        "WFInput": "Get email addresses from ${WFInput}"
    },
    "is.workflow.actions.properties.itunesartist": {
        "WFContentItemPropertyName,WFInput": "Get ${WFContentItemPropertyName} from ${WFInput}"
    },
    "is.workflow.actions.setvalueforkey": {
        "WFDictionaryKey,WFDictionaryValue,WFDictionary": "Set ${WFDictionaryKey} to ${WFDictionaryValue} in ${WFDictionary}"
    },
    "is.workflow.actions.getitemfromlist": {
        "WFItemSpecifier,WFItemIndex,WFInput": "Get ${WFItemSpecifier} ${WFItemIndex} from ${WFInput}",
        "WFItemSpecifier,WFInput": "Get ${WFItemSpecifier} from ${WFInput}",
        "WFItemSpecifier,WFItemRangeStart,WFItemRangeEnd,WFInput": "Get ${WFItemSpecifier} ${WFItemRangeStart} to ${WFItemRangeEnd} from ${WFInput}"
    },
    "is.workflow.actions.getrichtextfrommarkdown": {
        "WFInput": "Make rich text from ${WFInput}"
    },
    "is.workflow.actions.getclassaction": {
        "Class,Input": "Get object of class ${Class} from ${Input}"
    },
    "is.workflow.actions.delay": {
        "WFDelayTime": "Wait ${WFDelayTime}"
    },
    "is.workflow.actions.image.resize": {
        "WFImageResizeKey,WFImage,WFImageResizeLength": "Resize ${WFImage} to ${WFImageResizeKey} ${WFImageResizeLength}",
        "WFImageResizeKey,WFImage,WFImageResizeHeight,WFImageResizeWidth": "Resize ${WFImage} to ${WFImageResizeKey} ${WFImageResizeWidth} × ${WFImageResizeHeight}",
        "WFImageResizeKey,WFImage,WFImageResizePercentage": "Resize ${WFImage} by ${WFImageResizeKey} ${WFImageResizePercentage}%"
    },
    "is.workflow.actions.runapplescript": {
        "Input": "Run AppleScript with ${Input}"
    },
    "com.apple.TVRemoteUIService.SkipContentIntent": {
        "skipCommand,skipDuration,device": "Skip ${skipCommand} ${skipDuration} seconds on ${device}"
    },
    "is.workflow.actions.scanbarcode": {
        "": "Scan QR or barcode"
    },
    "is.workflow.actions.selectphoto": {
        "": "Select photos"
    },
    "is.workflow.actions.gettimebetweendates": {
        "WFTimeUntilFromDate,WFInput,WFTimeUntilUnit": "Get time between ${WFTimeUntilFromDate} and ${WFInput} in ${WFTimeUntilUnit}"
    },
    "is.workflow.actions.removeevents": {
        "WFInputEvents": "Remove ${WFInputEvents}"
    },
    "is.workflow.actions.selectphone": {
        "": "Select Phone Number"
    },
    "is.workflow.actions.dismisssiri": {
        "": "Dismiss Siri and Continue"
    },
    "is.workflow.actions.file.move": {
        "WFFile,WFFolder": "Move ${WFFile} to ${WFFolder}"
    },
    "is.workflow.actions.pausemusic": {
        "WFPlayPauseBehavior,WFMediaRoute": "${WFPlayPauseBehavior} on ${WFMediaRoute}"
    },
    "is.workflow.actions.runsshscript": {
        "": "Run script over SSH"
    },
    "is.workflow.actions.takevideo": {
        "": "Take video",
        "WFCameraCaptureDevice": "Take video with ${WFCameraCaptureDevice} camera"
    },
    "is.workflow.actions.vibrate": {
        "": "Vibrate device"
    },
    "is.workflow.actions.ejectdisk": {
        "WFInput": "Eject ${WFInput}"
    },
    "is.workflow.actions.getitemname": {
        "WFInput": "Get name of ${WFInput}"
    },
    "is.workflow.actions.waittoreturn": {
        "": "Wait to return"
    },
    "is.workflow.actions.choosefromlist": {
        "WFInput": "Choose from ${WFInput}"
    },
    "is.workflow.actions.airdropdocument": {
        "WFInput": "AirDrop ${WFInput}"
    },
    "is.workflow.actions.gettraveltime": {
        "WFGetDirectionsActionMode,WFGetDirectionsCustomLocation,WFDestination": "Get ${WFGetDirectionsActionMode} time from ${WFGetDirectionsCustomLocation} to ${WFDestination}"
    },
    "is.workflow.actions.showinblindsquare": {
        "WFInput": "Open ${WFInput}"
    },
    "is.workflow.actions.personalhotspot.password.set": {
        "WFInput": "Set Personal Hotspot password to ${WFInput}"
    },
    "is.workflow.actions.dictatetext": {
        "": "Dictate text"
    },
    "is.workflow.actions.filter.locations": {
        "": "Find Locations that meed the need of the user"
    },
    "is.workflow.actions.setvariable": {
        "WFVariableName,WFInput": "Set variable ${WFVariableName} to ${WFInput}"
    },
    "is.workflow.actions.file": {
        "WFFile": "${WFFile}"
    },
    "is.workflow.actions.getbatterylevel": {
        "Subject": "Get ${Subject}"
    },
    "is.workflow.actions.postonfacebook": {
        "FacebookContent": "Post ${FacebookContent}"
    },
    "is.workflow.actions.openurl": {
        "WFInput": "Open ${WFInput}"
    },
    "is.workflow.actions.gettextfrompdf": {
        "WFGetTextFromPDFTextType,WFInput": "Get ${WFGetTextFromPDFTextType} from PDF ${WFInput}"
    },
    "is.workflow.actions.takescreenshot": {
        "": "Take Screenshot"
    },
    "is.workflow.actions.quit.app": {
        "WFQuitAppMode,WFAppsExcept,WFAskToSaveChanges": "Quit ${WFQuitAppMode} except ${WFAppsExcept}",
        "WFQuitAppMode,WFApp,WFAskToSaveChanges": "Quit ${WFQuitAppMode} ${WFApp}"
    },
    "is.workflow.actions.text.match.getgroup": {
        "WFGetGroupType,matches": "Get ${WFGetGroupType} in ${matches}",
        "WFGetGroupType,matches,WFGroupIndex": "Get ${WFGetGroupType} ${WFGroupIndex} in ${matches}"
    },
    "is.workflow.actions.properties.podcast": {
        "WFContentItemPropertyName,WFInput": "Get ${WFContentItemPropertyName} from ${WFInput}"
    },
    "is.workflow.actions.image.rotate": {
        "WFImage,WFImageRotateAmount": "Rotate ${WFImage} by ${WFImageRotateAmount} degrees"
    },
    "is.workflow.actions.properties.podcastshow": {
        "WFContentItemPropertyName,WFInput": "Get ${WFContentItemPropertyName} from ${WFInput}"
    },
    "is.workflow.actions.setters.reminders": {
        "": "Edit reminder"
    },
    "is.workflow.actions.getrichtextfromhtml": {
        "WFHTML": "Make rich text from ${WFHTML}"
    },
    "is.workflow.actions.properties.locations": {
        "WFContentItemPropertyName,WFInput": "Get ${WFContentItemPropertyName} from ${WFInput}"
    },
    "is.workflow.actions.openin": {
        "WFInput,WFOpenInAskWhenRun": "Open ${WFInput}",
        "WFInput,WFOpenInAskWhenRun,WFSelectedApp": "Open ${WFInput} in ${WFSelectedApp}"
    },
    "is.workflow.actions.url.getheaders": {
        "WFInput": "Get headers of ${WFInput}"
    },
    "is.workflow.actions.dropbox.createfolder": {
        "": "Create Dropbox Folder"
    },
    "is.workflow.actions.image.convert": {
        "WFInput,WFImageFormat": "Convert ${WFInput} to ${WFImageFormat}"
    },
    "is.workflow.actions.recordaudio": {
        "": "Record audio"
    },
    "is.workflow.actions.properties.appstore": {
        "WFContentItemPropertyName,WFInput": "Get ${WFContentItemPropertyName} from ${WFInput}"
    },
    "is.workflow.actions.getnameofemoji": {
        "WFInput": "Get name of emoji in ${WFInput}"
    },
    "is.workflow.actions.downloadurl": {
        "WFURL": "Get contents of ${WFURL}"
    },
    "com.apple.facetime.facetime": {
        "WFFaceTimeType,WFFaceTimeContact": "${WFFaceTimeType} Call ${WFFaceTimeContact}"
    },
    "com.apple.TVRemoteUIService.LaunchRemoteIntent": {
        "device": "Show remote control for ${device}"
    },
    "is.workflow.actions.instapaper.get": {
        "WFBookmarkCount,WFInstapaperFolder": "Get ${WFBookmarkCount} from ${WFInstapaperFolder}"
    },
    "is.workflow.actions.trello.get": {
        "": "Get Trello Items"
    },
    "is.workflow.actions.evernote.get": {
        "WFEvernoteNotesCount": "Get ${WFEvernoteNotesCount}"
    },
    "is.workflow.actions.text.combine": {
        "text,WFTextSeparator": "Combine ${text} with ${WFTextSeparator}",
        "text,WFTextSeparator,WFTextCustomSeparator": "Combine ${text} with ${WFTextSeparator} ${WFTextCustomSeparator}"
    },
    "is.workflow.actions.addnewcontact": {
        "WFContactFirstName,WFContactLastName": "Add ${WFContactFirstName}${WFContactLastName} to Contacts"
    },
    "is.workflow.actions.appendvariable": {
        "WFInput,WFVariableName": "Add ${WFInput} to ${WFVariableName}"
    },
    "is.workflow.actions.contacts": {
        "WFContact": "${WFContact}"
    },
    "is.workflow.actions.getupcomingevents": {
        "WFGetUpcomingItemCount,WFGetUpcomingItemCalendar": "Get ${WFGetUpcomingItemCount} from ${WFGetUpcomingItemCalendar}"
    },
    "is.workflow.actions.setters.contacts": {
        "": "Edit contact"
    },
    "is.workflow.actions.getdistance": {
        "WFGetDirectionsCustomLocation,WFGetDistanceDestination": "Get distance from ${WFGetDirectionsCustomLocation} to ${WFGetDistanceDestination}"
    },
    "is.workflow.actions.getwifi": {
        "WFNetworkDetailsNetwork,WFCellularDetail": "Get ${WFNetworkDetailsNetwork} network's ${WFCellularDetail}",
        "WFNetworkDetailsNetwork": "Get ${WFNetworkDetailsNetwork} network details",
        "WFNetworkDetailsNetwork,WFWiFiDetail": "Get ${WFNetworkDetailsNetwork} network's ${WFWiFiDetail}"
    },
    "is.workflow.actions.skipforward": {
        "WFMediaRoute": "Skip forward on ${WFMediaRoute}"
    },
    "is.workflow.actions.alert": {
        "WFAlertActionMessage": "Show alert ${WFAlertActionMessage}"
    },
    "is.workflow.actions.overlayimageonimage": {
        "WFImage,WFInput": "Overlay ${WFImage} on ${WFInput}"
    },
    "is.workflow.actions.getvalueforkey": {
        "WFGetDictionaryValueType,WFInput": "Get ${WFGetDictionaryValueType} in ${WFInput}",
        "WFGetDictionaryValueType,WFDictionaryKey,WFInput": "Get ${WFGetDictionaryValueType} for ${WFDictionaryKey} in ${WFInput}"
    },
    "is.workflow.actions.openworkflow": {
        "WFWorkflow": "Open ${WFWorkflow}"
    },
    "is.workflow.actions.podcasts.subscribe": {
        "WFInput": "Follow ${WFInput}"
    },
    "is.workflow.actions.mountdiskimage": {
        "WFInput": "Mount disk image ${WFInput}"
    },
    "is.workflow.actions.personalhotspot.set": {
        "operation,OnValue": "${operation} personal hotspot ${OnValue}",
        "operation": "${operation} personal hotspot"
    },
    "is.workflow.actions.filter.images": {
        "": "Find Images that meed the need of the user"
    },
    "is.workflow.actions.properties.articles": {
        "WFContentItemPropertyName,WFInput": "Get ${WFContentItemPropertyName} from ${WFInput}"
    },
    "is.workflow.actions.runjavascriptforautomation": {
        "Input": "Run JavaScript for Automation with ${Input}"
    },
    "com.apple.TVRemoteUIService.ToggleSystemAppearanceIntent": {
        "appearanceToggle,device": "Toggle System Appearance to ${appearanceToggle} on ${device}"
    },
    "is.workflow.actions.searchappstore": {
        "WFSearchTerm": "Find ${WFSearchTerm} on the App Store"
    },
    "is.workflow.actions.personalhotspot.password.get": {
        "": "Get Personal Hotspot password"
    },
    "is.workflow.actions.address": {
        "": "Street Address"
    },
    "is.workflow.actions.setvolume": {
        "WFVolume": "Set volume to ${WFVolume}",
        "WFVolumeSetting,WFVolume": "Set ${WFVolumeSetting} volume to ${WFVolume}"
    },
    "is.workflow.actions.tumblr.post": {
        "WFInput": "Post ${WFInput}"
    },
    "is.workflow.actions.posters.switch": {
        "WFPoster": "Switch to ${WFPoster}"
    },
    "is.workflow.actions.addframetogif": {
        "WFImage,WFInputGIF": "Add ${WFImage} to ${WFInputGIF}"
    },
    "is.workflow.actions.dropbox.open": {
        "": "Get Dropbox File"
    },
    "is.workflow.actions.unzip": {
        "WFArchive": "Extract ${WFArchive}"
    },
    "is.workflow.actions.dropbox.appendfile": {
        "WFAppendFileWriteMode,WFInput": "${WFAppendFileWriteMode} ${WFInput}"
    },
    "is.workflow.actions.urlencode": {
        "WFEncodeMode,WFInput": "URL ${WFEncodeMode} ${WFInput}"
    },
    "is.workflow.actions.handoff": {
        "": "Continue in Shortcuts app"
    },
    "is.workflow.actions.nothing": {
        "": "Nothing"
    },
    "is.workflow.actions.round": {
        "WFInput,WFRoundTo,WFRoundMode,TenToThePowerOf": "Round ${WFInput} to ${WFRoundTo} ${TenToThePowerOf}",
        "WFInput,WFRoundTo,WFRoundMode": "Round ${WFInput} to ${WFRoundTo}"
    },
    "is.workflow.actions.getparkedcarlocation": {
        "": "Get Parked Car Location"
    },
    "is.workflow.actions.seek": {
        "WFSeekBehavior,WFTimeInterval,WFMediaRoute": "Seek ${WFSeekBehavior} ${WFTimeInterval} on ${WFMediaRoute}"
    },
    "is.workflow.actions.trello.add.board": {
        "WFTrelloName": "Create the board ${WFTrelloName}"
    },
    "is.workflow.actions.wallpaper.set": {
        "WFWallpaperLocation,WFInput": "Set ${WFWallpaperLocation} wallpaper to ${WFInput}",
        "WFWallpaperLocation,WFInput,WFWallpaperPerspectiveZoom": "Set ${WFWallpaperLocation} wallpaper to ${WFInput}",
        "WFWallpaperLocation,WFSelectedPoster,WFInput,WFWallpaperShowPreview,WFWallpaperLegibilityBlur,WFWallpaperSmartCrop": "Set ${WFSelectedPoster} to ${WFInput} for ${WFWallpaperLocation}",
        "WFWallpaperLocation,WFSelectedPoster,WFInput,WFWallpaperShowPreview,WFWallpaperSmartCrop": "Set ${WFSelectedPoster} to ${WFInput} for ${WFWallpaperLocation}",
        "WFWallpaperLocation,WFSelectedPoster,WFInput,WFWallpaperLegibilityBlur,WFWallpaperSmartCrop": "Set ${WFSelectedPoster} to ${WFInput} for ${WFWallpaperLocation}",
        "WFInput": "Set wallpaper to ${WFInput}",
        "WFWallpaperLocation,WFInput,WFWallpaperShowPreview": "Set ${WFWallpaperLocation} wallpaper to ${WFInput}",
        "WFWallpaperLocation,WFSelectedPoster,WFInput,WFWallpaperSmartCrop": "Set ${WFSelectedPoster} to ${WFInput} for ${WFWallpaperLocation}"
    },
    "is.workflow.actions.safari.geturl": {
        "": "Get current web page from Safari"
    },
    "is.workflow.actions.getdevicedetails": {
        "WFDeviceDetail": "Get the ${WFDeviceDetail}"
    },
    "is.workflow.actions.pinboard.get": {
        "WFBookmarkCount": "Get ${WFBookmarkCount}"
    },
    "is.workflow.actions.properties.reminders": {
        "WFContentItemPropertyName,WFInput": "Get ${WFContentItemPropertyName} from ${WFInput}"
    },
    "is.workflow.actions.image.flip": {
        "WFInput,WFImageFlipDirection": "Flip ${WFInput} ${WFImageFlipDirection}"
    },
    "is.workflow.actions.trello.add.list": {
        "WFTrelloName,WFTrelloBoard": "Create the list ${WFTrelloName} in ${WFTrelloBoard}"
    },
    "is.workflow.actions.notification": {
        "WFNotificationActionBody": "Show notification ${WFNotificationActionBody}"
    },
    "is.workflow.actions.properties.eventattendees": {
        "WFContentItemPropertyName,WFInput": "Get ${WFContentItemPropertyName} from ${WFInput}"
    },
    "is.workflow.actions.properties.images": {
        "WFContentItemPropertyName,WFInput": "Get ${WFContentItemPropertyName} from ${WFInput}"
    },
    "is.workflow.actions.debug.contentattribution": {
        "Input": "Show Content Attribution of ${Input}"
    },
    "is.workflow.actions.share": {
        "WFInput": "Share ${WFInput}"
    },
    "is.workflow.actions.searchweb": {
        "WFSearchWebDestination,WFInputText": "Search ${WFSearchWebDestination} for ${WFInputText}"
    },
    "is.workflow.actions.openapp": {
        "WFSelectedApp": "Open ${WFSelectedApp}"
    },
    "is.workflow.actions.text.split": {
        "text,WFTextSeparator": "Split ${text} by ${WFTextSeparator}",
        "text,WFTextSeparator,WFTextCustomSeparator": "Split ${text} by ${WFTextSeparator} ${WFTextCustomSeparator}"
    },
    "is.workflow.actions.makediskimage": {
        "WFInput": "Make disk image with ${WFInput}"
    },
    "is.workflow.actions.rss.extract": {
        "WFURLs": "Get RSS feeds from ${WFURLs}"
    },
    "is.workflow.actions.pinboard.add": {
        "WFPinboardURL": "Add ${WFPinboardURL}"
    },
    "is.workflow.actions.detect.phonenumber": {
        "WFInput": "Get phone numbers from ${WFInput}"
    },
    "is.workflow.actions.exportsong": {
        "": "Select music"
    },
    "is.workflow.actions.measurement.create": {
        "WFMeasurementUnitType,WFMeasurementUnit": "${WFMeasurementUnitType}\n${WFMeasurementUnit}"
    },
    "is.workflow.actions.showresult": {
        "Text": "Show ${Text}"
    },
    "is.workflow.actions.makegif": {
        "WFInput": "Make GIF from ${WFInput}"
    },
    "is.workflow.actions.properties.safariwebpage": {
        "WFContentItemPropertyName,WFInput": "Get ${WFContentItemPropertyName} from ${WFInput}"
    },
    "is.workflow.actions.setclipboard": {
        "WFInput": "Copy ${WFInput} to clipboard"
    },
    "is.workflow.actions.selectemail": {
        "": "Select Email Address"
    },
    "is.workflow.actions.filter.displays": {
        "": "Find Displays that meed the need of the user"
    },
    "is.workflow.actions.converttimezone": {
        "Date,SourceTimeZone,DestinationTimeZone": "Convert ${Date} from ${SourceTimeZone} to ${DestinationTimeZone}"
    },
    "is.workflow.actions.removefromalbum": {
        "WFInput,WFRemoveAlbumSelectedGroup": "Remove ${WFInput} from ${WFRemoveAlbumSelectedGroup}"
    },
    "is.workflow.actions.setparkedcar": {
        "WFLocation": "Set Parked Car at ${WFLocation}"
    },
    "is.workflow.actions.venmo.pay": {
        "WFVenmoActionAmount,WFVenmoActionRecipients": "Send ${WFVenmoActionAmount} to ${WFVenmoActionRecipients}"
    },
    "is.workflow.actions.deskconnect.send": {
        "WFInput": "Send ${WFInput} via the missing link between your devices, DeskConnect 💔"
    },
    "is.workflow.actions.detect.link": {
        "WFInput": "Get URLs from ${WFInput}"
    },
    "is.workflow.actions.readinglist": {
        "WFURL": "Add ${WFURL} to Reading List"
    },
    "is.workflow.actions.generatebarcode": {
        "WFText": "Generate QR code from ${WFText}"
    },
    "is.workflow.actions.todoist.add": {
        "WFTodoistContent,WFTodoistProject": "Add ${WFTodoistContent} to ${WFTodoistProject}"
    },
    "is.workflow.actions.date": {
        "WFDateActionMode": "${WFDateActionMode}",
        "WFDateActionMode,WFDateActionDate": "${WFDateActionMode} ${WFDateActionDate}"
    },
    "is.workflow.actions.getframesfromimage": {
        "WFImage": "Get frames from ${WFImage}"
    },
    "is.workflow.actions.repeat.each": {
        "WFInput": "Repeat with each item in ${WFInput}"
    },
    "is.workflow.actions.searchmaps": {
        "WFInput": "Open ${WFInput} in Maps"
    },
    "is.workflow.actions.showwebpage": {
        "WFURL": "Show web view at ${WFURL}"
    },
    "is.workflow.actions.setbrightness": {
        "WFBrightness": "Set brightness to ${WFBrightness}"
    },
    "is.workflow.actions.rss": {
        "WFRSSItemQuantity,WFRSSFeedURL": "Get ${WFRSSItemQuantity} from ${WFRSSFeedURL}"
    },
    "is.workflow.actions.announcenotifications.set": {
        "operation,OnValue": "${operation} announce notifications ${OnValue}",
        "operation": "${operation} announce notifications"
    },
    "is.workflow.actions.health.quantity.log": {
        "": "Log Health Sample"
    },
    "is.workflow.actions.vpn.set": {
        "WFVPNOperation,WFVPN": "${WFVPNOperation} ${WFVPN} VPN",
        "WFVPNOperation,WFOnDemandValue,WFVPN": "${WFVPNOperation} to ${WFOnDemandValue} for ${WFVPN} VPN"
    },
    "is.workflow.actions.image.mask": {
        "WFInput,WFMaskType,WFCustomMaskImage": "Mask ${WFInput} with ${WFMaskType} ${WFCustomMaskImage}",
        "WFInput,WFMaskType,WFMaskCornerRadius": "Mask ${WFInput} with ${WFMaskType} shape",
        "WFInput,WFMaskType": "Mask ${WFInput} with ${WFMaskType} shape"
    },
    "is.workflow.actions.detect.dictionary": {
        "WFInput": "Get dictionary from ${WFInput}"
    },
    "is.workflow.actions.math": {
        "WFInput,WFMathOperation,WFMathOperand": "${WFInput} ${WFMathOperation} ${WFMathOperand}",
        "WFInput,WFMathOperation,WFScientificMathOperation,WFScientificMathOperand": "${WFInput} ${WFMathOperation} ${WFScientificMathOperand}"
    },
    "is.workflow.actions.openpasswords": {
        "": "Show Passwords"
    },
    "is.workflow.actions.properties.parkedcar": {
        "WFContentItemPropertyName,WFInput": "Get ${WFContentItemPropertyName} from ${WFInput}"
    },
    "is.workflow.actions.showdefinition": {
        "Word": "Show definition of ${Word}"
    },
    "is.workflow.actions.output": {
        "WFOutput": "Stop and output ${WFOutput}"
    },
    "is.workflow.actions.cellulardata.set": {
        "operation,OnValue": "${operation} cellular data ${OnValue}",
        "operation": "${operation} cellular data"
    },
    "is.workflow.actions.viewresult": {
        "WFInput": "View Content Graph of ${WFInput}"
    },
    "is.workflow.actions.runjavascriptonwebpage": {
        "": "Run JavaScript"
    },
    "is.workflow.actions.ask": {
        "WFInputType,WFAskActionPrompt": "Ask for ${WFInputType} with ${WFAskActionPrompt}"
    },
    "is.workflow.actions.properties.weather.conditions": {
        "WFContentItemPropertyName,WFInput": "Get ${WFContentItemPropertyName} from ${WFInput}"
    },
    "is.workflow.actions.repeat.count": {
        "WFRepeatCount": "Repeat ${WFRepeatCount}"
    },
    "is.workflow.actions.file.rename": {
        "WFFile,WFNewFilename": "Rename ${WFFile} to ${WFNewFilename}"
    },
    "is.workflow.actions.addtoplaylist": {
        "WFInput,WFPlaylistName": "Add ${WFInput} to ${WFPlaylistName}"
    },
    "is.workflow.actions.addmusictoupnext": {
        "WFMusic,WFWhenToPlay": "Add ${WFMusic} to ${WFWhenToPlay} of Playing Next"
    },
    "is.workflow.actions.makespokenaudiofromtext": {
        "WFInput": "Make spoken audio from ${WFInput}"
    },
    "is.workflow.actions.lightroom.import": {
        "WFInput": "Import ${WFInput} to Lightroom"
    },
    "is.workflow.actions.homeaccessory": {
        "WFHomeTriggerActionSets": "Set ${WFHomeTriggerActionSets}"
    },
    "is.workflow.actions.workout.start": {
        "isOpenEnded,workoutName": "Start ${workoutName} Workout with ${isOpenEnded}",
        "isOpenEnded,workoutName,WorkoutGoal": "Start ${workoutName} Workout for ${isOpenEnded} ${WorkoutGoal}"
    },
    "is.workflow.actions.tweet": {
        "TweetInput": "Tweet ${TweetInput}"
    },
    "is.workflow.actions.photos.createalbum": {
        "AlbumName,WFInput": "Create photo album ${AlbumName} with ${WFInput}"
    },
    "is.workflow.actions.properties.itunesstore": {
        "WFContentItemPropertyName,WFInput": "Get ${WFContentItemPropertyName} from ${WFInput}"
    },
    "is.workflow.actions.phonenumber": {
        "": "Phone Number"
    },
    "is.workflow.actions.venmo.request": {
        "WFVenmoActionAmount,WFVenmoActionRecipients": "Request ${WFVenmoActionAmount} from ${WFVenmoActionRecipients}"
    },
    "is.workflow.actions.text.replace": {
        "WFReplaceTextFind,WFReplaceTextReplace,WFInput": "Replace ${WFReplaceTextFind} with ${WFReplaceTextReplace} in ${WFInput}"
    },
    "is.workflow.actions.setairdropreceiving": {
        "WFAirDropState": "Set AirDrop Receiving to ${WFAirDropState}"
    },
    "is.workflow.actions.handoffplayback": {
        "WFSourceMediaRoute,WFDestinationMediaRoute": "Hand off playback from ${WFSourceMediaRoute} to ${WFDestinationMediaRoute}"
    },
    "is.workflow.actions.dnd.set": {
        "Operation,FocusModes": "${Operation} ${FocusModes}",
        "Operation,FocusModes,Enabled": "${Operation} ${FocusModes} ${Enabled}",
        "Operation,FocusModes,Enabled,AssertionType,Event": "${Operation} ${FocusModes} ${Enabled} until ${AssertionType} ${Event}",
        "Operation,FocusModes,Enabled,AssertionType,Time": "${Operation} ${FocusModes} ${Enabled} until ${AssertionType} ${Time}",
        "Operation,FocusModes,Enabled,AssertionType": "${Operation} ${FocusModes} ${Enabled} until ${AssertionType}"
    },
    "is.workflow.actions.getdirections": {
        "WFDestination,WFGetDirectionsActionApp": "Open directions to ${WFDestination} using ${WFGetDirectionsActionApp}",
        "WFLocation,WFDestination,WFGetDirectionsActionApp": "Open directions from ${WFLocation} to ${WFDestination} using ${WFGetDirectionsActionApp}",
        "WFLocation,WFDestination": "Open directions from ${WFLocation} to ${WFDestination}",
        "WFLocation,WFDestination,WFGetDirectionsActionMode": "Open ${WFGetDirectionsActionMode} directions from ${WFLocation} to ${WFDestination}",
        "WFLocation,WFDestination,WFGetDirectionsActionMode,WFGetDirectionsActionApp": "Open ${WFGetDirectionsActionMode} directions from ${WFLocation} to ${WFDestination} using ${WFGetDirectionsActionApp}"
    },
    "is.workflow.actions.imgur.upload": {
        "WFInput": "Upload ${WFInput}"
    },
    "is.workflow.actions.number.random": {
        "WFRandomNumberMinimum,WFRandomNumberMaximum": "Random number between ${WFRandomNumberMinimum} and ${WFRandomNumberMaximum}"
    },
    "is.workflow.actions.nightshift.set": {
        "operation,OnValue": "${operation} night shift ${OnValue}",
        "operation": "${operation} night shift"
    },
    "is.workflow.actions.makepdf": {
        "WFInput": "Make PDF from ${WFInput}"
    },
    "is.workflow.actions.file.getfoldercontents": {
        "WFFolder": "Get contents of folder ${WFFolder}"
    },
    "is.workflow.actions.reminders.showlist": {
        "WFList": "Open ${WFList}"
    },
    "is.workflow.actions.getarticle": {
        "WFWebPage": "Get article from ${WFWebPage}"
    },
    "is.workflow.actions.savetocameraroll": {
        "WFInput,WFCameraRollSelectedGroup": "Save ${WFInput} to ${WFCameraRollSelectedGroup}"
    },
    "is.workflow.actions.detect.address": {
        "WFInput": "Get addresses from ${WFInput}"
    },
    "is.workflow.actions.silenceunknowncallers.set": {
        "operation,OnValue": "${operation} silence unknown callers ${OnValue}",
        "operation": "${operation} silence unknown callers"
    },
    "is.workflow.actions.weather.forecast": {
        "WFWeatherForecastType,WFWeatherCustomLocation": "Get ${WFWeatherForecastType} forecast at ${WFWeatherCustomLocation}"
    },
    "is.workflow.actions.searchlocalbusinesses": {
        "WFSearchQuery,WFInput": "Find ${WFSearchQuery} near ${WFInput}"
    },
    "is.workflow.actions.trimvideo": {
        "WFInputMedia": "Trim ${WFInputMedia}"
    },
    "is.workflow.actions.measurement.convert": {
        "WFInput,WFMeasurementUnitType,WFMeasurementUnit": "Convert ${WFInput} into ${WFMeasurementUnitType} in ${WFMeasurementUnit}",
        "WFInput,WFMeasurementUnitType": "Convert ${WFInput} into ${WFMeasurementUnitType}"
    },
    "is.workflow.actions.display.always-on.set": {
        "operation,OnValue": "${operation} display always-on ${OnValue}",
        "operation": "${operation}display always-on"
    },
    "is.workflow.actions.filter.music": {
        "": "Find Music that meed the need of the user"
    },
    "is.workflow.actions.gethalfwaypoint": {
        "WFGetHalfwayPointFirstLocation,WFGetHalfwayPointSecondLocation": "Get halfway point between ${WFGetHalfwayPointFirstLocation} and ${WFGetHalfwayPointSecondLocation}"
    },
    "is.workflow.actions.appearance": {
        "operation,style": "${operation} appearance ${style}",
        "operation": "${operation} appearance"
    },
    "is.workflow.actions.intercom": {
        "WFInput,WFHome": "Intercom ${WFInput} to ${WFHome}"
    },
    "is.workflow.actions.getepisodesforpodcast": {
        "WFInput": "Get episodes of ${WFInput}"
    },
    "is.workflow.actions.exit": {
        "": "Stop this shortcut"
    },
    "is.workflow.actions.format.number": {
        "WFNumber,WFNumberFormatDecimalPlaces": "Format ${WFNumber} to ${WFNumberFormatDecimalPlaces}"
    },
    "is.workflow.actions.adjustdate": {
        "WFAdjustOperation,WFDate": "${WFAdjustOperation} from ${WFDate}",
        "WFAdjustOperation,WFDuration,WFDate": "${WFAdjustOperation} ${WFDuration} to ${WFDate}"
    },
    "is.workflow.actions.filter.health.quantity": {
        "": "Find Quantity of Health that meed the need of the user"
    },
    "is.workflow.actions.filter.windows": {
        "": "Find Windows that meed the need of the user"
    },
    "is.workflow.actions.importaudiofiles": {
        "WFInput": "Import ${WFInput} into Music"
    },
    "is.workflow.actions.file.select": {
        "WFPickingMode": "Select ${WFPickingMode}"
    },
    "is.workflow.actions.text.match": {
        "WFMatchTextPattern,text": "Match ${WFMatchTextPattern} in ${text}"
    },
    "is.workflow.actions.get.playlist": {
        "WFPlaylistName": "Get songs in ${WFPlaylistName}"
    },
    "is.workflow.actions.gettypeaction": {
        "WFFileType,WFInput": "Get file of type ${WFFileType} from ${WFInput}"
    },
    "is.workflow.actions.searchitunes": {
        "WFSearchTerm": "Find ${WFSearchTerm} on the iTunes Store"
    },
    "is.workflow.actions.hide.app": {
        "WFHideAppMode,WFApp": "Hide ${WFHideAppMode} ${WFApp}",
        "WFHideAppMode,WFAppsExcept": "Hide ${WFHideAppMode} except ${WFAppsExcept}"
    },
    "is.workflow.actions.splitpdf": {
        "WFInput": "Split PDF ${WFInput} into pages"
    },
    "is.workflow.actions.file.createfolder": {
        "WFFolder,WFFilePath": "Create folder in ${WFFolder} at ${WFFilePath}"
    },
    "is.workflow.actions.bluetooth.set": {
        "operation,OnValue": "${operation} bluetooth ${OnValue}",
        "operation": "${operation} bluetooth"
    },
    "is.workflow.actions.getvariable": {
        "WFVariable": "Get ${WFVariable}"
    },
    "is.workflow.actions.filter.calendarevents": {
        "": "Find Calenders that meed the need of the user"
    },
    "is.workflow.actions.format.filesize": {
        "WFFileSize,WFFileSizeFormat": "Format ${WFFileSize} into ${WFFileSizeFormat}"
    },
    "is.workflow.actions.lockscreen": {
        "": "Lock the screen"
    },
    "is.workflow.actions.hash": {
        "WFHashType,WFInput": "Generate ${WFHashType} hash of ${WFInput}"
    },
    "is.workflow.actions.dictionary": {
        "": "Dictionary"
    },
    "com.apple.mobilephone.call": {
        "WFCallContact": "Call ${WFCallContact}"
    },
    "is.workflow.actions.gettext": {
        "": "Text"
    },
    "is.workflow.actions.properties.files": {
        "WFContentItemPropertyName,WFInput": "Get ${WFContentItemPropertyName} from ${WFInput}"
    },
    "is.workflow.actions.geturlcomponent": {
        "WFURLComponent,WFURL": "Get ${WFURLComponent} from ${WFURL}"
    },
    "is.workflow.actions.wifi.set": {
        "operation,OnValue": "${operation} wifi ${OnValue}",
        "operation": "${operation} wifi"
    },
    "is.workflow.actions.evernote.new": {
        "WFInput,WFEvernoteNoteTitle": "Create note with ${WFInput} named ${WFEvernoteNoteTitle}"
    },
    "is.workflow.actions.returntohomescreen": {
        "": "Go to Home Screen"
    },
    "is.workflow.actions.properties.music": {
        "WFContentItemPropertyName,WFInput": "Get ${WFContentItemPropertyName} from ${WFInput}"
    },
    "is.workflow.actions.sleep": {
        "": "Put this Mac to sleep"
    },
    "is.workflow.actions.image.combine": {
        "WFInput,WFImageCombineMode": "Combine ${WFInput} ${WFImageCombineMode}"
    },
    "is.workflow.actions.url": {
        "WFURLActionURL": "${WFURLActionURL}"
    },
    "is.workflow.actions.truetone.set": {
        "operation,OnValue": "${operation} truetone ${OnValue}",
        "operation": "${operation} truetone"
    },
    "is.workflow.actions.getwebpagecontents": {
        "WFInput": "Get contents of web page at ${WFInput}"
    },
    "is.workflow.actions.file.label": {
        "WFInput,WFLabelColorNumber": "Label ${WFInput} with ${WFLabelColorNumber}"
    },
    "is.workflow.actions.compresspdf": {
        "WFInput": "Optimize file size of ${WFInput}"
    },
    "is.workflow.actions.number": {
        "WFNumberActionNumber": "${WFNumberActionNumber}"
    },
    "com.panic.iOS.Transmit.Share": {
        "": "Save with Transmit"
    },
    "is.workflow.actions.conditional": {
        "WFInput,WFCondition,WFNumberValue,WFAnotherNumber": "If ${WFInput} ${WFCondition} ${WFNumberValue} and ${WFAnotherNumber}",
        "WFInput,WFCondition,WFBoundedNumber": "If ${WFInput} ${WFCondition} ${WFBoundedNumber}",
        "WFInput,WFCondition,WFLinkEnumeration": "If ${WFInput} ${WFCondition} ${WFLinkEnumeration}",
        "WFInput,WFCondition,WFConditionalActionString": "If ${WFInput} ${WFCondition} ${WFConditionalActionString}",
        "WFInput,WFCondition,WFMeasurement": "If ${WFInput} ${WFCondition} ${WFMeasurement}",
        "WFInput,WFCondition,WFBoundedNumber,WFAnotherBoundedNumber": "If ${WFInput} ${WFCondition} ${WFBoundedNumber} and ${WFAnotherBoundedNumber}",
        "WFInput,WFCondition,WFDate,WFAnotherDate": "If ${WFInput} ${WFCondition} ${WFDate} and ${WFAnotherDate}",
        "WFInput,WFCondition,WFDuration,WFAnotherDuration": "If ${WFInput} ${WFCondition} ${WFDuration} and ${WFAnotherDuration}",
        "WFInput,WFCondition,WFDuration": "If ${WFInput} ${WFCondition} ${WFDuration}",
        "WFInput,WFCondition,WFMeasurement,WFAnotherMeasurement": "If ${WFInput} ${WFCondition} ${WFMeasurement} and ${WFAnotherMeasurement}",
        "WFInput,WFCondition,WFEnumeration": "If ${WFInput} ${WFCondition} ${WFEnumeration}",
        "WFInput": "If ${WFInput}",
        "WFInput,WFCondition,WFNumberValue": "If ${WFInput} ${WFCondition} ${WFNumberValue}",
        "WFInput,WFCondition,WFNumericEnumeration": "If ${WFInput} ${WFCondition} ${WFNumericEnumeration}",
        "WFInput,WFCondition,WFDate": "If ${WFInput} ${WFCondition} ${WFDate}",
        "WFInput,WFCondition": "If ${WFInput} ${WFCondition}"
    },
    "is.workflow.actions.file.append": {
        "WFAppendFileWriteMode,WFInput,WFFile": "${WFAppendFileWriteMode} ${WFInput} to ${WFFile}"
    },
    "is.workflow.actions.filter.eventattendees": {
        "": "Find Events that meed the need of the user"
    },
    "is.workflow.actions.filter.apps": {
        "": "Find Apps that meed the need of the user"
    },
    "is.workflow.actions.image.removebackground": {
        "WFInput": "Remove background from ${WFInput}"
    },
    "is.workflow.actions.dnd.getfocus": {
        "": "Get Current Focus"
    },
    "is.workflow.actions.facebook.messenger.send": {
        "": "Send via Messenger"
    },
    "is.workflow.actions.makeimagefrompdfpage": {
        "WFMakeImageFromPDFPageImageFormat,WFInput": "Make ${WFMakeImageFromPDFPageImageFormat} image from ${WFInput}"
    },
    "is.workflow.actions.finder.getselectedfiles": {
        "": "Get Selected Files in Finder"
    },
    "is.workflow.actions.health.workout.log": {
        "WFWorkoutReadableActivityType": "Log ${WFWorkoutReadableActivityType} workout"
    },
    "is.workflow.actions.getonscreencontent": {
        "": "Get what’s on screen"
    },
    "is.workflow.actions.properties.health.quantity": {
        "WFContentItemPropertyName,WFInput": "Get ${WFContentItemPropertyName} from ${WFInput}"
    },
    "is.workflow.actions.image.crop": {
        "WFInput": "Crop ${WFInput}"
    },
    "is.workflow.actions.runshellscript": {
        "": "Run Shell Script"
    },
    "is.workflow.actions.filter.articles": {
        "": "Find Articles that meed the need of the user"
    },
    "is.workflow.actions.makevideofromgif": {
        "WFInputGIF": "Make video from GIF ${WFInputGIF}"
    },
    "is.workflow.actions.dropbox.savefile": {
        "WFInput": "Save ${WFInput}"
    },
    "is.workflow.actions.addnewcalendar": {
        "CalendarName": "Add new calendar ${CalendarName}"
    },
    "is.workflow.actions.getmyworkflows": {
        "Folder": "Get shortcuts from ${Folder}"
    },
    "is.workflow.actions.documentpicker.save": {
        "WFInput,WFSaveFileOverwrite,WFAskWhereToSave": "Save ${WFInput}",
        "WFInput,WFFolder,WFSaveFileOverwrite,WFAskWhereToSave,WFFileDestinationPath": "Save ${WFInput} to ${WFFolder}"
    },
    "is.workflow.actions.base64encode": {
        "WFEncodeMode,WFInput": "${WFEncodeMode} ${WFInput} with base64"
    },
    "is.workflow.actions.orientationlock.set": {
        "operation,OnValue": "${operation} orientation lock ${OnValue}",
        "operation": "${operation} orientation lock"
    },
    "is.workflow.actions.getmapslink": {
        "WFInput": "Get maps URL from ${WFInput}"
    },
    "is.workflow.actions.selectcontacts": {
        "": "Select contact"
    },
    "is.workflow.actions.setitemname": {
        "WFInput,WFName": "Set name of ${WFInput} to ${WFName}"
    },
    "is.workflow.actions.skipback": {
        "WFSkipBackBehavior,WFMediaRoute": "Skip back to the ${WFSkipBackBehavior} on ${WFMediaRoute}"
    },
    "is.workflow.actions.text.changecase": {
        "text,WFCaseType": "Change ${text} in ${WFCaseType}"
    },
    "com.apple.mobileslideshow.StreamShareService": {
        "ImageInput": "Post ${ImageInput} to Shared Album"
    },
    "is.workflow.actions.timer.start": {
        "WFDuration": "Start timer for ${WFDuration}"
    },
    "is.workflow.actions.getipaddress": {
        "": "Get current IP address"
    },
    "is.workflow.actions.getcurrentsong": {
        "Subject": "Get ${Subject}"
    },
    "is.workflow.actions.giphy": {
        "WFGiphyQuery": "Find ${WFGiphyQuery} GIFs on Giphy"
    },
    "is.workflow.actions.getlastvideo": {
        "WFGetLatestPhotoCount": "Get the latest ${WFGetLatestPhotoCount}"
    },
    "is.workflow.actions.evernote.getlink": {
        "WFInput": "Get link for ${WFInput}"
    },
    "is.workflow.actions.reboot": {
        "WFShutdownMode": "${WFShutdownMode} this device"
    },
    "is.workflow.actions.connecttoservers": {
        "": "Connect to Servers"
    },
    "is.workflow.actions.addnewreminder": {
        "WFCalendarItemTitle,WFCalendarDescriptor,WFAlertEnabled,WFAlertCondition,WFAlertPerson,WFCalendarItemNotes,WFURL,WFImages,WFFlag,WFPriority,WFParentTask,WFTags": "Add ${WFCalendarItemTitle} to ${WFCalendarDescriptor} with ${WFAlertEnabled} ${WFAlertCondition} ${WFAlertPerson}",
        "WFCalendarItemTitle,WFAlertEnabled,WFAlertCondition,WFAlertLocation,WFCalendarItemNotes,WFAlertLocationRadius,WFURL,WFImages,WFFlag,WFPriority,WFParentTask,WFTags": "Add ${WFCalendarItemTitle} with ${WFAlertEnabled} ${WFAlertCondition} from ${WFAlertLocation}",
        "WFCalendarItemTitle,WFAlertEnabled,WFAlertCondition,WFAlertPerson,WFCalendarItemNotes,WFURL,WFImages,WFFlag,WFPriority,WFParentTask,WFTags": "Add ${WFCalendarItemTitle} with ${WFAlertEnabled} ${WFAlertCondition} ${WFAlertPerson}",
        "WFCalendarItemTitle,WFCalendarDescriptor,WFAlertEnabled,WFAlertCondition,WFAlertLocation,WFCalendarItemNotes,WFAlertLocationRadius,WFURL,WFImages,WFFlag,WFPriority,WFParentTask,WFTags": "Add ${WFCalendarItemTitle} to ${WFCalendarDescriptor} with ${WFAlertEnabled} ${WFAlertCondition} from ${WFAlertLocation}",
        "WFCalendarItemTitle,WFCalendarDescriptor,WFAlertEnabled,WFAlertCondition,WFAlertCustomTime,WFCalendarItemNotes,WFURL,WFImages,WFFlag,WFPriority,WFParentTask,WFTags": "Add ${WFCalendarItemTitle} to ${WFCalendarDescriptor} with ${WFAlertEnabled} ${WFAlertCondition} ${WFAlertCustomTime}",
        "WFCalendarItemTitle,WFAlertEnabled,WFAlertCondition,WFAlertCustomTime,WFCalendarItemNotes,WFURL,WFImages,WFFlag,WFPriority,WFParentTask,WFTags": "Add ${WFCalendarItemTitle} with ${WFAlertEnabled} ${WFAlertCondition} ${WFAlertCustomTime}",
        "WFCalendarItemTitle,WFAlertEnabled,WFCalendarItemNotes,WFURL,WFImages,WFFlag,WFPriority,WFParentTask,WFTags": "Add ${WFCalendarItemTitle} with ${WFAlertEnabled}",
        "WFCalendarItemTitle,WFCalendarDescriptor,WFAlertEnabled,WFCalendarItemNotes,WFURL,WFImages,WFFlag,WFPriority,WFParentTask,WFTags": "Add ${WFCalendarItemTitle} to ${WFCalendarDescriptor} with ${WFAlertEnabled}"
    },
    "is.workflow.actions.avairyeditphoto": {
        "WFDocument": "Mark up ${WFDocument}"
    },
    "is.workflow.actions.showincalendar": {
        "WFEvent": "Open ${WFEvent} in Calendar"
    },
    "is.workflow.actions.correctspelling": {
        "texttext": "Correct spelling of ${texttext}"
    },
    "is.workflow.actions.setters.calendarevents": {
        "": "Edit calendar event"
    },
    "is.workflow.actions.detectlanguage": {
        "WFInput": "Detect language of ${WFInput}"
    },
    "is.workflow.actions.splitscreen": {
        "WFPrimaryAppIdentifier,WFSecondaryAppIdentifier": "Split screen between ${WFPrimaryAppIdentifier} and ${WFSecondaryAppIdentifier}"
    },
    "is.workflow.actions.startscreensaver": {
        "": "Start screen saver"
    },
    "is.workflow.actions.overlaytext": {
        "WFText,WFImage,WFTextPosition,WFPercentageTextOffset": "Overlay ${WFText} on ${WFImage} at ${WFTextPosition} offset by ${WFPercentageTextOffset}",
        "WFText,WFImage,WFTextPosition,WFTextOffset": "Overlay ${WFText} on ${WFImage} at ${WFTextPosition} offset by ${WFTextOffset} points",
        "WFText,WFImage,WFTextPosition,WFTextX,WFTextY": "Overlay ${WFText} on ${WFImage} at ${WFTextPosition} ${WFTextX}, ${WFTextY}",
        "WFText,WFImage,WFTextPosition": "Overlay ${WFText} on ${WFImage} at ${WFTextPosition}",
        "WFText,WFImage,WFTextPosition,WFPercentageTextX,WFPercentageTextY": "Overlay ${WFText} on ${WFImage} at ${WFTextPosition} ${WFPercentageTextX}, ${WFPercentageTextY}"
    },
    "is.workflow.actions.comment": {
        "WFCommentActionText": "Comment from the user is (${WFCommentActionText})"
    },
    "is.workflow.actions.logout": {
        "": "Log out the current user"
    },
    "is.workflow.actions.makeimagefromrichtext": {
        "WFInput": "Make image from ${WFInput}"
    },
    "is.workflow.actions.text.translate": {
        "WFInputText,WFSelectedFromLanguage,WFSelectedLanguage": "Translate ${WFInputText} from ${WFSelectedFromLanguage} to ${WFSelectedLanguage}"
    },
    "is.workflow.actions.getclipboard": {
        "": "Get clipboard"
    },
    "is.workflow.actions.properties.calendarevents": {
        "WFContentItemPropertyName,WFInput": "Get ${WFContentItemPropertyName} from ${WFInput}"
    },
    "com.apple.TVRemoteUIService.ToggleCaptionsIntent": {
        "toggle,device": "Toggle Captions ${toggle} on ${device}"
    },
    "is.workflow.actions.getlatestbursts": {
        "WFGetLatestPhotoCount": "Get the latest ${WFGetLatestPhotoCount}"
    },
    "is.workflow.actions.runextension": {
        "WFInput,WFApp": "Share ${WFInput} with ${WFApp}"
    },
    "is.workflow.actions.pocket.get": {
        "WFPocketItemCount": "Get ${WFPocketItemCount}"
    },
    "is.workflow.actions.sendmessage": {
        "WFSendMessageContent,WFSendMessageActionRecipients": "Send “${WFSendMessageContent}” to ${WFSendMessageActionRecipients}"
    },
    "is.workflow.actions.getcurrentlocation": {
        "": "Get current location"
    },
    "is.workflow.actions.getlastphoto": {
        "WFGetLatestPhotoCount": "Get the latest ${WFGetLatestPhotoCount}"
    },
    "is.workflow.actions.openxcallbackurl": {
        "WFXCallbackURL": "Open ${WFXCallbackURL} with x-callback"
    },
    "is.workflow.actions.addnewevent": {
        "WFCalendarItemTitle,WFCalendarItemStartDate,WFCalendarItemEndDate": "Add ${WFCalendarItemTitle} from ${WFCalendarItemStartDate} to ${WFCalendarItemEndDate}"
    },
    "is.workflow.actions.file.getlink": {
        "WFFile": "Get link to ${WFFile}"
    },
    "is.workflow.actions.setplaybackdestination": {
        "WFMediaRouteOperation,WFMediaRoute": "${WFMediaRouteOperation} ${WFMediaRoute} to playback destinations"
    },
    "is.workflow.actions.instapaper.add": {
        "WFInputURL": "Add ${WFInputURL}"
    },
    "is.workflow.actions.filter.contacts": {
        "": "Find Contacts that meed the need of the user"
    },
    "is.workflow.actions.gethomeaccessorystate": {
        "WFHMService": "Get ${WFHMService}",
        "WFHMService,WFHMCharacteristic": "Get ${WFHMService} ${WFHMCharacteristic}"
    },
    "is.workflow.actions.detect.images": {
        "WFInput": "Get images from ${WFInput}"
    },
    "is.workflow.actions.url.expand": {
        "URL": "Expand ${URL}"
    },
    "is.workflow.actions.weather.currentconditions": {
        "WFWeatherCustomLocation": "Get current weather at ${WFWeatherCustomLocation}"
    },
    "is.workflow.actions.email": {
        "": "Email Address"
    },
    "com.apple.TVRemoteUIService.SwitchUserAccountIntent": {
        "account,device": "Switch to ${account} on ${device}"
    },
    "is.workflow.actions.movewindow": {
        "WFWindow,WFBringToFront,WFPosition,WFXCoordinate,WFYCoordinate": "Move ${WFWindow} to ${WFPosition} ${WFXCoordinate}, ${WFYCoordinate}",
        "WFWindow,WFBringToFront,WFPosition": "Move ${WFWindow} to ${WFPosition}"
    },
    "is.workflow.actions.deletephotos": {
        "": "Delete Photos"
    },
    "is.workflow.actions.goodreader.open": {
        "WFInput": "Open ${WFInput}"
    },
    "is.workflow.actions.file.delete": {
        "WFInput": "Delete ${WFInput}"
    },
    "is.workflow.actions.runworkflow": {
        "WFWorkflow": "Run ${WFWorkflow}"
    },
    "is.workflow.actions.searchpodcasts": {
        "WFSearchTerm": "Find ${WFSearchTerm} on Apple Podcasts"
    },
    "is.workflow.actions.speaktext": {
        "WFText": "Speak ${WFText}"
    },
    "is.workflow.actions.filter.files": {
        "": "Find Files that meed the need of the user"
    },
    "is.workflow.actions.stagemanager.set": {
        "operation,state": "${operation} stagemanager ${state}",
        "operation": "${operation} stagemanager"
    },
    "is.workflow.actions.takephoto": {
        "WFCameraCaptureShowPreview,WFPhotoCount,WFCameraCaptureDevice": "Take ${WFPhotoCount} with ${WFCameraCaptureDevice} camera",
        "WFCameraCaptureShowPreview,WFPhotoCount": "Take ${WFPhotoCount}",
        "WFCameraCaptureShowPreview,WFCameraCaptureDevice": "Take photo with ${WFCameraCaptureDevice} camera",
        "WFCameraCaptureShowPreview": "Take photo"
    },
    "ai.perplexity.app.OpenVoiceInAppIntent": {
        "": "Start voice search"
    },
    "ai.perplexity.app.QueryPerplexity": {
        "query": "Search for ${query}"
    },
    "app.cyan.taio.ActionsSelectionIntent": {
        "": "Actions Selection"
    },
    "app.cyan.taio.SaveClippingIntent": {
        "shouldPin,text": "Save ${text} as clipping"
    },
    "app.cyan.taio.GetClippingIntent": {
        "type": "Get clippings"
    },
    "app.cyan.taio.DeleteClippingIntent": {
        "text": "Delete ${text} from clippings"
    },
    "app.cyan.taio.PinClippingIntent": {
        "text,type": "Pin ${text} in clippings"
    },
    "app.cyan.taio.UpdateClippingIntent": {
        "text,replacement": "Replace ${text} with ${replacement}"
    },
    "app.cyan.taio.CreateDocumentIntent": {
        "content,filePath,location,overwriteIfExists": "Create document at ${filePath} with ${content}"
    },
    "app.cyan.taio.GetDocumentIntent": {
        "filePath,location": "Get document at ${filePath}"
    },
    "app.cyan.taio.DeleteDocumentIntent": {
        "filePath,location": "Delete document at ${filePath}"
    },
    "app.cyan.taio.ListFolderIntent": {
        "folderPath,location,type": "List folder at ${folderPath}"
    },
    "app.cyan.taio.ImportDocumentIntent": {
        "fileObject,targetPath,location,overwriteIfExists": "Import ${fileObject} to ${targetPath}"
    },
    "app.cyan.taio.RunActionsIntent": {
        "actions,inputValue": "Run ${actions}"
    },
    "app.surfed.app.GetTodayCounterIntent": {
        "": "Get number of all visited pages today"
    },
    "app.surfed.app.SearchPageIntent": {
        "filter,startDate,endDate,sorttype,sortdirection,type,condition": "Search History"
    },
    "app.surfed.app.GetTagURLsIntent": {
        "tag,filter,sorttype,sortdirection": "Get URLs for tag ${tag}"
    },
    "app.surfed.app.GetTagGroupURLsIntent": {
        "group,filter,sorttype,sortdirection": "Get URLs for tag group ${group}"
    },
    "app.surfed.app.GetTodayBrowsingTimeIntent": {
        "": "Get the time of total browsing time today."
    },
    "app.surfed.app.ExportHistoryIntent": {
        "filter,startDate,endDate,sorttype,sortdirection,type,condition": "Export History"
    },
    "app.surfed.app.CreateTagIntent": {
        "tag,group": "Create new tag ${tag}"
    },
    "app.surfed.app.AddURLIntent": {
        "url,tags": "Add tags ${tags} to ${url}"
    },
    "app.surfed.app.AddBlacklistIntent": {
        "url,apply": "Add ${url} to Blacklist"
    },
    "app.surfed.app.ExportAllIntent": {
        "": "Export All Tags and Favorites"
    },
    "app.surfed.app.ImportIntent": {
        "file": "Import ${file}"
    },
    "app.surfed.app.GetCollectionURLsIntent": {
        "collection,filter,sorttype,sortdirection": "Get URLs for collection ${collection}"
    },
    "app.surfed.app.OpenURLIntent": {
        "url": "Open URL ${url}"
    },
    "app.surfed.app.GetURLMetadataIntent": {
        "url": "Get Metadata for ${url}"
    },
    "app.surfed.app.BackupDatabaseIntent": {
        "": "Backup Database"
    },
    "app.surfed.app.ExportTagsIntent": {
        "tags": "Export Tags to File"
    },
    "app.surfed.app.GetArticleIntent": {
        "url": "Get Article for ${url}"
    },
    "app.surfed.app.GetNoteIntent": {
        "url": "Get Note for ${url}"
    },
    "app.surfed.app.SetNoteIntent": {
        "url,note": "Set Note to ${url}"
    },
    "app.surfed.app.RemoveTagURLIntent": {
        "tags,url": "Remove tags ${tags}from ${url}"
    },
    "app.surfed.app.SwitchProfileIntent": {
        "profile": "Switch to ${profile}"
    },
    "app.surfed.app.ListenCollectionIntent": {
        "state,collection,sortDirection": "Listen to ${state} ${collection} articles, start with ${sortDirection}"
    },
    "app.surfed.app.ListenURLsIntent": {
        "": "Listen URL articles"
    },
    "app.surfed.app.SwitchProfileFocusFilter": {
        "": "Set Space and Web Trigger behaviour"
    },
    "ch.marcela.ada.LibTerm.RunCommandIntent": {
        "command,cwd,input": "Run ${command}"
    },
    "com.6X.LockLauncher.ActivateActivityIntent": {
        "": "Activate Dynamic Island"
    },
    "com.6X.LockLauncher.ChangePrivacyModeIntent": {
        "": "Toggle Dock / Memo"
    },
    "com.6X.LockLauncher.ChooseGroupIntent": {
        "groupId": "Choose Group ${groupId}"
    },
    "com.6X.LockLauncher.EndActivityIntent": {
        "": "Stop Live Activity(Dock)"
    },
    "com.6X.LockLauncher.GetDeviceOrientationIntent": {
        "": "Get Device Orientation"
    },
    "com.6X.LockLauncher.RefreshActivityIntent": {
        "": "Refresh Live Activity(Dock)"
    },
    "com.6X.LockLauncher.StartActivityIntent": {
        "": "Start Live Activity(Dock)"
    },
    "com.6X.LockLauncher.TogglePiPIntent": {
        "": "Toggle PiP"
    },
    "com.6X.LockLauncher.UpdateMemoIntent": {
        "text": "Change Memo Text ${text}"
    },
    "com.Christopher-Hannah.Text-Case.TextCaseIntent": {
        "text,format": "Format ${text} using ${format} "
    },
    "com.Christopher-Hannah.Text-Case.FormatWithFlowIntent": {
        "text,flow": "Format ${text} using ${flow}"
    },
    "com.Christopher-Hannah.Text-Case.ReplaceIntent": {
        "match,replacement,text,mode": "Replace ${mode} occurrence(s) of ${match}with ${replacement} in ${text}"
    },
    "com.Christopher-Hannah.Text-Case.RemoveIntent": {
        "match,text,mode": "Remove ${mode} occurrence(s) of ${match} in ${text}"
    },
    "com.Christopher-Hannah.Text-Case.AddPrefixIntent": {
        "prefix,text": "Add prefix ${prefix}to ${text}"
    },
    "com.Christopher-Hannah.Text-Case.AddSuffixIntent": {
        "suffix,text": "Add suffix ${suffix}to ${text}"
    },
    "com.Christopher-Hannah.Text-Case.ReplaceWithLineBreaksIntent": {
        "match,text": "Replace all ${match} in ${text} with a line break"
    },
    "com.Christopher-Hannah.Text-Case.ReplaceLineBreaksWithIntent": {
        "with,text": "Replace all line breaks in ${text} with ${with}"
    },
    "com.Matter.MatterApp.SaveToMatterIntent": {
        "articleURL": "Save to Matter"
    },
    "com.ZoZoApp.ZoZoApp.AddNewGroup": {
        "folderTitle,icon,color,shortcuts": "Add New Folder ${folderTitle}"
    },
    "com.ZoZoApp.ZoZoApp.AddNewShortcut": {
        "shortcutTitle,contents,type,folder": "Add new Shortcut ${shortcutTitle} with ${contents}"
    },
    "com.ZoZoApp.ZoZoApp.AddNewTextShortcut": {
        "shortcutTitle,contents,folder": "Add new Shortcut ${shortcutTitle} with ${contents}"
    },
    "com.ZoZoApp.ZoZoApp.CopyContentsToClipboard": {
        "shortcut": "Copy contents ${shortcut} to clipboard"
    },
    "com.ZoZoApp.ZoZoApp.DeleteGroup": {
        "folders,keepShortcuts,confirmBeforeDeleting": "Delete ${folders}"
    },
    "com.ZoZoApp.ZoZoApp.DeleteShortcut": {
        "shortcuts,confirmBeforeDeleting": "Delete ${shortcuts}"
    },
    "com.ZoZoApp.ZoZoApp.EditShortcut": {
        "shortcut,shortcutTitle,contents,removeFromFolder": "Edit ${shortcut}",
        "shortcut,shortcutTitle,contents,folder,removeFromFolder": "Edit ${shortcut}"
    },
    "com.ZoZoApp.ZoZoApp.GetAllGroups": {
        "": "Get All Folders"
    },
    "com.ZoZoApp.ZoZoApp.GetAllShortcuts": {
        "": "Get All Shortcuts"
    },
    "com.ZoZoApp.ZoZoApp.GetContentsOfShortcut": {
        "shortcut": "Get contents of ${shortcut}"
    },
    "com.ZoZoApp.ZoZoApp.GetGPTResponse": {
        "prompt,gptModel": "Generate OneTap AI response for ${prompt}"
    },
    "com.ZoZoApp.ZoZoApp.GetShortcutsFromGroup": {
        "folder": "Get shortcuts from ${folder}"
    },
    "com.ZoZoApp.ZoZoApp.MoveShortcut": {
        "shortcut,folder": "Move ${shortcut} to ${folder}"
    },
    "com.adguard.ios.AdGuardVPN.VpnStateIntent": {
        "operation": "${operation}VPN connection",
        "state,operation": "${operation}VPN connection ${state}"
    },
    "com.agiletortoise.Drafts5.CreateAndEditIntent": {
        "": "New Draft",
        "tags": "New Draft with ${tags}"
    },
    "com.agiletortoise.Drafts5.RunActionIntent": {
        "action,content": "Run Action ${action} with ${content}"
    },
    "com.agiletortoise.Drafts5.ViewDraftIntent": {
        "draft": "View Draft ${draft}"
    },
    "com.agiletortoise.Drafts5.CaptureIntent": {
        "content,folder,tags,isFlagged,grammarType": "Create Draft with ${content}"
    },
    "com.agiletortoise.Drafts5.GetDraftIntent": {
        "draft": "Get Draft ${draft}"
    },
    "com.agiletortoise.Drafts5.SetDraftIntent": {
        "draft,content,writeType,tags,folder,isFlagged,grammarType": "Update Draft ${draft}"
    },
    "com.agiletortoise.Drafts5.QueryDraftsIntent": {
        "queryString,folder,tagFilter,flaggedStatus,sortOrder,sortDescending,sortFlaggedToTop,limit": "Search Drafts for ${queryString}"
    },
    "com.agiletortoise.Drafts5.QueryWorkspaceIntent": {
        "workspace,folder": "Get Drafts from Workspace ${workspace}"
    },
    "com.agiletortoise.Drafts5.LoadWorkspaceIntent": {
        "workspace": "Open Workspace ${workspace}"
    },
    "com.agiletortoise.Drafts5.DictateDraftIntent": {
        "locale": "Create Draft with Dictation"
    },
    "com.agiletortoise.Drafts5.OpenDraftIntent": {
        "draft,draftList,actionList,loadWorkspace,loadActionGroup,loadActionBarGroup": "Open Draft ${draft}"
    },
    "com.agiletortoise.Drafts5.RunActionOnDraftIntent": {
        "action,draft": "Run Action ${action} on Draft ${draft}"
    },
    "com.agiletortoise.Drafts5.FileDraftIntent": {
        "draft,folder,isFlagged,tags": "File Draft ${draft} in ${folder}"
    },
    "com.agiletortoise.Drafts5.GetDraftByUUIDIntent": {
        "uuid": "Get Draft with UUID ${uuid}"
    },
    "com.agiletortoise.Drafts5.MarkdownToHTMLIntent": {
        "content,markdownParser": "Markdown ${content} to HTML"
    },
    "com.agiletortoise.Drafts5.GetCurrentDraftIntent": {
        "": "Get Current Draft"
    },
    "com.agiletortoise.Drafts5.ShowCaptureIntent": {
        "": "Show Capture"
    },
    "com.agiletortoise.Drafts5.ProcessTemplateIntent": {
        "template,draft": "Process Template ${template} with Draft ${draft}"
    },
    "com.agiletortoise.Drafts5.ArrangeIntent": {
        "text": "Arrange Text ${text}"
    },
    "com.agiletortoise.Drafts5.CaptureAppIntent": {
        "content": "Capture ${content}"
    },
    "com.agiletortoise.Drafts5.DictateIntent": {
        "locale": "Dictate Text"
    },
    "com.agiletortoise.Drafts5.DraftsFocusFilterIntent": {
        "workspaceEntity,draftEntity,pinning,actionListGroupEntity,actionBarGroupEntity": "Configure Drafts"
    },
    "com.agiletortoise.Drafts5.HTMLToMarkdownIntent": {
        "content": "HTML ${content} to Markdown"
    },
    "com.agiletortoise.Drafts5.LiveActivityDraftIntent": {
        "status,draftEntity": "${status} Live Activity for ${draftEntity}"
    },
    "com.agiletortoise.Drafts5.QuickSearchAppIntent": {
        "queryString": "Quick Search ${queryString}"
    },
    "com.agiletortoise.Drafts5.SetThemeAppIntent": {
        "themeMode,lightTheme,darkTheme": "Set Theme Mode ${themeMode}"
    },
    "com.agiletortoise.Drafts5.ShowCaptureAppIntent": {
        "content,tags": "Show Capture with ${content}"
    },
    "com.amazon.Lassen.BookOpenSiriDonationIntent": {
        "": "Open my book"
    },
    "com.apple.Keynote.KNiOSCreateNewDocumentIntent": {
        "templateIdentifier": "Create ${templateIdentifier} Presentation"
    },
    "com.apple.Keynote.OpenAnyDocumentIntent": {
        "file": "Open ${file}"
    },
    "com.apple.Keynote.TSADocumentCreateIntent": {
        "templateItem": "Create ${templateItem} Presentation"
    },
    "com.apple.Keynote.TSADocumentOpenIntent": {
        "file,password": "Open ${file}"
    },
    "com.apple.Keynote.KNDocumentPlayIntent": {
        "file": "Open ${file} in Show Mode"
    },
    "com.apple.Keynote.KNDocumentRehearseIntent": {
        "file": "Open ${file} in Rehearsal Mode"
    },
    "com.apple.Keynote.KNNewDocumentIntent": {
        "": "Create New Presentation"
    },
    "com.apple.Numbers.TNiOSAddValuesToFormIntent": {
        "spreadsheet,values,formName": "Add ${values} to ${formName} in ${spreadsheet}"
    },
    "com.apple.Numbers.TNiOSAddBodyRowAtBottomIntent": {
        "documentName,documentURL,tableName,document,sheetUUID,tableUUID": "Add Row to ${tableName} in ${documentName}",
        "documentName,sheetUUID,tableUUID,document,documentURL,ignoresTableName": "Add Row to ${documentName}"
    },
    "com.apple.Numbers.TNiOSAddFormRecordIntent": {
        "document,documentURL,formName,documentName,formSheetUUID": "Add Record to ${formName} in ${documentName}"
    },
    "com.apple.Numbers.OpenDocumentIntent": {
        "document,documentURL": "Open ${document}"
    },
    "com.apple.Numbers.TNiOSCreateNewSpreadsheetIntent": {
        "templateIdentifier": "Create ${templateIdentifier} Spreadsheet"
    },
    "com.apple.Numbers.TNiOSAddValuesToSpreadsheetIntent": {
        "spreadsheet,sheetName,tableName,values,position": "Add ${values} to the ${position} of ${tableName} in ${sheetName} in ${spreadsheet}"
    },
    "com.apple.Numbers.OpenAnyDocumentIntent": {
        "file": "Open ${file}"
    },
    "com.apple.Numbers.TSADocumentCreateIntent": {
        "templateItem": "Create ${templateItem} Spreadsheet"
    },
    "com.apple.Numbers.TSADocumentOpenIntent": {
        "file,password": "Open ${file}"
    },
    "com.apple.Numbers.TNNewDocumentIntent": {
        "": "Create New Spreadsheet"
    },
    "com.apple.Pages.TPiOSCreateNewDocumentIntent": {
        "templateIdentifier": "Create ${templateIdentifier} Document"
    },
    "com.apple.Pages.OpenAnyDocumentIntent": {
        "file": "Open ${file}"
    },
    "com.apple.Pages.TSADocumentCreateIntent": {
        "templateItem": "Create ${templateItem} Document"
    },
    "com.apple.Pages.TSADocumentOpenIntent": {
        "file,password": "Open ${file}"
    },
    "com.apple.Pages.TPNewDocumentIntent": {
        "": "Create New Document"
    },
    "com.apple.VoiceMemos.RecordVoiceMemoIntent": {
        "": "CREATE_RECORDING_INTENT_TITLE"
    },
    "com.apple.VoiceMemos.PlaybackVoiceMemoIntent": {
        "playbackType": "PLAY_RECORDING_INTENT_MOST_RECENT_PARAMETER_SUMMARY ${playbackType}",
        "playbackType,entity": "PLAY_RECORDING_INTENT_SPECIFIC_PARAMETER_SUMMARY ${playbackType} ${entity}"
    },
    "com.apple.VoiceMemos.ChangeRecordingPlaybackSetting": {
        "": "CHANGE_RECORDING_PLAYBACK_SETTING_INTENT_TITLE"
    },
    "com.apple.VoiceMemos.CloseUIElement": {
        "": "CLOSE_UIELEMENT_INTENT_TITLE"
    },
    "com.apple.VoiceMemos.CreateFolder": {
        "": "CREATE_FOLDER_INTENT_TITLE"
    },
    "com.apple.VoiceMemos.DeleteFolder": {
        "": "DELETE_FOLDER_INTENT_TITLE"
    },
    "com.apple.VoiceMemos.DeleteRecording": {
        "": "DELETE_RECORDING_INTENT_TITLE"
    },
    "com.apple.VoiceMemos.NavigateRecordingsList": {
        "": "NAVIGATE_RECORDINGS_LIST_INTENT_DIRECTION_PARAMETER"
    },
    "com.apple.VoiceMemos.OpenFolder": {
        "": "OPEN_FOLDER_INTENT_TITLE"
    },
    "com.apple.VoiceMemos.OpenUIElement": {
        "": "OPEN_UIELEMENT_INTENT_TITLE"
    },
    "com.apple.VoiceMemos.SearchRecordings": {
        "": "SEARCH_RECORDINGS_INTENT_TITLE"
    },
    "com.apple.VoiceMemos.SelectRecording": {
        "": "SELECT_RECORDING_INTENT_TITLE"
    },
    "com.apple.iWork.Keynote.KNiOSCreateNewDocumentIntent": {
        "templateIdentifier": "Create ${templateIdentifier} Presentation"
    },
    "com.apple.iWork.Keynote.OpenAnyDocumentIntent": {
        "file": "Open ${file}"
    },
    "com.apple.iWork.Keynote.TSADocumentCreateIntent": {
        "templateItem": "Create ${templateItem} Presentation"
    },
    "com.apple.iWork.Keynote.TSADocumentOpenIntent": {
        "file,password": "Open ${file}"
    },
    "com.apple.iWork.Keynote.KNDocumentPlayIntent": {
        "file": "Open ${file} in Show Mode"
    },
    "com.apple.iWork.Keynote.KNDocumentRehearseIntent": {
        "file": "Open ${file} in Rehearsal Mode"
    },
    "com.apple.iWork.Keynote.KNNewDocumentIntent": {
        "": "Create New Presentation"
    },
    "com.apple.iWork.Numbers.TNiOSCreateNewSpreadsheetIntent": {
        "templateIdentifier": "Create ${templateIdentifier} Spreadsheet"
    },
    "com.apple.iWork.Numbers.TNiOSAddValuesToSpreadsheetIntent": {
        "spreadsheet,sheetName,tableName,values,position": "Add ${values} to the ${position} of ${tableName} in ${sheetName} in ${spreadsheet}"
    },
    "com.apple.iWork.Numbers.OpenAnyDocumentIntent": {
        "file": "Open ${file}"
    },
    "com.apple.iWork.Numbers.TSADocumentCreateIntent": {
        "templateItem": "Create ${templateItem} Spreadsheet"
    },
    "com.apple.iWork.Numbers.TSADocumentOpenIntent": {
        "file,password": "Open ${file}"
    },
    "com.apple.iWork.Numbers.TNNewDocumentIntent": {
        "": "Create New Spreadsheet"
    },
    "com.apple.iWork.Pages.TPiOSCreateNewDocumentIntent": {
        "templateIdentifier": "Create ${templateIdentifier} Document"
    },
    "com.apple.iWork.Pages.OpenAnyDocumentIntent": {
        "file": "Open ${file}"
    },
    "com.apple.iWork.Pages.TSADocumentCreateIntent": {
        "templateItem": "Create ${templateItem} Document"
    },
    "com.apple.iWork.Pages.TSADocumentOpenIntent": {
        "file,password": "Open ${file}"
    },
    "com.apple.iWork.Pages.TPNewDocumentIntent": {
        "": "Create New Document"
    },
    "com.apple.news.INPlayMediaIntent": {
        "mediaItems": "Play ${mediaItems}",
        "mediaItems,mediaContainer": "Play ${mediaItems}"
    },
    "com.apple.news.FRTagIntent": {
        "tag": "See stories about ${tag}"
    },
    "com.apple.news.FRTodayIntent": {
        "": "Show stories from Today"
    },
    "com.apple.reminders.TTRCreateListAppIntent": {
        "": "Create List"
    },
    "com.apple.reminders.TTRCreateReminderAppIntent": {
        "": "Create Reminder"
    },
    "com.apple.reminders.TTROpenListAppIntent": {
        "": "Open List"
    },
    "com.apple.reminders.TTROpenSmartListAppIntent": {
        "": "Open Smart List"
    },
    "com.apple.reminders.TTRSearchRemindersAppIntent": {
        "": "Search Reminders"
    },
    "com.apple.shortcuts.CreateWorkflowAction": {
        "": "Create Shortcut"
    },
    "com.apple.shortcuts.DeleteWorkflowAction": {
        "": "Delete Shortcuts"
    },
    "com.apple.shortcuts.OpenNavigationDestinationAction": {
        "": "Open Folder"
    },
    "com.apple.shortcuts.OpenWorkflowAction": {
        "": "Open Shortcut"
    },
    "com.apple.shortcuts.SearchShortcutsAction": {
        "": "Search Shortcuts"
    },
    "com.apple.weather.WeatherIntent": {
        "location,location": "Show weather in ${location}"
    },
    "com.apple.weather.CancelAction": {
        "": ""
    },
    "com.apple.weather.CloseLocationL2ViewAction": {
        "": ""
    },
    "com.apple.weather.CloseSidebarAction": {
        "": ""
    },
    "com.apple.weather.NavigateLocationsAction": {
        "": ""
    },
    "com.apple.weather.OpenListAction": {
        "": ""
    },
    "com.apple.weather.OpenLocationAction": {
        "": ""
    },
    "com.apple.weather.OpenLocationL2ViewAction": {
        "": ""
    },
    "com.apple.weather.OpenMyLocationAction": {
        "": ""
    },
    "com.apple.weather.OpenSearchResultAction": {
        "": ""
    },
    "com.apple.weather.OpenSidebarAction": {
        "": ""
    },
    "com.apple.weather.SearchLocationAction": {
        "": ""
    },
    "com.appliedphasor.working-copy.GitActionIntent": {
        "url,action,information": "￼${action}"
    },
    "com.appliedphasor.working-copy.GetFilesIntent": {
        "repo,path,status,archive": "Files in ${repo} at ${path}",
        "repo,path,status,archive,flatten": "Archive of ${repo} at ${path}"
    },
    "com.appliedphasor.working-copy.WriteFileIntent": {
        "repo,path,content,stage,createMissing,mode": "Write ${content}to ${path} in ${repo}"
    },
    "com.appliedphasor.working-copy.CommitRepositoryIntent": {
        "repo,message,target,failNothing,sign": "Commit ${repo} with ${message}"
    },
    "com.appliedphasor.working-copy.PullRepositoryIntent": {
        "repo,remote": "Pull from ${repo} remote"
    },
    "com.appliedphasor.working-copy.PushRepositoryIntent": {
        "repo,remote": "Push ${repo} to remote"
    },
    "com.appliedphasor.working-copy.StageFilesIntent": {
        "repo,path,operation": "Stage ${path} in ${repo} for Commit"
    },
    "com.appliedphasor.working-copy.FileRepositoryIntent": {
        "": "Repository for File"
    },
    "com.appliedphasor.working-copy.CheckoutBranchIntent": {
        "repo,branch": "Checkout ${branch} in ${repo}"
    },
    "com.appliedphasor.working-copy.CommitLogIntent": {
        "repo,limit,branch,pattern": "Commit History for ${repo}"
    },
    "com.appliedphasor.working-copy.OpenIntent": {
        "repo,path,mode,clone": "Open ${path} in ${repo}"
    },
    "com.appliedphasor.working-copy.MergeBranchIntent": {
        "repo,branch,method": "Merge ${branch} into current branch of ${repo}"
    },
    "com.appliedphasor.working-copy.CreateBranchIntent": {
        "repo,branch,checkout,allowExisting": "Create branch ${branch} in ${repo}"
    },
    "com.appliedphasor.working-copy.DeleteBranchIntent": {
        "repo,branch": "Delete ${branch} in ${repo}"
    },
    "com.appliedphasor.working-copy.ListRepositoriesIntent": {
        "pattern,include": "List repositories"
    },
    "com.appliedphasor.working-copy.CloneRepositoryIntent": {
        "url,name,folder,callback": "Clone repository from ${url}"
    },
    "com.appliedphasor.working-copy.ListReferencesIntent": {
        "repo,pattern": "References in ${repo}"
    },
    "com.appliedphasor.working-copy.FetchRepositoryIntent": {
        "repo,remote": "Fetch from ${repo} remote"
    },
    "com.appliedphasor.working-copy.OpenPullRequestIntent": {
        "repo,base,head,title,comment": "Request Pull from ${head} to ${base} in ${repo} with ${title}",
        "repo,comment": "Open Pull Request in ${repo}"
    },
    "com.appliedphasor.working-copy.WebDAVIntent": {
        "start": "${start} WebDAV server"
    },
    "com.appliedphasor.working-copy.FileDetailsIntent": {
        "files": "Get details from ${files}"
    },
    "com.appliedphasor.working-copy.ManageRemotesIntent": {
        "": "Manage Remotes"
    },
    "com.atlassian.jira.app.CreateIssueIntent": {
        "account,project,issueType,summary": "Create new issue in ${project} with ${issueType} titled ${summary}",
        "account,site,project,issueType,summary": "In ${project}, create new ${issueType} with ${summary}"
    },
    "com.atlassian.jira.app.PostCommentIntent": {
        "comment,issue": "Post ${comment} on ${issue} "
    },
    "com.atlassian.jira.app.GetIssueIntent": {
        "issueKey,account": "Choose ${issueKey}",
        "issueKey,account,site": "Choose ${issueKey}"
    },
    "com.atlassian.jira.app.GetIssueFieldIntent": {
        "issue,fieldName": "Retrieve value of ${fieldName} from ${issue}"
    },
    "com.atlassian.jira.app.SetIssueFieldIntent": {
        "issue,operation,addFieldName,addFieldValue": "On ${issue}, ${operation} ${addFieldValue} to ${addFieldName}",
        "issue,operation,clearFieldName": "On ${issue}, ${operation} ${clearFieldName}",
        "issue,operation,removeFieldName,removeFieldValue": "On ${issue}, ${operation} ${removeFieldValue}from ${removeFieldName}",
        "issue,operation,setFieldName,setFieldValue": "On ${issue}, ${operation} ${setFieldName} to ${setFieldValue}"
    },
    "com.atlassian.jira.app.RunJQLIntent": {
        "account,jqlQuery,pageIndex": "Execute ${jqlQuery}",
        "account,site,jqlQuery,pageIndex": "Run ${jqlQuery}"
    },
    "com.atlassian.jira.app.AddAttachmentIntent": {
        "issue,file": "Attach ${file} to ${issue}"
    },
    "com.atlassian.jira.app.OpenIssueIntent": {
        "issue": "View ${issue} in the Jira app"
    },
    "com.atlassian.jira.app.LogWorkIntent": {
        "issue,startedAt,timeSpent,comment": "On ${issue}, log ${timeSpent} of work started at ${startedAt} with comment ${comment}"
    },
    "com.atlassian.jira.app.ExtractIssueKeyIntent": {
        "url": "Extract issue key from ${url}"
    },
    "com.bloombuilt.dayone-ios.CreateEntryIntent": {
        "": "Create Entry"
    },
    "com.bloombuilt.dayone-ios.FindEntriesIntent": {
        "": "Find Entries"
    },
    "com.bloombuilt.dayone-ios.AppendToEntryIntent": {
        "": "Append to Entry"
    },
    "com.bloombuilt.dayone-ios.ShowEntriesIntent": {
        "": "Show Entries"
    },
    "com.bloombuilt.dayone-ios.OpenDayOneToNewEntryIntent": {
        "entryInitialContent,journal": "Open new ${entryInitialContent} entry in ${journal}"
    },
    "com.bloombuilt.dayone-ios.GetDailyPromptIntent": {
        "": "Get Daily Prompt"
    },
    "com.bloombuilt.dayone-ios.ShowTodayIntent": {
        "": "Show Day Summary"
    },
    "com.bloombuilt.dayone-ios.AnswerDailyPromptIntent": {
        "": "Answer Daily Prompt"
    },
    "com.bloombuilt.dayone-ios.EditEntryIntent": {
        "entry": "Edit ${entry}"
    },
    "com.bloombuilt.dayone-ios.CreateTemplateEntryIntent": {
        "journal,template": "Create entry in ${journal} with ${template}"
    },
    "com.bloombuilt.dayone-ios.ShowDayIntent": {
        "": "Show On This Day"
    },
    "com.bloombuilt.dayone-ios.RecordIntent": {
        "": "Record"
    },
    "com.bloombuilt.dayone-ios.TodayDisplayIntent": {
        "": "Today Display"
    },
    "com.bloombuilt.dayone-ios.INCreateNoteIntent": {
        "": "Create a new entry in Day One"
    },
    "com.bloombuilt.dayone-ios.OpenEntryAppIntent": {
        "": "Open Entry"
    },
    "com.bloombuilt.dayone-mac.CreateEntryIntent": {
        "journal,content,date,images,showInApp,tags,location": "Create entry with ${content}"
    },
    "com.bloombuilt.dayone-mac.FindEntriesIntent": {
        "tags,entryLimit,journal,date": "Find entries"
    },
    "com.bloombuilt.dayone-mac.AppendToEntryIntent": {
        "entries,content,images,newParagraph": "Append ${content} to ${entries}"
    },
    "com.bloombuilt.dayone-mac.ShowEntriesIntent": {
        "entries": "Show ${entries}"
    },
    "com.bloombuilt.dayone-mac.OpenDayOneToNewEntryIntent": {
        "entryInitialContent,journal": "Open new ${entryInitialContent} entry in ${journal}"
    },
    "com.bloombuilt.dayone-mac.GetDailyPromptIntent": {
        "": "Get Daily Prompt"
    },
    "com.bloombuilt.dayone-mac.ShowTodayIntent": {
        "date": "Show Day Summary for ${date}"
    },
    "com.bloombuilt.dayone-mac.AnswerDailyPromptIntent": {
        "": "Answer Daily Prompt"
    },
    "com.bloombuilt.dayone-mac.EditEntryIntent": {
        "entry,entry": "Edit ${entry}"
    },
    "com.bloombuilt.dayone-mac.CreateTemplateEntryIntent": {
        "template,journal": "Create ${template} Entry"
    },
    "com.bloombuilt.dayone-mac.ShowDayIntent": {
        "date": "Show On This Day for ${date}"
    },
    "com.bloombuilt.dayone-mac.RecordIntent": {
        "media,journal,tags": "Record ${media}"
    },
    "com.bloombuilt.dayone-mac.TodayDisplayIntent": {
        "": "Today Display"
    },
    "com.bloombuilt.dayone-mac.INCreateNoteIntent": {
        "": "Create a new entry in Day One"
    },
    "com.brogrammers.charty.NewChartIntent": {
        "id,title,automaticId,replaceOthers": "Create chart ${title}",
        "title,automaticId": "Create chart ${title}"
    },
    "com.brogrammers.charty.CopyChartToClipboardIntent": {
        "chartId,exportProfile,name,appearance,transparent,width,height,titleFontSize,chartFontSize,thickenLines,enlargeMarkers": "Export ${chartId} as an image using ${exportProfile} and copy it to the clipboard"
    },
    "com.brogrammers.charty.GetInfoAllChartsIntent": {
        "": "Get info from all charts"
    },
    "com.brogrammers.charty.DeleteChartIntent": {
        "id": "Delete chart ${id}"
    },
    "com.brogrammers.charty.StyleLineSeriesIntent": {
        "chartId,label,color,verticalAxis,lineWidth,lineStyle,showMarkers,markerSize,smoothLine,fillBelow": "Style series ${label} of chart ${chartId}",
        "chartId,label,color,verticalAxis,lineWidth,lineStyle,showMarkers,smoothLine,fillBelow": "Style series ${label} of chart ${chartId}",
        "chartId,label,color,verticalAxis,lineWidth,lineStyle,showMarkers,smoothLine,fillBelow,fillColor": "Style series ${label} of chart ${chartId}",
        "lineWidth,lineStyle,showMarkers,markerSize,color,chartId,label,verticalAxis,smoothLine,fillBelow,fillColor": "Style series ${label} of chart ${chartId}"
    },
    "com.brogrammers.charty.StyleScatterSeriesIntent": {
        "markerStyle,markerSize,color,chartId,label,verticalAxis": "Style series ${label} of chart ${chartId}"
    },
    "com.brogrammers.charty.AddSeriesFromCSVIntent": {
        "separator,decimalSymbol,seriesType,barXColumns,barYColumns,csv,chartId": "Add series from ${csv} as ${seriesType} to ${chartId} using ${barXColumns} for x values and ${barYColumns} for y values",
        "separator,decimalSymbol,seriesType,csv,chartId": "Add series from ${csv} as ${seriesType} to ${chartId}",
        "separator,decimalSymbol,seriesType,donutLabelsColumn,donutValuesColumn,csv,chartId": "Add series from ${csv} as ${seriesType} to ${chartId} using ${donutLabelsColumn} for labels and ${donutValuesColumn} for values",
        "separator,decimalSymbol,seriesType,lineXColumns,lineYColumns,csv,chartId": "Add series from ${csv} as ${seriesType} to ${chartId} using ${lineXColumns} for x values and ${lineYColumns} for y values",
        "separator,decimalSymbol,seriesType,pieLabelsColumn,csv,chartId,pieValuesColumn": "Add series from ${csv} as ${seriesType} to ${chartId} using ${pieLabelsColumn} for labels and ${pieValuesColumn} for values",
        "separator,decimalSymbol,seriesType,scatterXColumns,scatterYColumns,csv,chartId": "Add series from ${csv} as ${seriesType} to ${chartId} using ${scatterXColumns} for x values and ${scatterYColumns} for y values"
    },
    "com.brogrammers.charty.StyleBarSeriesIntent": {
        "color,chartId,label,verticalAxis,barStack,roundBottomLeft,roundBottomRight,roundTopLeft,roundTopRight,cornerRadius": "Style series ${label} of chart ${chartId}"
    },
    "com.brogrammers.charty.StyleAxisIntent": {
        "chartId,axis,labelRotation,title,minimum,maximum,granularity,valueFormatter": "Style ${axis} of ${chartId} with title ${title} and format values as ${valueFormatter}",
        "chartId,axis,labelRotation,title,minimum,maximum,granularity,valueFormatter,granularityUnit,dateFormat,timeFormat,customDateTimeFormat": "Style ${axis} of ${chartId} with title ${title} and format values as ${valueFormatter}",
        "chartId,axis,labelRotation,title,minimum,maximum,granularity,valueFormatter,labels,correspValues": "Style ${axis} of ${chartId} with title ${title} and format values as ${valueFormatter}",
        "chartId,axis,labelRotation,title,minimum,maximum,granularity,valueFormatter,precision": "Style ${axis} of ${chartId} with title ${title} and format values as ${valueFormatter}",
        "chartId,axis,title,minimum,maximum,granularity,valueFormatter": "Style ${axis} of ${chartId} with title ${title} and format values as ${valueFormatter}",
        "chartId,axis,title,minimum,maximum,granularity,valueFormatter,granularityUnit,dateFormat,timeFormat,customDateTimeFormat": "Style ${axis} of ${chartId} with title ${title} and format values as ${valueFormatter}",
        "chartId,axis,title,minimum,maximum,granularity,valueFormatter,labels,correspValues": "Style ${axis} of ${chartId} with title ${title} and format values as ${valueFormatter}",
        "chartId,axis,title,minimum,maximum,granularity,valueFormatter,precision": "Style ${axis} of ${chartId} with title ${title} and format values as ${valueFormatter}"
    },
    "com.brogrammers.charty.AddCustomThemeIntent": {
        "colors,name,selectionStrategy": "Add theme ${name} with colors ${colors}"
    },
    "com.brogrammers.charty.ApplyQuickStyleIntent": {
        "chartId,quickStyle": "Apply ${quickStyle} to ${chartId}",
        "chartId,quickStyle,highlightSeries,highlightColor,otherColor,otherAlpha": "Apply ${quickStyle} to ${chartId}",
        "chartId,quickStyle,includeChevronDown,includeChevronUp,includeCircle,includeCross,includeSquare,includeTriangle,includeX,markersSize": "Apply ${quickStyle} to ${chartId}",
        "chartId,quickStyle,stackName": "Apply ${quickStyle} to ${chartId}"
    },
    "com.brogrammers.charty.AddMovingAverageIntent": {
        "movingAverageType,chartId,series,seriesType,lineWidth,lineStyle,smoothLine,showLineMarkers,lineMarkerSize,seriesLabels": "Add ${movingAverageType} to ${chartId} for ${series} as ${seriesType}",
        "movingAverageType,chartId,series,seriesType,scatterMarkerSize,seriesLabels": "Add ${movingAverageType} to ${chartId} for ${series} as ${seriesType}",
        "movingAverageType,chartId,series,seriesType,seriesLabels": "Add ${movingAverageType} to ${chartId} for ${series} as ${seriesType}",
        "movingAverageType,windowSize,chartId,series,seriesType,centering,seriesLabels": "Add ${movingAverageType} to ${chartId} for ${series} using last ${windowSize} elements as ${seriesType}",
        "movingAverageType,windowSize,chartId,series,seriesType,lineStyle,smoothLine,showLineMarkers,lineMarkerSize,lineWidth,centering,seriesLabels": "Add ${movingAverageType} to ${chartId} for ${series} using last ${windowSize} elements as ${seriesType}",
        "movingAverageType,windowSize,chartId,series,seriesType,scatterMarkerSize,centering,seriesLabels": "Add ${movingAverageType} to ${chartId} for ${series} using last ${windowSize} elements as ${seriesType}"
    },
    "com.brogrammers.charty.AddAverageIntent": {
        "chartId,series,seriesType,input,seriesLabels": "Add average to ${chartId} for ${series} as ${seriesType} using ${input}",
        "chartId,series,seriesType,input,startIndex,endIndex,seriesLabels": "Add average to ${chartId} for ${series} as ${seriesType} using ${input} ${startIndex} to ${endIndex}",
        "chartId,series,seriesType,lineStyle,showLineMarkers,lineMarkerSize,lineWidth,input,startIndex,endIndex,seriesLabels": "Add average to ${chartId} for ${series} as ${seriesType} using ${input} ${startIndex} to ${endIndex}",
        "chartId,series,seriesType,lineWidth,lineStyle,showLineMarkers,lineMarkerSize,input,seriesLabels": "Add average to ${chartId} for ${series} as ${seriesType} using ${input}",
        "chartId,series,seriesType,scatterMarkerSize,input,seriesLabels": "Add average to ${chartId} for ${series} as ${seriesType} using ${input}",
        "chartId,series,seriesType,scatterMarkerSize,input,startIndex,endIndex,seriesLabels": "Add average to ${chartId} for ${series} as ${seriesType} using ${input} ${startIndex} to ${endIndex}"
    },
    "com.brogrammers.charty.StyleDonutPieSeriesIntent": {
        "colors,chartId,seriesLabel,labels": "Style series ${seriesLabel} of chart ${chartId} setting ${colors} to ${labels}"
    },
    "com.charliemchapman.dark-noise.StartNoiseIntent": {
        "noise": "Start ${noise}"
    },
    "com.charliemchapman.dark-noise.StartNoiseWithDurationIntent": {
        "noise,duration": "Start ${noise} for ${duration}"
    },
    "com.charliemchapman.dark-noise.StartNoiseWithStopTimeIntent": {
        "noise,stopTime": "Start ${noise} and stop at ${stopTime}"
    },
    "com.charliemchapman.dark-noise.SetMixAudioIntent": {
        "isOn,setMixAudioMode": "${setMixAudioMode} Mix Audio ${isOn}",
        "setMixAudioMode": "${setMixAudioMode}Mix Audio"
    },
    "com.charliemchapman.dark-noise.RunNoiseIntent": {
        "noise,timerType,duration,fadeDurationForDuration": "Play ${noise}",
        "noise,timerType,timer,fadeDurationForTime": "Play ${noise}"
    },
    "com.charliemchapman.dark-noise.FindNoiseIntent": {
        "noiseName": "Find ${noiseName}"
    },
    "com.charliemchapman.dark-noise.PlayPauseNoiseIntent": {
        "": "Play Pause Noise"
    },
    "com.christianselig.Apollo.OpenSubredditIntent": {
        "subreddit": "Open r/${subreddit}"
    },
    "com.christianselig.Apollo.OpenUserIntent": {
        "username": "Open user ${username}"
    },
    "com.christianselig.Apollo.OpenHomeIntent": {
        "": "Open Home feed"
    },
    "com.christianselig.Apollo.OpenMultiredditIntent": {
        "multiredditName": "Open multireddit ${multiredditName}"
    },
    "com.fandango.fandango.UpcomingOrderIntent": {
        "": "See recent movie tickets"
    },
    "com.fifteenjugglers.solarwatch.ComputeSolarEventTimeIntent": {
        "location,date,solarEvent": "Exact time for a ${solarEvent} at ${location} on ${date}"
    },
    "com.fifteenjugglers.solarwatch.ComputeAllEventTimesIntent": {
        "location,date": "Times for all solar events at ${location} on ${date}"
    },
    "com.getcardpointers.app.FindBestCardIntent": {
        "richCategory,orderBy": "Best ${richCategory} Card"
    },
    "com.getcardpointers.app.GetAllCardsIntent": {
        "": "Get all cards in account"
    },
    "com.getcardpointers.app.CardFocusFilter": {
        "": "Filter Visible Cards"
    },
    "com.getcardpointers.app.ChaseStatusIntent": {
        "": "Show 5/24 Status"
    },
    "com.getcardpointers.app.InteractivePointersConfigurationAppIntent": {
        "": "Configure Pointers"
    },
    "com.getcardpointers.app.OpenCardIntent": {
        "card": "Open ${card} in CardPointers"
    },
    "com.getcardpointers.app.OpenOfferIntent": {
        "card": "Open ${card} offer in CardPointers"
    },
    "com.getcardpointers.app.OpenPointerIntent": {
        "card": "Open ${card} pointer category in CardPointers"
    },
    "com.getcardpointers.app.OpenRealityIntent": {
        "": "Open CardPointers in AR"
    },
    "com.getcardpointers.app.OpenSearchIntent": {
        "searchQuery": "Search for ${searchQuery} in CardPointers"
    },
    "com.getcardpointers.app.ShowCurrentLocationIntent": {
        "": "Best Card for Nearest Store"
    },
    "com.getcardpointers.app.ShowNearbyLocationsIntent": {
        "whichNearbyLocation": "Show the best card to use for ${whichNearbyLocation} purchases"
    },
    "com.getcardpointers.app.StartShoppingIntent": {
        "": "Start AutoPilot"
    },
    "com.getcardpointers.app.StopShoppingIntent": {
        "": "Stop AutoPilot"
    },
    "com.getcardpointers.app.SummaryOverviewIntent": {
        "": "Show Account Summary"
    },
    "com.getcardpointers.app.UpdateNearbyLocationsIntent": {
        "": "Update Nearby Locations"
    },
    "com.getcardpointers.app.WhichCardIntent": {
        "whichCardType,purchaseName": "Show the best card to use for ${whichCardType} purchases"
    },
    "com.google.OPA.OPAAskGoogleIntent": {
        "": "Hey Google",
        "question": "Hey Google, ${question}"
    },
    "com.google.chrome.ios.OpenInChromeIntent": {
        "url": "Open ${url}"
    },
    "com.google.chrome.ios.SearchInChromeIntent": {
        "searchPhrase": "Search ${searchPhrase} in Chrome"
    },
    "com.google.chrome.ios.OpenInChromeIncognitoIntent": {
        "url": "Open ${url} in Incognito"
    },
    "com.google.chrome.ios.AddReadingListItemToChromeIntent": {
        "url": "Add ${url} to reading list"
    },
    "com.google.chrome.ios.AddBookmarkToChromeIntent": {
        "url": "Add ${url} to bookmarks"
    },
    "com.google.chrome.ios.OpenReadingListIntent": {
        "": "See Chrome Reading List"
    },
    "com.google.chrome.ios.OpenBookmarksIntent": {
        "": "See Chrome Bookmarks"
    },
    "com.google.chrome.ios.OpenRecentTabsIntent": {
        "": "See Recent Tabs In Chrome"
    },
    "com.google.chrome.ios.OpenTabGridIntent": {
        "": "Visit The Tab Grid In Chrome"
    },
    "com.google.chrome.ios.SearchWithVoiceIntent": {
        "": "Search with voice in Chrome"
    },
    "com.google.chrome.ios.OpenNewTabIntent": {
        "": "Open new tab in Chrome"
    },
    "com.google.chrome.ios.PlayDinoGameIntent": {
        "": "Play Chrome Dino Game"
    },
    "com.google.chrome.ios.SetChromeDefaultBrowserIntent": {
        "": "Set Chrome As Default Browser"
    },
    "com.google.chrome.ios.ViewHistoryIntent": {
        "": "View Your Chrome History"
    },
    "com.google.chrome.ios.OpenNewIncognitoTabIntent": {
        "": "Open Chrome Incognito Tab"
    },
    "com.google.chrome.ios.ManagePaymentMethodsIntent": {
        "": "Manage Payment Methods in Chrome"
    },
    "com.google.chrome.ios.RunSafetyCheckIntent": {
        "": "Run Chrome Safety Check"
    },
    "com.google.chrome.ios.ManagePasswordsIntent": {
        "": "Manage passwords in Chrome"
    },
    "com.google.chrome.ios.ManageSettingsIntent": {
        "": "Manage Chrome Settings"
    },
    "com.google.chrome.ios.OpenLatestTabIntent": {
        "": "Open My Latest Tab in Chrome"
    },
    "com.google.chrome.ios.OpenLensIntent": {
        "": "Search Visuals in Chrome."
    },
    "com.google.chrome.ios.ClearBrowsingDataIntent": {
        "": "Clear Browsing Data in Chrome."
    },
    "com.grailr.CARROTweather.CurrentForecastIntent": {
        "forecastType,location,dataType": "Get ${forecastType} for ${location}"
    },
    "com.grailr.CARROTweather.InteractionIntent": {
        "interactionType": "${interactionType}"
    },
    "com.grailr.CARROTweather.WidgetMapIntent": {
        "": "Map Configuration"
    },
    "com.grailr.CARROTweather.WidgetForecastIntent": {
        "": "Widget Forecast"
    },
    "com.grailr.CARROTweather.WidgetHourlyIntent": {
        "": "Widget Hourly"
    },
    "com.grailr.CARROTweather.WidgetDailyIntent": {
        "": "Widget Daily"
    },
    "com.grailr.CARROTweather.WidgetSnarkIntent": {
        "": "Widget Snark"
    },
    "com.grailr.CARROTweather.WidgetComboIntent": {
        "": "Widget Combo"
    },
    "com.grailr.CARROTweather.WidgetTemperatureIntent": {
        "": "Widget Temperature"
    },
    "com.grailr.CARROTweather.WidgetConditionsIntent": {
        "": "Widget Conditions"
    },
    "com.grailr.CARROTweather.WidgetCustomIntent": {
        "": "Widget Custom"
    },
    "com.grailr.CARROTweather.WidgetDetailsIntent": {
        "": "Widget Details"
    },
    "com.iconfactory.Tot.AddToDotIntent": {
        "dot,at,text": "Add to ${dot} at ${at}"
    },
    "com.iconfactory.Tot.GetDotIntent": {
        "dot": "Get ${dot}"
    },
    "com.iconfactory.Tot.ShowDotIntent": {
        "dot": "Show ${dot}"
    },
    "com.iconfactory.Tot.SetDotIntent": {
        "dot,text": "Set ${dot}"
    },
    "com.iconfactory.Tot.QueryDotIntent": {
        "dot": "Query ${dot}"
    },
    "com.ideasoncanvas.mindnode.ios.MNCQuickEntryIntent": {
        "contentInputSource": "Launch Quick Entry ${contentInputSource}",
        "contentInputSource,text": "Launch Quick Entry ${contentInputSource} ${text}"
    },
    "com.ideasoncanvas.mindnode.ios.MNCNewDocumentIntent": {
        "contentInputSource": "New Mind Map ${contentInputSource}",
        "contentInputSource,text": "New Mind Map ${contentInputSource} ${text}"
    },
    "com.ideasoncanvas.mindnode.ios.MNCViewDocumentIntent": {
        "file": "Open ${file}"
    },
    "com.ideasoncanvas.mindnode.ios.MNCExportDocumentIntent": {
        "document,exportType": "Export ${document} as ${exportType}"
    },
    "com.ideasoncanvas.mindnode.ios.MNCExportTasksIntent": {
        "document": "Export ${document} to Reminders"
    },
    "com.ideasoncanvas.mindnode.ios.MNCExportToThingsIntent": {
        "document,revealInThings": "Export ${document} to Things"
    },
    "com.ideasoncanvas.mindnode.ios.MNCAddToQuickEntryIntent": {
        "text": "Add to Quick Entry"
    },
    "com.ideasoncanvas.mindnode.macos.MNCQuickEntryIntent": {
        "contentInputSource": "Launch Quick Entry ${contentInputSource}",
        "contentInputSource,text": "Launch Quick Entry ${contentInputSource} ${text}"
    },
    "com.ideasoncanvas.mindnode.macos.MNCNewDocumentIntent": {
        "contentInputSource": "New Mind Map ${contentInputSource}",
        "contentInputSource,text": "New Mind Map ${contentInputSource} ${text}"
    },
    "com.ideasoncanvas.mindnode.macos.MNCViewDocumentIntent": {
        "file": "Open ${file}"
    },
    "com.ideasoncanvas.mindnode.macos.MNCExportDocumentIntent": {
        "document,exportType": "Export ${document} as ${exportType}"
    },
    "com.ideasoncanvas.mindnode.macos.MNCExportTasksIntent": {
        "document": "Export ${document} to Reminders"
    },
    "com.ideasoncanvas.mindnode.macos.MNCExportToThingsIntent": {
        "document,revealInThings": "Export ${document} to Things"
    },
    "com.ideasoncanvas.mindnode.macos.MNCAddToQuickEntryIntent": {
        "text": "Add to Quick Entry"
    },
    "com.joehribar.toggl.StartSavedTimerIntent": {
        "savedTimer": "Start ${savedTimer} timer"
    },
    "com.joehribar.toggl.StopTimeEntryIntent": {
        "stopTimeMode,stop": "Stop the current time entry",
        "stopTimeMode,roundingMode,roundingInterval,durationAdjustMode": "Stop the current time entry",
        "stopTimeMode,minutesAgo": "Stop the current time entry",
        "stopTimeMode": "Stop the current time entry"
    },
    "com.joehribar.toggl.CheckTimeEntryIntent": {
        "": "Check the current time entry"
    },
    "com.joehribar.toggl.CheckSavedTimerIntent": {
        "savedTimer": "Check ${savedTimer} time today"
    },
    "com.joehribar.toggl.CheckTimeLoggedIntent": {
        "Check total time tracked ${timePeriod} ${onDate}": "timePeriod,onDate,workspace,filterClientMode,filterProjectsMode,projectsIncluded,filterTasksMode,tasksIncluded,filterDescriptionMode,timeEntryDescription,filterTagsMode,tagsIncluded,filterBillableMode,groupReportDetailsBy,rounding,roundingMode,roundingInterval,includeTeamTime,sortingMode,groupIntoTasks",
        "Check total time tracked ${timePeriod} ${sinceDate}": "timePeriod,sinceDate,workspace,filterClientMode,filterProjectsMode,projectsIncluded,filterTasksMode,tasksIncluded,filterDescriptionMode,timeEntryDescription,filterTagsMode,tagsIncluded,filterBillableMode,groupReportDetailsBy,rounding,roundingMode,roundingInterval,includeTeamTime,sortingMode,groupIntoTasks",
        "Check total time tracked ${timePeriod} ${startDate} and ${endDate}": "timePeriod,startDate,endDate,workspace,filterClientMode,filterProjectsMode,projectsIncluded,filterTasksMode,tasksIncluded,filterDescriptionMode,timeEntryDescription,filterTagsMode,tagsIncluded,filterBillableMode,groupReportDetailsBy,rounding,roundingMode,roundingInterval,includeTeamTime,sortingMode,groupIntoTasks",
        "Check total time tracked ${timePeriod}": "timePeriod,workspace,filterClientMode,filterProjectsMode,projectsIncluded,filterTasksMode,tasksIncluded,filterDescriptionMode,timeEntryDescription,filterTagsMode,tagsIncluded,filterBillableMode,groupReportDetailsBy,rounding,roundingMode,roundingInterval,includeTeamTime,sortingMode,groupIntoTasks",
        "Check total time tracked ${timePeriod}: ${lastNumberOfDays}": "timePeriod,workspace,filterClientMode,filterProjectsMode,projectsIncluded,filterTasksMode,tasksIncluded,filterDescriptionMode,timeEntryDescription,filterTagsMode,tagsIncluded,filterBillableMode,groupReportDetailsBy,rounding,roundingMode,roundingInterval,includeTeamTime,sortingMode,lastNumberOfDays,groupIntoTasks",
        "Check total time tracked ${timePeriod} ${lastNumberOfDays}": "timePeriod,workspace,filterClientMode,client,filterProjectsMode,projectsIncluded,filterTasksMode,filterDescriptionMode,filterTagsMode,filterBillableMode,groupReportDetailsBy,rounding,roundingMode,roundingInterval,includeTeamTime,sortingMode,lastNumberOfDays,groupIntoTasks"
    },
    "com.joehribar.toggl.CheckProjectIntent": {
        "project": "Check ${project} time today"
    },
    "com.joehribar.toggl.StartTimeEntryIntent": {
        "project,timeEntryDescription,tags,workspace,startTimeMode,billable": "Start ${project} ${timeEntryDescription} time entry tagged ${tags}",
        "project,timeEntryDescription,tags,workspace,startTimeMode,billable,minutesAgo": "Start ${project} ${timeEntryDescription} time entry tagged ${tags}",
        "project,timeEntryDescription,tags,workspace,startTimeMode,start,billable": "Start ${project} ${timeEntryDescription} time entry tagged ${tags}"
    },
    "com.joehribar.toggl.CheckTimerTimeTrackedIntent": {
        "project,timeEntryDescription,tags,timePeriod,onDate,workspace,rounding,includeTeamTime": "Check ${project} ${timeEntryDescription} tagged ${tags} time ${timePeriod} ${onDate}",
        "project,timeEntryDescription,tags,timePeriod,onDate,workspace,rounding,roundingMode,roundingInterval,includeTeamTime": "Check ${project} ${timeEntryDescription} tagged ${tags} time ${timePeriod} ${onDate}",
        "project,timeEntryDescription,tags,timePeriod,sinceDate,workspace,rounding,includeTeamTime": "Check ${project} ${timeEntryDescription} tagged ${tags} time ${timePeriod} ${sinceDate}",
        "project,timeEntryDescription,tags,timePeriod,sinceDate,workspace,rounding,roundingMode,roundingInterval,includeTeamTime": "Check ${project} ${timeEntryDescription} tagged ${tags} time ${timePeriod} ${sinceDate}",
        "project,timeEntryDescription,tags,timePeriod,startDate,endDate,workspace,rounding,includeTeamTime": "Check ${project} ${timeEntryDescription} tagged ${tags} time ${timePeriod} ${startDate} and ${endDate}",
        "project,timeEntryDescription,tags,timePeriod,startDate,endDate,workspace,rounding,roundingMode,roundingInterval,includeTeamTime": "Check ${project} ${timeEntryDescription} tagged ${tags} time ${timePeriod} ${startDate} and ${endDate}",
        "project,timeEntryDescription,tags,timePeriod,workspace,rounding,includeTeamTime": "Check ${project} ${timeEntryDescription} tagged ${tags} time ${timePeriod}",
        "project,timeEntryDescription,tags,timePeriod,workspace,rounding,includeTeamTime,lastNumberOfDays": "Check ${project} ${timeEntryDescription} tagged ${tags} time ${timePeriod}: ${lastNumberOfDays}",
        "project,timeEntryDescription,tags,timePeriod,workspace,rounding,roundingMode,roundingInterval,includeTeamTime": "Check ${project} ${timeEntryDescription} tagged ${tags} time ${timePeriod}",
        "project,timeEntryDescription,tags,timePeriod,workspace,rounding,roundingMode,roundingInterval,includeTeamTime,lastNumberOfDays": "Check ${project} ${timeEntryDescription} tagged ${tags} time ${timePeriod}: ${lastNumberOfDays}"
    },
    "com.joehribar.toggl.CheckProjectTimeTrackedIntent": {
        "project,timePeriod,onDate,workspace,groupReportDetailsBy,rounding,includeTeamTime,sortingMode,groupIntoTasks": "Check ${project} time ${timePeriod} ${onDate}",
        "project,timePeriod,onDate,workspace,groupReportDetailsBy,rounding,roundingMode,roundingInterval,includeTeamTime,sortingMode,groupIntoTasks": "Check ${project} time ${timePeriod} ${onDate}",
        "project,timePeriod,sinceDate,workspace,groupReportDetailsBy,rounding,includeTeamTime,sortingMode,groupIntoTasks": "Check ${project} time ${timePeriod} ${sinceDate}",
        "project,timePeriod,sinceDate,workspace,groupReportDetailsBy,rounding,roundingMode,roundingInterval,includeTeamTime,sortingMode,groupIntoTasks": "Check ${project} time ${timePeriod} ${sinceDate}",
        "project,timePeriod,startDate,endDate,workspace,groupReportDetailsBy,rounding,includeTeamTime,sortingMode,groupIntoTasks": "Check ${project} time ${timePeriod} ${startDate} and ${endDate}",
        "project,timePeriod,startDate,endDate,workspace,groupReportDetailsBy,rounding,roundingMode,roundingInterval,includeTeamTime,sortingMode,groupIntoTasks": "Check ${project} time ${timePeriod} ${startDate} and ${endDate}",
        "project,timePeriod,workspace,groupReportDetailsBy,rounding,includeTeamTime,sortingMode,groupIntoTasks": "Check ${project} time ${timePeriod}",
        "project,timePeriod,workspace,groupReportDetailsBy,rounding,includeTeamTime,sortingMode,lastNumberOfDays,groupIntoTasks": "Check ${project} time ${timePeriod}: ${lastNumberOfDays}",
        "project,timePeriod,workspace,groupReportDetailsBy,rounding,roundingMode,roundingInterval,includeTeamTime,sortingMode,groupIntoTasks": "Check ${project} time ${timePeriod}",
        "project,timePeriod,workspace,groupReportDetailsBy,rounding,roundingMode,roundingInterval,includeTeamTime,sortingMode,lastNumberOfDays,groupIntoTasks": "Check ${project} time ${timePeriod}: ${lastNumberOfDays}"
    },
    "com.joehribar.toggl.AddTimeEntryIntent": {
        "project,timeEntryDescription,tags,startTimeMode,endTimeType,duration,workspace,billable": "Add ${project} ${timeEntryDescription} time entry tagged ${tags} starting at the last stop time today and ${endTimeType} for ${duration}",
        "project,timeEntryDescription,tags,startTimeMode,endTimeType,duration,workspace,billable,minutesAgo": "Add ${project} ${timeEntryDescription} time entry tagged ${tags} starting ${minutesAgo} minutes ago and ${endTimeType} for ${duration}",
        "project,timeEntryDescription,tags,startTimeMode,endTimeType,stop,workspace,billable": "Add ${project} ${timeEntryDescription} time entry tagged ${tags} starting at the last stop time today and ${endTimeType} at ${stop}",
        "project,timeEntryDescription,tags,startTimeMode,endTimeType,stop,workspace,billable,minutesAgo": "Add ${project} ${timeEntryDescription} time entry tagged ${tags} starting ${minutesAgo} minutes ago and ${endTimeType} at ${stop}",
        "project,timeEntryDescription,tags,startTimeMode,endTimeType,workspace,billable": "Add ${project} ${timeEntryDescription} time entry tagged ${tags} starting at the last stop time today and ${endTimeType}",
        "project,timeEntryDescription,tags,startTimeMode,endTimeType,workspace,billable,minutesAgo": "Add ${project} ${timeEntryDescription} time entry tagged ${tags} starting ${minutesAgo} minutes ago and ${endTimeType} ",
        "project,timeEntryDescription,tags,startTimeMode,start,endTimeType,duration,workspace,billable": "Add ${project} ${timeEntryDescription} time entry tagged ${tags} starting at ${start} and ${endTimeType} for ${duration}",
        "project,timeEntryDescription,tags,startTimeMode,start,endTimeType,stop,workspace,billable": "Add ${project} ${timeEntryDescription} time entry tagged ${tags} starting at ${start} and ${endTimeType} at ${stop}",
        "project,timeEntryDescription,tags,startTimeMode,start,endTimeType,workspace,billable": "Add ${project} ${timeEntryDescription} time entry tagged ${tags} starting at ${start} and ${endTimeType}"
    },
    "com.joehribar.toggl.GetProjectsIntent": {
        "client,workspace,includeTasks,filterClientMode,filterBillableMode": "Get projects",
        "workspace,includeTasks,filterClientMode,filterBillableMode": "Get projects"
    },
    "com.joehribar.toggl.GetTasksIntent": {
        "project,workspace": "Get tasks for ${project}"
    },
    "com.joehribar.toggl.GetTagsIntent": {
        "workspace": "Get tags"
    },
    "com.joehribar.toggl.GetClientsIntent": {
        "workspace": "Get clients"
    },
    "com.joehribar.toggl.GetWorkspacesIntent": {
        "": "Get workspaces"
    },
    "com.joehribar.toggl.FormatDurationIntent": {
        "seconds,rounding": "Format duration of ${seconds} seconds",
        "seconds,rounding,roundingMode,roundingInterval": "Format duration of ${seconds} seconds"
    },
    "com.joehribar.toggl.ContinueTimeEntryIntent": {
        "startTimeMode,start": "Continue latest timer",
        "startTimeMode,minutesAgo": "Continue latest timer",
        "startTimeMode": "Continue latest timer"
    },
    "com.joehribar.toggl.UpdateTimeEntryIntent": {
        "Update ${updateTimeEntryMode} ${timeEntryId}": "updateTimeEntryMode,timeEntryId,workspace,updateProjectMode,updateDescriptionMode,updateTagsMode,updateStartTimeMode,updateStopTimeMode,updateBillableMode,stopMinutesAgo",
        "Update ${updateTimeEntryMode}": "updateTimeEntryMode,workspace,updateProjectMode,updateDescriptionMode,updateTagsMode,updateStartTimeMode,updateStopTimeMode,updateBillableMode,stopMinutesAgo"
    },
    "com.joehribar.toggl.GetTimeEntriesIntent": {
        "Get time entries from ${timePeriod}: ${lastNumberOfDays}": "timePeriod,workspace,filterClientMode,filterProjectsMode,projectsIncluded,filterDescriptionMode,filterTagsMode,tagsIncluded,filterBillableMode,rounding,roundingMode,roundingInterval,includeTeamTime,lastNumberOfDays,filterTasksMode,tasksIncluded,timeEntryDescriptionContains",
        "Get time entries ${timePeriod} ${onDate}": "timePeriod,onDate,workspace,filterClientMode,filterProjectsMode,projectsIncluded,filterTasksMode,tasksIncluded,filterDescriptionMode,timeEntryDescription,filterTagsMode,tagsIncluded,filterBillableMode,rounding,roundingMode,roundingInterval,includeTeamTime",
        "Get time entries from ${timePeriod} ${onDate}": "timePeriod,onDate,workspace,filterClientMode,filterProjectsMode,projectsIncluded,filterTasksMode,tasksIncluded,filterDescriptionMode,filterTagsMode,tagsIncluded,filterBillableMode,rounding,roundingMode,roundingInterval,includeTeamTime",
        "Get time entries ${timePeriod} ${sinceDate}": "timePeriod,sinceDate,workspace,filterClientMode,filterProjectsMode,projectsIncluded,filterTasksMode,tasksIncluded,filterDescriptionMode,timeEntryDescription,filterTagsMode,tagsIncluded,filterBillableMode,rounding,roundingMode,roundingInterval,includeTeamTime",
        "Get time entries from ${timePeriod} ${sinceDate}": "timePeriod,sinceDate,workspace,filterClientMode,filterProjectsMode,projectsIncluded,filterTasksMode,tasksIncluded,filterDescriptionMode,filterTagsMode,tagsIncluded,filterBillableMode,rounding,roundingMode,roundingInterval,includeTeamTime",
        "Get time entries from ${timePeriod}": "timePeriod,workspace,filterClientMode,filterProjectsMode,projectsIncluded,filterTasksMode,tasksIncluded,filterDescriptionMode,timeEntryDescription,filterTagsMode,tagsIncluded,filterBillableMode,rounding,roundingMode,roundingInterval,includeTeamTime",
        "Get time entries from ${timePeriod} ${startDate} and ${endDate}": "timePeriod,startDate,endDate,workspace,filterClientMode,filterProjectsMode,projectsIncluded,filterTasksMode,tasksIncluded,filterDescriptionMode,timeEntryDescription,filterTagsMode,tagsIncluded,filterBillableMode,rounding,roundingMode,roundingInterval,includeTeamTime"
    },
    "com.joehribar.toggl.GetSavedTimersIntent": {
        "Get saved timers": "workspace,filterClientMode,filterProjectsMode,projectsIncluded,filterTasksMode,filterDescriptionMode,timeEntryDescription,filterTagsMode,tagsMatched,filterBillableMode"
    },
    "com.joehribar.toggl.AddProjectIntent": {
        "project,assignClient,billable,workspace,color": "Add project ${project}",
        "project,assignClient,client,billable,workspace,color": "Add project ${project}"
    },
    "com.joehribar.toggl.ViewSavedTimersIntent": {
        "": "View Saved Timers"
    },
    "com.joehribar.toggl.ViewTimeTrackedIntent": {
        "": "View Time Tracked"
    },
    "com.joehribar.toggl.ViewCurrentTimeEntryIntent": {
        "": "View Current Time Entry"
    },
    "com.joehribar.toggl.ViewSummaryReportIntent": {
        "": "View Summary Report"
    },
    "com.joehribar.toggl.AddSavedTimerIntent": {
        "workspace,project,timeEntryDescription,tags,billable": "Add ${project} ${timeEntryDescription} saved timer tagged ${tags}"
    },
    "com.joehribar.toggl.ViewRecentTimeEntriesIntent": {
        "": "View Recent Timers"
    },
    "com.joehribar.toggl.GetRecentTimeEntriesIntent": {
        "Get Recent Timers": "workspace,filterClientMode,filterProjectsMode,projectsIncluded,filterTasksMode,filterDescriptionMode,timeEntryDescription,filterTagsMode,tagsMatched,filterBillableMode,sorting"
    },
    "com.joehribar.toggl.ViewDashboardIntent": {
        "": "View Dashboard"
    },
    "com.joehribar.toggl.ViewCurrentTimeEntryAccessoryIntent": {
        "": "View Current Time Entry"
    },
    "com.joehribar.toggl.ViewTimeTrackedAccessoryIntent": {
        "": "View Time Tracked"
    },
    "com.joehribar.toggl.StartTimeEntryAccessoryIntent": {
        "": "Start Time Entry"
    },
    "com.joehribar.toggl.ViewSingleSavedTimerIntent": {
        "": "View Single Saved Timer"
    },
    "com.joehribar.toggl.ViewProjectIntent": {
        "": "View Project"
    },
    "com.joehribar.toggl.ConfigureTimeryFocusFilter": {
        "setWorkspace,workspace,filterClients,filterClientsMode,filteredClients,filterProjects,filterProjectsMode,filteredProjects,filterTags,filterTagsMode,filteredTags,setReports,reportsOverview,summaryReport": "Configure Timery",
        "setWorkspace,workspace,filterClients,filterClientsMode,filteredClients,filterProjects,filterProjectsMode,filteredProjects,filterTags,setReports,reportsOverview,summaryReport": "Configure Timery",
        "setWorkspace,workspace,filterClients,filterClientsMode,filteredClients,filterProjects,filterTags,filterTagsMode,filteredTags,setReports,reportsOverview,summaryReport": "Configure Timery",
        "setWorkspace,workspace,filterClients,filterClientsMode,filteredClients,filterProjects,filterTags,setReports,reportsOverview,summaryReport": "Configure Timery",
        "setWorkspace,workspace,filterClients,filterProjects,filterProjectsMode,filteredProjects,filterTags,filterTagsMode,filteredTags,setReports,reportsOverview,summaryReport": "Configure Timery",
        "setWorkspace,workspace,filterClients,filterProjects,filterProjectsMode,filteredProjects,filterTags,setReports,reportsOverview,summaryReport": "Configure Timery",
        "setWorkspace,workspace,filterClients,filterProjects,filterTags,filterTagsMode,filteredTags,setReports,reportsOverview,summaryReport": "Configure Timery",
        "setWorkspace,workspace,filterClients,filterProjects,filterTags,setReports,reportsOverview,summaryReport": "Configure Timery",
        "setWorkspace,workspace,filterClients,filterClientsMode,filteredClients,filterProjects,filterProjectsMode,filteredProjects,filterTags,filterTagsMode,filteredTags,setReports": "Configure Timery",
        "setWorkspace,workspace,filterClients,filterClientsMode,filteredClients,filterProjects,filterProjectsMode,filteredProjects,filterTags,setReports": "Configure Timery",
        "setWorkspace,workspace,filterClients,filterClientsMode,filteredClients,filterProjects,filterTags,filterTagsMode,filteredTags,setReports": "Configure Timery",
        "setWorkspace,workspace,filterClients,filterClientsMode,filteredClients,filterProjects,filterTags,setReports": "Configure Timery",
        "setWorkspace,workspace,filterClients,filterProjects,filterProjectsMode,filteredProjects,filterTags,filterTagsMode,filteredTags,setReports": "Configure Timery",
        "setWorkspace,workspace,filterClients,filterProjects,filterProjectsMode,filteredProjects,filterTags,setReports": "Configure Timery",
        "setWorkspace,workspace,filterClients,filterProjects,filterTags,filterTagsMode,filteredTags,setReports": "Configure Timery",
        "setWorkspace,workspace,filterClients,filterProjects,filterTags,setReports": "Configure Timery",
        "setWorkspace,filterClients,filterClientsMode,filteredClients,filterProjects,filterProjectsMode,filteredProjects,filterTags,filterTagsMode,filteredTags,setReports,reportsOverview,summaryReport": "Configure Timery",
        "setWorkspace,filterClients,filterClientsMode,filteredClients,filterProjects,filterProjectsMode,filteredProjects,filterTags,setReports,reportsOverview,summaryReport": "Configure Timery",
        "setWorkspace,filterClients,filterClientsMode,filteredClients,filterProjects,filterTags,filterTagsMode,filteredTags,setReports,reportsOverview,summaryReport": "Configure Timery",
        "setWorkspace,filterClients,filterClientsMode,filteredClients,filterProjects,filterTags,setReports,reportsOverview,summaryReport": "Configure Timery",
        "setWorkspace,filterClients,filterProjects,filterProjectsMode,filteredProjects,filterTags,filterTagsMode,filteredTags,setReports,reportsOverview,summaryReport": "Configure Timery",
        "setWorkspace,filterClients,filterProjects,filterProjectsMode,filteredProjects,filterTags,setReports,reportsOverview,summaryReport": "Configure Timery",
        "setWorkspace,filterClients,filterProjects,filterTags,filterTagsMode,filteredTags,setReports,reportsOverview,summaryReport": "Configure Timery",
        "setWorkspace,filterClients,filterProjects,filterTags,setReports,reportsOverview,summaryReport": "Configure Timery",
        "setWorkspace,filterClients,filterClientsMode,filteredClients,filterProjects,filterProjectsMode,filteredProjects,filterTags,filterTagsMode,filteredTags,setReports": "Configure Timery",
        "setWorkspace,filterClients,filterClientsMode,filteredClients,filterProjects,filterProjectsMode,filteredProjects,filterTags,setReports": "Configure Timery",
        "setWorkspace,filterClients,filterClientsMode,filteredClients,filterProjects,filterTags,filterTagsMode,filteredTags,setReports": "Configure Timery",
        "setWorkspace,filterClients,filterClientsMode,filteredClients,filterProjects,filterTags,setReports": "Configure Timery",
        "setWorkspace,filterClients,filterProjects,filterProjectsMode,filteredProjects,filterTags,filterTagsMode,filteredTags,setReports": "Configure Timery",
        "setWorkspace,filterClients,filterProjects,filterProjectsMode,filteredProjects,filterTags,setReports": "Configure Timery",
        "setWorkspace,filterClients,filterProjects,filterTags,filterTagsMode,filteredTags,setReports": "Configure Timery",
        "setWorkspace,filterClients,filterProjects,filterTags,setReports": "Configure Timery"
    },
    "com.joehribar.toggl.ExportSavedReport": {
        "reportType,summaryReport,fileType": "Export ${reportType} ${summaryReport} as ${fileType}",
        "reportType,reportsOverview,fileType": "Export ${reportType} ${reportsOverview} as ${fileType}"
    },
    "com.joehribar.toggl.OpenTimery": {
        "openAppLocation,reportsOverview": "Open ${openAppLocation} to ${reportsOverview}",
        "openAppLocation,summaryReport": "Open ${openAppLocation} to ${summaryReport}",
        "openAppLocation": "Open ${openAppLocation}"
    },
    "com.joehribar.toggl.PerformActionAppIntent": {
        "action,secondaryAction": "Open Timery and ${action}",
        "action": "Open Timery and ${action}"
    },
    "com.joehribar.toggl.StartLiveActivity": {
        "": "Start Live Activity"
    },
    "com.joehribar.toggl.StartRecentTimer": {
        "mode,recentTimerEntity,startTimeMode,specifiedStartTime": "Start ${mode} ${recentTimerEntity}",
        "mode,recentTimerEntity,startTimeMode,minutesAgo": "Start ${mode} ${recentTimerEntity}",
        "mode,recentTimerEntity,startTimeMode": "Start ${mode} ${recentTimerEntity}",
        "mode,listSortingMode,startTimeMode,specifiedStartTime": "Start ${mode}",
        "mode,listSortingMode,startTimeMode,minutesAgo": "Start ${mode}",
        "mode,listSortingMode,startTimeMode": "Start ${mode}"
    },
    "com.joehribar.toggl.StartSavedTimer": {
        "savedTimerEntity,startTimeMode,specifiedStartTime": "Start ${savedTimerEntity}",
        "savedTimerEntity,startTimeMode,minutesAgo": "Start ${savedTimerEntity}",
        "savedTimerEntity,startTimeMode": "Start ${savedTimerEntity}"
    },
    "com.leomehlig.today.AddTaskIntent": {
        "title,taskType,duration,symbol,theme,subtasks,notes": "shortcuts.add.summary.inbox ${title}",
        "title,taskType,duration,symbol,theme,hexString,subtasks,notes": "shortcuts.add.summary.inbox ${title}",
        "title,day,taskType,symbol,theme,recurrence,subtasks,notes": "shortcuts.add.summary.all_day ${title} ${day}",
        "title,day,taskType,symbol,theme,hexString,recurrence,subtasks,notes": "shortcuts.add.summary.all_day ${title} ${day}",
        "title,day,startDate,taskType,duration,symbol,theme,recurrence,subtasks,notes": "shortcuts.add.summary.timeline ${title} ${day} ${startDate}",
        "title,day,startDate,taskType,duration,symbol,theme,hexString,recurrence,subtasks,notes": "shortcuts.add.summary.timeline ${title} ${day} ${startDate}"
    },
    "com.leomehlig.today.DayScheduleIntent": {
        "day,otherDate": "shortcuts.check_schedule.summary ${day}",
        "day": "shortcuts.check_schedule.summary ${day}"
    },
    "com.leomehlig.today.DeleteTaskIntent": {
        "tasks,recurringDelete": "shortcuts.delete.summary ${tasks}"
    },
    "com.leomehlig.today.DuplicateTaskIntent": {
        "task": "shortcuts.duplicate.summary ${task}"
    },
    "com.leomehlig.today.EditIntent": {
        "detail,tasks,status,recurringEditType": "shortcuts.edit.summary.status ${detail} ${tasks} ${status}",
        "detail,tasks,subtasks,recurringEditType": "shortcuts.edit.summary.subtasks ${detail} ${tasks} ${subtasks}",
        "detail,tasks,notes,recurringEditType": "shortcuts.edit.summary.notes ${detail} ${tasks} ${notes}",
        "detail,tasks,theme,recurringEditType": "shortcuts.edit.summary.theme ${detail} ${tasks} ${theme}",
        "detail,tasks,theme,hex,recurringEditType": "shortcuts.edit.summary.hex ${detail} ${tasks} ${theme} ${hex}",
        "detail,tasks,duration,recurringEditType": "shortcuts.edit.summary.duration ${detail} ${tasks} ${duration}",
        "detail,tasks,day": "shortcuts.edit.summary.day ${detail} ${tasks} ${day}",
        "detail,tasks,startTime,recurringEditType": "shortcuts.edit.summary.start_time ${detail} ${tasks} ${startTime}",
        "detail,tasks,endTime,recurringEditType": "shortcuts.edit.summary.end_time ${detail} ${tasks} ${endTime}",
        "detail,tasks,title,recurringEditType": "shortcuts.edit.summary.title ${detail} ${tasks} ${title}",
        "detail,tasks,symbol,recurringEditType": "shortcuts.edit.summary.symbol ${detail} ${tasks} ${symbol}",
        "detail,tasks,taskType,day,startTime,duration,recurringEditType": "shortcuts.edit.summary.type ${detail} ${tasks} ${taskType}",
        "detail,tasks,taskType,day,recurringEditType": "shortcuts.edit.summary.type ${detail} ${tasks} ${taskType}",
        "detail,tasks,taskType": "shortcuts.edit.summary.type ${detail} ${tasks} ${taskType}",
        "detail,tasks,taskType,recurringEditType": "shortcuts.edit.summary.type ${detail} ${tasks} ${taskType}",
        "detail,tasks,recurringEditType": "shortcuts.edit.summary.empty ${detail} ${tasks}"
    },
    "com.leomehlig.today.FocusTimerIntent": {
        "": "shortcuts.focus.summary"
    },
    "com.leomehlig.today.GetCurrentTaskIntent": {
        "includeCompleted": "shortcuts.get_current.summary"
    },
    "com.leomehlig.today.OpenDayIntent": {
        "date": "shortcuts.open_day.summary ${date}"
    },
    "com.leomehlig.today.OpenInboxIntent": {
        "": "shortcuts.open_inbox.title"
    },
    "com.leomehlig.today.OpenTaskIntent": {
        "task": "shortcuts.open_task.summary ${task}"
    },
    "com.leomehlig.today.ShowInboxIntent": {
        "includeCompleted,limitToggle": "shortcuts.show_inbox.summary",
        "includeCompleted,limitToggle,limit": "shortcuts.show_inbox.summary"
    },
    "com.leomehlig.today.ShowTaskIntent": {
        "tasks,prompt": "shortcuts.show_tasks.summary ${tasks}"
    },
    "com.lifx.lifx.LFXLightThemeIntent": {
        "target,theme": "Apply ${theme} to ${target}"
    },
    "com.lifx.lifx.LFXLightSceneIntent": {
        "scene,duration": "Set the scene to ${scene} over ${duration} seconds"
    },
    "com.lifx.lifx.LFXLightStateIntent": {
        "target,power,brightness,color,duration": "Turn ${target} ${power} and set colour to ${color} and brightness to ${brightness}"
    },
    "com.lifx.lifx.LFXLightPowerIntent": {
        "target,power,duration": "Turn ${target} ${power}"
    },
    "com.lifx.lifx.LFXLightBrightnessIntent": {
        "target,brightness,duration": "Set ${target} to ${brightness} brightness"
    },
    "com.lifx.lifx.LFXLightColorIntent": {
        "target,isWhite,duration": "Set ${target}to ${isWhite}",
        "target,isWhite,duration,kelvin": "Set ${target} to ${isWhite} (${kelvin}K)",
        "target,isWhite,hue,saturation,duration": "Set ${target} to ${isWhite} (${hue} hue and ${saturation} saturation)"
    },
    "com.lifx.lifx.LFXGetLightsIntent": {
        "": "Get Lights"
    },
    "com.lifx.lifx.LFXGetThemesIntent": {
        "": "List Themes"
    },
    "com.lifx.lifx.LFXGetScenesIntent": {
        "": "Get Scenes"
    },
    "com.lifx.lifx.LFXCleanCycleIntent": {
        "target,active": "${active} Clean Cycle on ${target}",
        "target,duration,active": "${active} Clean Cycle on ${target}"
    },
    "com.lukilabs.lukiapp.SelectDocumentIntent": {
        "": "Select Document"
    },
    "com.lukilabs.lukiapp.OpenCraftIntent": {
        "": "Open the Craft app"
    },
    "com.lukilabs.lukiapp.OpenDocumentIntent": {
        "document,workspace": "Open the ${document} in the ${workspace}",
        "workspace": "Open document in ${workspace}"
    },
    "com.lukilabs.lukiapp.OpenSpaceIntent": {
        "workspace": "Open ${workspace}",
        "workspace,tab": "Open ${workspace}"
    },
    "com.lukilabs.lukiapp.SelectWorkspaceIntent": {
        "": "Select Space"
    },
    "com.lukilabs.lukiapp.QuickAddIntent": {
        "workspace,title,content": "Create ${title} in ${workspace} with ${content}",
        "workspace,title,content,folder": "Create ${title} in ${workspace} in folder: ${folder} with ${content}"
    },
    "com.lukilabs.lukiapp.AddToDocumentIntent": {
        "workspace,content,insertPosition": "Add ${content} to ${workspace}",
        "workspace,document,content,insertPosition": "Add ${content} to ${document} in ${workspace}"
    },
    "com.lukilabs.lukiapp.OpenAndSearchIntent": {
        "workspace,query": "Open Craft and search for ${query} in ${workspace}"
    },
    "com.microsoft.bing.OpenCashbackIntent": {
        "": "Bing Cashback"
    },
    "com.microsoft.bing.OpenMoneyIntent": {
        "": "Bing Money"
    },
    "com.microsoft.bing.OpenNewsIntent": {
        "": "Bing News"
    },
    "com.microsoft.bing.OpenRewardsIntent": {
        "": "Bing Rewards"
    },
    "com.microsoft.bing.OpenShoppingIntent": {
        "": "Bing Shopping"
    },
    "com.microsoft.bing.OpenSydneyAndSummerizeBigNewsIntent": {
        "": "Summerize big news of this week"
    },
    "com.microsoft.bing.OpenSydneyAndWriteEmailIntent": {
        "": "Write an email for me"
    },
    "com.microsoft.bing.OpenSydneyIntent": {
        "": "new Bing"
    },
    "com.microsoft.bing.OpenWallpaperIntent": {
        "": "Bing Wallpapers"
    },
    "com.microsoft.bing.OpenWeatherIntent": {
        "": "Bing Weather"
    },
    "com.microsoft.msedge.OpenInChromeIntent": {
        "url": "Open ${url}"
    },
    "com.microsoft.msedge.SearchInChromeIntent": {
        "searchPhrase": "Search ${searchPhrase} in Edge"
    },
    "com.microsoft.msedge.OpenInChromeIncognitoIntent": {
        "url": "Open ${url} in InPrivate"
    },
    "com.microsoft.msedge.AddReadingListItemToChromeIntent": {
        "url": "Add ${url} to reading list"
    },
    "com.microsoft.msedge.AddBookmarkToChromeIntent": {
        "url": "Add ${url} to bookmarks"
    },
    "com.microsoft.msedge.OpenReadingListIntent": {
        "": "See Chrome Reading List"
    },
    "com.microsoft.msedge.OpenBookmarksIntent": {
        "": "See Chrome Bookmarks"
    },
    "com.microsoft.msedge.OpenRecentTabsIntent": {
        "": "See Recent Tabs In Chrome"
    },
    "com.microsoft.msedge.OpenTabGridIntent": {
        "": "Visit The Tab Grid In Chrome"
    },
    "com.microsoft.msedge.SearchWithVoiceIntent": {
        "": "Search with voice in Chrome"
    },
    "com.microsoft.msedge.OpenNewTabIntent": {
        "": "Open new tab in Chrome"
    },
    "com.microsoft.msedge.PlayDinoGameIntent": {
        "": "Play Chrome Dino Game"
    },
    "com.microsoft.msedge.SetChromeDefaultBrowserIntent": {
        "": "Set Chrome As Default Browser"
    },
    "com.microsoft.msedge.ViewHistoryIntent": {
        "": "View Your Chrome History"
    },
    "com.microsoft.msedge.OpenNewIncognitoTabIntent": {
        "": "Open Chrome Incognito Tab"
    },
    "com.microsoft.msedge.ManagePaymentMethodsIntent": {
        "": "Manage Payment Methods in Chrome"
    },
    "com.microsoft.msedge.RunSafetyCheckIntent": {
        "": "Run Chrome Safety Check"
    },
    "com.microsoft.msedge.ManagePasswordsIntent": {
        "": "Manage passwords in Chrome"
    },
    "com.microsoft.msedge.ManageSettingsIntent": {
        "": "Manage Chrome Settings"
    },
    "com.microsoft.msedge.OpenLatestTabIntent": {
        "": "Open My Latest Tab in Chrome"
    },
    "com.microsoft.msedge.OpenLensIntent": {
        "": "Search Visuals in Chrome."
    },
    "com.microsoft.msedge.ClearBrowsingDataIntent": {
        "": "Clear Browsing Data in Chrome."
    },
    "com.microsoft.msedge.OpenEdgeCopilotIntent": {
        "": "Ask Microsoft Copilot Anything"
    },
    "com.microsoft.to-do.WLShowListIntent": {
        "list": "Open ${list}"
    },
    "com.microsoft.to-do.WLAddTaskIntent": {
        "list,taskTitle,addToMyDay,isImportant,reminder,dueDate,notes": "Add ${taskTitle} to ${list}"
    },
    "com.microsoft.to-do.WLChooseListIntent": {
        "": "Choose List"
    },
    "com.microsoft.to-do.WLChooseListForAddTaskIntent": {
        "": "Choose List For Add Task"
    },
    "com.microsoft.to-do.WLChooseListForMyDayIntent": {
        "": "Choose List For My Day"
    },
    "com.openai.chat.AskIntent": {
        "prompt,newChat,continuous": "Ask ChatGPT ${prompt}",
        "prompt,newChat,model,continuous": "Ask ChatGPT ${prompt} in a new chat",
        "prompt,model,newChat,model,continuous": "Ask ChatGPT ${prompt} in a new chat using ${model}"
    },
    "com.openai.chat.OpenVoiceModeIntent": {
        "": "Start voice conversation with ChatGPT"
    },
    "com.overdesigned.Cheatsheet.CSAddCheatIntent": {
        "text,icon,folder,title": "Add cheat with ${text}"
    },
    "com.overdesigned.Cheatsheet.CSAppendCheatIntent": {
        "text,cheat": "Append ${text} to ${cheat}"
    },
    "com.overdesigned.Cheatsheet.CSDeleteCheatIntent": {
        "cheats": "Delete ${cheats}"
    },
    "com.overdesigned.Cheatsheet.CSFindCheatsIntent": {
        "limit,order,folder": "Get Cheats (Deprecated)"
    },
    "com.overdesigned.Cheatsheet.CSMoveCheatIntent": {
        "cheat,folder": "Move ${cheat} to ${folder}"
    },
    "com.overdesigned.Cheatsheet.CSMoveCheatToTopIntent": {
        "cheat,folder": "Move ${cheat} to top of ${folder}"
    },
    "com.overdesigned.Cheatsheet.CSOpenCheatIntent": {
        "cheat": "Open ${cheat}"
    },
    "com.overdesigned.Cheatsheet.CSOpenFolderIntent": {
        "folder": "Open ${folder}"
    },
    "com.overdesigned.Cheatsheet.CSSetCheatIconIntent": {
        "cheat,icon": "Set ${cheat} icon to ${icon}"
    },
    "com.overdesigned.Cheatsheet.CSSetCheatTitleIntent": {
        "cheat,title": "Set ${cheat} title to ${title}"
    },
    "com.overdesigned.Cheatsheet.GetCheatFromURL": {
        "urls": "Get cheats from ${urls}"
    },
    "com.rivian.ios.consumer.CloseFrunkIntent": {
        "": "appIntent.close.frunk"
    },
    "com.rivian.ios.consumer.CloseLiftgateIntent": {
        "": "appIntent.close.liftgate"
    },
    "com.rivian.ios.consumer.CloseWindowsIntent": {
        "": "appIntent.close.windows"
    },
    "com.rivian.ios.consumer.LockDoorsIntent": {
        "": "appIntent.lock.doors"
    },
    "com.rivian.ios.consumer.OpenAppIntent": {
        "": "appIntent.openRivian"
    },
    "com.rivian.ios.consumer.OpenFrunkIntent": {
        "": "appIntent.open.frunk"
    },
    "com.rivian.ios.consumer.OpenLiftgateIntent": {
        "": "appIntent.open.liftgate"
    },
    "com.rivian.ios.consumer.OpenWindowsIntent": {
        "": "appIntent.open.windows"
    },
    "com.rivian.ios.consumer.StartChargingIntent": {
        "": "appIntent.start.charging"
    },
    "com.rivian.ios.consumer.StartMotionCamIntent": {
        "": "appIntent.start.motionCam"
    },
    "com.rivian.ios.consumer.StartPreconditioningIntent": {
        "": "appIntent.start.preconditioning"
    },
    "com.rivian.ios.consumer.StopChargingIntent": {
        "": "appIntent.stop.charging"
    },
    "com.rivian.ios.consumer.StopMotionCamIntent": {
        "": "appIntent.stop.motionCam"
    },
    "com.rivian.ios.consumer.StopPreconditioningIntent": {
        "": "appIntent.stop.preconditioning"
    },
    "com.rivian.ios.consumer.UnlockDoorsIntent": {
        "": "appIntent.unlock.doors"
    },
    "com.sindresorhus.Actions.AddToListIntent": {
        "prepend,item,list": "${prepend} ${item} to ${list}"
    },
    "com.sindresorhus.Actions.ApplyCaptureDateIntent": {
        "setModificationDate,images": "Set the ${setModificationDate} of ${images} to the original capture date and time"
    },
    "com.sindresorhus.Actions.Boolean": {
        "boolean": "${boolean}"
    },
    "com.sindresorhus.Actions.CalculateWithSoulver": {
        "expression,decimalPlaces,showThousandsSeparator,abbreviateLargeNumbers,useLiveCurrencyRates": "Calculate ${expression}"
    },
    "com.sindresorhus.Actions.ClampNumberIntent": {
        "number,minimum,maximum": "Clamp ${number} to be within ${minimum} and ${maximum}"
    },
    "com.sindresorhus.Actions.ColorIntent": {
        "color,shouldSetOpacity": "${color}",
        "color,shouldSetOpacity,opacity": "${color}"
    },
    "com.sindresorhus.Actions.CombineListsIntent": {
        "list1,list2,list3,list4,list5,list6,list7,list8,list9,list10": "Combine ${list1} with ${list2}"
    },
    "com.sindresorhus.Actions.ConvertCoordinatesToLocation": {
        "latitude,longitude": "Get location at coordinates ${latitude}, ${longitude}"
    },
    "com.sindresorhus.Actions.CreateURLIntent": {
        "": "Create URL"
    },
    "com.sindresorhus.Actions.DateToUnixTimeIntent": {
        "date": "Convert ${date} to Unix time"
    },
    "com.sindresorhus.Actions.EditURLIntent": {
        "action,queryItemName,queryItemValue,url": "${action} ${queryItemName} ${queryItemValue} to ${url}",
        "action,addPathComponentValue,url": "${action} ${addPathComponentValue} of ${url}",
        "action,appendToQueryValue,url": "${action} ${appendToQueryValue} of ${url}",
        "action,appendToFragmentValue,url": "${action} ${appendToFragmentValue} of ${url}",
        "action,removeQueryItemsNamedValue,url": "${action} ${removeQueryItemsNamedValue} from ${url}",
        "action,setQueryValue,url": "${action} to ${setQueryValue} for ${url}",
        "action,setFragmentValue,url": "${action} to ${setFragmentValue} for ${url}",
        "action,setPathValue,url": "${action} to ${setPathValue} for ${url}",
        "action,setSchemeValue,url": "${action} to ${setSchemeValue} for ${url}",
        "action,setHostValue,url": "${action} to ${setHostValue} for ${url}",
        "action,username,password,url": "${action} to ${username} ${password} for ${url}",
        "action,url": "${action} of ${url}"
    },
    "com.sindresorhus.Actions.FilterListIntent": {
        "shouldKeep,list,condition,matchText,shouldLimit,caseSensitive": "${shouldKeep} items in ${list} that ${condition} ${matchText}",
        "shouldKeep,list,condition,matchText,shouldLimit,limit,caseSensitive": "${shouldKeep} items in ${list} that ${condition} ${matchText}"
    },
    "com.sindresorhus.Actions.FlashScreen": {
        "": "Flash screen"
    },
    "com.sindresorhus.Actions.FormatCurrencyIntent": {
        "amount,currency": "Format ${amount} as currency"
    },
    "com.sindresorhus.Actions.FormatDateDifferenceIntent": {
        "firstDate,secondDate": "Format the difference of ${firstDate} relative to ${secondDate}"
    },
    "com.sindresorhus.Actions.FormatDurationIntent": {
        "duration,unitStyle,showSeconds,showMinutes,showHours,showDays,showMonths,showYears,maximumUnitCount": "Format ${duration}"
    },
    "com.sindresorhus.Actions.FormatNumberCompactIntent": {
        "number,abbreviatedUnit": "Format ${number} with compact style"
    },
    "com.sindresorhus.Actions.FormatPersonName": {
        "givenName,middleName,familyName,namePrefix,nickname,style": "Format ${givenName} ${middleName} ${familyName}"
    },
    "com.sindresorhus.Actions.GenerateUUIDIntent": {
        "": "Generate UUID"
    },
    "com.sindresorhus.Actions.GeoURIIntent": {
        "location,includeAccuracy": "Get the geo URI for ${location}"
    },
    "com.sindresorhus.Actions.GetActionsVersion": {
        "": "Get the version of the Actions app"
    },
    "com.sindresorhus.Actions.GetAudioPlaybackDestinationIntent": {
        "": "Get audio playback destination"
    },
    "com.sindresorhus.Actions.GetAverageColorIntent": {
        "colors": "Get the average color of ${colors} (Please read the action description)"
    },
    "com.sindresorhus.Actions.GetBatteryStateIntent": {
        "state": "Is the battery ${state}?"
    },
    "com.sindresorhus.Actions.GetBooleanFromInput": {
        "booleanString": "Get boolean from ${booleanString}"
    },
    "com.sindresorhus.Actions.GetDeviceDetailsExtended": {
        "": "Get Device Details (Extended)"
    },
    "com.sindresorhus.Actions.GetDeviceMotionData": {
        "sampleCount,interval": "Get device motion data"
    },
    "com.sindresorhus.Actions.GetDeviceOrientationIntent": {
        "": "Get Device Orientation"
    },
    "com.sindresorhus.Actions.GetEmojisIntent": {
        "text": "Get emojis in ${text}"
    },
    "com.sindresorhus.Actions.GetFileIconIntent": {
        "files": "Get the icon of ${files}"
    },
    "com.sindresorhus.Actions.GetFilePathIntent": {
        "type,file": "Get the ${type} to ${file}"
    },
    "com.sindresorhus.Actions.GetHighResolutionTimestamp": {
        "": "Get high-resolution timestamp"
    },
    "com.sindresorhus.Actions.GetIndexOfListItem": {
        "item,list": "Get the index of ${item} in ${list}"
    },
    "com.sindresorhus.Actions.GetModifierKeyState": {
        "": "Get state of modifier keys"
    },
    "com.sindresorhus.Actions.GetMusicPlaylistsIntent": {
        "": "Get Music Playlists"
    },
    "com.sindresorhus.Actions.GetParagraphsFromTextIntent": {
        "text,language": "Get paragraphs from ${text}"
    },
    "com.sindresorhus.Actions.GetQueryItemValueFromURLIntent": {
        "queryItemName,url": "Get value of first query item named ${queryItemName} from ${url}"
    },
    "com.sindresorhus.Actions.GetQueryItemsFromURLAsDictionaryIntent": {
        "url": "Get query items from ${url} as a dictionary"
    },
    "com.sindresorhus.Actions.GetQueryItemsFromURLIntent": {
        "url": "Get query items from ${url}"
    },
    "com.sindresorhus.Actions.GetRandomNumberFromSeed": {
        "minimum,maximum,seed": "Get a random number between ${minimum} and ${maximum} from ${seed}"
    },
    "com.sindresorhus.Actions.GetRelatedWordsIntent": {
        "word,maximumCount,language": "Get words related to ${word}"
    },
    "com.sindresorhus.Actions.GetSentencesFromTextIntent": {
        "text,language": "Get sentences from ${text}"
    },
    "com.sindresorhus.Actions.GetUniformTypeIdentifierIntent": {
        "file": "Get the Uniform Type Identifier of ${file}"
    },
    "com.sindresorhus.Actions.GetUserDetailsIntent": {
        "type": "Get the current user's ${type}"
    },
    "com.sindresorhus.Actions.IsAudioPlayingIntent": {
        "": "Is Audio Playing"
    },
    "com.sindresorhus.Actions.IsBluetoothOnIntent": {
        "": "Is Bluetooth On"
    },
    "com.sindresorhus.Actions.IsCallActive": {
        "": "Is Call Active"
    },
    "com.sindresorhus.Actions.IsCameraOn": {
        "": "Is Camera On"
    },
    "com.sindresorhus.Actions.IsCellularDataOn": {
        "": "Is Cellular Data On"
    },
    "com.sindresorhus.Actions.IsCellularLowDataModeOn": {
        "": "Is Cellular Low Data Mode On"
    },
    "com.sindresorhus.Actions.IsConformingToUTIIntent": {
        "utiString,parentUTIString": "Does ${utiString} conform to ${parentUTIString}?"
    },
    "com.sindresorhus.Actions.IsConnectedToVPNIntent": {
        "": "Is Connected to VPN"
    },
    "com.sindresorhus.Actions.IsDay": {
        "day,type": "Is ${day} ${type}?"
    },
    "com.sindresorhus.Actions.IsDeviceMoving": {
        "timeout,minAcceleration": "Is device moving?"
    },
    "com.sindresorhus.Actions.IsDeviceOrientationIntent": {
        "orientation": "Is the device in ${orientation} orientation?"
    },
    "com.sindresorhus.Actions.IsLowPowerModeIntent": {
        "": "Is Low Power Mode On"
    },
    "com.sindresorhus.Actions.IsOnlineIntent": {
        "": "Is online?"
    },
    "com.sindresorhus.Actions.IsShakingDevice": {
        "timeout": "Is shaking device?"
    },
    "com.sindresorhus.Actions.IsSilentModeOnIntent": {
        "": "Is silent mode on?"
    },
    "com.sindresorhus.Actions.IsWiFiOnIntent": {
        "": "Is Wi-Fi on?"
    },
    "com.sindresorhus.Actions.PlayAlertSound": {
        "": "Play alert sound"
    },
    "com.sindresorhus.Actions.PrettyPrintDictionariesIntent": {
        "dictionaries": "Pretty print ${dictionaries}"
    },
    "com.sindresorhus.Actions.RandomBooleanIntent": {
        "": "Get Random Boolean"
    },
    "com.sindresorhus.Actions.RandomColorIntent": {
        "": "Get Random Color"
    },
    "com.sindresorhus.Actions.RandomDateTimeIntent": {
        "start,end": "Get a random date and time between ${start} and ${end}"
    },
    "com.sindresorhus.Actions.RandomEmojiIntent": {
        "": "Get Random Emoticon"
    },
    "com.sindresorhus.Actions.RandomFloatingPointNumberIntent": {
        "minimum,maximum,seed": "Get a random floating-point number between ${minimum} and ${maximum}"
    },
    "com.sindresorhus.Actions.RandomTextIntent": {
        "length,lowercase,uppercase,digits,useCustomCharacters,seed": "Random text of ${length} characters",
        "length,useCustomCharacters,customCharacters,seed": "Random text of ${length} characters"
    },
    "com.sindresorhus.Actions.RemoveDuplicateLinesIntent": {
        "text,caseInsensitive": "Remove duplicate lines from ${text}"
    },
    "com.sindresorhus.Actions.RemoveEmojiIntent": {
        "text": "Remove emojis in ${text}"
    },
    "com.sindresorhus.Actions.RemoveEmptyLinesIntent": {
        "text": "Remove empty lines from ${text}"
    },
    "com.sindresorhus.Actions.RemoveFromListIntent": {
        "action,index,list": "Remove ${action} ${index} from ${list}",
        "action,rangeLowerBound,rangeUpperBound,list": "Remove ${action} ${rangeLowerBound} to ${rangeUpperBound} from ${list}",
        "randomItemCount,action,list": "Remove ${randomItemCount} ${action} from ${list}",
        "action,list": "Remove ${action} from ${list}"
    },
    "com.sindresorhus.Actions.RemoveNonPrintableCharactersIntent": {
        "text": "Remove non-printable characters in ${text}"
    },
    "com.sindresorhus.Actions.ReverseLines": {
        "text": "Reverse lines of ${text}"
    },
    "com.sindresorhus.Actions.ReverseListIntent": {
        "list": "Reverse ${list}"
    },
    "com.sindresorhus.Actions.RoundNumberToMultipleIntent": {
        "number,multiple,mode": "Round ${number} to the nearest multiple of ${multiple}"
    },
    "com.sindresorhus.Actions.SampleColorIntent": {
        "": "Sample Color from Screen"
    },
    "com.sindresorhus.Actions.SendFeedbackIntent": {
        "email,message": "Send feedback to the developer of the Actions app"
    },
    "com.sindresorhus.Actions.SetFileCreationModificationDateIntent": {
        "type,file,date,modifyOriginal": "Set ${type} of ${file} to ${date}"
    },
    "com.sindresorhus.Actions.SetUniformTypeIdentifier": {
        "file,typeIdentifier": "Set the Uniform Type Identifier of ${file} to ${typeIdentifier}"
    },
    "com.sindresorhus.Actions.ShuffleListIntent": {
        "list,shouldLimit": "Shuffle ${list}",
        "list,shouldLimit,limit": "Shuffle ${list}"
    },
    "com.sindresorhus.Actions.SortListIntent": {
        "list,ascending,sortType": "Sort ${list} in ${ascending} order"
    },
    "com.sindresorhus.Actions.SpellOutNumberIntent": {
        "number,locale": "Spell out ${number}"
    },
    "com.sindresorhus.Actions.TransformListsIntent": {
        "list1,list2,type": "Get items that are not in both ${list1} and ${list2}"
    },
    "com.sindresorhus.Actions.TransformTextIntent": {
        "text,transformation": "Transform ${text} using ${transformation}"
    },
    "com.sindresorhus.Actions.TransformTextWithJavaScriptIntent": {
        "text,javaScriptCode": "Transform ${text} with ${javaScriptCode}"
    },
    "com.sindresorhus.Actions.TrimWhitespaceIntent": {
        "text": "Trim leading and trailing whitespace from ${text}"
    },
    "com.sindresorhus.Actions.TruncateListIntent": {
        "list,limit": "Truncate ${list} to maximum ${limit} items"
    },
    "com.sindresorhus.Actions.TruncateNumber": {
        "number,decimalPlaces": "Truncate ${number} to ${decimalPlaces} decimal places"
    },
    "com.sindresorhus.Actions.TruncateTextIntent": {
        "text,maximumLength,truncationIndicator": "Truncate ${text} to ${maximumLength} characters"
    },
    "com.sindresorhus.Actions.UnixTimeToDateIntent": {
        "unixTime": "Convert ${unixTime} to a date"
    },
    "com.sindresorhus.Actions.WaitMilliseconds": {
        "duration": "Wait ${duration} milliseconds"
    },
    "com.sindresorhus.Actions.AskForText": {
        "prompt,type,message,defaultAnswer,timeout,timeoutReturnValue,showCancelButton": "Ask for text with ${prompt}"
    },
    "com.sindresorhus.Actions.Authenticate": {
        "": "Authenticate (Legacy)"
    },
    "com.sindresorhus.Actions.Authenticate2": {
        "": "Authenticate"
    },
    "com.sindresorhus.Actions.BlurImages": {
        "amount,images": "Apply ${amount} blur to ${images}"
    },
    "com.sindresorhus.Actions.ChooseFromListExtendedIntent": {
        "list,prompt,message,selectMultiple,useTimeout,allowCustomItems": "Choose from ${list}",
        "list,prompt,message,selectMultiple,useTimeout,timeout,timeoutReturnValue,allowCustomItems": "Choose from ${list}",
        "list,prompt,message,selectMultiple,selectAllInitially,useTimeout,allowCustomItems": "Choose from ${list}",
        "list,prompt,message,selectMultiple,selectAllInitially,useTimeout,timeout,timeoutReturnValue,allowCustomItems": "Choose from ${list}"
    },
    "com.sindresorhus.Actions.CombineVideosIntent": {
        "videos": "Combine videos ${videos} (MUST HAVE SAME SIZE & ORIENTATION)"
    },
    "com.sindresorhus.Actions.CreateColorImageIntent": {
        "color,width,height,opacity": "Create image of color ${color} with size ${width}×${height}"
    },
    "com.sindresorhus.Actions.CreateMenuItem": {
        "menuTitle,sfSymbolName,subtitle,iconType,foreground,background,backgroundShape,data": "Create menu item with title ${menuTitle} and icon ${sfSymbolName}",
        "menuTitle,sfSymbolName,subtitle,iconType,foreground,backgroundShape,data": "Create menu item with title ${menuTitle} and icon ${sfSymbolName}",
        "menuTitle,emoji,subtitle,iconType,background,backgroundShape,data": "Create menu item with title ${menuTitle} and icon ${emoji}",
        "menuTitle,emoji,subtitle,iconType,backgroundShape,data": "Create menu item with title ${menuTitle} and icon ${emoji}",
        "menuTitle": "Create menu item with title ${menuTitle}"
    },
    "com.sindresorhus.Actions.DebugIntent": {
        "": "Debug (Internal)"
    },
    "com.sindresorhus.Actions.EncryptFile": {
        "shouldEncrypt,file,key,decryptedType": "${shouldEncrypt} ${file} using key ${key} as type ${decryptedType}",
        "shouldEncrypt,file,key": "${shouldEncrypt} ${file} using key ${key}"
    },
    "com.sindresorhus.Actions.EncryptText": {
        "shouldEncrypt,text,key": "${shouldEncrypt} ${text} using key ${key}"
    },
    "com.sindresorhus.Actions.GenerateCSVIntent": {
        "dictionaries,delimiter,customDelimiter,keys": "Generate CSV from ${dictionaries}",
        "dictionaries,delimiter,keys": "Generate CSV from ${dictionaries}"
    },
    "com.sindresorhus.Actions.GenerateRandomData": {
        "size,outputType": "Generate ${size} bytes of random data as ${outputType}"
    },
    "com.sindresorhus.Actions.GetAverageColorOfImage": {
        "image": "Get average color of ${image}"
    },
    "com.sindresorhus.Actions.GetBluetoothDevice": {
        "deviceIdentifier,timeout": "Get Bluetooth Device with Identifier ${deviceIdentifier} (PLEASE READ THE ACTION DESCRIPTION)"
    },
    "com.sindresorhus.Actions.GetBluetoothDevices": {
        "scanDuration,includeUnnamedDevices": "Get Bluetooth Devices (PLEASE READ THE ACTION DESCRIPTION)"
    },
    "com.sindresorhus.Actions.GetCompassHeading": {
        "headingType": "Get ${headingType} compass heading"
    },
    "com.sindresorhus.Actions.GetDominantColorsOfImage": {
        "count,image,excludeWhite,excludeBlack": "Get ${count} dominant colors of ${image}"
    },
    "com.sindresorhus.Actions.GetElevation": {
        "": "Get Elevation"
    },
    "com.sindresorhus.Actions.GetImageLocation": {
        "image": "Get the location of ${image}"
    },
    "com.sindresorhus.Actions.GetMapImageOfLocation": {
        "location,radius,width,height,showPlacemark,mapType,appearance": "Get map image of ${location} with ${radius} radius (PLEASE READ THE ACTION DESCRIPTION)"
    },
    "com.sindresorhus.Actions.GetTitleOfURLIntent": {
        "url": "Get the title of ${url}"
    },
    "com.sindresorhus.Actions.GetUnsplashImageIntent": {
        "keywords,onlyFeaturedImages,size,sizeWidth,sizeHeight": "Get Unsplash image",
        "keywords,onlyFeaturedImages,size": "Get Unsplash image"
    },
    "com.sindresorhus.Actions.GlobalVariableDelete": {
        "deleteAll,keys": "${deleteAll} ${keys}",
        "deleteAll": "${deleteAll} variables"
    },
    "com.sindresorhus.Actions.GlobalVariableGetAll": {
        "": "Get all global variables"
    },
    "com.sindresorhus.Actions.GlobalVariableGetBoolean": {
        "key": "Get global boolean variable ${key}"
    },
    "com.sindresorhus.Actions.GlobalVariableGetNumber": {
        "key": "Get global number variable ${key}"
    },
    "com.sindresorhus.Actions.GlobalVariableGetText": {
        "key": "Get global text variable ${key}"
    },
    "com.sindresorhus.Actions.GlobalVariableSetBoolean": {
        "shouldToggle,key,value": "${shouldToggle} global boolean variable ${key} to ${value}",
        "shouldToggle,key": "${shouldToggle} global boolean variable ${key}"
    },
    "com.sindresorhus.Actions.GlobalVariableSetNumber": {
        "action,key,value": "${action} global number variable ${key} to ${value}"
    },
    "com.sindresorhus.Actions.GlobalVariableSetText": {
        "key,value": "Set global text variable ${key} to ${value}"
    },
    "com.sindresorhus.Actions.HapticFeedbackIntent": {
        "type": "Generate ${type} haptic feedback (PLEASE READ THE ACTION DESCRIPTION)"
    },
    "com.sindresorhus.Actions.HexEncode": {
        "action,input": "${action} ${input} to Hex",
        "action,input,decodeContentType": "${action} ${input} from Hex to ${decodeContentType}"
    },
    "com.sindresorhus.Actions.HideShortcutsAppIntent": {
        "": "Hide the Shortcuts app"
    },
    "com.sindresorhus.Actions.InvertImages": {
        "images": "Invert ${images}"
    },
    "com.sindresorhus.Actions.IsAccessibilityFeatureOn": {
        "feature": "Is the ${feature} accessibility feature on?"
    },
    "com.sindresorhus.Actions.IsDarkModeIntent": {
        "": "Is Dark Mode On"
    },
    "com.sindresorhus.Actions.IsDeviceLocked": {
        "": "Is device locked? (PLEASE READ THE ACTION DESCRIPTION)"
    },
    "com.sindresorhus.Actions.IsHostReachable": {
        "host,port,timeout,debugMode": "Is ${host} at port ${port} reachable?"
    },
    "com.sindresorhus.Actions.IsMicrophoneOnIntent": {
        "": "Is Microphone On"
    },
    "com.sindresorhus.Actions.IsReachableIntent": {
        "host,timeout,requireSuccessStatusCode,useGetMethod": "Is web server at ${host} reachable?"
    },
    "com.sindresorhus.Actions.IsScreenLockedIntent": {
        "": "Is the screen locked?"
    },
    "com.sindresorhus.Actions.JoinWiFiIntent": {
        "ssid,password,waitForConnection,isWEP,isHidden": "Join Wi-Fi named ${ssid}  (PLEASE READ THE ACTION DESCRIPTION)"
    },
    "com.sindresorhus.Actions.MergeDictionariesIntent": {
        "dictionary1,dictionary2,dictionary3,dictionary4,dictionary5,dictionary6,dictionary7,dictionary8,dictionary9,dictionary10": "Merge into ${dictionary1} from ${dictionary2} ${dictionary3} ${dictionary4} ${dictionary5} ${dictionary6} ${dictionary7} ${dictionary8} ${dictionary9} ${dictionary10}"
    },
    "com.sindresorhus.Actions.OverwriteFile": {
        "destination,source": "Overwrite ${destination} with ${source}"
    },
    "com.sindresorhus.Actions.ParseCSVIntent": {
        "file,delimiter,hasHeader,customDelimiter": "Parse ${file}",
        "file,hasHeader,delimiter": "Parse ${file}"
    },
    "com.sindresorhus.Actions.ParseJSON5Intent": {
        "file": "Parse ${file} into a dictionary"
    },
    "com.sindresorhus.Actions.RemoveDuplicatesFromListIntent": {
        "list": "Remove duplicates from ${list}"
    },
    "com.sindresorhus.Actions.ScanDocumentsIntent": {
        "": "Scan documents"
    },
    "com.sindresorhus.Actions.ScanQRCodesInImageIntent": {
        "image,multiple": "Scan QR codes in ${image}"
    },
    "com.sindresorhus.Actions.SetImageLocation": {
        "coordinateString,images": "Set location to ${coordinateString} for ${images}"
    },
    "com.sindresorhus.Actions.SymbolImageIntent": {
        "symbolName,size,rendering,color": "Get symbol ${symbolName} of size ${size} as ${rendering} ${color}",
        "symbolName,size,rendering,paletteColors": "Get symbol ${symbolName} of size ${size} as ${rendering} ${paletteColors}",
        "symbolName,size,rendering": "Get symbol ${symbolName} of size ${size} as ${rendering}"
    },
    "com.sindresorhus.Actions.TranscribeAudioIntent": {
        "file,locale,offline": "Transcribe ${file}"
    },
    "com.sindresorhus.Actions.WriteTextIntent": {
        "shouldEdit,editorTitle": "${shouldEdit} text",
        "shouldEdit,text,editorTitle": "${shouldEdit} ${text}"
    },
    "com.sindresorhus.One-Thing.GetTextColorIntent": {
        "": "Get menu bar text color"
    },
    "com.sindresorhus.One-Thing.GetTextIntent": {
        "textType": "Get menu bar ${textType}"
    },
    "com.sindresorhus.One-Thing.SetTextColorIntent": {
        "textColor": "Set menu bar text color to ${textColor}"
    },
    "com.sindresorhus.One-Thing.SetTextIntent": {
        "textType,text": "Set menu bar ${textType} to ${text}"
    },
    "com.tapbots.Ivory.PTHIvoryOpenFediverseURLIntent": {
        "url,account": "Open Fediverse ${url}"
    },
    "com.tapbots.Ivory.PTHIvoryPostStatusIntent": {
        "text,account,replyPostURL": "Post Status with ${text}"
    },
    "com.tapbots.Ivory.PTHIvoryOpenIntent": {
        "tab,account": "Open ${tab}",
        "tab,account,profile": "View @${profile}",
        "tab,query,account": "Search for “${query}”"
    },
    "com.tapbots.Ivory.PTHIvoryTimelineWidgetIntent": {
        "": "Timeline Widget Intent"
    },
    "com.tapbots.Ivory.PTHIvoryLatestFollowersWidgetIntent": {
        "": "Latest Followers Widget Intent"
    },
    "com.tapbots.Ivory.PTHIvoryFollowersCountWidgetIntent": {
        "": "Followers Count Widget Intent"
    },
    "com.tapbots.Ivory.PTHIvoryTimelineImageWidgetIntent": {
        "": "Timeline Image Widget Intent"
    },
    "com.tapbots.Ivory.PTHIvoryStatsWidgetIntent": {
        "": "Stats Widget Intent"
    },
    "com.todoist.ios.CreateTaskIntent": {
        "content,dueDate,priority,project,labels,section,contentDescription": "Add ${content}",
        "content,project,dueDate,priority,labels,contentDescription": "Add ${content}"
    },
    "com.todoist.ios.OpenTodayIntent": {
        "": "Open Today"
    },
    "com.todoist.ios.OpenUpcomingIntent": {
        "": "Open Upcoming"
    },
    "com.todoist.ios.OpenProjectIntent": {
        "": "Open Project"
    },
    "com.todoist.ios.OpenLabelIntent": {
        "": "Open Label"
    },
    "com.todoist.ios.OpenFilterIntent": {
        "": "Open Filter"
    },
    "com.todoist.ios.OpenViewIntent": {
        "viewMode": "Open ${viewMode}",
        "viewMode,filter": "Open ${viewMode} \"${filter}\"",
        "viewMode,label": "Open ${viewMode} \"${label}\"",
        "viewMode,project": "Open ${viewMode} \"${project}\""
    },
    "com.todoist.ios.GetProjectsIntent": {
        "": "Get Projects"
    },
    "com.todoist.ios.OpenProductivityIntent": {
        "": "Open Productivity"
    },
    "com.todoist.ios.OpenNextTaskIntent": {
        "": "Open Next Task"
    },
    "com.tplink.kasa-ios.TapoDeviceToggleIntent": {
        "devices,state": "Turn ${state} the ${devices}"
    },
    "com.tplink.kasa-ios.TapoBulbColorSetIntent": {
        "devices,color,brightness": "Change ${devices} to ${color} at ${brightness}%"
    },
    "com.tplink.kasa-ios.TapoRunShortcutIntent": {
        "shortcut": "Play the selected Kasa scene: ${shortcut}"
    },
    "com.tplink.kasa-ios.TapoTriggerAlarmIntent": {
        "device,degree,duration": "Trigger ${device} alarm",
        "device,degree,duration,alarm": "Trigger ${device} alarm , sounding ${alarm}"
    },
    "com.tplink.kasa-ios.TapoSetTemperatureIntent": {
        "device,temperature": "Set ${device} to ${temperature}°C"
    },
    "com.tplink.kasa-ios.KasaDeviceToggleIntent": {
        "devices,state": "Turn ${state} the ${devices}"
    },
    "com.tplink.kasa-ios.KasaColorSetIntent": {
        "devices,color,brightness": "Change ${devices} to ${color} at ${brightness}%"
    },
    "com.tplink.kasa-ios.KasaRunSceneIntent": {
        "scene": "Play the selected Kasa scene: ${scene}"
    },
    "com.wiheads.paste.CreateItemIntent": {
        "content,list": "Create item with ${content} in ${list}"
    },
    "com.wiheads.paste.CreatePinboardIntent": {
        "name": "Create pinboard ${name}"
    },
    "com.wiheads.paste.GetItemAtIndexIntent": {
        "index,list": "Get Item at ${index} from ${list}"
    },
    "com.wiheads.paste.GetLatestItemIntent": {
        "type,list": "Get latest ${type} item from ${list}"
    },
    "com.wiheads.paste.SelectListsWidgetConfigurationIntent": {
        "": "Select Lists"
    },
    "dk.simonbs.DataJar.DeleteValueIntent": {
        "keyPath,errorWhenValueNotFound,deleteStrategy": "Delete value for ${keyPath}"
    },
    "dk.simonbs.DataJar.GetValueIntent": {
        "keyPath,fallbackValues": "Get value for ${keyPath}"
    },
    "dk.simonbs.DataJar.SetValueIntent": {
        "keyPath,values,valueConversionMode,overwriteStrategy,filename": "Set ${keyPath} to ${values}"
    },
    "dk.simonbs.DataJar.InsertValueInArrayIntent": {
        "values,keyPath,insertionPoint,index,valueConversionMode": "Add ${values} at ${insertionPoint} ${index} of list at ${keyPath}",
        "values,keyPath,insertionPoint,valueConversionMode": "Add ${values} at ${insertionPoint} of list at ${keyPath}"
    },
    "dk.simonbs.DataJar.GetTypeOfValueIntent": {
        "keyPath": "Get type of value at ${keyPath}"
    },
    "dk.simonbs.DataJar.CheckIfValueExistsIntent": {
        "keyPath": "Check if value exists at ${keyPath}"
    },
    "dk.simonbs.DataJar.GetKeysIntent": {
        "keyPath,errorWhenValueNotFound,source": "Get keys in ${source} at ${keyPath}",
        "source": "Get keys in ${source}"
    },
    "dk.simonbs.DataJar.GetChildCountIntent": {
        "keyPath,errorWhenValueNotFound": "Count children at ${keyPath}"
    },
    "dk.simonbs.DataJar.ViewValueIntent": {
        "keyPath": "View value at ${keyPath}"
    },
    "dk.simonbs.Jayson.ViewJSONIntent": {
        "files,viewDestination,closeTabs,showText,filename,saveDestination": "View ${files} in ${viewDestination}",
        "files,viewDestination,filename,saveDestination": "View ${files} in ${viewDestination}"
    },
    "dk.simonbs.Jayson.GetFileIntent": {
        "filename,folder": "Get ${filename} from ${folder}"
    },
    "dk.simonbs.Jayson.PrettifyJSONIntent": {
        "json,compact,indentMode": "Prettify ${json}",
        "json,compact,indentMode,indentSpaceCount": "Prettify ${json}"
    },
    "dk.simonbs.Scriptable.RunScriptIntent": {
        "fileName": "Run \"${fileName}\""
    },
    "dk.simonbs.Scriptable.RunScriptWithArgumentsIntent": {
        "encodedArguments,fileName": "Run \"${fileName}\" with Arguments",
        "fileName": "Run \"${fileName}\""
    },
    "dk.simonbs.Scriptable.ParameterizedRunScriptIntent": {
        "fileName,parameter,files,images,urls,texts,runInApp": "Run ${fileName} with ${parameter}"
    },
    "dk.simonbs.Scriptable.CreateFileBookmarkIntent": {
        "name,location": "Create bookmark named ${name} for ${location}"
    },
    "dk.simonbs.Scriptable.RunScriptInlineIntent": {
        "parameter,texts,urls,images,files,script,runInApp": "Run with ${parameter}"
    },
    "dk.simonbs.Scriptable.RunScriptWidgetConfigurationIntent": {
        "": "Run Script"
    },
    "dk.simonbs.Scriptable.RefreshAllWidgetsIntent": {
        "": "Refresh all widgets"
    },
    "fm.overcast.overcast.OCChapterNextIntent": {
        "": "Next Chapter"
    },
    "fm.overcast.overcast.OCChapterPreviousIntent": {
        "": "Previous Chapter"
    },
    "fm.overcast.overcast.OCCurrentEpisodeInfoIntent": {
        "": "Current Episode Info"
    },
    "fm.overcast.overcast.OCPauseIntent": {
        "": "Pause"
    },
    "fm.overcast.overcast.OCPlayIntent": {
        "": "Play"
    },
    "fm.overcast.overcast.OCPlaybackSpeedIntent": {
        "speed": "Set Playback Speed"
    },
    "fm.overcast.overcast.OCPodcastNextIntent": {
        "": "Next Podcast"
    },
    "fm.overcast.overcast.OCPodcastPreviousIntent": {
        "": "Previous Podcast"
    },
    "fm.overcast.overcast.OCSeekBackIntent": {
        "seconds": "Seek Back"
    },
    "fm.overcast.overcast.OCSeekForwardIntent": {
        "seconds": "Seek Forward"
    },
    "fm.overcast.overcast.OCSleepTimerCancelIntent": {
        "": "Cancel Sleep Timer"
    },
    "fm.overcast.overcast.OCSleepTimerEOFIntent": {
        "": "Sleep After Current Episode"
    },
    "fm.overcast.overcast.OCSleepTimerIntervalIntent": {
        "interval": "Sleep After Time Interval"
    },
    "fm.overcast.overcast.OCSmartSpeedIntent": {
        "state": "Set Smart Speed"
    },
    "fm.overcast.overcast.OCStarIntent": {
        "state": "Star Current Episode"
    },
    "fm.overcast.overcast.OCVoiceBoostIntent": {
        "state": "Set Voice Boost"
    },
    "fm.overcast.overcast.PlayFeed": {
        "feed": "Play ${feed}"
    },
    "fm.overcast.overcast.PlayPlaylist": {
        "playlist": "Play ${playlist}"
    },
    "in.muditbhargava.LookUp.AddToCollectionIntent": {
        "word,collectionsNamed": "Add ${word} to ${collectionsNamed}"
    },
    "in.muditbhargava.LookUp.ClipboardSearchIntent": {
        "lookupType,intentWord": "Search for ${lookupType} of ${intentWord}"
    },
    "in.muditbhargava.LookUp.ExportCollectionIntent": {
        "collection": "Export ${collection} as PDF"
    },
    "in.muditbhargava.LookUp.FindCollectedWordsIntent": {
        "collection,sortOptions,sortOrderAlphabetically,shouldLimit,shouldFilterByDate": "Find words in ${collection}",
        "collection,sortOptions,sortOrderAlphabetically,shouldLimit,fetchLimit,shouldFilterByDate": "Find words in ${collection}",
        "collection,sortOptions,sortOrderDateCreated,shouldLimit,shouldFilterByDate": "Find words in ${collection}",
        "collection,sortOptions,sortOrderDateCreated,shouldLimit,fetchLimit,shouldFilterByDate": "Find words in ${collection}",
        "collection,sortOptions,shouldLimit,shouldFilterByDate": "Find words in ${collection}",
        "collection,sortOptions,shouldLimit,fetchLimit,shouldFilterByDate": "Find words in ${collection}"
    },
    "in.muditbhargava.LookUp.PronunciationIntent": {
        "word": "Pronounce ${word}"
    },
    "in.muditbhargava.LookUp.WoDIntent": {
        "": "Get Word of the Day"
    },
    "io.pushcut.Pushcut.RunShortcutIntent": {
        "shortcut,eventType,arrivingLocation,input,reminderIdentifier": "Schedule ${shortcut} ${eventType} at ${arrivingLocation}",
        "shortcut,eventType,input,reminderIdentifier": "Schedule ${shortcut}${eventType}",
        "shortcut,eventType,leavingLocation,input,reminderIdentifier": "Schedule ${shortcut} ${eventType} from ${leavingLocation}",
        "shortcut,eventType,time,input,reminderIdentifier": "Schedule ${shortcut} ${eventType} ${time}"
    },
    "io.pushcut.Pushcut.ShowNotificationIntent": {
        "notification,eventType,arrivingLocation,title,text,input,reminderIdentifier,image,timeSensitive,threadId": "Show ${notification} ${eventType} at ${arrivingLocation}",
        "notification,eventType,leavingLocation,title,text,input,reminderIdentifier,image,timeSensitive,threadId": "Show ${notification} ${eventType} from ${leavingLocation}",
        "notification,eventType,time,title,text,input,reminderIdentifier,image,timeSensitive,threadId": "Show ${notification} ${eventType} ${time}",
        "notification,eventType,title,text,input,reminderIdentifier,image,timeSensitive,threadId": "Show ${notification} ${eventType}"
    },
    "io.pushcut.Pushcut.CancelNotificationIntent": {
        "reminderIdentifier,shouldCancelRemote": "Cancel notification ${reminderIdentifier}"
    },
    "io.pushcut.Pushcut.SendNotificationIntent": {
        "notification,asJson": "Send notification ${notification}",
        "notification,asJson,delay": "Send notification ${notification} with JSON",
        "notification,asJson,devices,title,text,input,timeSensitive,image,reminderIdentifier,delay,threadId": "Send notification ${notification} to ${devices}",
        "notification,asJson,json,delay": "Send notification ${notification} with JSON"
    },
    "io.pushcut.Pushcut.ExecuteServerActionIntent": {
        "actionType,homekit,isDelayed": "Execute ${homekit} on server ${isDelayed}",
        "actionType,homekit,isDelayed,delay,actionIdentifier": "Execute ${homekit} on server ${isDelayed} ${delay}",
        "actionType,homekit,isDelayed,waitForResult": "Execute ${homekit} on server ${isDelayed}",
        "actionType,isDelayed": "Execute Server Action",
        "actionType,isDelayed,delay,actionIdentifier": "Execute Server Action",
        "actionType,isDelayed,waitForResult": "Execute Server Action",
        "actionType,shortcut,input,isDelayed": "Execute ${shortcut} on server ${isDelayed}",
        "actionType,shortcut,input,isDelayed,delay,actionIdentifier": "Execute ${shortcut} on server ${isDelayed} ${delay}",
        "actionType,shortcut,input,isDelayed,waitForResult": "Execute ${shortcut} on server ${isDelayed} "
    },
    "io.pushcut.Pushcut.CancelServerActionIntent": {
        "actionIdentifier": "Cancel Server Action ${actionIdentifier}"
    },
    "io.pushcut.Pushcut.SendNotificationFocusFilter": {
        "": "SendNotificationFocusFilter.Title"
    },
    "io.pushcut.Pushcut.CreateServerSchedule": {
        "taskType,shortcutTask,jobType,weekdays,time,shouldExecuteOnServerStart,note": "CreateServerSchedule.CreateScheduleAtTimeShortcut${taskType}${shortcutTask}${jobType}${weekdays}${time}",
        "taskType,shortcutTask,jobType,interval,intervalUnit,shouldExecuteOnServerStart,note": "CreateServerSchedule.CreateScheduleShortcutInterval${taskType}${shortcutTask}${jobType}${interval}${intervalUnit}",
        "taskType,jobType,shouldExecuteOnServerStart,note": "CreateServerSchedule.CreateScheduleDefault${taskType}${jobType}",
        "taskType,homekitTask,jobType,weekdays,time,shouldExecuteOnServerStart,note": "CreateServerSchedule.CreateScheduleHomekitAtTime${taskType}${homekitTask}${jobType}${weekdays}${time}",
        "taskType,homekitTask,jobType,interval,intervalUnit,shouldExecuteOnServerStart,note": "CreateServerSchedule.CreateScheduleHomekitInterval${taskType}${homekitTask}${jobType}${interval}${intervalUnit}"
    },
    "io.pushcut.Pushcut.EnableDisableServerSchedule": {
        "shouldEnable,schedule": "EnableDisableServerSchedule.ParameterSummary${shouldEnable}${schedule}"
    },
    "io.pushcut.Pushcut.GetServerStatus": {
        "": "GetServerStatus.Title"
    },
    "io.pushcut.Pushcut.OpenPushcut": {
        "action": "Open Pushcut and ${action}"
    },
    "io.pushcut.Pushcut.RunHomeKitScene": {
        "scene": "RunHomeKitScene.ParameterSummary${scene}"
    },
    "io.pushcut.Pushcut.RunIntegration": {
        "action,input": "RunIntegration.ParameterSummary${action}${input}",
        "action": "RunIntegration.ParameterSummary${action}"
    },
    "io.pushcut.Pushcut.RunShortcut": {
        "shortcutName,input": "RunShortcut.ParameterSummary${shortcutName}${input}"
    },
    "io.pushcut.Pushcut.UploadImageIntent": {
        "image,imageName": "UploadImage.ParameterSummary${image}${imageName}"
    },
    "io.robbie.HomeAssistant.CallServiceIntent": {
        "service,payload,server": "Call ${service} with data"
    },
    "io.robbie.HomeAssistant.SendLocationIntent": {
        "location": "Send ${location} to Home Assistant"
    },
    "io.robbie.HomeAssistant.FireEventIntent": {
        "eventName,eventData,server": "Fire ${eventName} with data"
    },
    "io.robbie.HomeAssistant.GetCameraImageIntent": {
        "cameraID,server": "Get image of ${cameraID}"
    },
    "io.robbie.HomeAssistant.RenderTemplateIntent": {
        "template,server": "Render the provided template"
    },
    "io.robbie.HomeAssistant.PerformActionIntent": {
        "action": "Perform ${action}"
    },
    "io.robbie.HomeAssistant.WidgetActionsIntent": {
        "": "Actions"
    },
    "io.robbie.HomeAssistant.UpdateSensorsIntent": {
        "": "Update Sensors"
    },
    "io.robbie.HomeAssistant.OpenPageIntent": {
        "page": "Open ${page}"
    },
    "io.robbie.HomeAssistant.WidgetOpenPageIntent": {
        "": "Open Page"
    },
    "io.robbie.HomeAssistant.AssistIntent": {
        "text,server,language": "Assist with \"${text}\""
    },
    "ke.bou.GizmoPack.AddWalletPassIntent": {
        "passes,preview": "Add ${passes} to Wallet"
    },
    "ke.bou.GizmoPack.CreateWalletPassIntent": {
        "title,descript,barcode,barcodeData,barcodeLabel,type,couponPrimary,couponStrip,header,secondary,auxiliary,back,backgroundColor,foregroundColor,labelColor,icon,logo,location,distance,date": "Create ${type} with ${title} and ${descript}",
        "title,descript,barcode,barcodeData,barcodeLabel,type,eventTicketPrimary,header,secondary,auxiliary,back,backgroundColor,foregroundColor,labelColor,icon,logo,eventTicketStrip,eventTicketBackground,eventTicketThumbnail,location,distance,date": "Create ${type} with ${title} and ${descript}",
        "title,descript,barcode,barcodeData,barcodeLabel,type,genericPrimary,genericThumbnail,header,secondary,auxiliary,back,backgroundColor,foregroundColor,labelColor,icon,logo,location,distance,date": "Create ${type} with ${title} and ${descript}",
        "title,descript,barcode,barcodeData,barcodeLabel,type,storeCardPrimary,storeCardStrip,header,secondary,auxiliary,back,backgroundColor,foregroundColor,labelColor,icon,logo,location,distance,date": "Create ${type} with ${title} and ${descript}",
        "title,descript,barcode,barcodeData,barcodeLabel,type,transitType,from,to,boardingPassFooter,header,secondary,auxiliary,back,backgroundColor,foregroundColor,labelColor,icon,logo,location,distance,date": "Create ${transitType} ${type} with ${title} and ${descript}"
    },
    "ke.bou.GizmoPack.FuzzyFinderIntent": {
        "items": "Fuzzy find in ${items}"
    },
    "ke.bou.GizmoPack.GenerateCSVIntent": {
        "rows,delimiter,allFields": "Create CSV from ${rows}",
        "rows,delimiter,allFields,customDelimiter": "Create CSV from ${rows} separated by ${customDelimiter}",
        "rows,delimiter,allFields,fields": "Create CSV from ${rows} with ${fields}",
        "rows,delimiter,fields,allFields,customDelimiter": "Create CSV from ${rows} with ${fields} separated by ${customDelimiter}"
    },
    "ke.bou.GizmoPack.ParseCSVIntent": {
        "file,delimiter,hasHeader,customDelimiter": "Parse CSV ${file} separated by ${customDelimiter}",
        "file,delimiter,hasHeader,fields,customDelimiter": "Parse CSV ${file} as ${fields} separated by ${customDelimiter}",
        "file,hasHeader,delimiter": "Parse CSV ${file}",
        "file,hasHeader,fields,delimiter": "Parse CSV ${file} as ${fields}"
    },
    "ke.bou.GizmoPack.QueryDocumentIntent": {
        "file,queryType,cssQuery,oneResult,outputType": "Query ${file} for ${cssQuery}",
        "file,queryType,oneResult,outputType": "Choose a ${queryType}",
        "file,queryType,xpathQuery,oneResult,outputType": "Query ${file} for ${xpathQuery}"
    },
    "ke.bou.GizmoPack.SnapshotMapIntent": {
        "location,mapType,style,pointsOfInterest,width,height,latitude": "Take snapshot of ${location}"
    },
    "ke.bou.GizmoPack.UniversalVariablesIntent": {
        "operation,addValue,addName,addPosition,addIndex,database": "${operation} ${addValue} to ${addName} at ${addPosition} in ${database}",
        "operation,database": "${operation} from ${database}",
        "operation,database,getName": "${operation} ${getName} from ${database}",
        "operation,deleteName,database": "${operation} ${deleteName} from ${database}",
        "operation,removePosition,removeIndex,removeName,database": "${operation} value at ${removePosition} in ${removeName} from ${database}",
        "operation,setValue,setName,setReturnPrevious,database": "${operation} ${setName} to ${setValue} in ${database}"
    },
    "ke.bou.GizmoPack.QueryRecordsIntent": {
        "fields,input,outputType,hasWhere,hasGroupBy,groupByClause,hasOrderBy,hasLimit": "Select ${fields} from ${input} group by ${groupByClause}",
        "fields,input,outputType,hasWhere,hasGroupBy,groupByClause,hasOrderBy,hasLimit,limitClause": "Select ${fields} from ${input} group by ${groupByClause} limit ${limitClause}",
        "fields,input,outputType,hasWhere,hasGroupBy,groupByClause,hasOrderBy,orderByClause,hasLimit": "Select ${fields} from ${input} group by ${groupByClause} order by ${orderByClause}",
        "fields,input,outputType,hasWhere,hasGroupBy,hasOrderBy,groupByClause,orderByClause,hasLimit,limitClause": "Select ${fields} from ${input} group by ${groupByClause} order by ${orderByClause} limit ${limitClause}",
        "fields,input,outputType,hasWhere,hasGroupBy,hasOrderBy,hasLimit": "Select ${fields} from ${input}",
        "fields,input,outputType,hasWhere,hasGroupBy,hasOrderBy,hasLimit,limitClause": "Select ${fields} from ${input} limit ${limitClause}",
        "fields,input,outputType,hasWhere,hasGroupBy,hasOrderBy,orderByClause,hasLimit": "Select ${fields} from ${input} order by ${orderByClause}",
        "fields,input,outputType,hasWhere,hasGroupBy,hasOrderBy,orderByClause,hasLimit,limitClause": "Select ${fields} from ${input} order by ${orderByClause} limit ${limitClause}",
        "fields,input,outputType,hasWhere,whereClause,hasGroupBy,groupByClause,hasOrderBy,hasLimit": "Select ${fields} from ${input} where ${whereClause} group by ${groupByClause}",
        "fields,input,outputType,hasWhere,whereClause,hasGroupBy,groupByClause,hasOrderBy,hasLimit,limitClause": "Select ${fields} from ${input} where ${whereClause} group by ${groupByClause} limit ${limitClause}",
        "fields,input,outputType,hasWhere,whereClause,hasGroupBy,groupByClause,hasOrderBy,orderByClause,hasLimit": "Select ${fields} from ${input} where ${whereClause} group by ${groupByClause} order by ${orderByClause}",
        "fields,input,outputType,hasWhere,whereClause,hasGroupBy,hasOrderBy,hasLimit": "Select ${fields} from ${input} where ${whereClause}",
        "fields,input,outputType,hasWhere,whereClause,hasGroupBy,hasOrderBy,hasLimit,limitClause": "Select ${fields} from ${input} where ${whereClause} limit ${limitClause}",
        "fields,input,outputType,hasWhere,whereClause,hasGroupBy,hasOrderBy,orderByClause,hasLimit": "Select ${fields} from ${input} where ${whereClause} order by ${orderByClause}",
        "fields,input,outputType,hasWhere,whereClause,hasGroupBy,hasOrderBy,orderByClause,hasLimit,limitClause": "Select ${fields} from ${input} where ${whereClause} order by ${orderByClause} limit ${limitClause}",
        "input,fields,outputType,hasWhere,hasGroupBy,hasOrderBy,whereClause,groupByClause,orderByClause,hasLimit,limitClause": "Select ${fields} from ${input} where ${whereClause} group by ${groupByClause} order by ${orderByClause} limit ${limitClause}"
    },
    "ke.bou.GizmoPack.QueryJSONIntent": {
        "input,queryType,jqQuery,slurp": "Process ${input} with ${queryType} query ${jqQuery}",
        "input,queryType,jsonPathQuery": "Process ${input} with ${queryType} query ${jsonPathQuery}"
    },
    "ke.bou.GizmoPack.CombineListsIntent": {
        "firstList,secondList,operation,removeDuplicates": "${operation} ${firstList} with ${secondList}"
    },
    "ke.bou.GizmoPack.TrimFileIntent": {
        "file,characterClass,position": "Drop ${characterClass} from ${position} of ${file}",
        "file,characterClass,position,lineCount": "Drop ${lineCount} ${characterClass} from ${position} of ${file}"
    },
    "ke.bou.GizmoPack.FilterDictionariesIntent": {
        "dictionaries,key,operation": "Filter ${dictionaries} which ${operation} ${key}",
        "dictionaries,key,operation,isNotValue": "Filter ${dictionaries} where ${key} ${operation} ${isNotValue}",
        "dictionaries,key,operation,isValue": "Filter ${dictionaries} where ${key} ${operation} ${isValue}"
    },
    "ke.bou.GizmoPack.EncodeHexIntent": {
        "input,operation": "${operation} ${input} as hex"
    },
    "ke.bou.GizmoPack.HashDataIntent": {
        "input,algorithm,hmacMd5Key,outputEncoding": "Generate ${algorithm} hash of ${input} with ${hmacMd5Key}",
        "input,algorithm,hmacSha1Key,outputEncoding": "Generate ${algorithm} hash of ${input} with ${hmacSha1Key}",
        "input,algorithm,hmacSha224Key,outputEncoding": "Generate ${algorithm} hash of ${input} with ${hmacSha224Key}",
        "input,algorithm,hmacSha256Key,outputEncoding": "Generate ${algorithm} hash of ${input} with ${hmacSha256Key}",
        "input,algorithm,hmacSha384Key,outputEncoding": "Generate ${algorithm} hash of ${input} with ${hmacSha384Key}",
        "input,algorithm,outputEncoding": "Generate ${algorithm} hash of ${input}",
        "input,algorithm,outputEncoding,hmacSha512Key": "Generate ${algorithm} hash of ${input} with ${hmacSha512Key}"
    },
    "ke.bou.GizmoPack.RandomDataIntent": {
        "size,outputEncoding": "Generate ${size} bytes of random data"
    },
    "ke.bou.GizmoPack.ShortcutMetadataIntent": {
        "shortcut": "Get metadata for ${shortcut}"
    },
    "ke.bou.GizmoPack.EncodePlistIntent": {
        "input,operation,format": "${operation} ${input} as ${format} property list",
        "operation,input": "${operation} ${input} property list"
    },
    "ke.bou.GizmoPack.OverwriteFileIntent": {
        "file,overwrite,isFolder": "Overwrite ${file} with ${overwrite}",
        "file,overwrite,isFolder,path": "Overwrite ${file}/${path} with ${overwrite}"
    },
    "ke.bou.GizmoPack.ParseDateIntent": {
        "date,format,errorIfInvalid,locale": "Parse ${date} as ${format} date"
    },
    "ke.bou.GizmoPack.FileInfoIntent": {
        "file": "Get info on ${file}"
    },
    "ke.bou.GizmoPack.SignJWTIntent": {
        "expiration,key,algorithm,issuer,audience,keyID,subject,jwtID": "Sign JWT with Key ${key} using ${algorithm}"
    },
    "ke.bou.GizmoPack.WakeOnLANIntent": {
        "address,broadcastAddress,port": "Send Wake on LAN to ${address}"
    },
    "maccatalyst.com.Christopher-Hannah.Text-Case.TextCaseIntent": {
        "text,format": "Format ${text} using ${format} "
    },
    "maccatalyst.com.Christopher-Hannah.Text-Case.FormatWithFlowIntent": {
        "text,flow": "Format ${text} using ${flow}"
    },
    "maccatalyst.com.Christopher-Hannah.Text-Case.ReplaceIntent": {
        "match,replacement,text,mode": "Replace ${mode} occurrence(s) of ${match}with ${replacement} in ${text}"
    },
    "maccatalyst.com.Christopher-Hannah.Text-Case.RemoveIntent": {
        "match,text,mode": "Remove ${mode} occurrence(s) of ${match} in ${text}"
    },
    "maccatalyst.com.Christopher-Hannah.Text-Case.AddPrefixIntent": {
        "prefix,text": "Add prefix ${prefix}to ${text}"
    },
    "maccatalyst.com.Christopher-Hannah.Text-Case.AddSuffixIntent": {
        "suffix,text": "Add suffix ${suffix}to ${text}"
    },
    "maccatalyst.com.Christopher-Hannah.Text-Case.ReplaceWithLineBreaksIntent": {
        "match,text": "Replace all ${match} in ${text} with a line break"
    },
    "maccatalyst.com.Christopher-Hannah.Text-Case.ReplaceLineBreaksWithIntent": {
        "with,text": "Replace all line breaks in ${text} with ${with}"
    },
    "me.damir.dropover-mac.AddToShelfIntent": {
        "files": "Add ${files} to a new shelf",
        "files,append": "Add ${files} to a shelf"
    },
    "me.damir.dropover-mac.CreateCloudSessionIntent": {
        "files": "Upload ${files} to Dropover Cloud and returns a shareable link",
        "files,title,copyToClipboard,expirationDate,createsZip": "Upload ${files} to Dropover Cloud and returns a shareable link"
    },
    "me.damir.dropover-mac.GetFilesFromShelfIntent": {
        "closeShelf": "Gets file from Shelf"
    },
    "me.damir.dropover-mac.OpenRecentShelfIntent": {
        "": "Open recent Dropover shelf"
    },
    "net.shinyfrog.bear-iOS.SFCreateNoteIntent": {
        "title,text,tags": "Create a note with ${text}"
    },
    "net.shinyfrog.bear-iOS.SFCreateNoteFromURLIntent": {
        "URL": "Create note from ${URL}",
        "URL,tags": "Create note from ${URL}"
    },
    "net.shinyfrog.bear-iOS.SFGetNoteIntent": {
        "title": "Get note ${title}"
    },
    "net.shinyfrog.bear-iOS.SFAddToNoteIntent": {
        "note,text,insert,timestamp,header": "Add ${text} to ${note}"
    },
    "net.shinyfrog.bear-iOS.SFTrashNoteIntent": {
        "note": "Trash the note: ${note} "
    },
    "net.shinyfrog.bear-iOS.SFArchiveNoteIntent": {
        "note": "Archive the note: ${note}"
    },
    "net.shinyfrog.bear-iOS.SFPinNoteIntent": {
        "note,pin": "Set pin state for ${note} to ${pin}"
    },
    "net.shinyfrog.bear-iOS.SFSearchNotesIntent": {
        "term,limit,openInBear": "Search notes containing ${term}",
        "term,openInBear,limit,searchLimit": "Search notes containing ${term}"
    },
    "net.shinyfrog.bear-iOS.SFSearchTagsIntent": {
        "term,limit": "Search tags containing ${term}",
        "term,limit,searchLimit": "Search tags containing ${term}"
    },
    "net.shinyfrog.bear-iOS.SFOpenNoteIntent": {
        "note": "Open the note: ${note}"
    },
    "net.shinyfrog.bear-iOS.SFOpenTagIntent": {
        "tag": "Open the tag: ${tag}"
    },
    "net.shinyfrog.bear-iOS.SFOpenLocationIntent": {
        "location": "Open the section: ${location}"
    },
    "net.shinyfrog.bear-iOS.SFGetTagIntent": {
        "tag": "Get the tag: ${tag}"
    },
    "net.shinyfrog.bear-iOS.SFAddFilesToNoteIntent": {
        "files,note,insert": "Add ${files}to ${note}"
    },
    "net.shinyfrog.bear-iOS.SFAddTagsToNoteIntent": {
        "note,tags": "Add ${tags}to ${note}"
    },
    "net.shinyfrog.bear-iOS.SFGetNoteFilesIntent": {
        "note": "Get files of ${note}"
    },
    "net.shinyfrog.bear-iOS.SFRemoveTagIntent": {
        "tag,note": "Remove tag ${tag} from ${note}"
    },
    "net.shinyfrog.bear-iOS.SFExportNoteIntent": {
        "note,format": "Export ${note}as ${format}"
    },
    "org.joinmastodon.app.SendPostIntent": {
        "content,visibility,accounts": "Post ${content} on Mastodon"
    },
    "AsheKube.app.a-Shell-mini.ExecuteCommandIntent": {
        "command,openWindow,keepGoing": "Execute ${command}"
    },
    "AsheKube.app.a-Shell-mini.GetFileIntent": {
        "fileName,errorIfNotFound": "Get ${fileName} from a-Shell"
    },
    "AsheKube.app.a-Shell-mini.PutFileIntent": {
        "file,overwrite": "Copy ${file} to a-Shell"
    },
    "AsheKube.app.a-Shell.ExecuteCommandIntent": {
        "command,openWindow,keepGoing": "Execute ${command}"
    },
    "AsheKube.app.a-Shell.GetFileIntent": {
        "fileName,errorIfNotFound": "Get ${fileName} from a-Shell"
    },
    "AsheKube.app.a-Shell.PutFileIntent": {
        "file,overwrite": "Copy ${file} to a-Shell"
    },
    "com.flexibits.fantastical2.iphone.FKRUpcomingCalendarItemIntent": {
        "itemType": "Upcoming ${itemType}"
    },
    "com.flexibits.fantastical2.iphone.FKRShowScheduleIntent": {
        "date": "Schedule for ${date}",
        "day,date": "Schedule for ${day}"
    },
    "com.flexibits.fantastical2.iphone.FKROverdueRemindersIntent": {
        "": "Overdue tasks"
    },
    "com.flexibits.fantastical2.iphone.FKRShowCalendarIntent": {
        "calendarName,date": "Show “${calendarName}” calendar"
    },
    "com.flexibits.fantastical2.iphone.FKRShowListIntent": {
        "listName,date": "Show \"${listName}\" list"
    },
    "com.flexibits.fantastical2.iphone.FKRCreateFromClipboardIntent": {
        "": "Create from Clipboard"
    },
    "com.flexibits.fantastical2.iphone.FKRCreateFromInputIntent": {
        "": "Create event or task"
    },
    "com.flexibits.fantastical2.iphone.FKROpenOnDateIntent": {
        "date": "Open Fantastical to ${date}"
    },
    "com.flexibits.fantastical2.iphone.FKRChangeCalendarSetIntent": {
        "calendarSet": "Change active calendar set to ${calendarSet}"
    },
    "com.flexibits.fantastical2.iphone.FKRDateWidgetConfigIntent": {
        "": "Date Widget Configuration"
    },
    "com.flexibits.fantastical2.iphone.FKRUpNextWidgetConfigIntent": {
        "": "Up Next Widget Configuration"
    },
    "com.flexibits.fantastical2.iphone.FKREventListWidgetConfigIntent": {
        "": "Event List Widget Configuration"
    },
    "com.flexibits.fantastical2.iphone.FKRDateCalendarWidgetConfigIntent": {
        "": "Date Calendar Widget Configuration"
    },
    "com.flexibits.fantastical2.iphone.FKRCalendarWidgetConfigIntent": {
        "": "Calendar Widget Configuration"
    },
    "com.flexibits.fantastical2.iphone.FKREventListCalendarWidgetConfigIntent": {
        "": "Event List Calendar Widget Configuration"
    },
    "com.flexibits.fantastical2.iphone.FKREventListSmallWidgetConfigIntent": {
        "": "Event List Small Widget Config"
    },
    "com.flexibits.fantastical2.iphone.FKRActionWidgetConfigIntent": {
        "": "Action Widget Config"
    },
    "com.flexibits.fantastical2.iphone.FKRGetAttendeesFromEventIntent": {
        "calendarItem": "Get invitees from ${calendarItem}"
    },
    "com.flexibits.fantastical2.iphone.FKRChangeCalendarViewIntent": {
        "view": "Switch to ${view}"
    },
    "com.flexibits.fantastical2.iphone.FKRUpNextLockScreenWidgetConfigIntent": {
        "": "Up Next Lock Screen Widget Config"
    },
    "com.flexibits.fantastical2.iphone.FKRActionLockScreenWidgetConfigIntent": {
        "": "Action Lock Screen Widget Config"
    },
    "com.flexibits.fantastical2.iphone.FKRCalendarLockScreenWidgetConfigIntent": {
        "": "Calendar Lock Screen Widget Config"
    },
    "com.flexibits.fantastical2.iphone.FantasticalFocusFilterIntent": {
        "": "Filter Calendar Sets"
    },
    "com.omnigroup.OmniFocus3.MacAppStore.RunOmniJSIntent": {
        "script,associatedFiles,input": "Run a script with ${input} via Omni Automation"
    },
    "com.omnigroup.OmniFocus3.MacAppStore.RunPlugInIntent": {
        "pluginAction": "Run the ${pluginAction} Omni Automation Plug-In"
    },
    "com.omnigroup.OmniFocus3.MacAppStore.AddTaskIntent": {
        "title,deferDate,dueDate,flagged,estimatedMinutes,note,tags,project,attachments": "Add ${title} to ${project} "
    },
    "com.omnigroup.OmniFocus3.MacAppStore.FindTasksIntent": {
        "terms,project,tagCriteriaType,allOfTags,availabilityType,flaggedStatusType,deferUntilLowerBound,deferUntilUpperBound,dueDateLowerBound,dueDateUpperBound,limitItemsCount,limitByDates,completionDateLowerBound,completionDateUpperBound,projectCriteriaType,taskSortType": "Find ${availabilityType} Items with Dates",
        "terms,project,tagCriteriaType,allOfTags,availabilityType,flaggedStatusType,limitByDates,limitItemsCount,projectCriteriaType,taskSortType": "Find ${availabilityType} Items",
        "terms,project,tagCriteriaType,anyOfTags,availabilityType,flaggedStatusType,deferUntilLowerBound,deferUntilUpperBound,dueDateLowerBound,dueDateUpperBound,limitItemsCount,limitByDates,completionDateLowerBound,completionDateUpperBound,projectCriteriaType,taskSortType": "Find ${availabilityType} Items with Dates",
        "terms,project,tagCriteriaType,anyOfTags,availabilityType,flaggedStatusType,limitByDates,limitItemsCount,projectCriteriaType,taskSortType": "Find ${availabilityType} Items",
        "terms,project,tagCriteriaType,availabilityType,flaggedStatusType,deferUntilLowerBound,deferUntilUpperBound,dueDateLowerBound,dueDateUpperBound,limitItemsCount,limitByDates,completionDateLowerBound,completionDateUpperBound,projectCriteriaType,taskSortType": "Find ${availabilityType} Items with Dates",
        "terms,project,tagCriteriaType,availabilityType,flaggedStatusType,limitByDates,limitItemsCount,projectCriteriaType,taskSortType": "Find ${availabilityType} Items",
        "terms,project,tagCriteriaType,flaggedStatusType,dueDateLowerBound,dueDateUpperBound,deferUntilLowerBound,deferUntilUpperBound,availabilityType,noneOfTags,limitItemsCount,limitByDates,completionDateLowerBound,completionDateUpperBound,projectCriteriaType,taskSortType": "Find ${availabilityType} Items with Dates",
        "terms,project,tagCriteriaType,noneOfTags,availabilityType,flaggedStatusType,limitByDates,limitItemsCount,projectCriteriaType,taskSortType": "Find ${availabilityType} Items",
        "terms,projectCriteriaType,tagCriteriaType,allOfTags,availabilityType,flaggedStatusType,limitByDates,deferUntilLowerBound,deferUntilUpperBound,dueDateLowerBound,dueDateUpperBound,completionDateLowerBound,completionDateUpperBound,limitItemsCount,taskSortType": "Find ${availabilityType} Items with Dates",
        "terms,projectCriteriaType,tagCriteriaType,allOfTags,availabilityType,flaggedStatusType,limitByDates,limitItemsCount,taskSortType": "Find ${availabilityType} Items",
        "terms,projectCriteriaType,tagCriteriaType,anyOfTags,availabilityType,flaggedStatusType,limitByDates,deferUntilLowerBound,deferUntilUpperBound,dueDateLowerBound,dueDateUpperBound,completionDateLowerBound,completionDateUpperBound,limitItemsCount,taskSortType": "Find ${availabilityType} Items with Dates",
        "terms,projectCriteriaType,tagCriteriaType,anyOfTags,availabilityType,flaggedStatusType,limitByDates,limitItemsCount,taskSortType": "Find ${availabilityType} Items",
        "terms,projectCriteriaType,tagCriteriaType,availabilityType,flaggedStatusType,limitByDates,deferUntilLowerBound,deferUntilUpperBound,dueDateLowerBound,dueDateUpperBound,completionDateLowerBound,completionDateUpperBound,limitItemsCount,taskSortType": "Find ${availabilityType} Items with Dates",
        "terms,projectCriteriaType,tagCriteriaType,availabilityType,flaggedStatusType,limitByDates,limitItemsCount,taskSortType": "Find ${availabilityType} Items",
        "terms,projectCriteriaType,tagCriteriaType,noneOfTags,availabilityType,flaggedStatusType,limitByDates,deferUntilLowerBound,deferUntilUpperBound,dueDateLowerBound,dueDateUpperBound,completionDateLowerBound,completionDateUpperBound,limitItemsCount,taskSortType": "Find ${availabilityType} Items with Dates",
        "terms,projectCriteriaType,tagCriteriaType,noneOfTags,availabilityType,flaggedStatusType,limitByDates,limitItemsCount,taskSortType": "Find ${availabilityType} Items"
    },
    "com.omnigroup.OmniFocus3.MacAppStore.GetDatabaseObjectFromInputIntent": {
        "input": "Process ${input} into a Database Object Result"
    },
    "com.omnigroup.OmniFocus3.MacAppStore.ShowFromChoiceIntent": {
        "chooseFromListType": "Show ${chooseFromListType} in OmniFocus",
        "chooseFromListType,folder": "Show ${chooseFromListType} ${folder} in OmniFocus",
        "chooseFromListType,perspective": "Show ${chooseFromListType} ${perspective} in OmniFocus",
        "chooseFromListType,project": "Show ${chooseFromListType} ${project} in OmniFocus",
        "chooseFromListType,tag": "Show ${chooseFromListType} ${tag} in OmniFocus",
        "chooseFromListType,task": "Show ${chooseFromListType} ${task} in OmniFocus"
    },
    "com.omnigroup.OmniFocus3.MacAppStore.AddTaskPaperIntent": {
        "taskPaperInput,targetTask,targetType": "Add ${taskPaperInput} to ${targetType} ${targetTask}",
        "taskPaperInput,targetType": "Add ${taskPaperInput} to ${targetType}",
        "taskPaperInput,targetType,targetFolder": "Add ${taskPaperInput} to ${targetType} ${targetFolder}",
        "taskPaperInput,targetType,targetProject": "Add ${taskPaperInput} to ${targetType} ${targetProject}"
    },
    "com.omnigroup.OmniFocus3.MacAppStore.TodaysForecastIntent": {
        "sections": "Today's Forecast"
    },
    "com.omnigroup.OmniFocus3.MacAppStore.FindTagsIntent": {
        "title": "Find Tags where title contains ${title}"
    },
    "com.omnigroup.OmniFocus3.MacAppStore.FindProjectsIntent": {
        "title,folders": "Find Projects where title contains ${title}"
    },
    "com.omnigroup.OmniFocus3.MacAppStore.SelectPerspectiveIntent": {
        "": "Select Perspective"
    },
    "com.omnigroup.OmniFocus3.MacAppStore.ConfigureForecastWidgetIntent": {
        "": "Configure Forecast Widget"
    },
    "com.omnigroup.OmniFocus3.MacAppStore.SelectPerspectiveLockScreenIntent": {
        "": "Select Perspective"
    },
    "com.omnigroup.OmniFocus3.iOS.RunOmniJSIntent": {
        "script,associatedFiles,input": "Run a script with ${input} via Omni Automation"
    },
    "com.omnigroup.OmniFocus3.iOS.RunPlugInIntent": {
        "pluginAction": "Run the ${pluginAction} Omni Automation Plug-In"
    },
    "com.omnigroup.OmniFocus3.iOS.AddTaskIntent": {
        "title,deferDate,dueDate,flagged,estimatedMinutes,note,tags,project,attachments": "Add ${title} to ${project} "
    },
    "com.omnigroup.OmniFocus3.iOS.FindTasksIntent": {
        "terms,project,tagCriteriaType,allOfTags,availabilityType,flaggedStatusType,deferUntilLowerBound,deferUntilUpperBound,dueDateLowerBound,dueDateUpperBound,limitItemsCount,limitByDates,completionDateLowerBound,completionDateUpperBound,projectCriteriaType,taskSortType": "Find ${availabilityType} Items with Dates",
        "terms,project,tagCriteriaType,allOfTags,availabilityType,flaggedStatusType,limitByDates,limitItemsCount,projectCriteriaType,taskSortType": "Find ${availabilityType} Items",
        "terms,project,tagCriteriaType,anyOfTags,availabilityType,flaggedStatusType,deferUntilLowerBound,deferUntilUpperBound,dueDateLowerBound,dueDateUpperBound,limitItemsCount,limitByDates,completionDateLowerBound,completionDateUpperBound,projectCriteriaType,taskSortType": "Find ${availabilityType} Items with Dates",
        "terms,project,tagCriteriaType,anyOfTags,availabilityType,flaggedStatusType,limitByDates,limitItemsCount,projectCriteriaType,taskSortType": "Find ${availabilityType} Items",
        "terms,project,tagCriteriaType,availabilityType,flaggedStatusType,deferUntilLowerBound,deferUntilUpperBound,dueDateLowerBound,dueDateUpperBound,limitItemsCount,limitByDates,completionDateLowerBound,completionDateUpperBound,projectCriteriaType,taskSortType": "Find ${availabilityType} Items with Dates",
        "terms,project,tagCriteriaType,availabilityType,flaggedStatusType,limitByDates,limitItemsCount,projectCriteriaType,taskSortType": "Find ${availabilityType} Items",
        "terms,project,tagCriteriaType,flaggedStatusType,dueDateLowerBound,dueDateUpperBound,deferUntilLowerBound,deferUntilUpperBound,availabilityType,noneOfTags,limitItemsCount,limitByDates,completionDateLowerBound,completionDateUpperBound,projectCriteriaType,taskSortType": "Find ${availabilityType} Items with Dates",
        "terms,project,tagCriteriaType,noneOfTags,availabilityType,flaggedStatusType,limitByDates,limitItemsCount,projectCriteriaType,taskSortType": "Find ${availabilityType} Items",
        "terms,projectCriteriaType,tagCriteriaType,allOfTags,availabilityType,flaggedStatusType,limitByDates,deferUntilLowerBound,deferUntilUpperBound,dueDateLowerBound,dueDateUpperBound,completionDateLowerBound,completionDateUpperBound,limitItemsCount,taskSortType": "Find ${availabilityType} Items with Dates",
        "terms,projectCriteriaType,tagCriteriaType,allOfTags,availabilityType,flaggedStatusType,limitByDates,limitItemsCount,taskSortType": "Find ${availabilityType} Items",
        "terms,projectCriteriaType,tagCriteriaType,anyOfTags,availabilityType,flaggedStatusType,limitByDates,deferUntilLowerBound,deferUntilUpperBound,dueDateLowerBound,dueDateUpperBound,completionDateLowerBound,completionDateUpperBound,limitItemsCount,taskSortType": "Find ${availabilityType} Items with Dates",
        "terms,projectCriteriaType,tagCriteriaType,anyOfTags,availabilityType,flaggedStatusType,limitByDates,limitItemsCount,taskSortType": "Find ${availabilityType} Items",
        "terms,projectCriteriaType,tagCriteriaType,availabilityType,flaggedStatusType,limitByDates,deferUntilLowerBound,deferUntilUpperBound,dueDateLowerBound,dueDateUpperBound,completionDateLowerBound,completionDateUpperBound,limitItemsCount,taskSortType": "Find ${availabilityType} Items with Dates",
        "terms,projectCriteriaType,tagCriteriaType,availabilityType,flaggedStatusType,limitByDates,limitItemsCount,taskSortType": "Find ${availabilityType} Items",
        "terms,projectCriteriaType,tagCriteriaType,noneOfTags,availabilityType,flaggedStatusType,limitByDates,deferUntilLowerBound,deferUntilUpperBound,dueDateLowerBound,dueDateUpperBound,completionDateLowerBound,completionDateUpperBound,limitItemsCount,taskSortType": "Find ${availabilityType} Items with Dates",
        "terms,projectCriteriaType,tagCriteriaType,noneOfTags,availabilityType,flaggedStatusType,limitByDates,limitItemsCount,taskSortType": "Find ${availabilityType} Items"
    },
    "com.omnigroup.OmniFocus3.iOS.GetDatabaseObjectFromInputIntent": {
        "input": "Process ${input} into a Database Object Result"
    },
    "com.omnigroup.OmniFocus3.iOS.ShowFromChoiceIntent": {
        "chooseFromListType": "Show ${chooseFromListType} in OmniFocus",
        "chooseFromListType,folder": "Show ${chooseFromListType} ${folder} in OmniFocus",
        "chooseFromListType,perspective": "Show ${chooseFromListType} ${perspective} in OmniFocus",
        "chooseFromListType,project": "Show ${chooseFromListType} ${project} in OmniFocus",
        "chooseFromListType,tag": "Show ${chooseFromListType} ${tag} in OmniFocus",
        "chooseFromListType,task": "Show ${chooseFromListType} ${task} in OmniFocus"
    },
    "com.omnigroup.OmniFocus3.iOS.AddTaskPaperIntent": {
        "taskPaperInput,targetTask,targetType": "Add ${taskPaperInput} to ${targetType} ${targetTask}",
        "taskPaperInput,targetType": "Add ${taskPaperInput} to ${targetType}",
        "taskPaperInput,targetType,targetFolder": "Add ${taskPaperInput} to ${targetType} ${targetFolder}",
        "taskPaperInput,targetType,targetProject": "Add ${taskPaperInput} to ${targetType} ${targetProject}"
    },
    "com.omnigroup.OmniFocus3.iOS.TodaysForecastIntent": {
        "sections": "Today's Forecast"
    },
    "com.omnigroup.OmniFocus3.iOS.FindTagsIntent": {
        "title": "Find Tags where title contains ${title}"
    },
    "com.omnigroup.OmniFocus3.iOS.FindProjectsIntent": {
        "title,folders": "Find Projects where title contains ${title}"
    },
    "com.omnigroup.OmniFocus3.iOS.SelectPerspectiveIntent": {
        "": "Select Perspective"
    },
    "com.omnigroup.OmniFocus3.iOS.ConfigureForecastWidgetIntent": {
        "": "Configure Forecast Widget"
    },
    "codes.rambo.AirBuddyHelper.GetDeviceStatusIntent": {
        "device,failureMode": "Get ${device}"
    },
    "codes.rambo.AirBuddyHelper.GetDeviceBatteryIntent": {
        "device,battery": "Get ${device} ${battery} battery"
    },
    "codes.rambo.AirBuddyHelper.GetHeadsetStateDetailsIntent": {
        "device,property": "Get ${property} from ${device}"
    },
    "codes.rambo.AirBuddyHelper.ConnectHeadsetIntent": {
        "headset": "Connect to ${headset}",
        "headset,listeningMode,micMode": "Connect to ${headset} with listening mode ${listeningMode} and microphone ${micMode}"
    },
    "codes.rambo.AirBuddyHelper.DisconnectHeadsetIntent": {
        "target,failureMode": "Disconnect from the currently connected headset",
        "target,headset,failureMode": "Disconnect from ${headset}"
    },
    "codes.rambo.AirBuddyHelper.GetDevicesListIntent": {
        "deviceKind,connectionState,nearbyState": "Get list of ${nearbyState} ${deviceKind} devices with connection state ${connectionState}"
    },
    "codes.rambo.AirBuddyHelper.DevicesWidgetConfigurationIntent": {
        "": "Devices Widget Configuration"
    },
    "codes.rambo.AirBuddyHelper.GetFirmwareVersionIntent": {
        "device,failureMode": "Get ${device} firmware version"
    },
    "codes.rambo.AirBuddyHelper.GetLatestFirmwareVersionIntent": {
        "model": "Get latest ${model} firmware version"
    },
    "codes.rambo.AirBuddyHelper.SetSpatialAudioModeIntent": {
        "spatialAudioEnabled,spatialAudioMode,spatializeStereoEnabled": "Set Spatial Audio to ${spatialAudioEnabled} with mode ${spatialAudioMode} and spatialize stereo ${spatializeStereoEnabled}"
    },
    "codes.rambo.AirBuddyHelper.GetSpatialAudioModeIntent": {
        "": "Get Spatial Audio Mode"
    },
    "codes.rambo.AirBuddyHelper.AirPodsWidgetConfigurationIntent": {
        "": "AirPods Widget Configuration"
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleZoomIntent": {
        "operation": "${operation} Zoom",
        "operation,state": "${operation} Zoom ${state}"
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleVoiceOverIntent": {
        "operation": "${operation} VoiceOver",
        "operation,state": "${operation} VoiceOver ${state}"
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXStartSpeakScreenIntent": {
        "": "Start Speak Screen"
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXStartMagnifierIntent": {
        "": "Open Magnifier"
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleVoiceControlIntent": {
        "operation": "${operation} Voice Control",
        "operation,state": "${operation} Voice Control ${state}"
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleSwitchControlIntent": {
        "operation": "${operation} Switch Control",
        "operation,state": "${operation} Switch Control ${state}"
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXStartGuidedAccessIntent": {
        "": "Start Guided Access "
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleAssistiveTouchIntent": {
        "operation": "${operation} AssistiveTouch",
        "operation,state": "${operation} AssistiveTouch ${state}"
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleSmartInvertIntent": {
        "operation": "${operation} Smart Invert",
        "operation,state": "${operation} Smart Invert ${state}"
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleClassicInvertIntent": {
        "operation": "${operation} Classic Invert",
        "operation,state": "${operation} Classic Invert ${state}"
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleTransparencyIntent": {
        "operation": "${operation} Reduce Transparency",
        "operation,state": "${operation} Reduce Transparency ${state}"
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleContrastIntent": {
        "operation": "${operation} Increase Contrast",
        "operation,state": "${operation} Increase Contrast ${state}"
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleWhitePointIntent": {
        "operation": "${operation} White Point",
        "state,operation": "${operation} White Point ${state}"
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleMonoAudioIntent": {
        "operation": "${operation} Mono Audio",
        "operation,state": "${operation} Mono Audio ${state}"
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleLEDFlashIntent": {
        "operation": "${operation} LED Flash",
        "operation,state": "${operation} LED Flash ${state}"
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleAudioDescriptionsIntent": {
        "operation": "${operation} Audio Descriptions",
        "operation,state": "${operation} Audio Descriptions ${state}"
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleCaptionsIntent": {
        "operation": "${operation} Closed Captions+SDH",
        "operation,state": "${operation} Closed Captions+SDH ${state}"
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXSetLargeTextIntent": {
        "textSize": "Set text size to ${textSize}"
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleReduceMotionIntent": {
        "operation": "${operation} Reduce Motion",
        "operation,state": "${operation} Reduce Motion ${state}"
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleSoundDetectionIntent": {
        "operation": "${operation} Sound Recognition"
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXSetSoundDetectorIntent": {
        "parameter,operation": "${operation} sound recognizer for ${parameter}",
        "parameter,operation,state": "${operation} ${state} sound recognizer for ${parameter}"
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleBackgroundSoundsIntent": {
        "operation,setting": "${operation} ${setting}",
        "operation,state,setting": "${operation} ${setting} ${state}"
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXSetBackgroundSoundIntent": {
        "backgroundSound": "Change background sound to ${backgroundSound}"
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXSetBackgroundSoundVolumeIntent": {
        "volumeValue,volumeType": "Set background sounds ${volumeType} to ${volumeValue}"
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleLiveCaptionsIntent": {
        "operation": "${operation} Live Captions",
        "state,operation": "${operation} Live Captions ${state}"
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleColorFiltersIntent": {
        "operation": "${operation} color filters",
        "state,operation": "${operation} color filters ${state}"
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXStartRemoteWatchScreenIntent": {
        "": "Start Apple Watch remote screen"
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleAutoAnswerCallsIntent": {
        "operation": "${operation} Auto-Answer Calls",
        "operation,state": "${operation} Auto-Answer Calls ${state}"
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXSetLeftRightBalanceIntent": {
        "operation": "${operation} Left/Right Balance",
        "operation,parameter,value": "${operation} Left/Right Balance to ${value}"
    },
    "com.apple.Notes.ICNoteIntent": {
        "": "Show Note"
    },
    "com.apple.Notes.ICNotesFolderIntent": {
        "folder": "Show folder ${folder}"
    },
    "com.apple.Notes.AddTagsToNotesLinkAction": {
        "": "Add Tags to Notes"
    },
    "com.apple.Notes.AppendToNoteLinkAction": {
        "": "Append to Note"
    },
    "com.apple.Notes.ChangeFolderSettingLinkAction": {
        "": "Change Folder View"
    },
    "com.apple.Notes.ChangeSettingLinkAction": {
        "": "Change Notes Setting"
    },
    "com.apple.Notes.CloseAppLocationLinkAction": {
        "": "Close Notes View"
    },
    "com.apple.Notes.CloseNoteLinkAction": {
        "": "Close Note"
    },
    "com.apple.Notes.CreateFolderLinkAction": {
        "": "Create Folder"
    },
    "com.apple.Notes.CreateNoteLinkAction": {
        "": "Create Note"
    },
    "com.apple.Notes.CreateTagLinkAction": {
        "": "Create Tag"
    },
    "com.apple.Notes.DeleteFoldersLinkAction": {
        "": "Delete Folders"
    },
    "com.apple.Notes.DeleteNotesLinkAction": {
        "": "Delete Notes"
    },
    "com.apple.Notes.DeleteTagsLinkAction": {
        "": "Delete Tags"
    },
    "com.apple.Notes.MoveNotesToFolderLinkAction": {
        "": "Move Notes to Folder"
    },
    "com.apple.Notes.OpenAccountLinkAction": {
        "": "Open Notes Account"
    },
    "com.apple.Notes.OpenAppLocationLinkAction": {
        "": "Open Notes View"
    },
    "com.apple.Notes.OpenFolderLinkAction": {
        "": "Open Notes Folder"
    },
    "com.apple.Notes.OpenNoteLinkAction": {
        "": "Open Note"
    },
    "com.apple.Notes.OpenTagLinkAction": {
        "": "Open Tag"
    },
    "com.apple.Notes.PinNotesLinkAction": {
        "": "Pin Notes"
    },
    "com.apple.Notes.RemoveTagsFromNotesLinkAction": {
        "": "Remove Tags from Notes"
    },
    "com.apple.clock.OpenTab": {
        "tab": "Open ${tab}"
    },
    "com.apple.iBooksX.BookReaderChangePageNavigationIntent": {
        "changeOperation,setting": "${changeOperation} ${setting}"
    },
    "com.apple.iBooksX.BookReaderChangeThemeIntent": {
        "changeOperation,setting": "${changeOperation} ${setting}"
    },
    "com.apple.iBooksX.BookReaderNavigatePagesIntent": {
        "direction": "Turn to ${direction} page"
    },
    "com.apple.iBooksX.OpenBookIntent": {
        "mode": "Open ${mode}",
        "mode,target": "Open ${mode} ${target}"
    },
    "com.apple.iBooksX.OpenDefaultCollectionIntent": {
        "target": "Open ${target}"
    },
    "com.apple.iBooksX.OpenTabBarItemIntent": {
        "target": "Change app view to ${target}"
    },
    "com.apple.iBooksX.PlayAudiobookIntent": {
        "mode": "Play ${mode}",
        "mode,target": "Play ${mode} ${target}"
    },
    "com.apple.iBooksX.SearchBooksIntent": {
        "searchPhrase": "Search ${searchPhrase} in Books"
    },
    "com.charliemonroe.Downie-4.XUDownloadURLsIntent": {
        "urls,postprocessing,destination": "Download ${urls} using Downie."
    },
    "com.charliemonroe.Downie-4.XUDownloadURLsInTextIntent": {
        "text,postprocessing,destination": "Download URLs in text using Downie."
    },
    "com.hegenberg.BetterTouchTool.ActivateHoveredAppInDockIntent": {
        "": "Activate Hovered App In Dock"
    },
    "com.hegenberg.BetterTouchTool.BluetoothDeviceConnectionIntent": {
        "action,deviceSelectionConnect,manualDeviceNameOrAddressConnect": "Connect Bluetooth Device:",
        "action,deviceSelectionDisconnect,manualDeviceNameOrAddressConnect": "Disconnect Bluetooth Device:",
        "action,inputDictionaryJSON": "Connect / Disconnect Bluetooth device (\\\"show more\\\" for config)"
    },
    "com.hegenberg.BetterTouchTool.CallBetterTouchToolScriptingInterfaceIntent": {
        "scriptingFunction,inputJSON": "Trigger the BTT scripting function: ${scriptingFunction} use this JSON input: ${inputJSON}"
    },
    "com.hegenberg.BetterTouchTool.CloseAllNotificationsIntent": {
        "": "Close All Notifications"
    },
    "com.hegenberg.BetterTouchTool.CloseWindowUnderCursorIntent": {
        "": "Close Window Under Cursor"
    },
    "com.hegenberg.BetterTouchTool.ConnectBluetoothMidiDeviceIntent": {
        "connectType": "Do ${connectType}",
        "deviceName,connectType": "Connect to bluetooth MIDI devices matching this name: ${deviceName} (can include wildcards *)"
    },
    "com.hegenberg.BetterTouchTool.ControlCenterIntent": {
        "": "Control Center"
    },
    "com.hegenberg.BetterTouchTool.ConvertFileOutputToJSONIntent": {
        "input,includeFileContentAsBase64": "Convert the given input files to a JSON structure for usage in following actions."
    },
    "com.hegenberg.BetterTouchTool.ConvertInputListToJSONArrayIntent": {
        "": "Convert Input List To JSON Array"
    },
    "com.hegenberg.BetterTouchTool.ConvertJSONOutputToFileIntent": {
        "inputJSON": "Convert input JSON to file  for usage in next action"
    },
    "com.hegenberg.BetterTouchTool.CustomMoveResizeIntent": {
        "": "Custom Move Resize"
    },
    "com.hegenberg.BetterTouchTool.FindImageOnScreenIntent": {
        "": "Find Image On Screen"
    },
    "com.hegenberg.BetterTouchTool.FloatOnTopDisableAllIntent": {
        "": "Disable \"Float on Top\" for all windows"
    },
    "com.hegenberg.BetterTouchTool.FloatOnTopIntent": {
        "": "Pin/Unpin Focused Window To Float On Top"
    },
    "com.hegenberg.BetterTouchTool.FloatingWebViewIntent": {
        "urlOrHTML,input,identifierW,html,windowBackground,width,height,resizable,movable,updatePosition,windowShadow,ignoreMouseEvents,closeWhenClickingOutside,showBTTDockIcon,zIndex,position,doNotKeepActiveInBackground,userAgent,systemBrowserPrefix,userScript,sharedSecret,titlebar,variable1,variable2,variable3,variable4,variable5,variable6,variable7,whenRunMultipleTimes": "${urlOrHTML} specified under 'more'. Optionally replace any occurence of @ShortcutInput@ with ${input} . Use this identifier to persist settings: ${identifierW}. ",
        "urlOrHTML,input,identifierW,windowBackground,width,height,resizable,movable,updatePosition,windowShadow,ignoreMouseEvents,closeWhenClickingOutside,showBTTDockIcon,zIndex,position,doNotKeepActiveInBackground,userAgent,systemBrowserPrefix,closeAfterSystemBrowserOpen,userScript,sharedSecret,html,titlebar,variable1,variable2,variable3,variable4,variable5,variable6,variable7,whenRunMultipleTimes": "${urlOrHTML} specified under 'more'. Optionally replace any occurence of @ShortcutInput@ with ${input} . Use this identifier to persist settings: ${identifierW}. ",
        "urlOrHTML,input,identifierW,html,windowBackground,width,height,resizable,movable,updatePosition,windowShadow,ignoreMouseEvents,closeWhenClickingOutside,showBTTDockIcon,zIndex,zIndexManual,position,doNotKeepActiveInBackground,userAgent,systemBrowserPrefix,userScript,sharedSecret,titlebar,variable1,variable2,variable3,variable4,variable5,variable6,variable7,whenRunMultipleTimes": "${urlOrHTML} specified under 'more'. Optionally replace any occurence of @ShortcutInput@ with ${input} . Use this identifier to persist settings: ${identifierW}. ",
        "urlOrHTML,input,identifierW,windowBackground,width,height,resizable,movable,updatePosition,windowShadow,ignoreMouseEvents,closeWhenClickingOutside,showBTTDockIcon,zIndex,zIndexManual,position,doNotKeepActiveInBackground,userAgent,systemBrowserPrefix,closeAfterSystemBrowserOpen,userScript,sharedSecret,html,titlebar,variable1,variable2,variable3,variable4,variable5,variable6,variable7,whenRunMultipleTimes": "${urlOrHTML} specified under 'more'. Optionally replace any occurence of @ShortcutInput@ with ${input} . Use this identifier to persist settings: ${identifierW}. ",
        "urlOrHTML,input,identifierW,html,windowBackground,width,height,resizable,movable,updatePosition,windowShadow,ignoreMouseEvents,closeWhenClickingOutside,showBTTDockIcon,zIndex,position,offsetX,offsetY,doNotKeepActiveInBackground,userAgent,systemBrowserPrefix,userScript,sharedSecret,titlebar,variable1,variable2,variable3,variable4,variable5,variable6,variable7,whenRunMultipleTimes": "${urlOrHTML} specified under 'more'. Optionally replace any occurence of @ShortcutInput@ with ${input} . Use this identifier to persist settings: ${identifierW}. ",
        "urlOrHTML,input,identifierW,windowBackground,width,height,resizable,movable,updatePosition,windowShadow,ignoreMouseEvents,closeWhenClickingOutside,showBTTDockIcon,zIndex,position,offsetX,offsetY,doNotKeepActiveInBackground,userAgent,systemBrowserPrefix,closeAfterSystemBrowserOpen,userScript,sharedSecret,html,titlebar,variable1,variable2,variable3,variable4,variable5,variable6,variable7,whenRunMultipleTimes": "${urlOrHTML} specified under 'more'. Optionally replace any occurence of @ShortcutInput@ with ${input} . Use this identifier to persist settings: ${identifierW}. ",
        "urlOrHTML,input,identifierW,html,windowBackground,width,height,resizable,movable,updatePosition,windowShadow,ignoreMouseEvents,closeWhenClickingOutside,showBTTDockIcon,zIndex,zIndexManual,position,offsetX,offsetY,doNotKeepActiveInBackground,userAgent,systemBrowserPrefix,userScript,sharedSecret,titlebar,variable1,variable2,variable3,variable4,variable5,variable6,variable7,whenRunMultipleTimes": "${urlOrHTML} specified under 'more'. Optionally replace any occurence of @ShortcutInput@ with ${input} . Use this identifier to persist settings: ${identifierW}. ",
        "urlOrHTML,input,identifierW,windowBackground,width,height,resizable,movable,updatePosition,windowShadow,ignoreMouseEvents,closeWhenClickingOutside,showBTTDockIcon,zIndex,zIndexManual,position,offsetX,offsetY,doNotKeepActiveInBackground,userAgent,systemBrowserPrefix,closeAfterSystemBrowserOpen,userScript,sharedSecret,html,titlebar,variable1,variable2,variable3,variable4,variable5,variable6,variable7,whenRunMultipleTimes": "${urlOrHTML} specified under 'more'. Optionally replace any occurence of @ShortcutInput@ with ${input} . Use this identifier to persist settings: ${identifierW}. ",
        "urlOrHTML,url,input,identifierW,windowBackground,width,height,resizable,movable,updatePosition,windowShadow,ignoreMouseEvents,closeWhenClickingOutside,showBTTDockIcon,zIndex,position,doNotKeepActiveInBackground,userAgent,systemBrowserPrefix,userScript,sharedSecret,titlebar,variable1,variable2,variable3,variable4,variable5,variable6,variable7,whenRunMultipleTimes": "${urlOrHTML} ${url}. Optionally replace any occurence of @ShortcutInput@ with ${input} . Use this identifier to persist settings: ${identifierW}. ",
        "urlOrHTML,url,input,identifierW,windowBackground,width,height,resizable,movable,updatePosition,windowShadow,ignoreMouseEvents,closeWhenClickingOutside,showBTTDockIcon,zIndex,position,doNotKeepActiveInBackground,userAgent,systemBrowserPrefix,closeAfterSystemBrowserOpen,userScript,sharedSecret,titlebar,variable1,variable2,variable3,variable4,variable5,variable6,variable7,whenRunMultipleTimes": "${urlOrHTML} ${url}. Optionally replace any occurence of @ShortcutInput@ with ${input} . Use this identifier to persist settings: ${identifierW}. ",
        "urlOrHTML,url,input,identifierW,windowBackground,width,height,resizable,movable,updatePosition,windowShadow,ignoreMouseEvents,closeWhenClickingOutside,showBTTDockIcon,zIndex,zIndexManual,position,doNotKeepActiveInBackground,userAgent,systemBrowserPrefix,userScript,sharedSecret,titlebar,variable1,variable2,variable3,variable4,variable5,variable6,variable7,whenRunMultipleTimes": "${urlOrHTML} ${url}. Optionally replace any occurence of @ShortcutInput@ with ${input} . Use this identifier to persist settings: ${identifierW}. ",
        "urlOrHTML,url,input,identifierW,windowBackground,width,height,resizable,movable,updatePosition,windowShadow,ignoreMouseEvents,closeWhenClickingOutside,showBTTDockIcon,zIndex,zIndexManual,position,doNotKeepActiveInBackground,userAgent,systemBrowserPrefix,closeAfterSystemBrowserOpen,userScript,sharedSecret,titlebar,variable1,variable2,variable3,variable4,variable5,variable6,variable7,whenRunMultipleTimes": "${urlOrHTML} ${url}. Optionally replace any occurence of @ShortcutInput@ with ${input} . Use this identifier to persist settings: ${identifierW}. ",
        "urlOrHTML,url,input,identifierW,windowBackground,width,height,resizable,movable,updatePosition,windowShadow,ignoreMouseEvents,closeWhenClickingOutside,showBTTDockIcon,zIndex,position,offsetX,offsetY,doNotKeepActiveInBackground,userAgent,systemBrowserPrefix,userScript,sharedSecret,titlebar,variable1,variable2,variable3,variable4,variable5,variable6,variable7,whenRunMultipleTimes": "${urlOrHTML} ${url}. Optionally replace any occurence of @ShortcutInput@ with ${input} . Use this identifier to persist settings: ${identifierW}. ",
        "urlOrHTML,url,input,identifierW,windowBackground,width,height,resizable,movable,updatePosition,windowShadow,ignoreMouseEvents,closeWhenClickingOutside,showBTTDockIcon,zIndex,position,offsetX,offsetY,doNotKeepActiveInBackground,userAgent,systemBrowserPrefix,closeAfterSystemBrowserOpen,userScript,sharedSecret,titlebar,variable1,variable2,variable3,variable4,variable5,variable6,variable7,whenRunMultipleTimes": "${urlOrHTML} ${url}. Optionally replace any occurence of @ShortcutInput@ with ${input} . Use this identifier to persist settings: ${identifierW}. ",
        "urlOrHTML,url,input,identifierW,windowBackground,width,height,resizable,movable,updatePosition,windowShadow,ignoreMouseEvents,closeWhenClickingOutside,showBTTDockIcon,zIndex,zIndexManual,position,offsetX,offsetY,doNotKeepActiveInBackground,userAgent,systemBrowserPrefix,userScript,sharedSecret,titlebar,variable1,variable2,variable3,variable4,variable5,variable6,variable7,whenRunMultipleTimes": "${urlOrHTML} ${url}. Optionally replace any occurence of @ShortcutInput@ with ${input} . Use this identifier to persist settings: ${identifierW}. ",
        "urlOrHTML,url,input,identifierW,windowBackground,width,height,resizable,movable,updatePosition,windowShadow,ignoreMouseEvents,closeWhenClickingOutside,showBTTDockIcon,zIndex,zIndexManual,position,offsetX,offsetY,doNotKeepActiveInBackground,userAgent,systemBrowserPrefix,closeAfterSystemBrowserOpen,userScript,sharedSecret,titlebar,variable1,variable2,variable3,variable4,variable5,variable6,variable7,whenRunMultipleTimes": "${urlOrHTML} ${url}. Optionally replace any occurence of @ShortcutInput@ with ${input} . Use this identifier to persist settings: ${identifierW}. ",
        "urlOrHTML,input,identifierW,windowBackground,width,height,resizable,movable,updatePosition,windowShadow,ignoreMouseEvents,closeWhenClickingOutside,showBTTDockIcon,zIndex,position,doNotKeepActiveInBackground,userAgent,systemBrowserPrefix,userScript,sharedSecret,titlebar,variable1,variable2,variable3,variable4,variable5,variable6,variable7,whenRunMultipleTimes": "${urlOrHTML} Optionally replace any occurence of @ShortcutInput@ with ${input} . Use this identifier to persist settings: ${identifierW}. ",
        "urlOrHTML,input,identifierW,windowBackground,width,height,resizable,movable,updatePosition,windowShadow,ignoreMouseEvents,closeWhenClickingOutside,showBTTDockIcon,zIndex,position,doNotKeepActiveInBackground,userAgent,systemBrowserPrefix,closeAfterSystemBrowserOpen,userScript,sharedSecret,titlebar,variable1,variable2,variable3,variable4,variable5,variable6,variable7,whenRunMultipleTimes": "${urlOrHTML} Optionally replace any occurence of @ShortcutInput@ with ${input} . Use this identifier to persist settings: ${identifierW}. ",
        "urlOrHTML,input,identifierW,windowBackground,width,height,resizable,movable,updatePosition,windowShadow,ignoreMouseEvents,closeWhenClickingOutside,showBTTDockIcon,zIndex,zIndexManual,position,doNotKeepActiveInBackground,userAgent,systemBrowserPrefix,userScript,sharedSecret,titlebar,variable1,variable2,variable3,variable4,variable5,variable6,variable7,whenRunMultipleTimes": "${urlOrHTML} Optionally replace any occurence of @ShortcutInput@ with ${input} . Use this identifier to persist settings: ${identifierW}. ",
        "urlOrHTML,input,identifierW,windowBackground,width,height,resizable,movable,updatePosition,windowShadow,ignoreMouseEvents,closeWhenClickingOutside,showBTTDockIcon,zIndex,zIndexManual,position,doNotKeepActiveInBackground,userAgent,systemBrowserPrefix,closeAfterSystemBrowserOpen,userScript,sharedSecret,titlebar,variable1,variable2,variable3,variable4,variable5,variable6,variable7,whenRunMultipleTimes": "${urlOrHTML} Optionally replace any occurence of @ShortcutInput@ with ${input} . Use this identifier to persist settings: ${identifierW}. ",
        "urlOrHTML,input,identifierW,windowBackground,width,height,resizable,movable,updatePosition,windowShadow,ignoreMouseEvents,closeWhenClickingOutside,showBTTDockIcon,zIndex,position,offsetX,offsetY,doNotKeepActiveInBackground,userAgent,systemBrowserPrefix,userScript,sharedSecret,titlebar,variable1,variable2,variable3,variable4,variable5,variable6,variable7,whenRunMultipleTimes": "${urlOrHTML} Optionally replace any occurence of @ShortcutInput@ with ${input} . Use this identifier to persist settings: ${identifierW}. ",
        "urlOrHTML,input,identifierW,windowBackground,width,height,resizable,movable,updatePosition,windowShadow,ignoreMouseEvents,closeWhenClickingOutside,showBTTDockIcon,zIndex,position,offsetX,offsetY,doNotKeepActiveInBackground,userAgent,systemBrowserPrefix,closeAfterSystemBrowserOpen,userScript,sharedSecret,titlebar,variable1,variable2,variable3,variable4,variable5,variable6,variable7,whenRunMultipleTimes": "${urlOrHTML} Optionally replace any occurence of @ShortcutInput@ with ${input} . Use this identifier to persist settings: ${identifierW}. ",
        "urlOrHTML,input,identifierW,windowBackground,width,height,resizable,movable,updatePosition,windowShadow,ignoreMouseEvents,closeWhenClickingOutside,showBTTDockIcon,zIndex,zIndexManual,position,offsetX,offsetY,doNotKeepActiveInBackground,userAgent,systemBrowserPrefix,closeAfterSystemBrowserOpen,userScript,sharedSecret,titlebar,variable1,variable2,variable3,variable4,variable5,variable6,variable7,whenRunMultipleTimes": "${urlOrHTML} Optionally replace any occurence of @ShortcutInput@ with ${input} . Use this identifier to persist settings: ${identifierW}. "
    },
    "com.hegenberg.BetterTouchTool.GetSelectedTextIntent": {
        "": "Get Selected Text"
    },
    "com.hegenberg.BetterTouchTool.HapticFeedbackIntent": {
        "feedbackType": "Perform haptic feedback on trackpad with intensity ${feedbackType}"
    },
    "com.hegenberg.BetterTouchTool.MinimizeWindowUnderCursorIntent": {
        "": "Minimize Window Under Cursor"
    },
    "com.hegenberg.BetterTouchTool.MissionControlIntent": {
        "": "Opens Mission Control and Shows Previews"
    },
    "com.hegenberg.BetterTouchTool.MouseClicksIntent": {
        "clickAmount,clickType,useCurrentlyPressedModifiers,upDown": "Perform ${clickAmount}with ${clickType}."
    },
    "com.hegenberg.BetterTouchTool.MoveMouseIntent": {
        "moveType,x,y,anchorPoint,combinedXY": " ${moveType} right by: ${x} down by: ${y} relative to: ${anchorPoint} (You can use negative nubers to move left / up)"
    },
    "com.hegenberg.BetterTouchTool.NightShiftIntent": {
        "": "Night Shift"
    },
    "com.hegenberg.BetterTouchTool.PastePreviousClipboardItemsIntent": {
        "": "Paste Previous Clipboard Items"
    },
    "com.hegenberg.BetterTouchTool.RestoreSavedMousePosIntent": {
        "": "Restore Saved Mouse Pos"
    },
    "com.hegenberg.BetterTouchTool.RestoreWindowLayoutIntent": {
        "layoutName": "Restore saved window layout with name: ${layoutName}"
    },
    "com.hegenberg.BetterTouchTool.RunRealJavaScriptIntent": {
        "input,javascript": "Run BTT Java Script (configured under \\\"show more\\\"). Replace occurences of @ShortcutInput@ in script with ${input}"
    },
    "com.hegenberg.BetterTouchTool.SaveMousePosIntent": {
        "": "Save Mouse Pos"
    },
    "com.hegenberg.BetterTouchTool.SaveWindowLayoutIntent": {
        "layoutName": "Save the current window layout under this name: ${layoutName}"
    },
    "com.hegenberg.BetterTouchTool.SendKeyboardShortcutIntent": {
        "cmd,ctrl,opt,shift,fn,keyOrKeyCode,character,app,bringAppToFront": "Send shortcut cmd: ${cmd} ctrl: ${ctrl} opt: ${opt} shift: ${shift} fn: ${fn} ${keyOrKeyCode} ${character} to app: ${app}",
        "cmd,ctrl,opt,shift,fn,keyOrKeyCode,character,app,bringAppToFront,switchBackAfterSending": "Send shortcut cmd: ${cmd} ctrl: ${ctrl} opt: ${opt} shift: ${shift} fn: ${fn} ${keyOrKeyCode} ${character} to app: ${app}",
        "cmd,ctrl,opt,shift,fn,keyOrKeyCode,keyCode,app,bringAppToFront": "Send shortcut cmd: ${cmd} ctrl: ${ctrl} opt: ${opt} shift: ${shift} fn: ${fn} ${keyOrKeyCode} ${keyCode} to app: ${app}",
        "cmd,ctrl,opt,shift,fn,keyOrKeyCode,keyCode,app,bringAppToFront,switchBackAfterSending": "Send shortcut cmd: ${cmd} ctrl: ${ctrl} opt: ${opt} shift: ${shift} fn: ${fn} ${keyOrKeyCode} ${keyCode} to app: ${app}",
        "cmd,ctrl,opt,shift,fn,keyOrKeyCode,app,bringAppToFront": "Send shortcut cmd: ${cmd} ctrl: ${ctrl} opt: ${opt} shift: ${shift} fn: ${fn} ${keyOrKeyCode}  to app: ${app}",
        "cmd,ctrl,opt,shift,fn,keyOrKeyCode,app,bringAppToFront,switchBackAfterSending": "Send shortcut cmd: ${cmd} ctrl: ${ctrl} opt: ${opt} shift: ${shift} fn: ${fn} ${keyOrKeyCode}  to app: ${app}"
    },
    "com.hegenberg.BetterTouchTool.ShowClipboardManagerIntent": {
        "": "Show Clipboard Manager"
    },
    "com.hegenberg.BetterTouchTool.ShowHUDIntent": {
        "imageOrText,imageFile,backgroundColor,duration,direction,inputTitle": "Show HUD Overlay, ${imageOrText} ${imageFile}",
        "imageOrText,backgroundColor,duration,direction,inputTitle": "Show HUD Overlay, ${imageOrText}"
    },
    "com.hegenberg.BetterTouchTool.ShowHideCursorIntent": {
        "": "Show Hide Cursor"
    },
    "com.hegenberg.BetterTouchTool.ShowMenubarInContextMenuIntent": {
        "": "Show Menubar In Context Menu"
    },
    "com.hegenberg.BetterTouchTool.SleepDisplayIntent": {
        "": "Sleep Display"
    },
    "com.hegenberg.BetterTouchTool.SwitchToLoginscreenIntent": {
        "": "Switch To Loginscreen"
    },
    "com.hegenberg.BetterTouchTool.ToggleCursorSizeIntent": {
        "": "Toggle Cursor Size"
    },
    "com.hegenberg.BetterTouchTool.TriggerContextMenuItemIntent": {
        "contextMenuTrigger,howToUse": "Trigger context menu item ${contextMenuTrigger}"
    },
    "com.hegenberg.BetterTouchTool.TriggerMenubarItemIntent": {
        "menubarTrigger,howToUse": "Trigger menubar menu item ${menubarTrigger}"
    },
    "com.hegenberg.BetterTouchTool.TriggerNamedTriggerIntent": {
        "namedTriggerName": "Execute Named Trigger: ${namedTriggerName}"
    },
    "com.hegenberg.BetterTouchTool.TypeOrPasteTextIntent": {
        "": "Type Or Paste Custom Text"
    },
    "com.hegenberg.BetterTouchTool.UploadToIMGURIntent": {
        "picture": "Upload the given picture to Imgur.com"
    },
    "com.hegenberg.BetterTouchTool.ZoomWindowUnderCursorIntent": {
        "": "Zoom Window Under Cursor"
    },
    "fyi.lunar.Lunar.AdjustHardwareColorsIntent": {
        "red,green,blue,screen,delayBetween": "Adjust color gain to（${red} Red｜${green} Green｜${blue} Blue）for ${screen}"
    },
    "fyi.lunar.Lunar.AdjustSoftwareColorsAdvancesIntent": {
        "minRed,minGreen,minBlue,maxRed,maxGreen,maxBlue,redFactor,greenFactor,blueFactor,screen": "Adjust Gamma to（${minRed} Min Red｜${minGreen} Min Green｜${minBlue} Min Blue,（${maxRed} Max Red｜${maxGreen} Max Green｜${maxBlue} Max Blue）and（${redFactor} Red Factor｜${greenFactor} Green Factor｜${blueFactor} Blue Factor）for ${screen}"
    },
    "fyi.lunar.Lunar.AdjustSoftwareColorsIntent": {
        "red,green,blue,screen": "Adjust Gamma to（${red} Red｜${green} Green｜${blue} Blue）for ${screen}"
    },
    "fyi.lunar.Lunar.ApplyPresetIntent": {
        "preset": "Apply Preset ${preset}"
    },
    "fyi.lunar.Lunar.ChangeAdaptiveModeIntent": {
        "mode": "Change Adaptive Mode to ${mode}"
    },
    "fyi.lunar.Lunar.CleaningModeIntent": {
        "deactivateAutomatically": "Activate cleaning mode and ${deactivateAutomatically}   (press the `⌘ Command` key more than 8 times in a row to deactivate)",
        "deactivateAutomatically,deactivateAfter": "Activate cleaning mode and ${deactivateAutomatically} ${deactivateAfter}   (press the `⌘ Command` key more than 8 times in a row to force deactivation)"
    },
    "fyi.lunar.Lunar.ConnectSidecarIntent": {
        "sidecar": "Connect to ${sidecar}"
    },
    "fyi.lunar.Lunar.ControlScreenValueBool": {
        "property,screen,state,skipMissingScreen": "Set ${property} of ${screen} to ${state}"
    },
    "fyi.lunar.Lunar.ControlScreenValueFloatNumeric": {
        "property,screen,value,skipMissingScreen": "Set ${property} of ${screen} to ${value}"
    },
    "fyi.lunar.Lunar.ControlScreenValueNumeric": {
        "property,screen,value,skipMissingScreen": "Set ${property} of ${screen} to ${value}"
    },
    "fyi.lunar.Lunar.DisconnectScreenIntent": {
        "screen": "Disconnect ${screen}"
    },
    "fyi.lunar.Lunar.FixMonitorArrangementIntent": {
        "onlySameUUID,wait": "Fix monitor arrangement for ${onlySameUUID}"
    },
    "fyi.lunar.Lunar.HorizontalMonitorLayoutIntent": {
        "screenLeft,screenRight": "Arrange ${screenLeft} to the left and ${screenRight} to the right"
    },
    "fyi.lunar.Lunar.HorizontalMonitorThreeLayoutIntent": {
        "screenLeft,screenMiddle,screenRight": "Arrange ${screenLeft} to the left, ${screenMiddle} in the middle and ${screenRight} to the right"
    },
    "fyi.lunar.Lunar.MakeMonitorMainIntent": {
        "screen,skipMissingScreen": "Set main screen to ${screen}"
    },
    "fyi.lunar.Lunar.MirrorSetIntent": {
        "mirrorMaster,mirrors,skipMissingScreen": "Mirror ${mirrorMaster} onto ${mirrors}"
    },
    "fyi.lunar.Lunar.NightModeIntent": {
        "toggle,state": "${toggle} Night Mode ${state}",
        "toggle": "${toggle} Night Mode"
    },
    "fyi.lunar.Lunar.PowerOffIntent": {
        "screen,skipMissingScreen": "Power off ${screen}"
    },
    "fyi.lunar.Lunar.PowerOffSoftwareIntent": {
        "screen,disableScreen,skipMissingScreen": "Power off ${screen} and ${disableScreen} (only make it black, without mirroring or disconnecting)",
        "screen,disableScreen,visibleScreen,skipMissingScreen": "Power off ${screen} and ${disableScreen} by mirroring from ${visibleScreen}"
    },
    "fyi.lunar.Lunar.PowerOnSoftwareIntent": {
        "screen,skipMissingScreen": "Power on ${screen}"
    },
    "fyi.lunar.Lunar.ReadDDCIntent": {
        "vcp,screen": "Read DDC ${vcp} from ${screen}"
    },
    "fyi.lunar.Lunar.ReadHardwareColorsIntent": {
        "screen,skipMissingScreen": "Read color gain values from ${screen}"
    },
    "fyi.lunar.Lunar.ReadSoftwareColorsIntent": {
        "screen,skipMissingScreen": "Read color Gamma values from ${screen}"
    },
    "fyi.lunar.Lunar.ReconnectScreenIntent": {
        "screen": "Reconnect ${screen}"
    },
    "fyi.lunar.Lunar.ResetColorGainIntent": {
        "screen": "Reset color gain adjustments on ${screen}"
    },
    "fyi.lunar.Lunar.ResetColorGammaIntent": {
        "screen": "Reset Gamma color adjustments on ${screen}"
    },
    "fyi.lunar.Lunar.RotateScreenIntent": {
        "screen,rotation,skipMissingScreen": "Rotate ${screen} to ${rotation}"
    },
    "fyi.lunar.Lunar.SetBrightnessContrastIntent": {
        "screen,value,skipMissingScreen": "Set ${screen} combined brightness & contrast to ${value}"
    },
    "fyi.lunar.Lunar.SetBrightnessIntent": {
        "screen,value,skipMissingScreen": "Set ${screen} brightness to ${value}"
    },
    "fyi.lunar.Lunar.SetContrastIntent": {
        "screen,value,skipMissingScreen": "Set ${screen} contrast to ${value}"
    },
    "fyi.lunar.Lunar.SetInputIntent": {
        "screen,input,skipMissingScreen": "Change ${screen} input to ${input}"
    },
    "fyi.lunar.Lunar.SetPanelModeIntent": {
        "mode": "Change resolution to ${mode}"
    },
    "fyi.lunar.Lunar.SetPanelPresetIntent": {
        "preset,unlockBrightnessControl,unlockNightShift,unlockTrueTone": "Change preset to ${preset}",
        "preset,unlockBrightnessControl,minBrightness,maxBrightness,unlockAdaptiveBrightness,unlockNightShift,unlockTrueTone": "Change preset to ${preset}"
    },
    "fyi.lunar.Lunar.SetSubZeroDimmingIntent": {
        "screen,value,skipMissingScreen": "Set ${screen} Sub-zero Dimming to ${value}"
    },
    "fyi.lunar.Lunar.SetVolumeIntent": {
        "screen,value,skipMissingScreen": "Set ${screen} volume to ${value}"
    },
    "fyi.lunar.Lunar.SetXDRBrightnessIntent": {
        "screen,value,skipMissingScreen": "Set ${screen} XDR Brightness to ${value}"
    },
    "fyi.lunar.Lunar.SleepMacIntent": {
        "": "Sleep the Mac"
    },
    "fyi.lunar.Lunar.StopMirroringIntent": {
        "mirrorMaster,skipMissingScreen": "Stop mirroring for ${mirrorMaster}."
    },
    "fyi.lunar.Lunar.SwapMonitorsIntent": {
        "screen1,screen2,swapOrientations": "Swap screen ${screen1} with ${screen2}"
    },
    "fyi.lunar.Lunar.ThreeAboveOneMonitorLayoutIntent": {
        "screenLeft,screenMiddle,screenRight,screenBottom": "Arrange ${screenLeft} to the left, ${screenMiddle} in the middle, ${screenRight} to the right and ${screenBottom} at the bottom"
    },
    "fyi.lunar.Lunar.ToggleAudioMuteIntent": {
        "screen,state,skipMissingScreen": "Toggle audio mute of ${screen} to ${state}"
    },
    "fyi.lunar.Lunar.ToggleBlackOutIntent": {
        "screen,state,allowMirroring,skipMissingScreen": "Toggle power of ${screen} to ${state}"
    },
    "fyi.lunar.Lunar.ToggleFacelightIntent": {
        "screen,state,skipMissingScreen": "Toggle Facelight for ${screen} to ${state}"
    },
    "fyi.lunar.Lunar.ToggleGammaIntent": {
        "screen,state": "Toggle Gamma color adjustments on ${screen} to ${state}"
    },
    "fyi.lunar.Lunar.ToggleHDRIntent": {
        "screen,state,skipMissingScreen": "Toggle HDR for ${screen} to ${state}"
    },
    "fyi.lunar.Lunar.ToggleScreenConnectionIntent": {
        "screen": "Toggle connected state for ${screen}"
    },
    "fyi.lunar.Lunar.ToggleSubZeroIntent": {
        "screen,state,skipMissingScreen": "Toggle Sub-zero Dimming to ${screen} to ${state}"
    },
    "fyi.lunar.Lunar.ToggleSystemAdaptiveBrightnessIntent": {
        "screen,state,skipMissingScreen": "Toggle system adaptive brightness for ${screen} to ${state}"
    },
    "fyi.lunar.Lunar.ToggleXDRIntent": {
        "screen,state,skipMissingScreen": "Toggle XDR Brightness for ${screen} to ${state}"
    },
    "fyi.lunar.Lunar.TwoAboveOneMonitorLayoutIntent": {
        "screenLeft,screenMiddle,screenRight": "Arrange ${screenLeft} to the left, ${screenMiddle} at the bottom and ${screenRight} to the right"
    },
    "fyi.lunar.Lunar.VerticalMonitorLayoutIntent": {
        "screenTop,screenBottom": "Arrange ${screenTop} at the top and ${screenBottom} at the bottom"
    },
    "fyi.lunar.Lunar.WriteDDCIntent": {
        "vcp,value,screen": "Write DDC ${vcp} ${value} to ${screen}"
    },
    "com.flexibits.fantastical2.FKRUpcomingCalendarItemIntent": {
        "itemType": "Upcoming ${itemType}"
    },
    "com.flexibits.fantastical2.FKRShowScheduleIntent": {
        "date": "Schedule for ${date}",
        "day,date": "Schedule for ${day}"
    },
    "com.flexibits.fantastical2.FKROverdueRemindersIntent": {
        "": "Overdue tasks"
    },
    "com.flexibits.fantastical2.FKRShowCalendarIntent": {
        "calendarName,date": "Show “${calendarName}” calendar"
    },
    "com.flexibits.fantastical2.FKRShowListIntent": {
        "listName,date": "Show \"${listName}\" list"
    },
    "com.flexibits.fantastical2.FKRCreateFromClipboardIntent": {
        "": "Create from Clipboard"
    },
    "com.flexibits.fantastical2.FKRCreateFromInputIntent": {
        "": "Create event or task"
    },
    "com.flexibits.fantastical2.FKROpenOnDateIntent": {
        "date": "Open Fantastical to ${date}"
    },
    "com.flexibits.fantastical2.FKRChangeCalendarSetIntent": {
        "calendarSet": "Change active calendar set to ${calendarSet}"
    },
    "com.flexibits.fantastical2.FKRDateWidgetConfigIntent": {
        "": "Date Widget Configuration"
    },
    "com.flexibits.fantastical2.FKRUpNextWidgetConfigIntent": {
        "": "Up Next Widget Configuration"
    },
    "com.flexibits.fantastical2.FKREventListWidgetConfigIntent": {
        "": "Event List Widget Configuration"
    },
    "com.flexibits.fantastical2.FKRDateCalendarWidgetConfigIntent": {
        "": "Date Calendar Widget Configuration"
    },
    "com.flexibits.fantastical2.FKRCalendarWidgetConfigIntent": {
        "": "Calendar Widget Configuration"
    },
    "com.flexibits.fantastical2.FKREventListCalendarWidgetConfigIntent": {
        "": "Event List Calendar Widget Configuration"
    },
    "com.flexibits.fantastical2.FKREventListSmallWidgetConfigIntent": {
        "": "Event List Small Widget Config"
    },
    "com.flexibits.fantastical2.FKRActionWidgetConfigIntent": {
        "": "Action Widget Config"
    },
    "com.flexibits.fantastical2.FKRGetAttendeesFromEventIntent": {
        "calendarItem": "Get invitees from ${calendarItem}"
    },
    "com.flexibits.fantastical2.FKRChangeCalendarViewIntent": {
        "view": "Switch to ${view}"
    },
    "com.flexibits.fantastical2.FKRUpNextLockScreenWidgetConfigIntent": {
        "": "Up Next Lock Screen Widget Config"
    },
    "com.flexibits.fantastical2.FKRActionLockScreenWidgetConfigIntent": {
        "": "Action Lock Screen Widget Config"
    },
    "com.flexibits.fantastical2.FKRCalendarLockScreenWidgetConfigIntent": {
        "": "Calendar Lock Screen Widget Config"
    },
    "com.flexibits.fantastical2.FBUpcomingCalendarItemIntent": {
        "itemType": "Upcoming ${itemType}"
    },
    "com.flexibits.fantastical2.FBShowScheduleIntent": {
        "date,day": "Schedule for ${day}",
        "day": "Schedule for ${day}"
    },
    "com.flexibits.fantastical2.FBOverdueRemindersIntent": {
        "": "Overdue tasks"
    },
    "com.flexibits.fantastical2.FBShowCalendarIntent": {
        "calendarName,date": "Show “${calendarName}” calendar"
    },
    "com.flexibits.fantastical2.FBShowListIntent": {
        "listName,date": "Show \"${listName}\" list"
    },
    "com.flexibits.fantastical2.FBCreateFromClipboardIntent": {
        "": "Create from Clipboard"
    },
    "com.flexibits.fantastical2.FBCreateFromInputIntent": {
        "input": "Create event or task from: \"${input}\""
    },
    "com.flexibits.fantastical2.FBOpenOnDateIntent": {
        "date": "Open Fantastical on ${date}"
    },
    "com.flexibits.fantastical2.FBChangeCalendarSetIntent": {
        "calendarSetName": "Change active calendar set to ${calendarSetName}"
    },
    "com.flexibits.fantastical2.FBDateWidgetConfigIntent": {
        "": "Date Widget Configuration"
    },
    "com.flexibits.fantastical2.FBUpNextWidgetConfigIntent": {
        "": "Up Next Widget Configuration"
    },
    "com.flexibits.fantastical2.FBEventListWidgetConfigIntent": {
        "": "Event List Widget Configuration"
    },
    "com.flexibits.fantastical2.FBDateCalendarWidgetConfigIntent": {
        "": "Date Calendar Widget Configuration"
    },
    "com.flexibits.fantastical2.FBCalendarWidgetConfigIntent": {
        "": "Calendar Widget Configuration"
    },
    "com.flexibits.fantastical2.FBEventListCalendarWidgetConfigIntent": {
        "": "Event List Calendar Widget Configuration"
    },
    "com.flexibits.fantastical2.FBEventListSmallWidgetConfigIntent": {
        "": "Event List Small Widget Config"
    },
    "com.flexibits.fantastical2.FBActionWidgetConfigIntent": {
        "": "Action Widget Config"
    },
    "com.flexibits.fantastical2.FBGetAttendeesFromEventIntent": {
        "calendarItem": "Get invitees from ${calendarItem}"
    },
    "com.flexibits.fantastical2.FBChangeCalendarViewIntent": {
        "view": "Switch to ${view}"
    },
    "com.flexibits.fantastical2.FBUpNextLockScreenWidgetConfigIntent": {
        "": "Up Next Lock Screen Widget Config"
    },
    "com.flexibits.fantastical2.FBActionLockScreenWidgetConfigIntent": {
        "": "Action Lock Screen Widget Config"
    },
    "com.flexibits.fantastical2.FBCalendarLockScreenWidgetConfigIntent": {
        "": "Calendar Lock Screen Widget Config"
    },
    "com.flexibits.fantastical2.FantasticalFocusFilterIntent": {
        "": "Filter Calendar Sets"
    }
}