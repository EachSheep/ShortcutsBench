{
    "is.workflow.actions.previewdocument": {
        "WFInput": "WFVariablePickerParameter(Object)",
        "WFQuickLookActionFullScreen": "Bool"
    },
    "is.workflow.actions.resizewindow": {
        "WFConfiguration": "Enum = \"Fit Screen\"",
        "WFWidth": "Integer",
        "WFHeight": "Integer",
        "WFWindow": "WFVariablePickerParameter(Object)",
        "WFBringToFront": "Bool = True"
    },
    "is.workflow.actions.format.date": {
        "WFDateFormatStyle": "Enum = \"Short\"",
        "WFRelativeDateFormatStyle": "Enum = \"Medium\"",
        "WFTimeFormatStyle": "Enum = \"Short\"",
        "WFISO8601IncludeTime": "Bool",
        "WFDateFormat": "String",
        "WFDate": "String",
        "WFLocale": "WFLocalePickerParameter(Object)",
        "ThisIsReturnValue:Formatted Date": "NSString(Object)"
    },
    "is.workflow.actions.list": {
        "WFItems": "WFContentArrayParameter(Object) = ['One', 'Two']",
        "ThisIsReturnValue:List": "WFContentItem(Object)"
    },
    "com.apple.TVRemoteUIService.LaunchApplicationIntent": {
        "application": "WFMediaRoutePickerParameter(Object)",
        "device": "WFMediaRoutePickerParameter(Object)",
        "ShowWhenRun": "Bool = True"
    },
    "is.workflow.actions.filter.photos": {
        "WFContentItemFilter": "WFContentPredicateOperatorParameter",
        "WFContentItemInputParameter": "WFVariablePickerParameter(Object)",
        "WFContentItemSortProperty": "WFDynamicEnumerationParameter(Object)",
        "WFContentItemSortEnabled": "Bool",
        "WFContentItemSortOrder": "WFDynamicEnumerationParameter(Object)",
        "WFContentItemLimitEnabled": "Bool = True",
        "WFContentItemLimitNumber": "Integer = 1",
        "ThisIsReturnValue:Photos": "Object"
    },
    "is.workflow.actions.properties.trello": {
        "WFContentItemPropertyName": "Enum",
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Details of Trello Item": "Object"
    },
    "is.workflow.actions.getlatestlivephotos": {
        "WFGetLatestPhotoCount": "Integer = 1",
        "ThisIsReturnValue:Latest Live Photos": "PHAsset(Object)"
    },
    "is.workflow.actions.flashlight": {
        "operation": "Enum = \"set\"",
        "state": "Bool = True",
        "WFFlashlightLevel": "Integer = 25"
    },
    "is.workflow.actions.detect.number": {
        "WFInput": "Integer",
        "ThisIsReturnValue:Numbers": "WFNumberContentItem(Object)"
    },
    "is.workflow.actions.statistics": {
        "WFStatisticsOperation": "Enum = \"Average\"",
        "Input": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Statistics": "NSNumber(Object)"
    },
    "is.workflow.actions.location": {
        "WFLocation": "WFLocationParameter(Object)",
        "ThisIsReturnValue:Location": "WFLocationContentItem(Object)"
    },
    "is.workflow.actions.calculateexpression": {
        "Input": "String",
        "ThisIsReturnValue:Calculation Result": "NSDecimalNumber(Object)"
    },
    "is.workflow.actions.count": {
        "WFCountType": "Enum = \"Items\"",
        "Input": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Count": "NSDecimalNumber(Object)"
    },
    "is.workflow.actions.getupcomingreminders": {
        "WFGetUpcomingItemCalendar": "WFRemindersListPickerParameter(Object)",
        "WFGetUpcomingItemCount": "Integer = 1",
        "ThisIsReturnValue:Upcoming Reminders": "REMReminder(Object)"
    },
    "is.workflow.actions.properties.contacts": {
        "WFContentItemPropertyName": "Enum",
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Details of Contacts": "Object"
    },
    "is.workflow.actions.wordpress.post": {
        "WFAccount": "WFAccountPickerParameter(Object)",
        "Blog": "WFDynamicEnumerationParameter(Object)",
        "Title": "String",
        "Type": "WFDynamicEnumerationParameter(Object)",
        "Format": "WFDynamicEnumerationParameter(Object)",
        "Status": "WFDynamicEnumerationParameter(Object)",
        "Categories": "WFDynamicTagFieldParameter(Object)",
        "Tags": "WFDynamicTagFieldParameter(Object)",
        "Advanced": "Bool",
        "AllowComments": "Bool",
        "Slug": "String",
        "Excerpt": "String",
        "Date": "String",
        "Template": "WFDynamicEnumerationParameter(Object)",
        "ThumbnailImage": "WFVariablePickerParameter(Object)",
        "ShowCustomFields": "Bool",
        "CustomFields": "WFDictionaryParameter(Object)",
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:WordPress Post URL": "NSURL(Object)"
    },
    "is.workflow.actions.ride.requestride": {
        "IntentAppDefinition": "WFIntentAppPickerParameter(Object)",
        "PickupLocation": "WFLocationParameter(Object)",
        "DropOffLocation": "WFLocationParameter(Object)",
        "RideOption": "WFRideOptionParameter(Object)",
        "PaymentMethod": "WFPaymentMethodParameter(Object)",
        "PartySize": "Integer = 1",
        "ThisIsReturnValue:Request Ride": "INRideStatus(Object)"
    },
    "is.workflow.actions.print": {
        "WFInput": "WFVariablePickerParameter(Object)"
    },
    "is.workflow.actions.filter.reminders": {
        "WFContentItemFilter": "WFContentPredicateOperatorParameter",
        "WFContentItemInputParameter": "WFVariablePickerParameter(Object)",
        "WFContentItemSortProperty": "WFDynamicEnumerationParameter(Object)",
        "WFContentItemSortOrder": "WFDynamicEnumerationParameter(Object)",
        "WFContentItemLimitEnabled": "Bool = True",
        "WFContentItemLimitNumber": "Integer = 1",
        "ThisIsReturnValue:Reminders": "Object"
    },
    "is.workflow.actions.choosefrommenu": {
        "WFMenuPrompt": "String",
        "WFMenuItems": "WFChooseFromMenuArrayParameter = ['One', 'Two']",
        "ThisIsReturnValue:Menu Result": "Object"
    },
    "is.workflow.actions.makezip": {
        "WFZIPName": "String",
        "WFArchiveFormat": "WFArchiveFormatParameter(Object)",
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Archive": "WFGenericFileContentItem(Object)"
    },
    "is.workflow.actions.createplaylist": {
        "WFPlaylistName": "String",
        "WFPlaylistAuthor": "String",
        "WFPlaylistDescription": "String",
        "WFPlaylistItems": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:New Playlist": "MPMediaItem(Object)"
    },
    "is.workflow.actions.documentpicker.open": {
        "WFFileErrorIfNotFound": "Bool = True",
        "WFGetFolderContents": "Bool",
        "WFFile": "WFFilePickerParameter(Object)",
        "WFGetFilePath": "String",
        "ThisIsReturnValue:File": "(public.data(Object) or public.folder(Object))"
    },
    "is.workflow.actions.playpodcast": {
        "WFPodcastShow": "WFPodcastPickerParameter(Object)"
    },
    "com.apple.TVRemoteUIService.SleepAppleTVIntent": {
        "device": "WFMediaRoutePickerParameter(Object)"
    },
    "is.workflow.actions.getparentdirectory": {
        "WFInput": "WFFilePickerParameter(Object)",
        "ThisIsReturnValue:Get Parent Directory": "public.folder(Object)"
    },
    "is.workflow.actions.displaysleep": {},
    "com.apple.TVRemoteUIService.PauseContentIntent": {
        "mediaCommand": "Enum = \"Play/Pause\"",
        "device": "WFMediaRoutePickerParameter(Object)"
    },
    "is.workflow.actions.clearupnext": {},
    "com.apple.mobiletimer-framework.MobileTimerIntents.MTCreateAlarmIntent": {},
    "is.workflow.actions.sendemail": {
        "WFSendEmailActionShowComposeSheet": "Bool = True",
        "WFEmailAccountActionSelectedAccount": "WFMailSenderPickerParameter(Object)",
        "WFSendEmailActionFrom": "String",
        "WFSendEmailActionToRecipients": "WFEmailAddressFieldParameter(Object)",
        "WFSendEmailActionCcRecipients": "WFEmailAddressFieldParameter(Object)",
        "WFSendEmailActionBccRecipients": "WFEmailAddressFieldParameter(Object)",
        "WFSendEmailActionSubject": "String",
        "WFSendEmailActionInputAttachments": "String",
        "WFSendEmailActionSaveAsDraft": "Bool"
    },
    "is.workflow.actions.showinstore": {
        "WFProduct": "WFVariablePickerParameter(Object)"
    },
    "is.workflow.actions.pocket.add": {
        "WFPocketTags": "String",
        "WFInputURL": "String"
    },
    "com.apple.TVRemoteUIService.ReduceLoudSoundsIntent": {
        "toggle": "Bool",
        "device": "WFMediaRoutePickerParameter(Object)"
    },
    "is.workflow.actions.playmusic": {
        "WFMediaItems": "WFMediaPickerParameter(Object)",
        "WFPlayMusicActionShuffle": "Enum",
        "WFPlayMusicActionRepeat": "Enum"
    },
    "is.workflow.actions.evernote.append": {
        "WFInput": "WFVariablePickerParameter(Object)",
        "WFEvernoteNotesTitleSearch": "String",
        "WFEvernoteWriteMode": "Enum = \"Append\"",
        "WFEvernoteNotesNotebookName": "WFEvernoteNotebookPickerParameter(Object)",
        "ThisIsReturnValue:Note": "ENNoteRef(Object)"
    },
    "is.workflow.actions.lowpowermode.set": {
        "operation": "Enum = \"set\"",
        "OnValue": "Bool = True"
    },
    "is.workflow.actions.trello.add.card": {
        "WFTrelloName": "String",
        "WFTrelloBoard": "WFTrelloBoardPickerParameter(Object)",
        "WFTrelloList": "WFTrelloListPickerParameter(Object)",
        "WFTrelloDueDate": "String",
        "WFTrelloCardPosition": "Enum = \"Top\"",
        "WFTrelloAttachments": "WFVariablePickerParameter(Object)",
        "WFTrelloDescription": "String",
        "ThisIsReturnValue:Trello Card": "WFTrelloCard(Object)"
    },
    "is.workflow.actions.extracttextfromimage": {
        "WFImage": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Text from Image": "WFStringContentItem(Object)"
    },
    "is.workflow.actions.listeningmode.set": {
        "WFRoute": "WFMediaRoutePickerParameter(Object)",
        "WFListeningMode": "WFListeningModePickerParameter(Object)"
    },
    "is.workflow.actions.detect.text": {
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Text": "WFStringContentItem(Object)"
    },
    "is.workflow.actions.detect.contacts": {
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Contacts": "WFContactContentItem(Object)"
    },
    "is.workflow.actions.posters.get": {
        "WFPosterType": "Enum = \"All\"",
        "ThisIsReturnValue:Wallpapers": "WFPosterRepresentation(Object)"
    },
    "is.workflow.actions.getlatestphotoimport": {
        "ThisIsReturnValue:Imported Photos": "PHAsset(Object)"
    },
    "is.workflow.actions.workout.end": {
        "IntentAppDefinition": "WFIntentAppPickerParameter(Object) = {'BundleIdentifier': 'com.apple.SessionTrackerApp'}"
    },
    "is.workflow.actions.evernote.delete": {
        "WFInput": "WFVariablePickerParameter(Object)"
    },
    "is.workflow.actions.removereminders": {
        "WFInputReminders": "WFVariablePickerParameter(Object)"
    },
    "is.workflow.actions.playsound": {
        "WFInput": "WFVariablePickerParameter(Object)"
    },
    "is.workflow.actions.getlastscreenshot": {
        "WFGetLatestPhotoCount": "Integer = 1",
        "ThisIsReturnValue:Latest Screenshots": "PHAsset(Object)"
    },
    "is.workflow.actions.getmarkdownfromrichtext": {
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Markdown from Rich Text": "NSString(Object)"
    },
    "com.apple.musicrecognition.RecognizeMusicIntent": {
        "WFShazamMediaActionShowWhenRun": "Bool = True",
        "addToLibrary": "Bool = True",
        "WFShazamMediaActionErrorIfNotRecognized": "Bool = True",
        "ThisIsReturnValue:Shazam Media": "WFShazamMedia(Object)"
    },
    "is.workflow.actions.getitemtype": {
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Type": "NSString(Object)"
    },
    "is.workflow.actions.airplanemode.set": {
        "operation": "Enum = \"set\"",
        "OnValue": "Bool = True"
    },
    "is.workflow.actions.detect.date": {
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Dates": "WFDateContentItem(Object)"
    },
    "is.workflow.actions.encodemedia": {
        "WFMedia": "WFVariablePickerParameter(Object)",
        "WFMediaAudioOnly": "Bool",
        "WFMediaAudioFormat": "Enum = \"M4A\"",
        "WFMediaSize": "Enum = \"Passthrough\"",
        "WFMediaSpeed": "Enum = \"Normal\"",
        "WFMediaPreserveTransparency": "Bool",
        "WFMediaCustomSpeed": "Integer",
        "Metadata": "Bool",
        "WFMetadataTitle": "String",
        "WFMetadataArtist": "String",
        "WFMetadataAlbum": "String",
        "WFMetadataGenre": "String",
        "WFMetadataYear": "String",
        "WFMetadataArtwork": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Encoded Media": "AVAsset(Object)"
    },
    "com.apple.TVRemoteUIService.WakeAppleTVIntent": {
        "device": "WFMediaRoutePickerParameter(Object)"
    },
    "is.workflow.actions.file.reveal": {
        "WFFile": "WFFilePickerParameter(Object)"
    },
    "is.workflow.actions.gethtmlfromrichtext": {
        "WFMakeFullDocument": "Bool",
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:HTML from Rich Text": "NSString(Object)"
    },
    "is.workflow.actions.getpodcastsfromlibrary": {
        "ThisIsReturnValue:Podcasts": "WFPodcastShowContentItem(Object)"
    },
    "is.workflow.actions.detect.emailaddress": {
        "WFInput": "String",
        "ThisIsReturnValue:Email Addresses": "WFEmailAddressContentItem(Object)"
    },
    "is.workflow.actions.properties.itunesartist": {
        "WFContentItemPropertyName": "Enum",
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Details of iTunes Artist": "Object"
    },
    "is.workflow.actions.setvalueforkey": {
        "WFDictionaryKey": "String",
        "WFDictionaryValue": "String",
        "WFDictionary": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Dictionary": "WFDictionaryContentItem(Object)"
    },
    "is.workflow.actions.getitemfromlist": {
        "WFItemSpecifier": "Enum = \"First Item\"",
        "WFItemIndex": "Integer",
        "WFItemRangeStart": "Integer",
        "WFItemRangeEnd": "Integer",
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Item from List": "WFContentItem(Object)"
    },
    "is.workflow.actions.getrichtextfrommarkdown": {
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Rich Text from Markdown": "public.html(Object)"
    },
    "is.workflow.actions.getclassaction": {
        "Class": "String = \"NSURL\"",
        "Input": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Object of Class": "WFContentItem(Object)"
    },
    "is.workflow.actions.delay": {
        "WFDelayTime": "Integer = 1"
    },
    "is.workflow.actions.image.resize": {
        "WFImageResizeKey": "Enum = \"Size\"",
        "WFImageResizeWidth": "Integer = 640",
        "WFImageResizeHeight": "Integer",
        "WFImageResizePercentage": "Integer",
        "WFImageResizeLength": "Integer",
        "WFImage": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Resized Image": "WFImage(Object)"
    },
    "is.workflow.actions.runapplescript": {
        "Input": "WFVariablePickerParameter(Object)",
        "Script": "WFOSAScriptEditorParameter(Object) = \"on run {input, parameters}\n    (* Your script goes here *)\n    return input\nend run\"",
        "ThisIsReturnValue:AppleScript Result": "(WFDictionaryContentItem(Object) or WFStringContentItem(Object) or WFBooleanContentItem(Object) or WFNumberContentItem(Object))"
    },
    "com.apple.TVRemoteUIService.SkipContentIntent": {
        "skipCommand": "Enum = \"Forward\"",
        "skipDuration": "Integer = 10",
        "device": "WFMediaRoutePickerParameter(Object)"
    },
    "is.workflow.actions.scanbarcode": {
        "ThisIsReturnValue:QR/Barcode": "WFMachineReadableCode"
    },
    "is.workflow.actions.selectphoto": {
        "WFPhotoPickerTypes": "Enum = ['Images', 'Live Photos', 'Videos']",
        "WFSelectMultiplePhotos": "Bool",
        "ThisIsReturnValue:Photos": "PHAsset(Object)"
    },
    "is.workflow.actions.gettimebetweendates": {
        "WFTimeUntilFromDate": "String",
        "WFInput": "String",
        "WFTimeUntilUnit": "Enum = \"Minutes\"",
        "ThisIsReturnValue:Time Between Dates": "NSNumber(Object)"
    },
    "is.workflow.actions.removeevents": {
        "WFCalendarIncludeFutureEvents": "Bool",
        "WFInputEvents": "WFVariablePickerParameter(Object)"
    },
    "is.workflow.actions.selectphone": {
        "ThisIsReturnValue:Phone Numbers": "WFPhoneNumber(Object)"
    },
    "is.workflow.actions.dismisssiri": {},
    "is.workflow.actions.file.move": {
        "WFFile": "WFFilePickerParameter(Object)",
        "WFFolder": "WFFilePickerParameter(Object)",
        "WFReplaceExisting": "Bool",
        "ThisIsReturnValue:File": "public.data(Object)"
    },
    "is.workflow.actions.pausemusic": {
        "WFPlayPauseBehavior": "Enum = \"Play/Pause\"",
        "WFMediaRoute": "WFMediaRoutePickerParameter(Object) = \"Local\""
    },
    "is.workflow.actions.runsshscript": {
        "WFSSHScript": "String",
        "WFSSHHost": "String",
        "WFSSHPort": "String = \"22\"",
        "WFSSHUser": "String",
        "WFSSHAuthenticationType": "Enum = \"Password\"",
        "WFSSHPassword": "String",
        "WFSSHKey": "WFSSHKeyParameter(Object)",
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Shell Script Result": "public.data(Object)"
    },
    "is.workflow.actions.takevideo": {
        "WFCameraCaptureDevice": "Enum = \"Back\"",
        "WFCameraCaptureQuality": "Enum = \"High\"",
        "WFRecordingStart": "Enum = \"Immediately\"",
        "ThisIsReturnValue:Video": "com.apple.quicktime-movie(Object)"
    },
    "is.workflow.actions.vibrate": {
        "WFVibrateHapticType": "Enum = \"Default\""
    },
    "is.workflow.actions.ejectdisk": {
        "WFInput": "WFFilePickerParameter(Object)"
    },
    "is.workflow.actions.getitemname": {
        "WFInput": "WFVariablePickerParameter(Object)",
        "GetWebPageTitle": "Bool = True",
        "ThisIsReturnValue:Name": "NSString(Object)"
    },
    "is.workflow.actions.waittoreturn": {},
    "is.workflow.actions.choosefromlist": {
        "WFInput": "WFVariablePickerParameter(Object)",
        "WFChooseFromListActionPrompt": "String",
        "WFChooseFromListActionSelectMultiple": "Bool",
        "WFChooseFromListActionSelectAll": "Bool",
        "ThisIsReturnValue:Chosen Item": "WFContentItem(Object)"
    },
    "is.workflow.actions.airdropdocument": {
        "WFInput": "WFVariablePickerParameter(Object)"
    },
    "is.workflow.actions.gettraveltime": {
        "WFGetDirectionsCustomLocation": "WFLocationParameter(Object)",
        "WFDestination": "WFLocationParameter(Object)",
        "WFGetDirectionsActionMode": "Enum = \"Driving\"",
        "ThisIsReturnValue:Travel Time": "WFTripInfo(Object)"
    },
    "is.workflow.actions.showinblindsquare": {
        "WFBlindSquareSimulation": "Bool",
        "WFInput": "WFLocationParameter(Object)"
    },
    "is.workflow.actions.personalhotspot.password.set": {
        "WFInput": "String"
    },
    "is.workflow.actions.dictatetext": {
        "WFSpeechLanguage": "Enum",
        "WFDictateTextStopListening": "Enum = \"After Pause\"",
        "ThisIsReturnValue:Dictated Text": "NSString(Object)"
    },
    "is.workflow.actions.filter.locations": {
        "WFContentItemFilter": "WFContentPredicateOperatorParameter",
        "WFContentItemInputParameter": "WFVariablePickerParameter(Object)",
        "WFContentItemSortProperty": "WFDynamicEnumerationParameter(Object)",
        "WFContentItemSortOrder": "WFDynamicEnumerationParameter(Object)",
        "ThisIsReturnValue:Locations": "Object"
    },
    "is.workflow.actions.setvariable": {
        "WFInput": "WFVariablePickerParameter(Object)",
        "WFVariableName": "String"
    },
    "is.workflow.actions.file": {
        "WFFile": "WFFilePickerParameter(Object)",
        "ThisIsReturnValue:File": "public.data(Object)"
    },
    "is.workflow.actions.getbatterylevel": {
        "Subject": "Enum = \"Battery Level\"",
        "ThisIsReturnValue:Battery State": "(NSDecimalNumber(Object) or WFBooleanContentItem(Object))"
    },
    "is.workflow.actions.postonfacebook": {
        "FacebookContent": "WFVariablePickerParameter(Object)"
    },
    "is.workflow.actions.openurl": {
        "WFInput": "String",
        "ThisIsReturnValue:Open URLs": "Object"
    },
    "is.workflow.actions.gettextfrompdf": {
        "WFInput": "WFFilePickerParameter(Object)",
        "WFGetTextFromPDFTextType": "Enum = \"Text\"",
        "WFGetTextFromPDFPageHeader": "String",
        "WFGetTextFromPDFPageFooter": "String",
        "WFCombinePages": "Bool = True",
        "ThisIsReturnValue:Text": "(NSString(Object) or NSAttributedString(Object))"
    },
    "is.workflow.actions.takescreenshot": {
        "WFTakeScreenshotScreenshotType": "Enum = \"Full Screen\"",
        "WFTakeScreenshotActionInteractiveSelectionType": "Enum = \"Window\"",
        "WFTakeScreenshotMainMonitorOnly": "Bool",
        "ThisIsReturnValue:Screenshot": "WFImage(Object)"
    },
    "is.workflow.actions.quit.app": {
        "WFQuitAppMode": "Enum = \"App\"",
        "WFAppsExcept": "WFAppPickerParameter(Object)",
        "WFApp": "WFAppPickerParameter(Object)",
        "WFAskToSaveChanges": "Bool = True"
    },
    "is.workflow.actions.text.match.getgroup": {
        "matches": "String",
        "WFGetGroupType": "Enum",
        "WFGroupIndex": "Integer"
    },
    "is.workflow.actions.properties.podcast": {
        "WFContentItemPropertyName": "Enum",
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Details of Podcast Episode": "Object"
    },
    "is.workflow.actions.image.rotate": {
        "WFImageRotateAmount": "Integer = 90",
        "WFImage": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Rotated Image/Video": "(WFImage(Object) or AVAsset(Object))"
    },
    "is.workflow.actions.properties.podcastshow": {
        "WFContentItemPropertyName": "Enum",
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Details of Podcast": "Object"
    },
    "is.workflow.actions.setters.reminders": {
        "WFInput": "String",
        "WFReminderContentItemDueDate": "String",
        "WFContentItemPropertyName": "Enum",
        "Mode": "Enum",
        "Show-WFReminderContentItemTags": "Bool",
        "WFImageCombineMode": "Bool"
    },
    "is.workflow.actions.getrichtextfromhtml": {
        "WFHTML": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Rich Text from HTML": "public.html(Object)"
    },
    "is.workflow.actions.properties.locations": {
        "WFContentItemPropertyName": "Enum",
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Details of Locations": "Object"
    },
    "is.workflow.actions.openin": {
        "WFOpenInAskWhenRun": "Bool",
        "WFSelectedApp": "WFAppPickerParameter(Object)",
        "WFAppName": "String",
        "WFInput": "WFFilePickerParameter(Object)"
    },
    "is.workflow.actions.url.getheaders": {
        "WFInput": "String",
        "ThisIsReturnValue:Headers of URL": "NSDictionary(Object)"
    },
    "is.workflow.actions.dropbox.createfolder": {
        "WFFilePath": "String"
    },
    "is.workflow.actions.image.convert": {
        "WFImageFormat": "WFImageConvertFormatPickerParameter(Object) = \"JPEG\"",
        "WFImageCompressionQuality": "Float = 0.75",
        "WFImagePreserveMetadata": "Bool = True",
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Converted Image": "WFImage(Object)"
    },
    "is.workflow.actions.recordaudio": {
        "WFRecordingCompression": "Enum = \"Normal\"",
        "WFRecordingStart": "Enum = \"On Tap\"",
        "WFRecordingEnd": "Enum = \"On Tap\"",
        "WFRecordingTimeInterval": "Enum",
        "ThisIsReturnValue:Recorded Audio": "com.apple.m4a-audio(Object)"
    },
    "is.workflow.actions.properties.appstore": {
        "WFContentItemPropertyName": "Enum",
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Details of App Store App": "Object"
    },
    "is.workflow.actions.getnameofemoji": {
        "WFInput": "String",
        "ThisIsReturnValue:Name of Emoji": "NSString(Object)"
    },
    "is.workflow.actions.downloadurl": {
        "WFURL": "String",
        "WFHTTPMethod": "Enum = \"GET\"",
        "ShowHeaders": "Bool",
        "WFHTTPHeaders": "WFDictionaryParameter(Object)",
        "WFHTTPBodyType": "Enum = \"JSON\"",
        "WFFormValues": "WFDictionaryParameter(Object)",
        "WFJSONValues": "WFDictionaryParameter(Object)",
        "WFRequestVariable": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Contents of URL": "public.data(Object)"
    },
    "com.apple.facetime.facetime": {
        "IntentAppDefinition": "WFIntentAppPickerParameter(Object) = {'BundleIdentifier': 'com.apple.TelephonyUtilities.PhoneIntentHandler'}",
        "WFFaceTimeType": "Enum = \"Video\"",
        "WFFaceTimeContact": "WFContactFieldParameter(Object)"
    },
    "com.apple.TVRemoteUIService.LaunchRemoteIntent": {
        "device": "WFMediaRoutePickerParameter(Object)"
    },
    "is.workflow.actions.instapaper.get": {
        "WFInstapaperFolder": "WFDynamicEnumerationParameter(Object)",
        "WFBookmarkCount": "Integer = 5",
        "ThisIsReturnValue:Instapaper Bookmarks": "WFURLContentItem(Object)"
    },
    "is.workflow.actions.trello.get": {
        "WFTrelloItemType": "Enum = \"Boards\"",
        "WFTrelloBoard": "WFTrelloBoardPickerParameter(Object)",
        "WFTrelloList": "WFTrelloListPickerParameter(Object)",
        "ThisIsReturnValue:Trello Items": "(WFTrelloBoard(Object) or WFTrelloList(Object) or WFTrelloCard(Object))"
    },
    "is.workflow.actions.evernote.get": {
        "WFEvernoteNotesTitleSearch": "String",
        "WFEvernoteNotesTags": "WFEvernoteTagsTagFieldParameter(Object)",
        "WFEvernoteNotesNotebookName": "WFEvernoteNotebookPickerParameter(Object)",
        "WFEvernoteNotesCount": "Integer = 1",
        "ThisIsReturnValue:Notes": "ENNoteRef(Object)"
    },
    "is.workflow.actions.text.combine": {
        "text": "String",
        "WFTextSeparator": "Enum = \"New Lines\"",
        "WFTextCustomSeparator": "String"
    },
    "is.workflow.actions.addnewcontact": {
        "WFContactFirstName": "String",
        "WFContactLastName": "String",
        "WFContactCompany": "String",
        "WFContactPhoto": "WFVariablePickerParameter(Object)",
        "WFContactPhoneNumbers": "WFPhoneNumberFieldParameter(Object)",
        "WFContactEmails": "WFEmailAddressFieldParameter(Object)",
        "WFContactNotes": "String",
        "ShowWhenRun": "Bool = True",
        "ThisIsReturnValue:New Contact": "WFContact(Object)"
    },
    "is.workflow.actions.appendvariable": {
        "WFVariableName": "String",
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Variable": "WFContentItem(Object)"
    },
    "is.workflow.actions.contacts": {
        "WFContact": "WFContactFieldParameter(Object)",
        "ThisIsReturnValue:Contacts": "WFContact(Object)"
    },
    "is.workflow.actions.getupcomingevents": {
        "WFGetUpcomingItemCalendar": "WFCalendarPickerParameter(Object)",
        "WFGetUpcomingItemCount": "Integer = 1",
        "WFDateSpecifier": "Enum = \"Any Day\"",
        "WFSpecifiedDate": "String",
        "ThisIsReturnValue:Upcoming Events": "EKEvent(Object)"
    },
    "is.workflow.actions.setters.contacts": {
        "WFInput": "String",
        "WFContactContentItemContactPhoto": "WFPhotoMediaContentItem",
        "WFContentItemPropertyName": "Enum",
        "Mode": "Enum",
        "Show-WFContactContentItemURLs": "Bool",
        "WFContactContentItemGroup": "WFContactFieldParameter(Object)",
        "WFContactContentItemFirstName": "String"
    },
    "is.workflow.actions.getdistance": {
        "WFGetDirectionsCustomLocation": "WFLocationParameter(Object)",
        "WFGetDistanceDestination": "WFLocationParameter(Object)",
        "WFGetDirectionsActionMode": "Enum = \"Direct\"",
        "WFDistanceUnit": "Enum",
        "Accuracy": "WFLocationAccuracyParameter(Object)",
        "ThisIsReturnValue:Distance": "NSNumber(Object)"
    },
    "is.workflow.actions.getwifi": {
        "WFNetworkDetailsNetwork": "WFNetworkPickerParameter(Object)",
        "WFWiFiDetail": "Enum = \"Network Name\"",
        "WFCellularDetail": "Enum = \"Carrier Name\"",
        "ThisIsReturnValue:Network Details": "(NSString(Object) or NSNumber(Object))"
    },
    "is.workflow.actions.skipforward": {
        "WFMediaRoute": "WFMediaRoutePickerParameter(Object) = \"Local\""
    },
    "is.workflow.actions.alert": {
        "WFAlertActionTitle": "String",
        "WFAlertActionMessage": "String = \"Do you want to continue?\"",
        "WFAlertActionCancelButtonShown": "Bool = True"
    },
    "is.workflow.actions.overlayimageonimage": {
        "WFImage": "WFVariablePickerParameter(Object)",
        "WFInput": "WFVariablePickerParameter(Object)",
        "WFShouldShowImageEditor": "Bool = True",
        "WFImagePosition": "Enum = \"Center\"",
        "WFImageWidth": "Integer",
        "WFImageHeight": "Integer",
        "WFImageX": "Integer",
        "WFImageY": "Integer",
        "WFRotation": "Integer",
        "WFOverlayImageOpacity": "Integer = 100",
        "ThisIsReturnValue:Overlaid Image": "WFImageContentItem(Object)"
    },
    "is.workflow.actions.getvalueforkey": {
        "WFGetDictionaryValueType": "Enum = \"Value\"",
        "WFDictionaryKey": "String",
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Dictionary Value": "(WFStringContentItem(Object) or WFNumberContentItem(Object) or WFDateContentItem(Object) or WFDictionaryContentItem(Object) or WFBooleanContentItem(Object))"
    },
    "is.workflow.actions.openworkflow": {
        "WFWorkflow": "WFWorkflowPickerParameter(Object)"
    },
    "is.workflow.actions.podcasts.subscribe": {
        "WFInput": "String"
    },
    "is.workflow.actions.mountdiskimage": {
        "WFInput": "WFFilePickerParameter(Object)",
        "ThisIsReturnValue:Mounted Volume": "WFGenericFileContentItem(Object)"
    },
    "is.workflow.actions.personalhotspot.set": {
        "operation": "Enum = \"set\"",
        "OnValue": "Bool = True"
    },
    "is.workflow.actions.filter.images": {
        "WFContentItemFilter": "WFContentPredicateOperatorParameter",
        "WFContentItemInputParameter": "WFVariablePickerParameter(Object)",
        "WFContentItemSortProperty": "WFDynamicEnumerationParameter(Object)",
        "WFContentItemSortOrder": "WFDynamicEnumerationParameter(Object)",
        "WFContentItemLimitEnabled": "Bool = True",
        "WFContentItemLimitNumber": "Integer = 1",
        "ThisIsReturnValue:Images": "Object"
    },
    "is.workflow.actions.properties.articles": {
        "WFContentItemPropertyName": "Enum",
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Details of Article": "Object"
    },
    "is.workflow.actions.runjavascriptforautomation": {
        "Input": "WFVariablePickerParameter(Object)",
        "Script": "WFOSAScriptEditorParameter(Object) = \"function run(input, parameters) {\n\t// Your script goes here\n\treturn input;\n}\"",
        "ThisIsReturnValue:JavaScript Result": "(WFDictionaryContentItem(Object) or WFStringContentItem(Object) or WFBooleanContentItem(Object) or WFNumberContentItem(Object))"
    },
    "com.apple.TVRemoteUIService.ToggleSystemAppearanceIntent": {
        "appearanceToggle": "Enum",
        "device": "WFMediaRoutePickerParameter(Object)"
    },
    "is.workflow.actions.searchappstore": {
        "WFSearchTerm": "String",
        "WFAttribute": "WFDynamicEnumerationParameter(Object)",
        "WFEntity": "WFDynamicEnumerationParameter(Object)",
        "WFCountry": "WFiTunesStoreCountryPickerParameter(Object)",
        "WFItemLimit": "Integer = 25",
        "ThisIsReturnValue:App Store Apps": "WFAppStoreAppContentItem(Object)"
    },
    "is.workflow.actions.personalhotspot.password.get": {
        "ThisIsReturnValue:Personal Hotspot Password": "NSString(Object)"
    },
    "is.workflow.actions.address": {
        "WFAddressLine1": "String",
        "WFAddressLine2": "String",
        "WFCity": "String",
        "WFState": "String",
        "WFPostalCode": "String",
        "WFCountry": "WFCountryFieldParameter(Object)",
        "ThisIsReturnValue:Street Address": "WFStreetAddress(Object)"
    },
    "is.workflow.actions.setvolume": {
        "WFVolumeSetting": "Enum = \"Media\"",
        "WFVolume": "Float = 0.5"
    },
    "is.workflow.actions.tumblr.post": {
        "WFInput": "WFVariablePickerParameter(Object)",
        "WFComposeInApp": "WFTumblrComposeInAppParameter(Object)",
        "WFBlogName": "WFTumblrBlogPickerParameter(Object)",
        "WFPostType": "Enum = \"Text\"",
        "WFPostState": "Enum = \"Post Now\"",
        "WFPostTitle": "String",
        "WFPostSource": "String",
        "WFPostCaption": "String",
        "WFPostTags": "String",
        "WFPostDescription": "String",
        "ThisIsReturnValue:Tumblr Post URL": "WFURLContentItem(Object)"
    },
    "is.workflow.actions.posters.switch": {
        "WFPoster": "WFPosterPickerParameter(Object)"
    },
    "is.workflow.actions.addframetogif": {
        "WFImage": "WFVariablePickerParameter(Object)",
        "WFInputGIF": "WFVariablePickerParameter(Object)",
        "WFGIFDelayTime": "Integer = 0.25",
        "WFGIFAutoSize": "Bool = True",
        "WFGIFManualSizeWidth": "Integer",
        "WFGIFManualSizeHeight": "Integer",
        "ThisIsReturnValue:GIF": "com.compuserve.gif(Object)"
    },
    "is.workflow.actions.dropbox.open": {
        "WFShowFilePicker": "Bool = True",
        "SelectMultiple": "Bool",
        "WFGetFilePath": "String",
        "WFGetFileInitialDirectoryPath": "String",
        "WFFileErrorIfNotFound": "Bool = True",
        "ThisIsReturnValue:File": "public.data(Object)"
    },
    "is.workflow.actions.unzip": {
        "WFArchive": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Files": "WFGenericFileContentItem(Object)"
    },
    "is.workflow.actions.dropbox.appendfile": {
        "WFFilePath": "String",
        "WFAppendFileWriteMode": "Enum = \"Append\"",
        "WFAppendOnNewLine": "Bool = True",
        "WFInput": "String",
        "ThisIsReturnValue:Appended File": "public.data(Object)"
    },
    "is.workflow.actions.urlencode": {
        "WFEncodeMode": "Enum = \"Encode\"",
        "WFInput": "String",
        "ThisIsReturnValue:URL Encoded Text": "WFStringContentItem(Object)"
    },
    "is.workflow.actions.handoff": {},
    "is.workflow.actions.nothing": {
        "ThisIsReturnValue:Nothing": "WFContentItem(Object)"
    },
    "is.workflow.actions.round": {
        "WFInput": "Integer",
        "WFRoundTo": "Enum = \"Ones Place\"",
        "WFRoundMode": "Enum = \"Normal\"",
        "TenToThePowerOf": "Integer",
        "ThisIsReturnValue:Rounded Number": "NSDecimalNumber(Object)"
    },
    "is.workflow.actions.getparkedcarlocation": {
        "ThisIsReturnValue:Car Location": "WFParkedCarContentItem(Object)"
    },
    "is.workflow.actions.seek": {
        "WFSeekBehavior": "Enum = \"To Time\"",
        "WFTimeInterval": "Enum",
        "WFMediaRoute": "WFMediaRoutePickerParameter(Object) = \"Local\""
    },
    "is.workflow.actions.trello.add.board": {
        "WFTrelloName": "String",
        "WFTrelloDescription": "String",
        "ThisIsReturnValue:Trello Board": "WFTrelloBoard(Object)"
    },
    "is.workflow.actions.wallpaper.set": {
        "WFInput": "WFVariablePickerParameter(Object)",
        "WFWallpaperLocation": "Enum = ['Lock Screen', 'Home Screen']",
        "WFWallpaperShowPreview": "Bool = True",
        "WFWallpaperPerspectiveZoom": "Bool",
        "WFSelectedPoster": "WFPosterPickerParameter(Object)",
        "WFWallpaperSmartCrop": "Bool = True",
        "WFWallpaperLegibilityBlur": "Bool = True",
        "ThisIsReturnValue:Wallpaper": "WFPosterRepresentation(Object)"
    },
    "is.workflow.actions.safari.geturl": {
        "ThisIsReturnValue:Web Page": "WFSafariWebPage(Object)"
    },
    "is.workflow.actions.getdevicedetails": {
        "WFDeviceDetail": "Enum = \"Device Name\"",
        "ThisIsReturnValue:Device Details": "(NSString(Object) or NSNumber(Object))"
    },
    "is.workflow.actions.pinboard.get": {
        "WFPinTags": "String",
        "WFBookmarkCount": "Integer = 5",
        "ThisIsReturnValue:Pinboard Bookmarks": "WFURLContentItem(Object)"
    },
    "is.workflow.actions.properties.reminders": {
        "WFContentItemPropertyName": "Enum = \"List\"",
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Details of Reminders": "Object"
    },
    "is.workflow.actions.image.flip": {
        "WFImageFlipDirection": "Enum = \"Horizontal\"",
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Flipped Image": "WFImage(Object)"
    },
    "is.workflow.actions.trello.add.list": {
        "WFTrelloName": "String",
        "WFTrelloBoard": "WFTrelloBoardPickerParameter(Object)",
        "WFTrelloPosition": "Enum = \"Top\"",
        "ThisIsReturnValue:Trello List": "WFTrelloList(Object)"
    },
    "is.workflow.actions.notification": {
        "WFNotificationActionTitle": "String",
        "WFNotificationActionBody": "String = \"Hello World\"",
        "WFNotificationActionSound": "Bool = True",
        "WFInput": "WFVariablePickerParameter(Object)"
    },
    "is.workflow.actions.properties.eventattendees": {
        "WFContentItemPropertyName": "Enum",
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Details of Event Attendees": "Object"
    },
    "is.workflow.actions.properties.images": {
        "WFContentItemPropertyName": "Enum",
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Details of Images": "Object"
    },
    "is.workflow.actions.debug.contentattribution": {
        "Input": "WFVariablePickerParameter(Object)"
    },
    "is.workflow.actions.share": {
        "WFInput": "WFVariablePickerParameter(Object)"
    },
    "is.workflow.actions.searchweb": {
        "WFSearchWebDestination": "Enum = \"Google\"",
        "WFInputText": "String"
    },
    "is.workflow.actions.openapp": {
        "WFSelectedApp": "WFAppPickerParameter(Object)",
        "WFAppName": "String",
        "WFOpenInSlideOver": "Bool",
        "ThisIsReturnValue:App": "WFAppContentItem(Object)"
    },
    "is.workflow.actions.text.split": {
        "text": "String",
        "WFTextSeparator": "Enum",
        "WFTextCustomSeparator": "String"
    },
    "is.workflow.actions.makediskimage": {
        "WFInput": "WFFilePickerParameter(Object)",
        "VolumeName": "String",
        "EncryptImage": "Bool",
        "SizeToFit": "Bool",
        "ImageSize": "WFUnitQuantityFieldParameter(Object) = 1",
        "ThisIsReturnValue:Disk Image": "WFGenericFileContentItem(Object)"
    },
    "is.workflow.actions.rss.extract": {
        "WFURLs": "String",
        "ThisIsReturnValue:RSS Feeds from Page": "WFURLContentItem(Object)"
    },
    "is.workflow.actions.pinboard.add": {
        "WFPinTitle": "String",
        "WFPinTags": "String",
        "WFPinPublic": "Bool = True",
        "WFPinUnread": "Bool = True",
        "WFPinDescription": "String",
        "WFPinboardURL": "String"
    },
    "is.workflow.actions.detect.phonenumber": {
        "WFInput": "String",
        "ThisIsReturnValue:Phone Numbers": "WFPhoneNumberContentItem(Object)"
    },
    "is.workflow.actions.exportsong": {
        "WFExportSongActionSelectMultiple": "Bool",
        "ThisIsReturnValue:Music": "MPMediaItem(Object)"
    },
    "is.workflow.actions.measurement.create": {
        "WFMeasurementUnitType": "WFUnitTypePickerParameter(Object) = \"Length\"",
        "WFMeasurementUnit": "WFUnitQuantityFieldParameter(Object)",
        "ThisIsReturnValue:Measurement": "NSMeasurement(Object)"
    },
    "is.workflow.actions.showresult": {
        "Text": "String"
    },
    "is.workflow.actions.makegif": {
        "WFMakeGIFActionDelayTime": "Integer = 0.2",
        "WFMakeGIFActionLoopEnabled": "Bool = True",
        "WFMakeGIFActionLoopCount": "Integer",
        "WFMakeGIFActionAutoSize": "Bool = True",
        "WFMakeGIFActionManualSizeWidth": "Integer",
        "WFMakeGIFActionManualSizeHeight": "Integer",
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:GIF": "com.compuserve.gif(Object)"
    },
    "is.workflow.actions.properties.safariwebpage": {
        "WFContentItemPropertyName": "Enum",
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Details of Safari Web Page": "Object"
    },
    "is.workflow.actions.setclipboard": {
        "WFLocalOnly": "Bool",
        "WFExpirationDate": "String",
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Copied Text": "Object"
    },
    "is.workflow.actions.selectemail": {
        "ThisIsReturnValue:Email Addresses": "WFEmailAddress(Object)"
    },
    "is.workflow.actions.filter.displays": {
        "WFContentItemFilter": "WFContentPredicateOperatorParameter",
        "WFContentItemInputParameter": "WFVariablePickerParameter(Object)",
        "WFContentItemSortProperty": "WFDynamicEnumerationParameter(Object)",
        "WFContentItemSortOrder": "WFDynamicEnumerationParameter(Object)",
        "ThisIsReturnValue:Displays": "Object"
    },
    "is.workflow.actions.converttimezone": {
        "Date": "String",
        "SourceTimeZone": "WFTimeZonePickerParameter(Object)",
        "DestinationTimeZone": "WFTimeZonePickerParameter(Object)",
        "ThisIsReturnValue:Converted Date": "NSDateComponents(Object)"
    },
    "is.workflow.actions.removefromalbum": {
        "WFRemoveAlbumSelectedGroup": "WFPhotoAlbumPickerParameter(Object)",
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Removed Photo Media": "PHAsset(Object)"
    },
    "is.workflow.actions.setparkedcar": {
        "WFLocation": "WFLocationParameter(Object)",
        "WFSetParkedCarNotes": "String",
        "WFImage": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Parked Car": "WFParkedCarContentItem(Object)"
    },
    "is.workflow.actions.venmo.pay": {
        "IntentAppDefinition": "WFIntentAppPickerParameter(Object) = {'BundleIdentifier': 'com.apple.PassKit.PassKitIntentsExtension'}",
        "WFVenmoActionRecipients": "WFContactHandleFieldParameter(Object)",
        "WFVenmoActionAmount": "Float",
        "WFVenmoActionAppSwitch": "Bool",
        "WFVenmoActionNote": "String"
    },
    "is.workflow.actions.deskconnect.send": {
        "WFInput": "WFVariablePickerParameter(Object)"
    },
    "is.workflow.actions.detect.link": {
        "WFInput": "String",
        "ThisIsReturnValue:URLs": "WFURLContentItem(Object)"
    },
    "is.workflow.actions.readinglist": {
        "WFURL": "String"
    },
    "is.workflow.actions.generatebarcode": {
        "WFQRErrorCorrectionLevel": "Enum = \"Medium\"",
        "WFText": "String",
        "ThisIsReturnValue:QR Code": "WFImage(Object)"
    },
    "is.workflow.actions.todoist.add": {
        "WFTodoistContent": "String",
        "WFTodoistProject": "WFTodoistProjectPickerParameter(Object) = \"Inbox\"",
        "WFTodoistDueDate": "String",
        "WFTodoistReminder": "String",
        "WFTodoistReminderType": "Enum = \"Email\"",
        "WFTodoistPriority": "Enum = \"4\"",
        "WFTodoistNotes": "String",
        "WFTodoistFile": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Todoist Item": "NSURL(Object)"
    },
    "is.workflow.actions.date": {
        "WFDateActionMode": "Enum = \"Current Date\"",
        "WFDateActionDate": "String",
        "ThisIsReturnValue:Date": "NSDate(Object)"
    },
    "is.workflow.actions.getframesfromimage": {
        "WFImage": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Frames from Image": "(WFImageContentItem(Object) or WFPhotoMediaContentItem(Object))"
    },
    "is.workflow.actions.repeat.each": {
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Repeat with Each": "WFContentItem(Object)"
    },
    "is.workflow.actions.searchmaps": {
        "WFInput": "WFLocationParameter(Object)",
        "WFSearchMapsActionApp": "WFMapsAppPickerParameter(Object) = \"Maps\""
    },
    "is.workflow.actions.showwebpage": {
        "WFEnterSafariReader": "Bool",
        "WFURL": "String"
    },
    "is.workflow.actions.setbrightness": {
        "WFBrightness": "Float = 0.5"
    },
    "is.workflow.actions.rss": {
        "WFRSSFeedURL": "String = \"https://www.apple.com/newsroom/rss-feed.rss\"",
        "WFRSSItemQuantity": "Integer = 10",
        "ThisIsReturnValue:RSS Items": "(WFArticle(Object) or NSURL(Object))"
    },
    "is.workflow.actions.announcenotifications.set": {
        "operation": "Enum = \"set\"",
        "OnValue": "Bool = True"
    },
    "is.workflow.actions.health.quantity.log": {
        "WFQuantitySampleType": "WFQuantityTypePickerParameter(Object)",
        "WFQuantitySampleQuantity": "WFHealthQuantityFieldParameter(Object)",
        "WFQuantitySampleAdditionalQuantity": "WFHealthQuantityAdditionalFieldParameter(Object)",
        "WFQuantitySampleAdditionalEnumeration": "WFHealthQuantityAdditionalPickerParameter(Object)",
        "WFCategorySampleEnumeration": "WFHealthCategoryPickerParameter(Object)",
        "WFCategorySampleAdditionalEnumerationKey": "WFHealthCategoryAdditionalPickerParameter(Object)",
        "WFQuantitySampleDate": "String",
        "WFSampleEndDate": "String",
        "ThisIsReturnValue:Health Sample": "WFHKSampleContentItem(Object)"
    },
    "is.workflow.actions.vpn.set": {
        "WFVPNOperation": "Enum = \"Connect\"",
        "WFOnDemandValue": "Bool = True",
        "WFVPN": "WFVPNPickerParameter(Object)"
    },
    "is.workflow.actions.image.mask": {
        "WFInput": "WFVariablePickerParameter(Object)",
        "WFMaskType": "Enum = \"Rounded Rectangle\"",
        "WFMaskCornerRadius": "Integer",
        "WFCustomMaskImage": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Masked Image": "WFImageContentItem(Object)"
    },
    "is.workflow.actions.detect.dictionary": {
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Dictionary": "WFDictionaryContentItem(Object)"
    },
    "is.workflow.actions.math": {
        "WFInput": "Integer",
        "WFMathOperation": "Enum = \"+\"",
        "WFScientificMathOperation": "Enum",
        "WFMathOperand": "Integer",
        "WFScientificMathOperand": "Integer",
        "ThisIsReturnValue:Calculation Result": "NSDecimalNumber(Object)"
    },
    "is.workflow.actions.openpasswords": {
        "WFShowPasswordsSearchTerm": "String"
    },
    "is.workflow.actions.properties.parkedcar": {
        "WFContentItemPropertyName": "Enum",
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Details of Parked Car": "Object"
    },
    "is.workflow.actions.showdefinition": {
        "Word": "String"
    },
    "is.workflow.actions.output": {
        "WFOutput": "String",
        "WFNoOutputSurfaceBehavior": "Enum = \"Do Nothing\"",
        "WFResponse": "String"
    },
    "is.workflow.actions.cellulardata.set": {
        "operation": "Enum = \"set\"",
        "OnValue": "Bool = True"
    },
    "is.workflow.actions.viewresult": {
        "WFInput": "WFVariablePickerParameter(Object)"
    },
    "is.workflow.actions.runjavascriptonwebpage": {
        "WFJavaScript": "String = \"var result = [];\n// Get all links from the page\nvar elements = document.querySelectorAll(\"a\");\nfor (let element of elements) {\n\tresult.push({\n\t\t\"url\": element.href,\n\t\t\"text\": element.innerText\n\t});\n}\n\n// Call completion to finish\ncompletion(result);\"",
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:JavaScript Result": "(WFDictionaryContentItem(Object) or WFStringContentItem(Object) or WFBooleanContentItem(Object) or WFNumberContentItem(Object))"
    },
    "is.workflow.actions.ask": {
        "WFInputType": "Enum",
        "WFAskActionPrompt": "String",
        "WFAllowsMultilineText": "Bool = True",
        "WFAskActionDefaultAnswerDateAndTime": "String",
        "WFAskActionAllowsNegativeNumbers": "Bool",
        "urlAnswer": "String",
        "WFAskActionAllowsDecimalNumbers": "Bool",
        "WFAskActionDefaultAnswerTime": "String",
        "WFAskActionDefaultAnswerNumber": "Integer",
        "WFAskActionDefaultAnswer": "String",
        "WFAskActionDefaultAnswerURL": "String",
        "WFAskActionDefaultAnswerDate": "String",
        "WFAskActionImmediateDictation": "String",
        "WFAskActionDateGranularity": "String",
        "ThisIsReturnValue:Provided Input": "(NSString(Object) or NSDecimalNumber(Object) or NSURL(Object) or NSDate(Object))"
    },
    "is.workflow.actions.properties.weather.conditions": {
        "WFContentItemPropertyName": "Enum",
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Details of Weather Conditions": "Object"
    },
    "is.workflow.actions.repeat.count": {
        "WFRepeatCount": "Integer = 1",
        "ThisIsReturnValue:Repeat": "WFContentItem(Object)"
    },
    "is.workflow.actions.file.rename": {
        "WFFile": "WFFilePickerParameter(Object)",
        "WFNewFilename": "String",
        "ThisIsReturnValue:File": "public.data(Object)"
    },
    "is.workflow.actions.addtoplaylist": {
        "WFPlaylistName": "WFPlaylistPickerParameter(Object)",
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Updated Playlist": "MPMediaItem(Object)"
    },
    "is.workflow.actions.addmusictoupnext": {
        "WFWhenToPlay": "Enum = \"Next\"",
        "WFMusic": "WFVariablePickerParameter(Object)"
    },
    "is.workflow.actions.makespokenaudiofromtext": {
        "WFInput": "String",
        "WFSpeakTextRate": "Float = 0.5",
        "WFSpeakTextPitch": "Float = 1.0",
        "WFSpeakTextLanguage": "WFSpeakTextLanguagePickerParameter(Object) = \"Default\"",
        "WFSpeakTextVoice": "WFSpeakTextVoicePickerParameter(Object) = \"Default\"",
        "ThisIsReturnValue:Spoken Audio": "com.apple.coreaudio-format(Object)"
    },
    "is.workflow.actions.lightroom.import": {
        "applyPreset": "Bool",
        "presetGroup": "Enum = \"Color\"",
        "preset": "WFLightroomPresetPickerParameter(Object)",
        "WFInput": "WFVariablePickerParameter(Object)"
    },
    "is.workflow.actions.homeaccessory": {
        "WFHomeTriggerActionSets": "WFHomeAccessoryPickerParameter(Object)"
    },
    "is.workflow.actions.workout.start": {
        "IntentAppDefinition": "WFIntentAppPickerParameter(Object) = {'BundleIdentifier': 'com.apple.SessionTrackerApp'}",
        "workoutName": "WFFitnessWorkoutTypePickerParameter(Object)",
        "isOpenEnded": "Bool = True",
        "WorkoutGoal": "WFWorkoutGoalQuantityFieldParameter(Object) = \"15\""
    },
    "is.workflow.actions.tweet": {
        "TweetInput": "String"
    },
    "is.workflow.actions.photos.createalbum": {
        "AlbumName": "String",
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Saved Photo Media": "PHAsset(Object)"
    },
    "is.workflow.actions.properties.itunesstore": {
        "WFContentItemPropertyName": "Enum",
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Details of iTunes Product": "Object"
    },
    "is.workflow.actions.phonenumber": {
        "WFPhoneNumber": "WFPhoneNumberFieldParameter(Object)",
        "ThisIsReturnValue:Phone Number": "WFPhoneNumber(Object)"
    },
    "is.workflow.actions.venmo.request": {
        "IntentAppDefinition": "WFIntentAppPickerParameter(Object) = {'BundleIdentifier': 'com.apple.PassKit.PassKitIntentsExtension'}",
        "WFVenmoActionRecipients": "WFContactHandleFieldParameter(Object)",
        "WFVenmoActionAmount": "Float",
        "WFVenmoActionAppSwitch": "Bool",
        "ShowWhenRun": "Bool = True",
        "WFVenmoActionNote": "String"
    },
    "is.workflow.actions.text.replace": {
        "WFReplaceTextFind": "String",
        "WFReplaceTextReplace": "String",
        "WFReplaceTextCaseSensitive": "Bool = True",
        "WFReplaceTextRegularExpression": "Bool",
        "WFInput": "String",
        "ThisIsReturnValue:Updated Text": "NSString(Object)"
    },
    "is.workflow.actions.setairdropreceiving": {
        "WFAirDropState": "WFAirDropVisibilityParameter(Object)"
    },
    "is.workflow.actions.handoffplayback": {
        "WFSourceMediaRoute": "WFMediaRoutePickerParameter(Object)",
        "WFDestinationMediaRoute": "WFMediaRoutePickerParameter(Object)"
    },
    "is.workflow.actions.dnd.set": {
        "Operation": "Enum = \"Turn\"",
        "Enabled": "Bool",
        "AssertionType": "Enum = \"Turned Off\"",
        "Event": "WFVariablePickerParameter(Object)",
        "Time": "String",
        "FocusModes": "WFFocusModesPickerParameter(Object)"
    },
    "is.workflow.actions.getdirections": {
        "WFLocation": "WFLocationParameter(Object)",
        "WFDestination": "WFLocationParameter(Object)",
        "WFGetDirectionsActionApp": "WFMapsAppPickerParameter(Object) = \"Maps\"",
        "WFGetDirectionsActionMode": "WFDynamicEnumerationParameter(Object) = \"Driving\""
    },
    "is.workflow.actions.imgur.upload": {
        "WFInput": "WFVariablePickerParameter(Object)",
        "WFImgurAnonymous": "Bool = True",
        "WFImgurDirectLink": "Bool",
        "WFImgurAlbum": "Bool",
        "WFImgurAlbumLayout": "Enum = \"Blog\"",
        "WFImgurAlbumPrivacy": "Enum = \"Hidden\"",
        "WFImgurTitle": "String",
        "WFImgurDescription": "String",
        "ThisIsReturnValue:Imgur URLs": "NSURL(Object)"
    },
    "is.workflow.actions.number.random": {
        "WFRandomNumberMinimum": "Integer",
        "WFRandomNumberMaximum": "Integer",
        "ThisIsReturnValue:Random Number": "NSDecimalNumber(Object)"
    },
    "is.workflow.actions.nightshift.set": {
        "operation": "Enum = \"set\"",
        "OnValue": "Bool = True"
    },
    "is.workflow.actions.makepdf": {
        "WFPDFIncludeMargin": "Bool",
        "WFPDFIncludedPages": "Enum = \"All Pages\"",
        "WFPDFSinglePage": "Integer",
        "WFPDFPageRangeStart": "Integer",
        "WFPDFPageRangeEnd": "Integer",
        "WFInput": "WFVariablePickerParameter(Object)",
        "WFPDFDocumentMergeBehavior": "Enum = \"Append\"",
        "ThisIsReturnValue:PDF": "WFPDFContentItem(Object)"
    },
    "is.workflow.actions.file.getfoldercontents": {
        "WFFolder": "WFFilePickerParameter(Object)",
        "Recursive": "Bool",
        "ThisIsReturnValue:Get Contents of Folder": "public.data(Object)"
    },
    "is.workflow.actions.reminders.showlist": {
        "WFList": "WFRemindersListPickerParameter(Object)"
    },
    "is.workflow.actions.getarticle": {
        "WFWebPage": "String",
        "ThisIsReturnValue:Article": "WFArticleContentItem(Object)"
    },
    "is.workflow.actions.savetocameraroll": {
        "WFCameraRollSelectedGroup": "WFPhotoAlbumPickerParameter(Object)",
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Saved Photo Media": "PHAsset(Object)"
    },
    "is.workflow.actions.detect.address": {
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Addresses": "WFLocationContentItem(Object)"
    },
    "is.workflow.actions.silenceunknowncallers.set": {
        "operation": "Enum = \"set\"",
        "OnValue": "Bool = True"
    },
    "is.workflow.actions.weather.forecast": {
        "WFWeatherCustomLocation": "WFLocationParameter(Object)",
        "WFWeatherForecastType": "Enum = \"Daily\"",
        "ThisIsReturnValue:Weather Conditions": "WFWeatherData(Object)"
    },
    "is.workflow.actions.searchlocalbusinesses": {
        "WFInput": "WFLocationParameter(Object)",
        "WFSearchQuery": "String",
        "WFSearchRadius": "WFSearchLocalBusinessesRadiusParameter(Object)",
        "ThisIsReturnValue:Local Businesses": "MKMapItem(Object)"
    },
    "is.workflow.actions.trimvideo": {
        "WFInputMedia": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Trimmed Media": "com.apple.quicktime-movie(Object)"
    },
    "is.workflow.actions.measurement.convert": {
        "WFMeasurementUnitType": "WFUnitTypePickerParameter(Object) = \"Length\"",
        "WFMeasurementUnit": "WFMeasurementUnitPickerParameter(Object)",
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Converted Measurement": "NSMeasurement(Object)"
    },
    "is.workflow.actions.display.always-on.set": {
        "operation": "Enum = \"set\"",
        "OnValue": "Bool = True"
    },
    "is.workflow.actions.filter.music": {
        "WFContentItemFilter": "WFContentPredicateOperatorParameter",
        "WFContentItemInputParameter": "WFVariablePickerParameter(Object)",
        "WFContentItemSortEnabled": "Bool",
        "WFContentItemSortProperty": "WFDynamicEnumerationParameter(Object)",
        "WFContentItemSortOrder": "WFDynamicEnumerationParameter(Object)",
        "WFContentItemLimitEnabled": "Bool = True",
        "WFContentItemLimitNumber": "Integer = 1",
        "ThisIsReturnValue:Music": "Object"
    },
    "is.workflow.actions.gethalfwaypoint": {
        "WFGetHalfwayPointFirstLocation": "WFLocationParameter(Object)",
        "WFGetHalfwayPointSecondLocation": "WFLocationParameter(Object)",
        "ThisIsReturnValue:Halfway Point": "CLLocation(Object)"
    },
    "is.workflow.actions.appearance": {
        "operation": "Enum = \"set\"",
        "style": "Enum = \"dark\""
    },
    "is.workflow.actions.intercom": {
        "WFHome": "WFHomeAreaPickerParameter(Object)",
        "WFInput": "String"
    },
    "is.workflow.actions.getepisodesforpodcast": {
        "WFInput": "WFPodcastPickerParameter(Object)",
        "ThisIsReturnValue:Episodes": "WFPodcastEpisodeContentItem(Object)"
    },
    "is.workflow.actions.exit": {},
    "is.workflow.actions.format.number": {
        "WFNumber": "Integer",
        "WFNumberFormatDecimalPlaces": "Integer = 2",
        "ThisIsReturnValue:Formatted Number": "NSString(Object)"
    },
    "is.workflow.actions.adjustdate": {
        "WFDate": "String",
        "WFAdjustOperation": "Enum = \"Add\"",
        "WFDuration": "Enum",
        "ThisIsReturnValue:Adjusted Date": "NSDate(Object)"
    },
    "is.workflow.actions.filter.health.quantity": {
        "WFContentItemFilter": "WFContentPredicateOperatorParameter",
        "WFContentItemInputParameter": "WFVariablePickerParameter(Object)",
        "WFContentItemSortProperty": "WFDynamicEnumerationParameter(Object)",
        "WFContentItemSortOrder": "WFDynamicEnumerationParameter(Object)",
        "WFContentItemLimitEnabled": "Bool = True",
        "WFContentItemLimitNumber": "Integer = 1",
        "WFHKSampleFilteringUnit": "String",
        "WFHKSampleFilteringGroupBy": "WFDynamicEnumerationParameter(Object)",
        "WFHKSampleFilteringFillMissing": "Bool = True",
        "ThisIsReturnValue:Health Samples": "Object"
    },
    "is.workflow.actions.filter.windows": {
        "WFContentItemFilter": "WFContentPredicateOperatorParameter",
        "WFContentItemInputParameter": "WFVariablePickerParameter(Object)",
        "WFContentItemSortProperty": "WFDynamicEnumerationParameter(Object)",
        "WFContentItemSortOrder": "WFDynamicEnumerationParameter(Object)",
        "WFContentItemLimitEnabled": "Bool = True",
        "WFContentItemLimitNumber": "Integer = 1",
        "ThisIsReturnValue:Windows": "Object"
    },
    "is.workflow.actions.importaudiofiles": {
        "WFInput": "WFFilePickerParameter(Object)",
        "WFImportAudioFilesReencode": "Bool",
        "WFImportAudioFilesEncoder": "Enum = \"Default\"",
        "ThisIsReturnValue:Imported Items": "MPMediaItem(Object)"
    },
    "is.workflow.actions.file.select": {
        "WFPickingMode": "Enum = \"Files\"",
        "SelectMultiple": "Bool",
        "ThisIsReturnValue:File": "(public.data(Object) or public.folder(Object))"
    },
    "is.workflow.actions.text.match": {
        "text": "String",
        "WFMatchTextPattern": "String = \"[0-9a-zA-Z]\"",
        "WFMatchTextCaseSensitive": "Bool = True"
    },
    "is.workflow.actions.get.playlist": {
        "WFPlaylistName": "WFPlaylistPickerParameter(Object)",
        "ThisIsReturnValue:Playlist": "MPMediaItem(Object)"
    },
    "is.workflow.actions.gettypeaction": {
        "WFFileType": "String = \"public.rtf\"",
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:File of Type": "public.data(Object)"
    },
    "is.workflow.actions.searchitunes": {
        "WFSearchTerm": "String",
        "WFMediaType": "WFDynamicEnumerationParameter(Object)",
        "WFAttribute": "WFDynamicEnumerationParameter(Object)",
        "WFEntity": "WFDynamicEnumerationParameter(Object)",
        "WFCountry": "WFiTunesStoreCountryPickerParameter(Object)",
        "WFItemLimit": "Integer = 25",
        "ThisIsReturnValue:iTunes Products": "WFiTunesProductContentItem(Object)"
    },
    "is.workflow.actions.hide.app": {
        "WFHideAppMode": "Enum = \"App\"",
        "WFApp": "WFAppPickerParameter(Object)",
        "WFAppsExcept": "WFAppPickerParameter(Object)"
    },
    "is.workflow.actions.splitpdf": {
        "WFInput": "WFFilePickerParameter(Object)",
        "ThisIsReturnValue:PDF Pages": "WFPDFContentItem(Object)"
    },
    "is.workflow.actions.file.createfolder": {
        "WFFilePath": "String",
        "WFFolder": "WFFilePickerParameter(Object)",
        "ThisIsReturnValue:Created Folder": "public.data(Object)"
    },
    "is.workflow.actions.bluetooth.set": {
        "operation": "Enum = \"set\"",
        "OnValue": "Bool = True"
    },
    "is.workflow.actions.getvariable": {
        "WFVariable": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Variable": "WFContentItem(Object)"
    },
    "is.workflow.actions.filter.calendarevents": {
        "WFContentItemFilter": "WFContentPredicateOperatorParameter",
        "WFContentItemInputParameter": "WFVariablePickerParameter(Object)",
        "WFContentItemSortEnabled": "Bool",
        "WFContentItemSortProperty": "WFDynamicEnumerationParameter(Object)",
        "WFContentItemSortOrder": "WFDynamicEnumerationParameter(Object)",
        "WFContentItemLimitEnabled": "Bool = True",
        "WFContentItemLimitNumber": "Integer = 1",
        "ThisIsReturnValue:Calendar Events": "Object"
    },
    "is.workflow.actions.format.filesize": {
        "WFFileSizeFormat": "Enum = \"Automatic\"",
        "WFFileSizeIncludeUnits": "Bool = True",
        "WFFileSize": "Integer",
        "ThisIsReturnValue:Formatted File Size": "NSString(Object)"
    },
    "is.workflow.actions.lockscreen": {},
    "is.workflow.actions.hash": {
        "WFHashType": "Enum = \"MD5\"",
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Hash": "NSString(Object)"
    },
    "is.workflow.actions.dictionary": {
        "WFItems": "WFDictionaryParameter(Object)",
        "ThisIsReturnValue:Dictionary": "NSDictionary(Object)"
    },
    "com.apple.mobilephone.call": {
        "IntentAppDefinition": "WFIntentAppPickerParameter(Object) = {'BundleIdentifier': 'com.apple.TelephonyUtilities.PhoneIntentHandler'}",
        "WFCallContact": "WFPhoneNumberFieldParameter(Object)"
    },
    "is.workflow.actions.gettext": {
        "WFTextActionText": "String",
        "ThisIsReturnValue:Text": "NSString(Object)"
    },
    "is.workflow.actions.properties.files": {
        "WFContentItemPropertyName": "Enum",
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Details of Files": "Object"
    },
    "is.workflow.actions.geturlcomponent": {
        "WFURL": "String",
        "WFURLComponent": "Enum = \"Scheme\"",
        "ThisIsReturnValue:Component of URL": "NSString(Object)"
    },
    "is.workflow.actions.wifi.set": {
        "operation": "Enum = \"set\"",
        "OnValue": "Bool = True"
    },
    "is.workflow.actions.evernote.new": {
        "WFEvernoteNoteTitle": "String",
        "WFEvernoteNotebook": "WFEvernoteNotebookPickerParameter(Object)",
        "WFEvernoteTags": "WFEvernoteTagsTagFieldParameter(Object)",
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:New Note": "ENNoteRef(Object)"
    },
    "is.workflow.actions.returntohomescreen": {},
    "is.workflow.actions.properties.music": {
        "WFContentItemPropertyName": "Enum = \"Artist\"",
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Details of Music": "Object"
    },
    "is.workflow.actions.sleep": {},
    "is.workflow.actions.image.combine": {
        "WFImageCombineMode": "Enum = \"Horizontally\"",
        "WFImageCombineSpacing": "Integer",
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Combined Image": "WFImage(Object)"
    },
    "is.workflow.actions.url": {
        "WFURLActionURL": "String",
        "ThisIsReturnValue:URL": "NSURL(Object)"
    },
    "is.workflow.actions.truetone.set": {
        "operation": "Enum = \"set\"",
        "OnValue": "Bool = True"
    },
    "is.workflow.actions.getwebpagecontents": {
        "WFInput": "String",
        "ThisIsReturnValue:Contents of Web Page": "NSAttributedString(Object)"
    },
    "is.workflow.actions.file.label": {
        "WFInput": "WFFilePickerParameter(Object)",
        "WFLabelColorNumber": "WFFileLabelColorPickerParameter(Object)"
    },
    "is.workflow.actions.compresspdf": {
        "WFInput": "WFFilePickerParameter(Object)",
        "ThisIsReturnValue:Optimized PDF": "com.adobe.pdf(Object)"
    },
    "is.workflow.actions.number": {
        "WFNumberActionNumber": "Integer",
        "ThisIsReturnValue:Number": "NSDecimalNumber(Object)"
    },
    "com.panic.iOS.Transmit.Share": {
        "TransmitSaveTo": "Enum = \"Remote\"",
        "TransmitFavoriteName": "String",
        "TransmitPath": "String"
    },
    "is.workflow.actions.conditional": {
        "WFInput": "WFConditionalSubjectParameter",
        "WFCondition": "WFConditionalOperatorParameter",
        "WFConditionalActionString": "String",
        "WFNumberValue": "Integer",
        "WFAnotherNumber": "Integer",
        "WFBoundedNumber": "Float",
        "WFAnotherBoundedNumber": "Float",
        "WFDate": "WFDatePickerParameter",
        "WFAnotherDate": "WFDatePickerParameter",
        "WFMeasurement": "WFUnitQuantityFieldParameter(Object)",
        "WFAnotherMeasurement": "WFUnitQuantityFieldParameter(Object)",
        "WFDuration": "WFDurationQuantityFieldParameter",
        "WFAnotherDuration": "WFDurationQuantityFieldParameter",
        "WFEnumeration": "WFDynamicEnumerationParameter(Object)",
        "WFNumericEnumeration": "WFNumericDynamicEnumerationParameter",
        "WFLinkEnumeration": "WFLinkDynamicEnumerationParameter",
        "ThisIsReturnValue:If Result": "Object"
    },
    "is.workflow.actions.file.append": {
        "WFFile": "WFFilePickerParameter(Object)",
        "WFFilePath": "String",
        "WFAppendFileWriteMode": "Enum = \"Append\"",
        "WFAppendOnNewLine": "Bool = True",
        "WFInput": "String",
        "ThisIsReturnValue:Appended File": "public.data(Object)"
    },
    "is.workflow.actions.filter.eventattendees": {
        "WFContentItemFilter": "WFContentPredicateOperatorParameter",
        "WFContentItemInputParameter": "WFVariablePickerParameter(Object)",
        "WFContentItemSortProperty": "WFDynamicEnumerationParameter(Object)",
        "WFContentItemSortOrder": "WFDynamicEnumerationParameter(Object)",
        "ThisIsReturnValue:Event Attendees": "Object"
    },
    "is.workflow.actions.filter.apps": {
        "WFContentItemFilter": "WFContentPredicateOperatorParameter",
        "WFContentItemInputParameter": "WFVariablePickerParameter(Object)",
        "WFContentItemSortProperty": "WFDynamicEnumerationParameter(Object)",
        "WFContentItemSortOrder": "WFDynamicEnumerationParameter(Object)",
        "ThisIsReturnValue:Apps": "Object"
    },
    "is.workflow.actions.image.removebackground": {
        "WFCropToBounds": "Bool",
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Image Without Background": "WFImage(Object)"
    },
    "is.workflow.actions.dnd.getfocus": {
        "ThisIsReturnValue:Current Focus": "WFFocusModeContentItem"
    },
    "is.workflow.actions.facebook.messenger.send": {},
    "is.workflow.actions.makeimagefrompdfpage": {
        "WFInput": "WFVariablePickerParameter(Object)",
        "WFMakeImageFromPDFPageImageFormat": "WFMakeImageFromPDFPageImageFormatParameter(Object)",
        "WFMakeImageFromPDFPageColorspace": "WFMakeImageFromPDFPageColorspaceParameter(Object)",
        "WFMakeImageFromPDFPageResolution": "Integer = \"300\"",
        "ThisIsReturnValue:Image": "public.image(Object)"
    },
    "is.workflow.actions.finder.getselectedfiles": {
        "ThisIsReturnValue:File": "public.data(Object)"
    },
    "is.workflow.actions.health.workout.log": {
        "WFWorkoutReadableActivityType": "WFWorkoutTypePickerParameter(Object)",
        "WFWorkoutDate": "String",
        "WFWorkoutDuration": "Enum",
        "WFWorkoutCaloriesQuantity": "WFHealthQuantityFieldParameter(Object)",
        "WFWorkoutDistanceQuantity": "WFHealthQuantityFieldParameter(Object)",
        "ThisIsReturnValue:Workout": "WFHKWorkoutContentItem(Object)"
    },
    "is.workflow.actions.getonscreencontent": {
        "ThisIsReturnValue:Get What’s On Screen": "public.data(Object)"
    },
    "is.workflow.actions.properties.health.quantity": {
        "WFContentItemPropertyName": "Enum",
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Details of Health Sample": "Object"
    },
    "is.workflow.actions.image.crop": {
        "WFInput": "WFVariablePickerParameter(Object)",
        "WFImageCropPosition": "Enum = \"Center\"",
        "WFImageCropX": "Integer",
        "WFImageCropY": "Integer",
        "WFImageCropWidth": "Integer = 100",
        "WFImageCropHeight": "Integer = 100",
        "ThisIsReturnValue:Cropped Image": "WFImage(Object)"
    },
    "is.workflow.actions.runshellscript": {
        "Script": "String = \"echo \"Hello World\"\"",
        "Shell": "WFDynamicEnumerationParameter(Object)",
        "Input": "WFVariablePickerParameter(Object)",
        "InputMode": "Enum = \"to stdin\"",
        "RunAsRoot": "Bool",
        "ThisIsReturnValue:Shell Script Result": "(public.data(Object) or public.plain-text(Object))"
    },
    "is.workflow.actions.filter.articles": {
        "WFContentItemFilter": "WFContentPredicateOperatorParameter",
        "WFContentItemInputParameter": "WFVariablePickerParameter(Object)",
        "WFContentItemSortProperty": "WFDynamicEnumerationParameter(Object)",
        "WFContentItemSortOrder": "WFDynamicEnumerationParameter(Object)",
        "WFContentItemLimitEnabled": "Bool = True",
        "WFContentItemLimitNumber": "Integer = 1",
        "ThisIsReturnValue:Articles": "Object"
    },
    "is.workflow.actions.makevideofromgif": {
        "WFMakeVideoFromGIFActionLoopCount": "Integer = 1",
        "WFInputGIF": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Video": "public.mpeg-4(Object)"
    },
    "is.workflow.actions.dropbox.savefile": {
        "WFAskWhereToSave": "Bool = True",
        "WFFileDestinationPath": "String",
        "WFSaveFileOverwrite": "Bool",
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Saved File": "public.data(Object)"
    },
    "is.workflow.actions.addnewcalendar": {
        "CalendarName": "String",
        "ThisIsReturnValue:New Calendar": "NSString(Object)"
    },
    "is.workflow.actions.getmyworkflows": {
        "Folder": "WFWorkflowFolderPickerParameter(Object)",
        "ThisIsReturnValue:My Shortcuts": "WFWorkflowReference(Object)"
    },
    "is.workflow.actions.documentpicker.save": {
        "WFInput": "WFFilePickerParameter(Object)",
        "WFFolder": "WFFilePickerParameter(Object)",
        "WFAskWhereToSave": "Bool = True",
        "WFFileDestinationPath": "String",
        "WFSaveFileOverwrite": "Bool",
        "ThisIsReturnValue:Saved File": "public.data(Object)"
    },
    "is.workflow.actions.base64encode": {
        "WFEncodeMode": "Enum = \"Encode\"",
        "WFBase64LineBreakMode": "Enum = \"Every 76 Characters\"",
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Base64 Encoded": "(WFStringContentItem(Object) or public.data(Object))"
    },
    "is.workflow.actions.orientationlock.set": {
        "operation": "Enum = \"toggle\"",
        "OnValue": "Bool = True"
    },
    "is.workflow.actions.getmapslink": {
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Maps URL": "NSURL(Object)"
    },
    "is.workflow.actions.selectcontacts": {
        "WFSelectMultiple": "Bool",
        "ThisIsReturnValue:Contacts": "WFContact(Object)"
    },
    "is.workflow.actions.setitemname": {
        "WFName": "String",
        "WFDontIncludeFileExtension": "Bool",
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Renamed Item": "WFContentItem(Object)"
    },
    "is.workflow.actions.skipback": {
        "WFSkipBackBehavior": "Enum = \"Beginning\"",
        "WFMediaRoute": "WFMediaRoutePickerParameter(Object) = \"Local\""
    },
    "is.workflow.actions.text.changecase": {
        "text": "String",
        "WFCaseType": "Enum"
    },
    "com.apple.mobileslideshow.StreamShareService": {
        "ImageInput": "WFVariablePickerParameter(Object)"
    },
    "is.workflow.actions.timer.start": {
        "IntentAppDefinition": "WFIntentAppPickerParameter(Object) = {'BundleIdentifier': 'com.apple.mobiletimer-framework.MobileTimerIntents'}",
        "WFDuration": "Enum"
    },
    "is.workflow.actions.getipaddress": {
        "WFIPAddressSourceOption": "Enum = \"External\"",
        "WFIPAddressTypeOption": "Enum = \"IPv4\"",
        "ThisIsReturnValue:Current IP Address": "NSString(Object)"
    },
    "is.workflow.actions.getcurrentsong": {
        "Subject": "Enum = \"Current Song\"",
        "ThisIsReturnValue:Current Song": "(MPMediaItem(Object) or WFTimeInterval(Object))"
    },
    "is.workflow.actions.giphy": {
        "WFGiphyQuery": "String",
        "WFGiphyShowPicker": "Bool = True",
        "WFGiphyLimit": "Integer = 1",
        "WFGiphySelectMultiple": "Bool",
        "ThisIsReturnValue:GIFs": "WFGiphyObject(Object)"
    },
    "is.workflow.actions.getlastvideo": {
        "WFGetLatestPhotoCount": "Integer = 1",
        "ThisIsReturnValue:Latest Videos": "PHAsset(Object)"
    },
    "is.workflow.actions.evernote.getlink": {
        "WFEvernoteShareInAppLink": "Bool",
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Note Link": "NSURL(Object)"
    },
    "is.workflow.actions.reboot": {
        "WFShutdownMode": "Enum = \"Shut Down\""
    },
    "is.workflow.actions.connecttoservers": {
        "WFInput": "String",
        "ThisIsReturnValue:Connected Server": "public.folder(Object)"
    },
    "is.workflow.actions.addnewreminder": {
        "WFCalendarItemTitle": "String",
        "WFCalendarDescriptor": "WFRemindersListPickerParameter(Object)",
        "WFAlertEnabled": "Enum = \"No Alert\"",
        "WFAlertCondition": "Enum = \"At Time\"",
        "WFAlertLocation": "WFLocationParameter(Object)",
        "WFAlertPerson": "WFContactFieldParameter(Object)",
        "WFAlertLocationRadius": "WFUnitQuantityFieldParameter(Object) = 1000",
        "WFAlertCustomTime": "WFDetectedDate",
        "WFPriority": "Enum = \"None\"",
        "WFFlag": "Bool",
        "WFURL": "String",
        "WFImages": "WFVariablePickerParameter(Object)",
        "WFParentTask": "WFVariablePickerParameter(Object)",
        "WFTags": "WFTagFieldParameter(Object)",
        "WFCalendarItemNotes": "String",
        "ThisIsReturnValue:New Reminder": "REMReminder(Object)"
    },
    "is.workflow.actions.avairyeditphoto": {
        "WFDocument": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Markup Result": "(WFImageContentItem(Object) or WFPDFContentItem(Object))"
    },
    "is.workflow.actions.showincalendar": {
        "WFEvent": "WFVariablePickerParameter(Object)"
    },
    "is.workflow.actions.correctspelling": {
        "text": "String",
        "Show-text": "Bool"
    },
    "is.workflow.actions.setters.calendarevents": {
        "WFInput": "String",
        "WFCalendarEventContentItemEndDate": "String",
        "WFContentItemPropertyName": "Enum",
        "Mode": "Enum",
        "ValueLabel": "NSNumber",
        "WFCalendarEventContentItemAttendees": "WFContact",
        "WFCalendarEventContentItemURL": "String"
    },
    "is.workflow.actions.detectlanguage": {
        "WFInput": "String",
        "ThisIsReturnValue:Language": "NSString(Object)"
    },
    "is.workflow.actions.splitscreen": {
        "WFPrimaryAppIdentifier": "WFAppPickerParameter(Object)",
        "WFSecondaryAppIdentifier": "WFAppPickerParameter(Object)",
        "WFAppRatio": "Enum = \"½ + ½\""
    },
    "is.workflow.actions.startscreensaver": {},
    "is.workflow.actions.overlaytext": {
        "WFText": "String",
        "WFImage": "WFVariablePickerParameter(Object)",
        "WFTextPosition": "Enum = \"Center\"",
        "WFTextX": "Integer",
        "WFPercentageTextX": "Float",
        "WFTextY": "Integer",
        "WFPercentageTextY": "Float",
        "WFTextOffset": "Integer",
        "WFPercentageTextOffset": "Float",
        "WFFont": "WFFontPickerParameter(Object)",
        "WFFontSize": "Integer = 36",
        "WFPercentageFontSize": "Float = 0.1",
        "WFTextAlignment": "Enum",
        "WFTextColor": "WFColorPickerParameter(Object)",
        "WFTextRotation": "Integer = \"0\"",
        "WFTextOutlineEnabled": "Bool",
        "WFTextStrokeWidth": "Integer",
        "WFPercentageTextStrokeWidth": "Float = 0.1",
        "WFTextStrokeColor": "WFColorPickerParameter(Object)",
        "WFTextBoxWidth": "Integer",
        "WFPercentageTextBoxWidth": "Float = 0.8",
        "WFSizingMethod": "Enum = \"Proportional\"",
        "ThisIsReturnValue:Image with Text": "WFImageContentItem(Object)"
    },
    "is.workflow.actions.comment": {
        "WFCommentActionText": "String"
    },
    "is.workflow.actions.logout": {},
    "is.workflow.actions.makeimagefromrichtext": {
        "WFInput": "WFVariablePickerParameter(Object)",
        "WFWidth": "Integer = 1024",
        "WFHeight": "Integer = 768",
        "ThisIsReturnValue:Image": "public.image(Object)"
    },
    "is.workflow.actions.text.translate": {
        "WFSelectedFromLanguage": "WFTranslateTextLanguagePickerParameter(Object)",
        "WFSelectedLanguage": "WFTranslateTextLanguagePickerParameter(Object)",
        "WFInputText": "String",
        "ThisIsReturnValue:Translated Text": "NSString(Object)"
    },
    "is.workflow.actions.getclipboard": {
        "ThisIsReturnValue:Clipboard": "WFContentItem(Object)"
    },
    "is.workflow.actions.properties.calendarevents": {
        "WFContentItemPropertyName": "Enum",
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Details of Calendar Events": "Object"
    },
    "com.apple.TVRemoteUIService.ToggleCaptionsIntent": {
        "toggle": "Enum = \"Enable\"",
        "device": "WFMediaRoutePickerParameter(Object)"
    },
    "is.workflow.actions.getlatestbursts": {
        "WFGetLatestPhotoCount": "Integer = 1",
        "ThisIsReturnValue:Latest Bursts": "PHAsset(Object)"
    },
    "is.workflow.actions.runextension": {
        "WFInput": "WFVariablePickerParameter(Object)",
        "WFApp": "WFAppPickerParameter(Object)"
    },
    "is.workflow.actions.pocket.get": {
        "WFPocketItemCount": "Integer",
        "WFPocketItemState": "Enum = \"All\"",
        "WFPocketItemSearchTerm": "String",
        "WFPocketItemSearchTags": "String",
        "ThisIsReturnValue:Items from Pocket": "NSURL(Object)"
    },
    "is.workflow.actions.sendmessage": {
        "IntentAppDefinition": "WFIntentAppPickerParameter(Object) = {'BundleIdentifier': 'com.apple.MobileSMS'}",
        "ShowWhenRun": "Bool = True",
        "WFSendMessageActionRecipients": "WFContactHandleFieldParameter(Object)",
        "WFSendMessageContent": "String",
        "WFSendMessagePrefix": "String"
    },
    "is.workflow.actions.getcurrentlocation": {
        "Accuracy": "WFLocationAccuracyParameter(Object)",
        "ThisIsReturnValue:Current Location": "CLLocation(Object)"
    },
    "is.workflow.actions.getlastphoto": {
        "WFGetLatestPhotoCount": "Integer = 1",
        "WFGetLatestPhotosActionIncludeScreenshots": "Bool = True",
        "ThisIsReturnValue:Latest Photos": "PHAsset(Object)"
    },
    "is.workflow.actions.openxcallbackurl": {
        "WFXCallbackCustomCallbackEnabled": "Bool",
        "WFXCallbackCustomSuccessKey": "String = \"x-success\"",
        "WFXCallbackCustomCancelKey": "String",
        "WFXCallbackCustomErrorKey": "String",
        "WFXCallbackCustomSuccessURLEnabled": "Bool",
        "WFXCallbackCustomSuccessURL": "String = \"shortcuts://callback\"",
        "WFXCallbackURL": "String",
        "ThisIsReturnValue:X-Callback Result": "(NSString(Object) or NSDictionary(Object))"
    },
    "is.workflow.actions.addnewevent": {
        "WFCalendarItemTitle": "String",
        "WFCalendarItemLocation": "String",
        "WFCalendarDescriptor": "WFCalendarPickerParameter(Object)",
        "WFCalendarItemStartDate": "WFDetectedDate",
        "WFCalendarItemEndDate": "WFDetectedDate",
        "WFCalendarItemAllDay": "Bool",
        "WFAlertTime": "Enum",
        "WFAlertCustomTime": "String",
        "WFCalendarItemNotes": "String",
        "ShowWhenRun": "Bool = True",
        "ThisIsReturnValue:New Event": "EKEvent(Object)"
    },
    "is.workflow.actions.file.getlink": {
        "WFFile": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Get Link to File": "NSURL(Object)"
    },
    "is.workflow.actions.setplaybackdestination": {
        "WFMediaRouteOperation": "Enum = \"Set\"",
        "WFMediaRoute": "WFMediaRoutePickerParameter(Object) = \"Local\""
    },
    "is.workflow.actions.instapaper.add": {
        "WFInstapaperFolder": "WFDynamicEnumerationParameter(Object)",
        "WFInputURL": "String"
    },
    "is.workflow.actions.filter.contacts": {
        "WFContentItemFilter": "WFContentPredicateOperatorParameter",
        "WFContentItemInputParameter": "WFVariablePickerParameter(Object)",
        "WFContentItemSortProperty": "WFDynamicEnumerationParameter(Object)",
        "WFContentItemSortOrder": "WFDynamicEnumerationParameter(Object)",
        "WFContentItemLimitEnabled": "Bool = True",
        "WFContentItemLimitNumber": "Integer = 1",
        "ThisIsReturnValue:Contacts": "Object"
    },
    "is.workflow.actions.gethomeaccessorystate": {
        "WFHMService": "WFHomeServicePickerParameter(Object)",
        "WFHMCharacteristic": "WFHomeCharacteristicPickerParameter(Object)",
        "ThisIsReturnValue:Accessory State": "Object"
    },
    "is.workflow.actions.detect.images": {
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Images": "WFImageContentItem(Object)"
    },
    "is.workflow.actions.url.expand": {
        "URL": "String",
        "ThisIsReturnValue:Expanded URL": "WFURLContentItem(Object)"
    },
    "is.workflow.actions.weather.currentconditions": {
        "WFWeatherCustomLocation": "WFLocationParameter(Object)",
        "ThisIsReturnValue:Weather Conditions": "WFWeatherData(Object)"
    },
    "is.workflow.actions.email": {
        "WFEmailAddress": "WFEmailAddressFieldParameter(Object)",
        "ThisIsReturnValue:Email Address": "WFEmailAddress(Object)"
    },
    "com.apple.TVRemoteUIService.SwitchUserAccountIntent": {
        "account": "WFAccountPickerParameter(Object)",
        "device": "WFMediaRoutePickerParameter(Object)"
    },
    "is.workflow.actions.movewindow": {
        "WFPosition": "Enum = \"Center\"",
        "WFXCoordinate": "Integer",
        "WFYCoordinate": "Integer",
        "WFWindow": "WFVariablePickerParameter(Object)",
        "WFBringToFront": "Bool = True",
        "Display": "WFDisplayPickerParameter(Object)"
    },
    "is.workflow.actions.deletephotos": {},
    "is.workflow.actions.goodreader.open": {
        "WFInput": "WFVariablePickerParameter(Object)"
    },
    "is.workflow.actions.file.delete": {
        "WFInput": "WFFilePickerParameter(Object)",
        "WFDeleteImmediatelyDelete": "Bool"
    },
    "is.workflow.actions.runworkflow": {
        "WFWorkflow": "WFWorkflowPickerParameter(Object)",
        "WFInput": "WFVariablePickerParameter(Object)",
        "ThisIsReturnValue:Shortcut Result": "WFContentItem(Object)"
    },
    "is.workflow.actions.searchpodcasts": {
        "WFSearchTerm": "String",
        "WFAttribute": "WFDynamicEnumerationParameter(Object)",
        "WFEntity": "WFDynamicEnumerationParameter(Object)",
        "WFCountry": "WFiTunesStoreCountryPickerParameter(Object)",
        "WFItemLimit": "Integer = 25",
        "ThisIsReturnValue:Podcasts": "WFPodcastShowContentItem(Object)"
    },
    "is.workflow.actions.speaktext": {
        "WFSpeakTextWait": "Bool = True",
        "WFSpeakTextRate": "Float = 0.5",
        "WFSpeakTextPitch": "Float = 1.0",
        "WFSpeakTextLanguage": "WFSpeakTextLanguagePickerParameter(Object) = \"Default\"",
        "WFSpeakTextVoice": "WFSpeakTextVoicePickerParameter(Object) = \"Default\"",
        "WFText": "String"
    },
    "is.workflow.actions.filter.files": {
        "WFContentItemFilter": "WFContentPredicateOperatorParameter",
        "WFContentItemInputParameter": "WFVariablePickerParameter(Object)",
        "WFContentItemSortProperty": "Enum",
        "WFContentItemSortOrder": "WFDynamicEnumerationParameter(Object)",
        "WFContentItemLimitEnabled": "Bool = True",
        "WFContentItemLimitNumber": "Integer = 1",
        "ThisIsReturnValue:Files": "Object"
    },
    "is.workflow.actions.stagemanager.set": {
        "operation": "Enum = \"set\"",
        "state": "Bool = True",
        "showDock": "Bool",
        "showRecentApps": "Bool"
    },
    "is.workflow.actions.takephoto": {
        "WFCameraCaptureShowPreview": "Bool = True",
        "WFPhotoCount": "Integer = 1",
        "WFCameraCaptureDevice": "Enum = \"Back\"",
        "ThisIsReturnValue:Photo": "WFImage(Object)"
    },
    "ai.perplexity.app.OpenVoiceInAppIntent": {},
    "ai.perplexity.app.QueryPerplexity": {
        "query": "String",
        "ThisIsReturnValue:Ask Perplexity": "String"
    },
    "app.cyan.taio.ActionsSelectionIntent": {
        "actions": "Actions(Object)",
        "inputValue": "String"
    },
    "app.cyan.taio.SaveClippingIntent": {
        "text": "String",
        "shouldPin": "Bool",
        "ThisIsReturnValue:Saved Clipping": "String"
    },
    "app.cyan.taio.GetClippingIntent": {
        "type": "ClippingType(Enum) = \"all\"",
        "ThisIsReturnValue:Clipping Results": "String"
    },
    "app.cyan.taio.DeleteClippingIntent": {
        "text": "String",
        "ThisIsReturnValue:Deleted Clipping": "String"
    },
    "app.cyan.taio.PinClippingIntent": {
        "text": "String",
        "type": "PinActionType(Enum) = \"pin\"",
        "ThisIsReturnValue:Operated Clipping": "String"
    },
    "app.cyan.taio.UpdateClippingIntent": {
        "text": "String",
        "replacement": "String",
        "ThisIsReturnValue:Updated Clipping": "String"
    },
    "app.cyan.taio.CreateDocumentIntent": {
        "content": "String",
        "filePath": "String",
        "location": "DocumentLocation(Enum) = \"device\"",
        "overwriteIfExists": "Bool = True",
        "ThisIsReturnValue:Created File": "File(Object)"
    },
    "app.cyan.taio.GetDocumentIntent": {
        "filePath": "String",
        "location": "DocumentLocation(Enum) = \"device\"",
        "ThisIsReturnValue:Result File": "File(Object)"
    },
    "app.cyan.taio.DeleteDocumentIntent": {
        "filePath": "String",
        "location": "DocumentLocation(Enum) = \"device\"",
        "ThisIsReturnValue:Deleted File": "File(Object)"
    },
    "app.cyan.taio.ListFolderIntent": {
        "folderPath": "String",
        "location": "DocumentLocation(Enum) = \"device\"",
        "type": "ListFolderType(Enum) = \"filesAndFolders\"",
        "ThisIsReturnValue:fileNames": "String"
    },
    "app.cyan.taio.ImportDocumentIntent": {
        "fileObject": "File(Object)",
        "targetPath": "String",
        "location": "DocumentLocation(Enum) = \"device\"",
        "overwriteIfExists": "Bool = True",
        "ThisIsReturnValue:Imported File": "File(Object)"
    },
    "app.cyan.taio.RunActionsIntent": {
        "actions": "Actions(Object)",
        "inputValue": "String"
    },
    "app.surfed.app.GetTodayCounterIntent": {
        "ThisIsReturnValue:Counter": "Integer"
    },
    "app.surfed.app.SearchPageIntent": {
        "filter": "String",
        "type": "FilterType(Enum)",
        "condition": "FilterCondition(Enum)",
        "startDate": "String",
        "endDate": "String",
        "sorttype": "IntentSortingType(Enum)",
        "sortdirection": "IntentSortingDirection(Enum)",
        "ThisIsReturnValue:URL": "RichURL(Object)"
    },
    "app.surfed.app.GetTagURLsIntent": {
        "tag": "String",
        "filter": "String",
        "sorttype": "IntentSortingType(Enum)",
        "sortdirection": "IntentSortingDirection(Enum)",
        "ThisIsReturnValue:URLs": "RichURL(Object)"
    },
    "app.surfed.app.GetTagGroupURLsIntent": {
        "group": "String",
        "filter": "String",
        "sorttype": "IntentSortingType(Enum)",
        "sortdirection": "IntentSortingDirection(Enum)",
        "ThisIsReturnValue:URLs": "RichURL(Object)"
    },
    "app.surfed.app.GetTodayBrowsingTimeIntent": {
        "ThisIsReturnValue:Timeinterval in Seconds": "Float"
    },
    "app.surfed.app.ExportHistoryIntent": {
        "filter": "String",
        "type": "FilterType(Enum)",
        "condition": "FilterCondition(Enum)",
        "startDate": "String",
        "endDate": "String",
        "sorttype": "IntentSortingType(Enum)",
        "sortdirection": "IntentSortingDirection(Enum)",
        "ThisIsReturnValue:History Items": "History(Object)"
    },
    "app.surfed.app.CreateTagIntent": {
        "tag": "String",
        "group": "TagGroup(Object)"
    },
    "app.surfed.app.AddURLIntent": {
        "url": "String",
        "tags": "Tag(Object)"
    },
    "app.surfed.app.AddBlacklistIntent": {
        "url": "String",
        "apply": "Bool"
    },
    "app.surfed.app.ExportAllIntent": {
        "ThisIsReturnValue:Plist File": "File(Object)"
    },
    "app.surfed.app.ImportIntent": {
        "file": "File(Object)"
    },
    "app.surfed.app.GetCollectionURLsIntent": {
        "collection": "String",
        "filter": "String",
        "sorttype": "IntentSortingType(Enum) = \"date\"",
        "sortdirection": "IntentSortingDirection(Enum) = \"desc\"",
        "ThisIsReturnValue:URLs": "RichURL(Object)"
    },
    "app.surfed.app.OpenURLIntent": {
        "url": "String"
    },
    "app.surfed.app.GetURLMetadataIntent": {
        "url": "String",
        "ThisIsReturnValue:Metadata": "Metadata(Object)"
    },
    "app.surfed.app.BackupDatabaseIntent": {
        "ThisIsReturnValue:Database File": "File(Object)"
    },
    "app.surfed.app.ExportTagsIntent": {
        "tags": "Tag(Object)",
        "ThisIsReturnValue:Plist File": "File(Object)"
    },
    "app.surfed.app.GetArticleIntent": {
        "url": "String",
        "ThisIsReturnValue:Article": "String"
    },
    "app.surfed.app.GetNoteIntent": {
        "url": "String",
        "ThisIsReturnValue:Note": "String"
    },
    "app.surfed.app.SetNoteIntent": {
        "url": "String",
        "note": "String"
    },
    "app.surfed.app.RemoveTagURLIntent": {
        "tags": "Tag(Object)",
        "url": "String"
    },
    "app.surfed.app.SwitchProfileIntent": {
        "profile": "Profile(Object)"
    },
    "app.surfed.app.ListenCollectionIntent": {
        "collection": "CollectionEntity(Object)",
        "sortDirection": "PlaybackSortDirectionEnum(Enum)",
        "state": "PlaybackStateDirectionEnum(Enum)"
    },
    "app.surfed.app.ListenURLsIntent": {
        "urls": "array(String)"
    },
    "app.surfed.app.SwitchProfileFocusFilter": {
        "profile": "ProfileEntity(Object)",
        "runWebTrigger": "Bool"
    },
    "ch.marcela.ada.LibTerm.RunCommandIntent": {
        "command": "String",
        "input": "String",
        "cwd": "String",
        "ThisIsReturnValue:Output": "String"
    },
    "com.6X.LockLauncher.ActivateActivityIntent": {},
    "com.6X.LockLauncher.ChangePrivacyModeIntent": {},
    "com.6X.LockLauncher.ChooseGroupIntent": {
        "groupId": "GroupIdEnum(Enum)"
    },
    "com.6X.LockLauncher.EndActivityIntent": {},
    "com.6X.LockLauncher.GetDeviceOrientationIntent": {
        "ThisIsReturnValue:Get Device Orientation": "DeviceOrientation(Enum)"
    },
    "com.6X.LockLauncher.RefreshActivityIntent": {},
    "com.6X.LockLauncher.StartActivityIntent": {},
    "com.6X.LockLauncher.TogglePiPIntent": {},
    "com.6X.LockLauncher.UpdateMemoIntent": {
        "text": "12(Object)"
    },
    "com.Christopher-Hannah.Text-Case.TextCaseIntent": {
        "format": "TextCaseFormat(Enum) = \"apTitleCase\"",
        "text": "String",
        "ThisIsReturnValue:Formatted Text": "String"
    },
    "com.Christopher-Hannah.Text-Case.FormatWithFlowIntent": {
        "text": "String",
        "flow": "IntentFlow(Object)",
        "ThisIsReturnValue:Formatted Text": "String"
    },
    "com.Christopher-Hannah.Text-Case.ReplaceIntent": {
        "mode": "Mode(Enum) = \"all\"",
        "match": "String",
        "replacement": "String",
        "text": "String",
        "ThisIsReturnValue:Formatted Text": "String"
    },
    "com.Christopher-Hannah.Text-Case.RemoveIntent": {
        "mode": "Mode(Enum) = \"all\"",
        "match": "String",
        "text": "String",
        "ThisIsReturnValue:Formatted Text": "String"
    },
    "com.Christopher-Hannah.Text-Case.AddPrefixIntent": {
        "prefix": "String",
        "text": "String",
        "ThisIsReturnValue:Formatted Text": "String"
    },
    "com.Christopher-Hannah.Text-Case.AddSuffixIntent": {
        "suffix": "String",
        "text": "String",
        "ThisIsReturnValue:Formatted Text": "String"
    },
    "com.Christopher-Hannah.Text-Case.ReplaceWithLineBreaksIntent": {
        "match": "String",
        "text": "String",
        "ThisIsReturnValue:Formatted Text": "String"
    },
    "com.Christopher-Hannah.Text-Case.ReplaceLineBreaksWithIntent": {
        "with": "String",
        "text": "String",
        "ThisIsReturnValue:Formatted Text": "String"
    },
    "com.Matter.MatterApp.SaveToMatterIntent": {
        "articleURL": "String"
    },
    "com.ZoZoApp.ZoZoApp.AddNewGroup": {
        "folderTitle": "String",
        "icon": "String",
        "color": "String",
        "shortcuts": "array(ShortcutEntity(Object))",
        "ThisIsReturnValue:Add New Folder": "FolderEntity(Object)"
    },
    "com.ZoZoApp.ZoZoApp.AddNewShortcut": {
        "shortcutTitle": "String",
        "type": "ShortcutEntityType(Enum)",
        "contents": "12(Object)",
        "folder": "FolderEntity(Object)",
        "ThisIsReturnValue:Add New Shortcut": "ShortcutEntity(Object)"
    },
    "com.ZoZoApp.ZoZoApp.AddNewTextShortcut": {
        "shortcutTitle": "String",
        "contents": "String",
        "folder": "FolderEntity(Object)",
        "ThisIsReturnValue:Add a text-based Shortcut": "ShortcutEntity(Object)"
    },
    "com.ZoZoApp.ZoZoApp.CopyContentsToClipboard": {
        "shortcut": "ShortcutEntity(Object)",
        "ThisIsReturnValue:Copy Contents of Shortcut to Clipboard": "12(Object)"
    },
    "com.ZoZoApp.ZoZoApp.DeleteGroup": {
        "folders": "array(FolderEntity(Object))",
        "confirmBeforeDeleting": "Bool = \"1\"",
        "keepShortcuts": "Bool = \"0\""
    },
    "com.ZoZoApp.ZoZoApp.DeleteShortcut": {
        "shortcuts": "array(ShortcutEntity(Object))",
        "confirmBeforeDeleting": "Bool = \"1\""
    },
    "com.ZoZoApp.ZoZoApp.EditShortcut": {
        "shortcut": "ShortcutEntity(Object)",
        "shortcutTitle": "String",
        "contents": "12(Object)",
        "folder": "FolderEntity(Object)",
        "removeFromFolder": "Bool",
        "ThisIsReturnValue:Edit Shortcut": "ShortcutEntity(Object)"
    },
    "com.ZoZoApp.ZoZoApp.GetAllGroups": {
        "ThisIsReturnValue:Get All Folders": "array(FolderEntity(Object))"
    },
    "com.ZoZoApp.ZoZoApp.GetAllShortcuts": {
        "excludeGrouped": "Bool",
        "ThisIsReturnValue:Get All Shortcuts": "array(ShortcutEntity(Object))"
    },
    "com.ZoZoApp.ZoZoApp.GetContentsOfShortcut": {
        "shortcut": "ShortcutEntity(Object)",
        "ThisIsReturnValue:Get Contents of Shortcut": "12(Object)"
    },
    "com.ZoZoApp.ZoZoApp.GetGPTResponse": {
        "prompt": "String",
        "gptModel": "GPTModelAppEnum(Enum) = \"gpt3\"",
        "ThisIsReturnValue:Generate OneTap AI Response": "String"
    },
    "com.ZoZoApp.ZoZoApp.GetShortcutsFromGroup": {
        "folder": "FolderEntity(Object)",
        "ThisIsReturnValue:Get Shortcuts from Folder": "array(ShortcutEntity(Object))"
    },
    "com.ZoZoApp.ZoZoApp.MoveShortcut": {
        "shortcut": "ShortcutEntity(Object)",
        "folder": "FolderEntity(Object)",
        "ThisIsReturnValue:Move Shortcut": "ShortcutEntity(Object)"
    },
    "com.adguard.ios.AdGuardVPN.VpnStateIntent": {
        "operation": "Operation(Enum) = \"turn\"",
        "state": "State(Enum) = \"on\""
    },
    "com.agiletortoise.Drafts5.CreateAndEditIntent": {
        "tags": "String"
    },
    "com.agiletortoise.Drafts5.RunActionIntent": {
        "action": "ShortcutAction(Object)",
        "content": "String = \"Text to use as content for the action.\""
    },
    "com.agiletortoise.Drafts5.ViewDraftIntent": {
        "draft": "ShortcutDraft(Object)",
        "ThisIsReturnValue:View Draft": "ShortcutDraft(Object)"
    },
    "com.agiletortoise.Drafts5.CaptureIntent": {
        "content": "String",
        "tags": "array(String)",
        "folder": "DraftUpdateFolder(Enum)",
        "isFlagged": "DraftUpdateFlaggedStatus(Enum)",
        "grammarType": "ShortcutGrammarType(Object)",
        "ThisIsReturnValue:Create Draft": "ShortcutDraft(Object)"
    },
    "com.agiletortoise.Drafts5.GetDraftIntent": {
        "draft": "ShortcutDraft(Object)",
        "ThisIsReturnValue:Get Draft": "ShortcutDraft(Object)"
    },
    "com.agiletortoise.Drafts5.SetDraftIntent": {
        "draft": "ShortcutDraft(Object)",
        "content": "String",
        "writeType": "DraftWriteType(Enum)",
        "tags": "array(String)",
        "folder": "DraftUpdateFolder(Enum)",
        "isFlagged": "DraftUpdateFlaggedStatus(Enum)",
        "grammarType": "ShortcutGrammarType(Object)",
        "ThisIsReturnValue:Update Draft": "ShortcutDraft(Object)"
    },
    "com.agiletortoise.Drafts5.QueryDraftsIntent": {
        "queryString": "String",
        "folder": "DraftResponseFolder(Enum) = \"all\"",
        "tagFilter": "String",
        "flaggedStatus": "DraftQueryFlaggedStatus(Enum) = \"any\"",
        "sortOrder": "DraftQuerySort(Enum) = \"modified\"",
        "sortDescending": "Bool = \"1\"",
        "sortFlaggedToTop": "Bool = \"0\"",
        "limit": "Integer",
        "ThisIsReturnValue:Search Drafts": "array(ShortcutDraft(Object))"
    },
    "com.agiletortoise.Drafts5.QueryWorkspaceIntent": {
        "workspace": "ShortcutWorkspace(Object)",
        "folder": "DraftResponseFolder(Enum) = \"inbox\"",
        "ThisIsReturnValue:Get Drafts from Workspace": "array(ShortcutDraft(Object))"
    },
    "com.agiletortoise.Drafts5.LoadWorkspaceIntent": {
        "workspace": "ShortcutWorkspace(Object)"
    },
    "com.agiletortoise.Drafts5.DictateDraftIntent": {
        "locale": "ShortcutLocale(Object)"
    },
    "com.agiletortoise.Drafts5.OpenDraftIntent": {
        "draft": "ShortcutDraft(Object)",
        "draftList": "ShowHideStatus(Enum) = \"noChange\"",
        "actionList": "ShowHideStatus(Enum) = \"noChange\"",
        "loadWorkspace": "ShortcutWorkspace(Object)",
        "loadActionGroup": "ShortcutActionGroup(Object)",
        "loadActionBarGroup": "ShortcutActionGroup(Object)"
    },
    "com.agiletortoise.Drafts5.RunActionOnDraftIntent": {
        "action": "ShortcutAction(Object)",
        "draft": "ShortcutDraft(Object)"
    },
    "com.agiletortoise.Drafts5.FileDraftIntent": {
        "draft": "ShortcutDraft(Object)",
        "folder": "DraftUpdateFolder(Enum) = \"noChange\"",
        "isFlagged": "DraftUpdateFlaggedStatus(Enum) = \"noChange\"",
        "tags": "array(String) = \"array()\"",
        "ThisIsReturnValue:File Draft": "ShortcutDraft(Object)"
    },
    "com.agiletortoise.Drafts5.GetDraftByUUIDIntent": {
        "uuid": "String",
        "ThisIsReturnValue:Get Draft by UUID": "ShortcutDraft(Object)"
    },
    "com.agiletortoise.Drafts5.MarkdownToHTMLIntent": {
        "markdownParser": "DraftMarkdownParser(Enum)",
        "content": "String",
        "ThisIsReturnValue:Markdown to HTML": "String"
    },
    "com.agiletortoise.Drafts5.GetCurrentDraftIntent": {
        "ThisIsReturnValue:Get Current Draft": "ShortcutDraft(Object)"
    },
    "com.agiletortoise.Drafts5.ShowCaptureIntent": {
        "content": "String",
        "tags": "String"
    },
    "com.agiletortoise.Drafts5.ProcessTemplateIntent": {
        "template": "String",
        "draft": "ShortcutDraft(Object)",
        "ThisIsReturnValue:Process Template": "String"
    },
    "com.agiletortoise.Drafts5.ArrangeIntent": {
        "text": "String",
        "ThisIsReturnValue:Arrange Text": "String"
    },
    "com.agiletortoise.Drafts5.CaptureAppIntent": {
        "content": "String",
        "ThisIsReturnValue:Capture Text": "ShortcutDraft(Object)"
    },
    "com.agiletortoise.Drafts5.DictateIntent": {
        "locale": "ShortcutLocale(Object)",
        "ThisIsReturnValue:Dictate Text": "String"
    },
    "com.agiletortoise.Drafts5.DraftsFocusFilterIntent": {
        "workspaceEntity": "ShortcutWorkspace(Object)",
        "draftEntity": "ShortcutDraft(Object)",
        "pinning": "PinningStatusAppEnum(Enum) = \"noChange\"",
        "actionListGroupEntity": "ShortcutActionGroup(Object)",
        "actionBarGroupEntity": "ShortcutActionGroup(Object)"
    },
    "com.agiletortoise.Drafts5.HTMLToMarkdownIntent": {
        "content": "String",
        "ThisIsReturnValue:HTML to Markdown": "String"
    },
    "com.agiletortoise.Drafts5.LiveActivityDraftIntent": {
        "draftEntity": "ShortcutDraft(Object)",
        "status": "IntentStartEnd(Enum) = \"start\""
    },
    "com.agiletortoise.Drafts5.QuickSearchAppIntent": {
        "queryString": "String"
    },
    "com.agiletortoise.Drafts5.SetThemeAppIntent": {
        "themeMode": "ThemeModeAppEnum(Enum) = \"noChange\"",
        "lightTheme": "ThemeTypeAppEntity(Object)",
        "darkTheme": "ThemeTypeAppEntity(Object)"
    },
    "com.agiletortoise.Drafts5.ShowCaptureAppIntent": {
        "content": "String",
        "tags": "array(String) = \"array()\""
    },
    "com.amazon.Lassen.BookOpenSiriDonationIntent": {},
    "com.apple.Keynote.KNiOSCreateNewDocumentIntent": {
        "templateIdentifier": "(Object)"
    },
    "com.apple.Keynote.OpenAnyDocumentIntent": {
        "file": "File(Object)"
    },
    "com.apple.Keynote.TSADocumentCreateIntent": {
        "templateItem": "INTemplate(Object)"
    },
    "com.apple.Keynote.TSADocumentOpenIntent": {
        "file": "File(Object)",
        "password": "String"
    },
    "com.apple.Keynote.KNDocumentPlayIntent": {
        "file": "File(Object)"
    },
    "com.apple.Keynote.KNDocumentRehearseIntent": {
        "file": "File(Object)"
    },
    "com.apple.Keynote.KNNewDocumentIntent": {},
    "com.apple.Numbers.TNiOSAddValuesToFormIntent": {
        "spreadsheet": "File(Object)",
        "values": "String",
        "formName": "String"
    },
    "com.apple.Numbers.TNiOSAddBodyRowAtBottomIntent": {
        "document": "(Object)",
        "documentURL": "String",
        "documentName": "String",
        "sheetUUID": "String",
        "tableUUID": "String",
        "tableName": "String",
        "ignoresTableName": "Integer"
    },
    "com.apple.Numbers.TNiOSAddFormRecordIntent": {
        "document": "(Object)",
        "documentURL": "String",
        "documentName": "String",
        "formSheetUUID": "String",
        "formName": "String"
    },
    "com.apple.Numbers.OpenDocumentIntent": {
        "document": "(Object)",
        "documentURL": "String"
    },
    "com.apple.Numbers.TNiOSCreateNewSpreadsheetIntent": {
        "templateIdentifier": "(Object)"
    },
    "com.apple.Numbers.TNiOSAddValuesToSpreadsheetIntent": {
        "spreadsheet": "File(Object)",
        "values": "String",
        "position": "INAddValuesPosition(Enum) = \"bottom\"",
        "sheetName": "String",
        "tableName": "String"
    },
    "com.apple.Numbers.OpenAnyDocumentIntent": {
        "file": "File(Object)"
    },
    "com.apple.Numbers.TSADocumentCreateIntent": {
        "templateItem": "INTemplate(Object)"
    },
    "com.apple.Numbers.TSADocumentOpenIntent": {
        "file": "File(Object)",
        "password": "String"
    },
    "com.apple.Numbers.TNNewDocumentIntent": {},
    "com.apple.Pages.TPiOSCreateNewDocumentIntent": {
        "templateIdentifier": "(Object)"
    },
    "com.apple.Pages.OpenAnyDocumentIntent": {
        "file": "File(Object)"
    },
    "com.apple.Pages.TSADocumentCreateIntent": {
        "templateItem": "INTemplate(Object)"
    },
    "com.apple.Pages.TSADocumentOpenIntent": {
        "file": "File(Object)",
        "password": "String"
    },
    "com.apple.Pages.TPNewDocumentIntent": {},
    "com.apple.VoiceMemos.RecordVoiceMemoIntent": {
        "name": "String"
    },
    "com.apple.VoiceMemos.PlaybackVoiceMemoIntent": {
        "playbackType": "PlaybackType(Enum) = \"mostRecent\"",
        "entity": "RCRecordingEntity(Object)"
    },
    "com.apple.VoiceMemos.ChangeRecordingPlaybackSetting": {
        "changeOperation": "ChangeOperation(Enum)",
        "setting": "RecordingSettingType(Enum)"
    },
    "com.apple.VoiceMemos.CloseUIElement": {
        "target": "RCUIElementEntity(Object)"
    },
    "com.apple.VoiceMemos.CreateFolder": {
        "name": "String",
        "ThisIsReturnValue:CREATE_FOLDER_INTENT_TITLE": "RCFolderEntity(Object)"
    },
    "com.apple.VoiceMemos.DeleteFolder": {
        "entities": "array(RCFolderEntity(Object))"
    },
    "com.apple.VoiceMemos.DeleteRecording": {
        "entities": "array(RCRecordingEntity(Object))"
    },
    "com.apple.VoiceMemos.NavigateRecordingsList": {
        "direction": "NavigateSequentiallyDirection(Enum)"
    },
    "com.apple.VoiceMemos.OpenFolder": {
        "target": "RCFolderEntity(Object)"
    },
    "com.apple.VoiceMemos.OpenUIElement": {
        "target": "RCUIElementEntity(Object)"
    },
    "com.apple.VoiceMemos.SearchRecordings": {
        "searchPhrase": "String"
    },
    "com.apple.VoiceMemos.SelectRecording": {
        "target": "RCRecordingEntity(Object)"
    },
    "com.apple.iWork.Keynote.KNiOSCreateNewDocumentIntent": {
        "templateIdentifier": "(Object)"
    },
    "com.apple.iWork.Keynote.OpenAnyDocumentIntent": {
        "file": "File(Object)"
    },
    "com.apple.iWork.Keynote.TSADocumentCreateIntent": {
        "templateItem": "INTemplate(Object)"
    },
    "com.apple.iWork.Keynote.TSADocumentOpenIntent": {
        "file": "File(Object)",
        "password": "String"
    },
    "com.apple.iWork.Keynote.KNDocumentPlayIntent": {
        "file": "File(Object)"
    },
    "com.apple.iWork.Keynote.KNDocumentRehearseIntent": {
        "file": "File(Object)"
    },
    "com.apple.iWork.Keynote.KNNewDocumentIntent": {},
    "com.apple.iWork.Numbers.TNiOSCreateNewSpreadsheetIntent": {
        "templateIdentifier": "(Object)"
    },
    "com.apple.iWork.Numbers.TNiOSAddValuesToSpreadsheetIntent": {
        "spreadsheet": "File(Object)",
        "values": "String",
        "position": "INAddValuesPosition(Enum) = \"bottom\"",
        "sheetName": "String",
        "tableName": "String"
    },
    "com.apple.iWork.Numbers.OpenAnyDocumentIntent": {
        "file": "File(Object)"
    },
    "com.apple.iWork.Numbers.TSADocumentCreateIntent": {
        "templateItem": "INTemplate(Object)"
    },
    "com.apple.iWork.Numbers.TSADocumentOpenIntent": {
        "file": "File(Object)",
        "password": "String"
    },
    "com.apple.iWork.Numbers.TNNewDocumentIntent": {},
    "com.apple.iWork.Pages.TPiOSCreateNewDocumentIntent": {
        "templateIdentifier": "(Object)"
    },
    "com.apple.iWork.Pages.OpenAnyDocumentIntent": {
        "file": "File(Object)"
    },
    "com.apple.iWork.Pages.TSADocumentCreateIntent": {
        "templateItem": "INTemplate(Object)"
    },
    "com.apple.iWork.Pages.TSADocumentOpenIntent": {
        "file": "File(Object)",
        "password": "String"
    },
    "com.apple.iWork.Pages.TPNewDocumentIntent": {},
    "com.apple.news.INPlayMediaIntent": {
        "mediaItems": "MediaItem(Object)",
        "mediaContainer": "MediaItem(Object)",
        "playShuffled": "Bool",
        "playbackRepeatMode": "PlaybackRepeatMode(Enum)",
        "resumePlayback": "Bool",
        "playbackQueueLocation": "PlaybackQueueLocation(Enum)",
        "playbackSpeed": "Float",
        "mediaSearch": "MediaSearch(Object)"
    },
    "com.apple.news.FRTagIntent": {
        "tag": "Tag(Object)"
    },
    "com.apple.news.FRTodayIntent": {},
    "com.apple.reminders.TTRCreateListAppIntent": {
        "name": "String",
        "ThisIsReturnValue:Create List": "TTRListEntity(Object)"
    },
    "com.apple.reminders.TTRCreateReminderAppIntent": {
        "name": "String",
        "notes": "String",
        "dueDate": "String",
        "flagged": "Bool",
        "priority": "Integer",
        "ThisIsReturnValue:Create Reminder": "TTRReminderEntity(Object)"
    },
    "com.apple.reminders.TTROpenListAppIntent": {
        "target": "TTRListEntity(Object)"
    },
    "com.apple.reminders.TTROpenSmartListAppIntent": {
        "target": "TTRSmartListEntity(Enum)"
    },
    "com.apple.reminders.TTRSearchRemindersAppIntent": {
        "searchPhrase": "String"
    },
    "com.apple.shortcuts.CreateWorkflowAction": {
        "name": "String",
        "ThisIsReturnValue:Create Shortcut": "WFWorkflowReference(Object)"
    },
    "com.apple.shortcuts.DeleteWorkflowAction": {
        "entities": "array(WFWorkflowReference(Object))"
    },
    "com.apple.shortcuts.OpenNavigationDestinationAction": {
        "target": "RootNavigationDestination(Object)"
    },
    "com.apple.shortcuts.OpenWorkflowAction": {
        "target": "WFWorkflowReference(Object)"
    },
    "com.apple.shortcuts.SearchShortcutsAction": {
        "searchPhrase": "String"
    },
    "com.apple.weather.WeatherIntent": {
        "location": "WeatherLocation(Object)",
        "ThisIsReturnValue:Location Name": "String"
    },
    "com.apple.weather.CancelAction": {},
    "com.apple.weather.CloseLocationL2ViewAction": {
        "entity": "LocationL2ViewEntity(Enum)"
    },
    "com.apple.weather.CloseSidebarAction": {
        "entity": "SidebarEntity(Enum)"
    },
    "com.apple.weather.NavigateLocationsAction": {
        "direction": "NavigateSequentiallyDirection(Enum)"
    },
    "com.apple.weather.OpenListAction": {
        "entity": "ListEntity(Enum)"
    },
    "com.apple.weather.OpenLocationAction": {
        "entity": "LocationEntity(Object)"
    },
    "com.apple.weather.OpenLocationL2ViewAction": {
        "entity": "LocationL2ViewEntity(Enum)"
    },
    "com.apple.weather.OpenMyLocationAction": {
        "entity": "MyLocationEntity(Enum)"
    },
    "com.apple.weather.OpenSearchResultAction": {
        "entity": "SearchResultEntity(Enum)"
    },
    "com.apple.weather.OpenSidebarAction": {
        "entity": "SidebarEntity(Enum)"
    },
    "com.apple.weather.SearchLocationAction": {
        "searchPhrase": "String"
    },
    "com.appliedphasor.working-copy.GitActionIntent": {
        "action": "String",
        "information": "String",
        "url": "String"
    },
    "com.appliedphasor.working-copy.GetFilesIntent": {
        "repo": "String",
        "path": "String",
        "status": "Status(Enum) = \"any\"",
        "archive": "Bool",
        "flatten": "ArchiveFlatten(Enum) = \"none\"",
        "ThisIsReturnValue:Files": "File(Object)"
    },
    "com.appliedphasor.working-copy.WriteFileIntent": {
        "repo": "String",
        "path": "String",
        "content": "File(Object)",
        "overwrite": "Bool",
        "createMissing": "Bool",
        "mode": "WriteMode(Enum)",
        "stage": "Bool = True",
        "ThisIsReturnValue:Error": "String"
    },
    "com.appliedphasor.working-copy.CommitRepositoryIntent": {
        "repo": "String",
        "message": "String",
        "target": "CommitTarget(Enum) = \"staged\"",
        "failNothing": "Bool = True",
        "sign": "Bool",
        "ThisIsReturnValue:Error": "String"
    },
    "com.appliedphasor.working-copy.PullRepositoryIntent": {
        "repo": "String",
        "remote": "String",
        "ThisIsReturnValue:Error": "String"
    },
    "com.appliedphasor.working-copy.PushRepositoryIntent": {
        "repo": "String",
        "remote": "String",
        "ThisIsReturnValue:Error Message": "String"
    },
    "com.appliedphasor.working-copy.StageFilesIntent": {
        "repo": "String",
        "path": "String",
        "operation": "StageOperation(Enum) = \"stage\"",
        "ThisIsReturnValue:Error": "String"
    },
    "com.appliedphasor.working-copy.FileRepositoryIntent": {
        "file": "File(Object)",
        "ThisIsReturnValue:Error": "String"
    },
    "com.appliedphasor.working-copy.CheckoutBranchIntent": {
        "repo": "String",
        "branch": "String"
    },
    "com.appliedphasor.working-copy.CommitLogIntent": {
        "repo": "String",
        "limit": "Integer = 10",
        "branch": "String",
        "pattern": "String",
        "ThisIsReturnValue:Error": "String"
    },
    "com.appliedphasor.working-copy.OpenIntent": {
        "repo": "String",
        "path": "String",
        "mode": "OpenMode(Enum)",
        "clone": "Bool"
    },
    "com.appliedphasor.working-copy.MergeBranchIntent": {
        "repo": "String",
        "branch": "String",
        "method": "MergeMethod(Enum) = \"auto\"",
        "ThisIsReturnValue:Error": "String"
    },
    "com.appliedphasor.working-copy.CreateBranchIntent": {
        "repo": "String",
        "branch": "String",
        "checkout": "Bool = True",
        "allowExisting": "Bool"
    },
    "com.appliedphasor.working-copy.DeleteBranchIntent": {
        "repo": "String",
        "branch": "String"
    },
    "com.appliedphasor.working-copy.ListRepositoriesIntent": {
        "pattern": "String",
        "include": "RepoListInclude(Enum) = \"all\"",
        "ThisIsReturnValue:Error": "String"
    },
    "com.appliedphasor.working-copy.CloneRepositoryIntent": {
        "url": "String",
        "name": "String",
        "folder": "String",
        "callback": "String = \"shortcuts://\""
    },
    "com.appliedphasor.working-copy.ListReferencesIntent": {
        "repo": "String",
        "pattern": "String",
        "ThisIsReturnValue:Error": "String"
    },
    "com.appliedphasor.working-copy.FetchRepositoryIntent": {
        "repo": "String",
        "remote": "String",
        "ThisIsReturnValue:Error Message": "String"
    },
    "com.appliedphasor.working-copy.OpenPullRequestIntent": {
        "repo": "String",
        "base": "String",
        "head": "String",
        "title": "String",
        "comment": "String",
        "ThisIsReturnValue:Error": "String"
    },
    "com.appliedphasor.working-copy.WebDAVIntent": {
        "start": "Bool = True",
        "ThisIsReturnValue:Error": "String"
    },
    "com.appliedphasor.working-copy.FileDetailsIntent": {
        "files": "File(Object)",
        "ThisIsReturnValue:Error": "String"
    },
    "com.appliedphasor.working-copy.ManageRemotesIntent": {
        "kind": "RemoteUpdateKind(Enum) = \"list\"",
        "renameRemote": "String",
        "targetName": "String",
        "addName": "String",
        "addUrl": "String",
        "removeRemote": "String",
        "editTargetUrl": "String",
        "editRemote": "String",
        "repo": "String",
        "ThisIsReturnValue:Error": "String"
    },
    "com.atlassian.jira.app.CreateIssueIntent": {
        "account": "String",
        "site": "String",
        "project": "Project(Object)",
        "issueType": "IssueType(Object)",
        "summary": "String",
        "ThisIsReturnValue:Issue": "Issue(Object)"
    },
    "com.atlassian.jira.app.PostCommentIntent": {
        "issue": "Issue(Object)",
        "comment": "String",
        "ThisIsReturnValue:Comment": "String"
    },
    "com.atlassian.jira.app.GetIssueIntent": {
        "issueKey": "String",
        "account": "String",
        "site": "String",
        "ThisIsReturnValue:Issue": "Issue(Object)"
    },
    "com.atlassian.jira.app.GetIssueFieldIntent": {
        "issue": "Issue(Object)",
        "fieldName": "String",
        "ThisIsReturnValue:Field Value": "String"
    },
    "com.atlassian.jira.app.SetIssueFieldIntent": {
        "issue": "Issue(Object)",
        "operation": "Operation(Enum) = \"set\"",
        "setFieldName": "String",
        "setFieldValue": "String",
        "addFieldName": "String",
        "addFieldValue": "String",
        "removeFieldName": "String",
        "removeFieldValue": "String",
        "clearFieldName": "String",
        "ThisIsReturnValue:Issue": "Issue(Object)"
    },
    "com.atlassian.jira.app.RunJQLIntent": {
        "pageIndex": "Integer",
        "account": "String",
        "site": "String",
        "jqlQuery": "String = \"assignee = currentUser() AND resolution = Unresolved order by updated DESC\"",
        "ThisIsReturnValue:Issues": "Issue(Object)"
    },
    "com.atlassian.jira.app.AddAttachmentIntent": {
        "issue": "Issue(Object)",
        "file": "File(Object)",
        "ThisIsReturnValue:Issue": "Issue(Object)"
    },
    "com.atlassian.jira.app.OpenIssueIntent": {
        "issue": "Issue(Object)"
    },
    "com.atlassian.jira.app.LogWorkIntent": {
        "issue": "Issue(Object)",
        "startedAt": "String",
        "timeSpent": "TimeInterval(Object) = 4.0",
        "comment": "String",
        "ThisIsReturnValue:Issue": "Issue(Object)"
    },
    "com.atlassian.jira.app.ExtractIssueKeyIntent": {
        "url": "String = \"https://instance.atlassian.net/browse/ABC-123\"",
        "ThisIsReturnValue:Issue Key": "String"
    },
    "com.bloombuilt.dayone-ios.CreateEntryIntent": {
        "journal": "Journal(Object)",
        "content": "String",
        "images": "None",
        "tags": "array(String)",
        "date": "String",
        "ThisIsReturnValue:Create Entry": "Entry(Object)"
    },
    "com.bloombuilt.dayone-ios.FindEntriesIntent": {
        "journal": "Journal(Object)",
        "date": "String",
        "tags": "array(String)",
        "entryLimit": "Integer",
        "ThisIsReturnValue:Find Entries": "array(Entry(Object))"
    },
    "com.bloombuilt.dayone-ios.AppendToEntryIntent": {
        "entries": "array(Entry(Object))",
        "content": "String",
        "images": "None",
        "startNewParagraph": "Bool",
        "ThisIsReturnValue:Append to Entry": "array(Entry(Object))"
    },
    "com.bloombuilt.dayone-ios.ShowEntriesIntent": {
        "entries": "array(Entry(Object))"
    },
    "com.bloombuilt.dayone-ios.OpenDayOneToNewEntryIntent": {
        "journal": "Journal(Object)",
        "entryInitialContent": "EntryInitialContent(Enum)"
    },
    "com.bloombuilt.dayone-ios.GetDailyPromptIntent": {
        "ThisIsReturnValue:Get Daily Prompt": "String"
    },
    "com.bloombuilt.dayone-ios.ShowTodayIntent": {
        "date": "String"
    },
    "com.bloombuilt.dayone-ios.AnswerDailyPromptIntent": {},
    "com.bloombuilt.dayone-ios.EditEntryIntent": {
        "entry": "Entry(Object)"
    },
    "com.bloombuilt.dayone-ios.CreateTemplateEntryIntent": {
        "journal": "Journal(Object)",
        "template": "Template(Object)"
    },
    "com.bloombuilt.dayone-ios.ShowDayIntent": {
        "date": "String"
    },
    "com.bloombuilt.dayone-ios.RecordIntent": {
        "media": "MediaType(Enum)",
        "journal": "Journal(Object)",
        "tags": "array(String)"
    },
    "com.bloombuilt.dayone-ios.TodayDisplayIntent": {
        "display": "TodayDisplayContent(Enum) = \"summary\""
    },
    "com.bloombuilt.dayone-ios.INCreateNoteIntent": {
        "title": "String",
        "content": "NoteContent(Object)",
        "groupName": "String"
    },
    "com.bloombuilt.dayone-ios.OpenEntryAppIntent": {
        "entry": "Entry(Object)"
    },
    "com.bloombuilt.dayone-mac.CreateEntryIntent": {
        "journal": "Journal(Object)",
        "content": "String",
        "images": "File(Object)",
        "tags": "String",
        "date": "String",
        "location": "Placemark(Object)",
        "showInApp": "Bool",
        "ThisIsReturnValue:Day One Entry": "Entry(Object)"
    },
    "com.bloombuilt.dayone-mac.FindEntriesIntent": {
        "journal": "Journal(Object)",
        "date": "String",
        "tags": "String",
        "entryLimit": "Integer = 1",
        "ThisIsReturnValue:Entries": "Entry(Object)"
    },
    "com.bloombuilt.dayone-mac.AppendToEntryIntent": {
        "entries": "Entry(Object)",
        "content": "String",
        "images": "File(Object)",
        "newParagraph": "Bool",
        "ThisIsReturnValue:Day One Entry": "Entry(Object)"
    },
    "com.bloombuilt.dayone-mac.ShowEntriesIntent": {
        "entries": "Entry(Object)"
    },
    "com.bloombuilt.dayone-mac.OpenDayOneToNewEntryIntent": {
        "journal": "Journal(Object)",
        "entryInitialContent": "EntryInitialContent(Enum)"
    },
    "com.bloombuilt.dayone-mac.GetDailyPromptIntent": {
        "ThisIsReturnValue:Daily Prompt": "String"
    },
    "com.bloombuilt.dayone-mac.ShowTodayIntent": {
        "date": "String"
    },
    "com.bloombuilt.dayone-mac.AnswerDailyPromptIntent": {},
    "com.bloombuilt.dayone-mac.EditEntryIntent": {
        "entry": "Entry(Object)"
    },
    "com.bloombuilt.dayone-mac.CreateTemplateEntryIntent": {
        "journal": "Journal(Object)",
        "template": "Template(Object)"
    },
    "com.bloombuilt.dayone-mac.ShowDayIntent": {
        "date": "String"
    },
    "com.bloombuilt.dayone-mac.RecordIntent": {
        "media": "MediaType(Enum) = \"audio\"",
        "journal": "Journal(Object)",
        "tags": "String"
    },
    "com.bloombuilt.dayone-mac.TodayDisplayIntent": {
        "display": "TodayDisplayContent(Enum) = \"summary\""
    },
    "com.bloombuilt.dayone-mac.INCreateNoteIntent": {
        "title": "String",
        "content": "NoteContent(Object)",
        "groupName": "String"
    },
    "com.brogrammers.charty.NewChartIntent": {
        "title": "String",
        "automaticId": "Bool = True",
        "id": "String",
        "replaceOthers": "Bool",
        "ThisIsReturnValue:Chart Id": "String"
    },
    "com.brogrammers.charty.CopyChartToClipboardIntent": {
        "chartId": "String",
        "exportProfile": "String",
        "name": "String",
        "appearance": "Appearance(Enum) = \"system\"",
        "transparent": "Bool",
        "width": "Integer",
        "height": "Integer",
        "titleFontSize": "Integer",
        "chartFontSize": "Integer",
        "thickenLines": "Integer",
        "enlargeMarkers": "Integer"
    },
    "com.brogrammers.charty.GetInfoAllChartsIntent": {
        "ThisIsReturnValue:Charts data": "String"
    },
    "com.brogrammers.charty.DeleteChartIntent": {
        "id": "String",
        "ThisIsReturnValue:Result": "String"
    },
    "com.brogrammers.charty.StyleLineSeriesIntent": {
        "chartId": "String",
        "label": "String",
        "color": "String",
        "fillBelow": "Bool",
        "fillColor": "String",
        "verticalAxis": "Bool",
        "lineWidth": "Float = 1.0",
        "lineStyle": "LineStyle(Enum) = \"Solid\"",
        "showMarkers": "Bool = True",
        "markerSize": "Float = 4.0",
        "smoothLine": "Bool",
        "ThisIsReturnValue:Series Label": "String"
    },
    "com.brogrammers.charty.StyleScatterSeriesIntent": {
        "chartId": "String",
        "label": "String",
        "color": "String",
        "verticalAxis": "Bool",
        "markerStyle": "MarkerStyle(Enum)",
        "markerSize": "Float = 4.0",
        "ThisIsReturnValue:Series Label": "String"
    },
    "com.brogrammers.charty.AddSeriesFromCSVIntent": {
        "separator": "String = \",\"",
        "decimalSymbol": "String = \".\"",
        "seriesType": "SeriesType(Enum) = \"line\"",
        "barXColumns": "String",
        "lineXColumns": "String",
        "scatterXColumns": "String",
        "donutLabelsColumn": "String",
        "pieLabelsColumn": "String",
        "barYColumns": "String",
        "lineYColumns": "String",
        "scatterYColumns": "String",
        "donutValuesColumn": "String",
        "pieValuesColumn": "String",
        "csv": "String",
        "chartId": "String"
    },
    "com.brogrammers.charty.StyleBarSeriesIntent": {
        "chartId": "String",
        "label": "String",
        "color": "String",
        "verticalAxis": "Bool",
        "barStack": "String",
        "cornerRadius": "Float",
        "roundBottomLeft": "Bool",
        "roundBottomRight": "Bool",
        "roundTopLeft": "Bool",
        "roundTopRight": "Bool",
        "ThisIsReturnValue:Series Label": "String"
    },
    "com.brogrammers.charty.StyleAxisIntent": {
        "chartId": "String",
        "axis": "AxisType(Enum) = \"xAxis\"",
        "labelRotation": "String = \"0\"",
        "title": "String",
        "minimum": "Float",
        "maximum": "Float",
        "granularity": "Float",
        "valueFormatter": "ValueFormat(Enum)",
        "granularityUnit": "GranularityUnit(Enum) = \"days\"",
        "precision": "String = \"1\"",
        "dateFormat": "DateFormat(Enum)",
        "timeFormat": "TimeFormat(Enum)",
        "customDateTimeFormat": "String = \"dd MMM yyyy HH:mm:ss\"",
        "labels": "String",
        "correspValues": "String",
        "ThisIsReturnValue:Chart Id": "String"
    },
    "com.brogrammers.charty.AddCustomThemeIntent": {
        "colors": "String",
        "name": "String",
        "selectionStrategy": "SelectionStrategy(Enum)",
        "ThisIsReturnValue:Theme name": "String"
    },
    "com.brogrammers.charty.ApplyQuickStyleIntent": {
        "chartId": "String",
        "quickStyle": "QuickStyles(Enum)",
        "highlightSeries": "String",
        "highlightColor": "String = \"FF3A30\"",
        "otherColor": "String = \"BBBBBB\"",
        "otherAlpha": "Integer = 30",
        "stackName": "String",
        "includeChevronDown": "Bool = True",
        "includeChevronUp": "Bool = True",
        "includeCircle": "Bool = True",
        "includeCross": "Bool = True",
        "includeSquare": "Bool = True",
        "includeTriangle": "Bool = True",
        "includeX": "Bool = True",
        "markersSize": "Float = 4.0",
        "ThisIsReturnValue:Chart Id": "String"
    },
    "com.brogrammers.charty.AddMovingAverageIntent": {
        "movingAverageType": "MovingAverageType(Enum)",
        "windowSize": "Integer = 5",
        "centering": "MovingAverageCentering(Enum) = \"center\"",
        "chartId": "String",
        "series": "String",
        "seriesLabels": "String",
        "seriesType": "NumericSeriesType(Enum) = \"line\"",
        "lineWidth": "Float = 1.0",
        "lineStyle": "LineStyle(Enum) = \"Dashed\"",
        "smoothLine": "Bool = True",
        "showLineMarkers": "Bool",
        "lineMarkerSize": "Float = 4.0",
        "scatterMarkerSize": "Float = 4.0",
        "ThisIsReturnValue:Chart Id": "String"
    },
    "com.brogrammers.charty.AddAverageIntent": {
        "chartId": "String",
        "series": "String",
        "seriesLabels": "String",
        "seriesType": "NumericSeriesType(Enum) = \"line\"",
        "lineWidth": "Float = 1.0",
        "lineStyle": "LineStyle(Enum) = \"Dashed\"",
        "showLineMarkers": "Bool",
        "lineMarkerSize": "Float = 4.0",
        "scatterMarkerSize": "Float = 4.0",
        "input": "AverageOptions(Enum) = \"allPoints\"",
        "startIndex": "Integer",
        "endIndex": "Integer",
        "ThisIsReturnValue:Chart Id": "String"
    },
    "com.brogrammers.charty.StyleDonutPieSeriesIntent": {
        "chartId": "String",
        "seriesLabel": "String",
        "labels": "String",
        "colors": "String",
        "ThisIsReturnValue:Chart Id": "String"
    },
    "com.charliemchapman.dark-noise.StartNoiseIntent": {
        "noise": "NoiseIntentItem(Object)"
    },
    "com.charliemchapman.dark-noise.StartNoiseWithDurationIntent": {
        "noise": "NoiseIntentItem(Object)",
        "duration": "TimeInterval(Object) = 1.0"
    },
    "com.charliemchapman.dark-noise.StartNoiseWithStopTimeIntent": {
        "noise": "NoiseIntentItem(Object)",
        "stopTime": "String"
    },
    "com.charliemchapman.dark-noise.SetMixAudioIntent": {
        "setMixAudioMode": "SetMixAudioMode(Enum) = \"turn\"",
        "isOn": "Bool = True"
    },
    "com.charliemchapman.dark-noise.RunNoiseIntent": {
        "noise": "RunNoiseIntentItem(Object)",
        "timerType": "TimerType(Enum) = \"none\"",
        "timer": "String",
        "duration": "TimeInterval(Object) = 5.0",
        "fadeDurationForDuration": "TimeInterval(Object)",
        "fadeDurationForTime": "TimeInterval(Object)"
    },
    "com.charliemchapman.dark-noise.FindNoiseIntent": {
        "noiseName": "String",
        "ThisIsReturnValue:Noise": "RunNoiseIntentItem(Object)"
    },
    "com.charliemchapman.dark-noise.PlayPauseNoiseIntent": {
        "noiseId": "String",
        "timer": "TimerTypeIntent(Enum)",
        "time": "String",
        "duration": "Float",
        "fadeDuration": "Float",
        "logFrom": "String",
        "playType": "PlayType(Enum)"
    },
    "com.christianselig.Apollo.OpenSubredditIntent": {
        "subreddit": "String"
    },
    "com.christianselig.Apollo.OpenUserIntent": {
        "username": "String"
    },
    "com.christianselig.Apollo.OpenHomeIntent": {},
    "com.christianselig.Apollo.OpenMultiredditIntent": {
        "multiredditName": "String"
    },
    "com.fandango.fandango.UpcomingOrderIntent": {},
    "com.fifteenjugglers.solarwatch.ComputeSolarEventTimeIntent": {
        "location": "Placemark(Object)",
        "date": "String",
        "solarEvent": "SolarEvent(Enum)",
        "ThisIsReturnValue:Solar Event Date": "String"
    },
    "com.fifteenjugglers.solarwatch.ComputeAllEventTimesIntent": {
        "location": "Placemark(Object)",
        "date": "String",
        "ThisIsReturnValue:Solar Event Times": "IntentEventTuple(Object)"
    },
    "com.getcardpointers.app.FindBestCardIntent": {
        "richCategory": "RichCategory(Object)",
        "orderBy": "CPCategoryOrder(Enum) = \"alphabetical\"",
        "ThisIsReturnValue:Best Category Card": "BestCardDetails(Object)"
    },
    "com.getcardpointers.app.GetAllCardsIntent": {
        "ThisIsReturnValue:Card": "CardDetails(Object)"
    },
    "com.getcardpointers.app.CardFocusFilter": {
        "showCardType": "CardType(Enum) = \"both\"",
        "showForeignFeeCards": "Bool = \"1\""
    },
    "com.getcardpointers.app.ChaseStatusIntent": {},
    "com.getcardpointers.app.InteractivePointersConfigurationAppIntent": {
        "sortOrder": "InteractivePointersSortOrderEnum(Enum) = \"1\""
    },
    "com.getcardpointers.app.OpenCardIntent": {
        "card": "CardEntity(Object)"
    },
    "com.getcardpointers.app.OpenOfferIntent": {
        "card": "CardEntity(Object)"
    },
    "com.getcardpointers.app.OpenPointerIntent": {
        "card": "CardEntity(Object)"
    },
    "com.getcardpointers.app.OpenRealityIntent": {},
    "com.getcardpointers.app.OpenSearchIntent": {
        "searchQuery": "String"
    },
    "com.getcardpointers.app.ShowCurrentLocationIntent": {
        "ThisIsReturnValue:Best Card for Nearest Store": "CardEntity(Object)"
    },
    "com.getcardpointers.app.ShowNearbyLocationsIntent": {
        "whichNearbyLocation": "WhichNearbyLocation(Object)",
        "ThisIsReturnValue:Best Card for Stores Nearby": "CardEntity(Object)"
    },
    "com.getcardpointers.app.StartShoppingIntent": {},
    "com.getcardpointers.app.StopShoppingIntent": {},
    "com.getcardpointers.app.SummaryOverviewIntent": {},
    "com.getcardpointers.app.UpdateNearbyLocationsIntent": {},
    "com.getcardpointers.app.WhichCardIntent": {
        "whichCardType": "WhichCardType(Object)",
        "purchaseName": "String",
        "ThisIsReturnValue:Best Card Wizard": "CardEntity(Object)"
    },
    "com.google.OPA.OPAAskGoogleIntent": {
        "question": "String = \"question\""
    },
    "com.google.chrome.ios.OpenInChromeIntent": {
        "url": "String"
    },
    "com.google.chrome.ios.SearchInChromeIntent": {
        "searchPhrase": "String"
    },
    "com.google.chrome.ios.OpenInChromeIncognitoIntent": {
        "url": "String"
    },
    "com.google.chrome.ios.AddReadingListItemToChromeIntent": {
        "url": "String"
    },
    "com.google.chrome.ios.AddBookmarkToChromeIntent": {
        "url": "String"
    },
    "com.google.chrome.ios.OpenReadingListIntent": {},
    "com.google.chrome.ios.OpenBookmarksIntent": {},
    "com.google.chrome.ios.OpenRecentTabsIntent": {},
    "com.google.chrome.ios.OpenTabGridIntent": {},
    "com.google.chrome.ios.SearchWithVoiceIntent": {},
    "com.google.chrome.ios.OpenNewTabIntent": {},
    "com.google.chrome.ios.PlayDinoGameIntent": {},
    "com.google.chrome.ios.SetChromeDefaultBrowserIntent": {},
    "com.google.chrome.ios.ViewHistoryIntent": {},
    "com.google.chrome.ios.OpenNewIncognitoTabIntent": {},
    "com.google.chrome.ios.ManagePaymentMethodsIntent": {},
    "com.google.chrome.ios.RunSafetyCheckIntent": {},
    "com.google.chrome.ios.ManagePasswordsIntent": {},
    "com.google.chrome.ios.ManageSettingsIntent": {},
    "com.google.chrome.ios.OpenLatestTabIntent": {},
    "com.google.chrome.ios.OpenLensIntent": {},
    "com.google.chrome.ios.ClearBrowsingDataIntent": {},
    "com.grailr.CARROTweather.CurrentForecastIntent": {
        "location": "Placemark(Object)",
        "forecastType": "ForecastType(Enum) = \"current\"",
        "dataType": "DataType(Enum) = \"temperature\"",
        "timeThreshold": "TimeThreshold(Enum)",
        "ThisIsReturnValue:Spoken Text": "String"
    },
    "com.grailr.CARROTweather.InteractionIntent": {
        "interactionType": "InteractionType(Enum)"
    },
    "com.grailr.CARROTweather.WidgetMapIntent": {
        "style": "MapStyle(Enum) = \"light\"",
        "zoomLevel": "ZoomLevel(Enum) = \"county\"",
        "locationMarker": "Bool = True",
        "layers": "MapLayer(Object)"
    },
    "com.grailr.CARROTweather.WidgetForecastIntent": {
        "bgColor": "BGColor(Enum) = \"conditionGradient\"",
        "layout": "WidgetLayout(Enum) = \"automatic\"",
        "precipitation": "Bool = True",
        "alerts": "Bool = True",
        "feelsLike": "Bool",
        "dataPoints": "DataPoint(Object)"
    },
    "com.grailr.CARROTweather.WidgetHourlyIntent": {
        "bgColor": "BGColor(Enum) = \"conditionGradient\"",
        "location": "Bool",
        "feelsLike": "Bool",
        "biHourly": "Bool = True",
        "dataPoints": "DataPoint(Object)"
    },
    "com.grailr.CARROTweather.WidgetDailyIntent": {
        "bgColor": "BGColor(Enum) = \"conditionGradient\"",
        "location": "Bool",
        "feelsLike": "Bool",
        "dataPoints": "DataPoint(Object)"
    },
    "com.grailr.CARROTweather.WidgetSnarkIntent": {
        "bgColor": "BGColor(Enum) = \"conditionGradient\"",
        "layout": "WidgetLayout(Enum) = \"automatic\"",
        "precipitation": "Bool = True",
        "alerts": "Bool = True",
        "feelsLike": "Bool",
        "summary": "SummaryType(Enum) = \"snark\"",
        "dataPoints": "DataPoint(Object)"
    },
    "com.grailr.CARROTweather.WidgetComboIntent": {
        "bgColor": "BGColor(Enum) = \"conditionGradient\"",
        "location": "Bool",
        "alerts": "Bool = True",
        "feelsLike": "Bool",
        "biHourly": "Bool = True",
        "precipitation": "Bool",
        "dataPoints": "DataPoint(Object)"
    },
    "com.grailr.CARROTweather.WidgetTemperatureIntent": {
        "feelsLike": "Bool"
    },
    "com.grailr.CARROTweather.WidgetConditionsIntent": {
        "feelsLike": "Bool",
        "precipitation": "Bool = True",
        "summary": "SummaryType(Enum) = \"snark\"",
        "dataPoints": "DataPoint(Object)"
    },
    "com.grailr.CARROTweather.WidgetCustomIntent": {
        "topDataPoint": "DataPoint(Object)",
        "bottomDataPoint": "DataPoint(Object)"
    },
    "com.grailr.CARROTweather.WidgetDetailsIntent": {
        "feelsLike": "Bool",
        "precipitation": "Bool = True",
        "dataPoints": "DataPoint(Object)"
    },
    "com.iconfactory.Tot.AddToDotIntent": {
        "text": "String",
        "dot": "Integer = 1",
        "at": "AtEnum(Enum)",
        "ThisIsReturnValue:Text": "String"
    },
    "com.iconfactory.Tot.GetDotIntent": {
        "dot": "Integer = 1",
        "ThisIsReturnValue:Text": "String"
    },
    "com.iconfactory.Tot.ShowDotIntent": {
        "dot": "Integer = 1"
    },
    "com.iconfactory.Tot.SetDotIntent": {
        "text": "String",
        "dot": "Integer = 1",
        "ThisIsReturnValue:Text": "String"
    },
    "com.iconfactory.Tot.QueryDotIntent": {
        "dot": "Integer = 1",
        "ThisIsReturnValue:Dot Info": "DotInfo(Object)"
    },
    "com.ideasoncanvas.mindnode.ios.MNCQuickEntryIntent": {
        "contentInputSource": "ContentInputSource(Enum) = \"string\"",
        "text": "String"
    },
    "com.ideasoncanvas.mindnode.ios.MNCNewDocumentIntent": {
        "contentInputSource": "ContentInputSource(Enum) = \"string\"",
        "text": "String"
    },
    "com.ideasoncanvas.mindnode.ios.MNCViewDocumentIntent": {
        "file": "File(Object)",
        "bookmarkString": "String"
    },
    "com.ideasoncanvas.mindnode.ios.MNCExportDocumentIntent": {
        "document": "File(Object)",
        "exportType": "ExportType(Enum) = \"image\"",
        "ThisIsReturnValue:Exported File": "File(Object)"
    },
    "com.ideasoncanvas.mindnode.ios.MNCExportTasksIntent": {
        "document": "File(Object)"
    },
    "com.ideasoncanvas.mindnode.ios.MNCExportToThingsIntent": {
        "document": "File(Object)",
        "revealInThings": "Bool",
        "ThisIsReturnValue:Things URL": "String"
    },
    "com.ideasoncanvas.mindnode.ios.MNCAddToQuickEntryIntent": {
        "text": "String"
    },
    "com.ideasoncanvas.mindnode.macos.MNCQuickEntryIntent": {
        "contentInputSource": "ContentInputSource(Enum) = \"string\"",
        "text": "String"
    },
    "com.ideasoncanvas.mindnode.macos.MNCNewDocumentIntent": {
        "contentInputSource": "ContentInputSource(Enum) = \"string\"",
        "text": "String"
    },
    "com.ideasoncanvas.mindnode.macos.MNCViewDocumentIntent": {
        "file": "File(Object)",
        "bookmarkString": "String"
    },
    "com.ideasoncanvas.mindnode.macos.MNCExportDocumentIntent": {
        "document": "File(Object)",
        "exportType": "ExportType(Enum) = \"image\"",
        "ThisIsReturnValue:Exported File": "File(Object)"
    },
    "com.ideasoncanvas.mindnode.macos.MNCExportTasksIntent": {
        "document": "File(Object)"
    },
    "com.ideasoncanvas.mindnode.macos.MNCExportToThingsIntent": {
        "document": "File(Object)",
        "revealInThings": "Bool",
        "ThisIsReturnValue:Things URL": "String"
    },
    "com.ideasoncanvas.mindnode.macos.MNCAddToQuickEntryIntent": {
        "text": "String"
    },
    "com.joehribar.toggl.StartSavedTimerIntent": {
        "savedTimer": "(Object)"
    },
    "com.joehribar.toggl.StopTimeEntryIntent": {
        "stopTimeMode": "StopTimeModeAppEnum(Enum) = \"currentTime\"",
        "stop": "String",
        "roundingMode": "RoundingModeAppEnum(Enum) = \"roundUpTo\"",
        "roundingInterval": "RoundingIntervalAppEnum(Enum) = \"min1\"",
        "durationAdjustMode": "DurationAdjustModeAppEnum(Enum) = \"adjustStop\"",
        "minutesAgo": "Integer",
        "ThisIsReturnValue:Stop Current Time Entry": "TimeEntryAppEntity(Object)"
    },
    "com.joehribar.toggl.CheckTimeEntryIntent": {
        "ThisIsReturnValue:Check Current Time Entry": "TimeEntryAppEntity(Object)"
    },
    "com.joehribar.toggl.CheckSavedTimerIntent": {
        "savedTimer": "(Object)"
    },
    "com.joehribar.toggl.CheckTimeLoggedIntent": {
        "timePeriod": "TimePeriod(Enum) = \"today\"",
        "startDate": "String",
        "endDate": "String",
        "onDate": "String",
        "sinceDate": "String",
        "lastNumberOfDays": "Integer = 7",
        "workspace": "WorkspaceDetails(Object)",
        "filterClientMode": "FilterClientMode(Enum) = \"off\"",
        "client": "String",
        "filterProjectsMode": "FilterProjectsMode(Enum) = \"off\"",
        "projectsIncluded": "String",
        "projectsExcluded": "String",
        "filterTasksMode": "FilterTasksMode(Enum) = \"off\"",
        "tasksIncluded": "String",
        "filterDescriptionMode": "FilterDescriptionMode(Enum) = \"off\"",
        "timeEntryDescription": "String",
        "filterTagsMode": "FilterTagsModeReport(Enum) = \"off\"",
        "tagsIncluded": "String",
        "tagsExcluded": "String",
        "filterBillableMode": "FilterBillableMode(Enum) = \"off\"",
        "groupReportDetailsBy": "GroupReportDetailsByType(Enum) = \"descriptions\"",
        "groupIntoTasks": "Bool",
        "rounding": "Bool",
        "roundingMode": "RoundingMode(Enum) = \"roundUpTo\"",
        "roundingInterval": "RoundingInterval(Enum) = \"min1\"",
        "includeTeamTime": "Bool",
        "sortingMode": "SortingMode(Enum) = \"durations\"",
        "ThisIsReturnValue:Things URL": "String"
    },
    "com.joehribar.toggl.CheckProjectIntent": {
        "project": "(Object)"
    },
    "com.joehribar.toggl.StartTimeEntryIntent": {
        "project": "String",
        "timeEntryDescription": "String",
        "tags": "String",
        "workspace": "WorkspaceDetails(Object)",
        "startTimeMode": "StartTimeMode(Enum) = \"currentTime\"",
        "start": "String",
        "minutesAgo": "Integer",
        "billable": "Bool",
        "ThisIsReturnValue:Message": "String"
    },
    "com.joehribar.toggl.CheckTimerTimeTrackedIntent": {
        "project": "String",
        "timeEntryDescription": "String",
        "tags": "String",
        "timePeriod": "TimePeriod(Enum) = \"today\"",
        "startDate": "String",
        "endDate": "String",
        "onDate": "String",
        "sinceDate": "String",
        "lastNumberOfDays": "Integer = 7",
        "workspace": "WorkspaceDetails(Object)",
        "rounding": "Bool",
        "roundingMode": "RoundingMode(Enum) = \"roundUpTo\"",
        "roundingInterval": "RoundingInterval(Enum) = \"min1\"",
        "includeTeamTime": "Bool",
        "ThisIsReturnValue:Message": "String"
    },
    "com.joehribar.toggl.CheckProjectTimeTrackedIntent": {
        "project": "String",
        "timePeriod": "TimePeriod(Enum) = \"today\"",
        "startDate": "String",
        "endDate": "String",
        "onDate": "String",
        "sinceDate": "String",
        "lastNumberOfDays": "Integer = 7",
        "workspace": "WorkspaceDetails(Object)",
        "groupReportDetailsBy": "GroupReportDetailsByType(Enum) = \"descriptions\"",
        "groupIntoTasks": "Bool",
        "rounding": "Bool",
        "roundingMode": "RoundingMode(Enum) = \"roundUpTo\"",
        "roundingInterval": "RoundingInterval(Enum) = \"min1\"",
        "includeTeamTime": "Bool",
        "sortingMode": "SortingMode(Enum) = \"durations\"",
        "ThisIsReturnValue:Message": "String"
    },
    "com.joehribar.toggl.AddTimeEntryIntent": {
        "workspace": "WorkspaceDetails(Object)",
        "project": "String",
        "timeEntryDescription": "String",
        "tags": "String",
        "startTimeMode": "StartTimeModeForAddTimeEntry(Enum) = \"specifiedTime\"",
        "start": "String",
        "minutesAgo": "Integer",
        "endTimeType": "EndTimeType(Enum)",
        "stop": "String",
        "duration": "TimeInterval(Object)",
        "billable": "Bool",
        "ThisIsReturnValue:Message": "String"
    },
    "com.joehribar.toggl.GetProjectsIntent": {
        "workspace": "WorkspaceDetails(Object)",
        "filterClientMode": "FilterClientMode(Enum) = \"off\"",
        "client": "String",
        "filterBillableMode": "FilterBillableMode(Enum) = \"off\"",
        "includeTasks": "Bool",
        "ThisIsReturnValue:Message": "String"
    },
    "com.joehribar.toggl.GetTasksIntent": {
        "project": "String",
        "workspace": "WorkspaceDetails(Object)",
        "ThisIsReturnValue:Message": "String"
    },
    "com.joehribar.toggl.GetTagsIntent": {
        "workspace": "WorkspaceDetails(Object)",
        "ThisIsReturnValue:Message": "String"
    },
    "com.joehribar.toggl.GetClientsIntent": {
        "workspace": "WorkspaceDetails(Object)",
        "ThisIsReturnValue:Message": "String"
    },
    "com.joehribar.toggl.GetWorkspacesIntent": {
        "ThisIsReturnValue:Message": "String"
    },
    "com.joehribar.toggl.FormatDurationIntent": {
        "seconds": "Integer",
        "rounding": "Bool",
        "roundingMode": "RoundingMode(Enum) = \"roundUpTo\"",
        "roundingInterval": "RoundingInterval(Enum) = \"min1\"",
        "ThisIsReturnValue:Message": "String"
    },
    "com.joehribar.toggl.ContinueTimeEntryIntent": {
        "startTimeMode": "StartTimeModeAppEnum(Enum) = \"currentTime\"",
        "start": "String",
        "minutesAgo": "Integer",
        "ThisIsReturnValue:Continue Latest Timer": "TimeEntryAppEntity(Object)"
    },
    "com.joehribar.toggl.UpdateTimeEntryIntent": {
        "updateTimeEntryMode": "UpdateTimeEntryMode(Enum) = \"currentTimeEntry\"",
        "timeEntryId": "String",
        "workspace": "WorkspaceDetails(Object)",
        "updateProjectMode": "UpdateProjectMode(Enum) = \"off\"",
        "project": "String",
        "updateDescriptionMode": "UpdateDescriptionMode(Enum) = \"off\"",
        "timeEntryDescription": "String",
        "updateTagsMode": "UpdateTagsMode(Enum) = \"off\"",
        "tags": "String",
        "updateStartTimeMode": "UpdateStartTimeMode(Enum) = \"off\"",
        "start": "String",
        "startMinutesAgo": "Integer",
        "updateStopTimeMode": "UpdateStopTimeMode(Enum) = \"off\"",
        "stop": "String",
        "roundingMode": "RoundingMode(Enum) = \"roundUpTo\"",
        "roundingInterval": "RoundingInterval(Enum) = \"min1\"",
        "durationAdjustMode": "DurationAdjustMode(Enum) = \"adjustStop\"",
        "stopMinutesAgo": "Integer",
        "updateBillableMode": "UpdateBillableMode(Enum) = \"off\"",
        "ThisIsReturnValue:Message": "String"
    },
    "com.joehribar.toggl.GetTimeEntriesIntent": {
        "timePeriod": "TimePeriod(Enum) = \"today\"",
        "startDate": "String",
        "endDate": "String",
        "onDate": "String",
        "sinceDate": "String",
        "lastNumberOfDays": "Integer = 7",
        "workspace": "WorkspaceDetails(Object)",
        "filterClientMode": "FilterClientMode(Enum) = \"off\"",
        "client": "String",
        "filterProjectsMode": "FilterProjectsMode(Enum) = \"off\"",
        "projectsIncluded": "String",
        "projectsExcluded": "String",
        "filterTasksMode": "FilterTasksMode(Enum) = \"off\"",
        "tasksIncluded": "String",
        "filterDescriptionMode": "FilterDescriptionMode(Enum) = \"off\"",
        "timeEntryDescription": "String",
        "timeEntryDescriptionContains": "String",
        "filterTagsMode": "FilterTagsModeReport(Enum) = \"off\"",
        "tagsIncluded": "String",
        "tagsExcluded": "String",
        "filterBillableMode": "FilterBillableMode(Enum) = \"off\"",
        "rounding": "Bool",
        "roundingMode": "RoundingMode(Enum) = \"roundUpTo\"",
        "roundingInterval": "RoundingInterval(Enum) = \"min1\"",
        "includeTeamTime": "Bool",
        "ThisIsReturnValue:Message": "String"
    },
    "com.joehribar.toggl.GetSavedTimersIntent": {
        "workspace": "WorkspaceDetails(Object)",
        "filterClientMode": "FilterClientMode(Enum) = \"off\"",
        "client": "String",
        "filterProjectsMode": "FilterProjectsMode(Enum) = \"off\"",
        "projectsIncluded": "String",
        "projectsExcluded": "String",
        "filterTasksMode": "FilterTasksMode(Enum) = \"off\"",
        "tasksIncluded": "String",
        "filterDescriptionMode": "FilterDescriptionMode(Enum) = \"off\"",
        "timeEntryDescription": "String",
        "filterTagsMode": "FilterTagsMode(Enum) = \"off\"",
        "tagsIncluded": "String",
        "tagsExcluded": "String",
        "tagsMatched": "String",
        "filterBillableMode": "FilterBillableMode(Enum) = \"off\"",
        "ThisIsReturnValue:Message": "String"
    },
    "com.joehribar.toggl.AddProjectIntent": {
        "project": "String",
        "workspace": "WorkspaceDetails(Object)",
        "assignClient": "Bool",
        "client": "String",
        "billable": "Bool",
        "color": "String",
        "ThisIsReturnValue:Message": "String"
    },
    "com.joehribar.toggl.ViewSavedTimersIntent": {
        "savedTimers": "SavedTimerDetails(Object)",
        "compactMode": "Bool",
        "showStartControls": "Bool",
        "startControlsInterval1": "TimerWidgetStartInterval(Enum) = \"min1\"",
        "startControlsInterval2": "TimerWidgetStartInterval(Enum) = \"min5\"",
        "startControlsInterval3": "TimerWidgetStartInterval(Enum) = \"lastStopTime\"",
        "showPageControls": "Bool",
        "showCurrentTimeEntry": "Bool",
        "appearance": "Appearance(Enum) = \"system\"",
        "alwaysShowCurrentColor": "Bool",
        "alwaysShowProjectColor": "Bool",
        "alwaysShowCurrentColorGradient": "Bool",
        "alwaysShowProjectColorGradient": "Bool",
        "useBlackWhenColorNotShown": "Bool",
        "useBlackWhenColorNotShownGradient": "Bool",
        "customColor": "String",
        "textColor": "TextColor(Enum) = \"black\"",
        "openAppLocation": "OpenAppLocation(Enum) = \"app\""
    },
    "com.joehribar.toggl.ViewTimeTrackedIntent": {
        "timePeriod": "TimePeriodForWidget(Enum) = \"today\"",
        "thisWeekShowsLast7Days": "Bool",
        "reportMode": "ReportMode(Enum) = \"useWidgetFilters\"",
        "savedReport": "SavedReportDetails(Object)",
        "showSavedReportLabel": "Bool",
        "workspace": "WorkspaceDetails(Object)",
        "filterClientMode": "FilterClientMode(Enum) = \"off\"",
        "client": "String",
        "filterProjectsMode": "FilterProjectsMode(Enum) = \"off\"",
        "projectsIncluded": "ProjectDetails(Object)",
        "projectsExcluded": "ProjectDetails(Object)",
        "filterTasksMode": "FilterTasksMode(Enum) = \"off\"",
        "tasksIncluded": "ProjectDetails(Object)",
        "filterDescriptionMode": "FilterDescriptionMode(Enum) = \"off\"",
        "timeEntryDescription": "String",
        "filterTagsMode": "FilterTagsMode(Enum) = \"off\"",
        "tagsIncluded": "String",
        "tagsExcluded": "String",
        "tagsMatched": "String",
        "filterBillableMode": "FilterBillableMode(Enum) = \"off\"",
        "detailsGroupingMode": "DetailsGroupingMode(Enum) = \"projects\"",
        "secondaryDetailsGroupingMode": "DetailsGroupingMode(Enum) = \"descriptions\"",
        "showMoreGraphItems": "Bool",
        "showMoreGraphs": "Bool",
        "showWeekByDayInMedium": "Bool",
        "showExtendedDetails": "Bool",
        "showWeekByDay": "Bool",
        "rounding": "Bool",
        "roundingMode": "RoundingMode(Enum) = \"roundUpTo\"",
        "roundingInterval": "RoundingInterval(Enum) = \"min1\"",
        "roundingHideSeconds": "Bool = True",
        "useCustomHeading": "Bool",
        "customHeading": "String",
        "includeTimePeriod": "Bool = True",
        "barColor": "BarColor(Enum) = \"appThemeColor\"",
        "customBarColor": "String",
        "showCurrentTimeEntry": "Bool",
        "showCompactCurrentTimeEntry": "Bool",
        "showStopButton": "Bool",
        "showTimePeriodSwitchButton": "Bool",
        "includeWeekByDayInTimePeriodSwitch": "Bool = True",
        "appearance": "Appearance(Enum) = \"system\"",
        "alwaysShowCurrentColor": "Bool",
        "alwaysShowProjectColor": "Bool",
        "alwaysShowCurrentColorGradient": "Bool",
        "alwaysShowProjectColorGradient": "Bool",
        "useBlackWhenColorNotShown": "Bool",
        "useBlackWhenColorNotShownGradient": "Bool",
        "customColor": "String",
        "textColor": "TextColor(Enum) = \"black\"",
        "openAppLocation": "OpenAppLocation(Enum) = \"app\""
    },
    "com.joehribar.toggl.ViewCurrentTimeEntryIntent": {
        "startButtonOpens": "StartButtonOpens(Enum) = \"timersLists\"",
        "appearance": "Appearance(Enum) = \"system\"",
        "useBlackWhenColorNotShown": "Bool",
        "useBlackWhenColorNotShownGradient": "Bool",
        "customColor": "String",
        "textColor": "TextColor(Enum) = \"black\"",
        "openAppLocation": "OpenAppLocation(Enum) = \"currentTimeEntry\""
    },
    "com.joehribar.toggl.ViewSummaryReportIntent": {
        "reportMode": "ReportMode(Enum) = \"useWidgetFilters\"",
        "savedReport": "SavedReportDetails(Object)",
        "showSavedReportLabel": "Bool",
        "timePeriod": "TimePeriodForReportWidget(Enum) = \"thisMonth\"",
        "sinceDate": "String",
        "lastNumberOfDays": "Integer = 7",
        "workspace": "WorkspaceDetails(Object)",
        "filterClientMode": "FilterClientMode(Enum) = \"off\"",
        "client": "String",
        "filterProjectsMode": "FilterProjectsMode(Enum) = \"off\"",
        "projectsIncluded": "ProjectDetails(Object)",
        "projectsExcluded": "ProjectDetails(Object)",
        "filterTasksMode": "FilterTasksMode(Enum) = \"off\"",
        "tasksIncluded": "ProjectDetails(Object)",
        "filterDescriptionMode": "FilterDescriptionMode(Enum) = \"off\"",
        "timeEntryDescription": "String",
        "filterTagsMode": "FilterTagsModeReport(Enum) = \"off\"",
        "tagsIncluded": "String",
        "tagsExcluded": "String",
        "filterBillableMode": "FilterBillableMode(Enum) = \"off\"",
        "detailsGroupingMode": "DetailsGroupingModeReport(Enum) = \"projects\"",
        "showMoreGraphItems": "Bool",
        "useCustomHeading": "Bool",
        "customHeading": "String",
        "includeTimePeriod": "Bool = True",
        "barColor": "BarColor(Enum) = \"appThemeColor\"",
        "customBarColor": "String",
        "showCurrentTimeEntry": "Bool",
        "showStopButton": "Bool",
        "appearance": "Appearance(Enum) = \"system\"",
        "alwaysShowCurrentColor": "Bool",
        "alwaysShowProjectColor": "Bool",
        "alwaysShowCurrentColorGradient": "Bool",
        "alwaysShowProjectColorGradient": "Bool",
        "useBlackWhenColorNotShown": "Bool",
        "useBlackWhenColorNotShownGradient": "Bool",
        "customColor": "String",
        "textColor": "TextColor(Enum) = \"black\"",
        "openAppLocation": "OpenAppLocation(Enum) = \"app\""
    },
    "com.joehribar.toggl.AddSavedTimerIntent": {
        "workspace": "WorkspaceDetails(Object)",
        "project": "String",
        "timeEntryDescription": "String",
        "tags": "String",
        "billable": "Bool",
        "ThisIsReturnValue:Message": "String"
    },
    "com.joehribar.toggl.ViewRecentTimeEntriesIntent": {
        "workspace": "WorkspaceDetails(Object)",
        "filterClientMode": "FilterClientMode(Enum) = \"off\"",
        "client": "String",
        "filterProjectsMode": "FilterProjectsMode(Enum) = \"off\"",
        "projectsIncluded": "ProjectDetails(Object)",
        "projectsExcluded": "ProjectDetails(Object)",
        "filterTasksMode": "FilterTasksMode(Enum) = \"off\"",
        "tasksIncluded": "ProjectDetails(Object)",
        "filterDescriptionMode": "FilterDescriptionMode(Enum) = \"off\"",
        "timeEntryDescription": "String",
        "filterTagsMode": "FilterTagsMode(Enum) = \"off\"",
        "tagsIncluded": "String",
        "tagsExcluded": "String",
        "tagsMatched": "String",
        "filterBillableMode": "FilterBillableMode(Enum) = \"off\"",
        "includeMatchingSavedTimers": "Bool",
        "includeCurrentTimeEntry": "Bool",
        "sorting": "RecentTimeEntriesWidgetSortingMode(Enum) = \"recency\"",
        "compactMode": "Bool",
        "showStartControls": "Bool",
        "startControlsInterval1": "TimerWidgetStartInterval(Enum) = \"min1\"",
        "startControlsInterval2": "TimerWidgetStartInterval(Enum) = \"min5\"",
        "startControlsInterval3": "TimerWidgetStartInterval(Enum) = \"lastStopTime\"",
        "showPageControls": "Bool",
        "showCurrentTimeEntry": "Bool",
        "appearance": "Appearance(Enum) = \"system\"",
        "alwaysShowCurrentColor": "Bool",
        "alwaysShowProjectColor": "Bool",
        "alwaysShowCurrentColorGradient": "Bool",
        "alwaysShowProjectColorGradient": "Bool",
        "useBlackWhenColorNotShown": "Bool",
        "useBlackWhenColorNotShownGradient": "Bool",
        "customColor": "String",
        "textColor": "TextColor(Enum) = \"black\"",
        "openAppLocation": "OpenAppLocation(Enum) = \"app\""
    },
    "com.joehribar.toggl.GetRecentTimeEntriesIntent": {
        "workspace": "WorkspaceDetails(Object)",
        "filterClientMode": "FilterClientMode(Enum) = \"off\"",
        "client": "String",
        "filterProjectsMode": "FilterProjectsMode(Enum) = \"off\"",
        "projectsIncluded": "String",
        "projectsExcluded": "String",
        "filterTasksMode": "FilterTasksMode(Enum) = \"off\"",
        "tasksIncluded": "String",
        "filterDescriptionMode": "FilterDescriptionMode(Enum) = \"off\"",
        "timeEntryDescription": "String",
        "filterTagsMode": "FilterTagsMode(Enum) = \"off\"",
        "tagsIncluded": "String",
        "tagsExcluded": "String",
        "tagsMatched": "String",
        "filterBillableMode": "FilterBillableMode(Enum) = \"off\"",
        "sorting": "RecentTimeEntriesWidgetSortingMode(Enum) = \"recency\"",
        "ThisIsReturnValue:Message": "String"
    },
    "com.joehribar.toggl.ViewDashboardIntent": {
        "showCurrentTimeEntryTodayTime": "Bool",
        "timersMode": "DashboardTimersMode(Enum) = \"savedTimers\"",
        "savedTimers": "SavedTimerDetails(Object)",
        "filterRecentTimeEntries": "Bool",
        "includeMatchingSavedTimers": "Bool",
        "recentTimeEntriesSorting": "RecentTimeEntriesWidgetSortingMode(Enum) = \"recency\"",
        "compactMode": "Bool = True",
        "showStartControls": "Bool",
        "startControlsInterval1": "TimerWidgetStartInterval(Enum) = \"min1\"",
        "startControlsInterval2": "TimerWidgetStartInterval(Enum) = \"min5\"",
        "startControlsInterval3": "TimerWidgetStartInterval(Enum) = \"lastStopTime\"",
        "showPageControls": "Bool",
        "graph1Type": "DashboardGraphType(Enum) = \"today\"",
        "graph2Type": "DashboardGraphType(Enum) = \"thisWeek\"",
        "thisWeekShowsLast7Days": "Bool",
        "showMoreGraphs": "Bool",
        "reportMode": "ReportMode(Enum) = \"useWidgetFilters\"",
        "savedReport": "SavedReportDetails(Object)",
        "showSavedReportLabel": "Bool",
        "workspace": "WorkspaceDetails(Object)",
        "filterClientMode": "FilterClientMode(Enum) = \"off\"",
        "client": "String",
        "filterProjectsMode": "FilterProjectsMode(Enum) = \"off\"",
        "projectsIncluded": "ProjectDetails(Object)",
        "projectsExcluded": "ProjectDetails(Object)",
        "filterTasksMode": "FilterTasksMode(Enum) = \"off\"",
        "tasksIncluded": "ProjectDetails(Object)",
        "filterDescriptionMode": "FilterDescriptionMode(Enum) = \"off\"",
        "timeEntryDescription": "String",
        "filterTagsMode": "FilterTagsMode(Enum) = \"off\"",
        "tagsIncluded": "String",
        "tagsExcluded": "String",
        "tagsMatched": "String",
        "filterBillableMode": "FilterBillableMode(Enum) = \"off\"",
        "detailsGroupingMode": "DetailsGroupingMode(Enum) = \"projects\"",
        "secondaryDetailsGroupingMode": "DetailsGroupingMode(Enum) = \"descriptions\"",
        "showMoreGraphItems": "Bool",
        "rounding": "Bool",
        "roundingMode": "RoundingMode(Enum) = \"roundUpTo\"",
        "roundingInterval": "RoundingInterval(Enum) = \"min1\"",
        "roundingHideSeconds": "Bool = True",
        "useCustomHeading": "Bool",
        "customHeading": "String",
        "includeTimePeriod": "Bool = True",
        "barColor": "BarColor(Enum) = \"appThemeColor\"",
        "customBarColor": "String",
        "showTimePeriodSwitchButton": "Bool",
        "includeWeekByDayInTimePeriodSwitch": "Bool = True",
        "appearance": "Appearance(Enum) = \"system\"",
        "useBlackWhenColorNotShown": "Bool",
        "useBlackWhenColorNotShownGradient": "Bool",
        "customColor": "String",
        "textColor": "TextColor(Enum) = \"black\"",
        "openAppLocation": "OpenAppLocation(Enum) = \"app\""
    },
    "com.joehribar.toggl.ViewCurrentTimeEntryAccessoryIntent": {
        "circularStyle": "CurrentTimeEntryAccessoryCircularStyle(Enum) = \"standard\"",
        "showStopButton": "Bool = True",
        "openAppLocation": "OpenAppLocation(Enum) = \"currentTimeEntry\""
    },
    "com.joehribar.toggl.ViewTimeTrackedAccessoryIntent": {
        "timePeriod": "TimePeriodForWidget(Enum) = \"today\"",
        "thisWeekShowsLast7Days": "Bool",
        "reportMode": "ReportMode(Enum) = \"useWidgetFilters\"",
        "savedReport": "SavedReportDetails(Object)",
        "showSavedReportLabel": "Bool",
        "workspace": "WorkspaceDetails(Object)",
        "filterClientMode": "FilterClientMode(Enum) = \"off\"",
        "client": "String",
        "filterProjectsMode": "FilterProjectsMode(Enum) = \"off\"",
        "projectsIncluded": "ProjectDetails(Object)",
        "projectsExcluded": "ProjectDetails(Object)",
        "filterTasksMode": "FilterTasksMode(Enum) = \"off\"",
        "tasksIncluded": "ProjectDetails(Object)",
        "filterDescriptionMode": "FilterDescriptionMode(Enum) = \"off\"",
        "timeEntryDescription": "String",
        "filterTagsMode": "FilterTagsMode(Enum) = \"off\"",
        "tagsIncluded": "String",
        "tagsExcluded": "String",
        "tagsMatched": "String",
        "filterBillableMode": "FilterBillableMode(Enum) = \"off\"",
        "detailsGroupingMode": "DetailsGroupingModeAccessoryWidget(Enum) = \"projects\"",
        "rounding": "Bool",
        "roundingMode": "RoundingMode(Enum) = \"roundUpTo\"",
        "roundingInterval": "RoundingInterval(Enum) = \"min1\"",
        "roundingHideSeconds": "Bool = True",
        "showGraph": "Bool = True",
        "useCustomLabel": "Bool",
        "customLabel": "String",
        "showStopButton": "Bool",
        "circularStyle": "AccessoryWidgetCircularStyle(Enum) = \"standard\"",
        "openAppLocation": "OpenAppLocation(Enum) = \"app\""
    },
    "com.joehribar.toggl.StartTimeEntryAccessoryIntent": {
        "mode": "StartTimeEntryAccessoryMode(Enum) = \"showTimersLists\"",
        "showEditView": "Bool",
        "savedTimer": "SavedTimerDetails(Object)",
        "label": "SavedTimerLabelMode(Enum) = \"project\"",
        "customLabel": "String",
        "openAppLocation": "OpenAppLocation(Enum) = \"app\"",
        "circularStyle": "AccessoryWidgetCircularStyle(Enum) = \"standard\""
    },
    "com.joehribar.toggl.ViewSingleSavedTimerIntent": {
        "savedTimer": "SavedTimerDetails(Object)",
        "timePeriod": "TimePeriodForWidget(Enum) = \"today\"",
        "thisWeekShowsLast7Days": "Bool",
        "appearance": "Appearance(Enum) = \"system\"",
        "alwaysShowProjectColor": "Bool",
        "alwaysShowProjectColorGradient": "Bool",
        "useBlackWhenColorNotShown": "Bool",
        "useBlackWhenColorNotShownGradient": "Bool",
        "customColor": "String",
        "textColor": "TextColor(Enum) = \"black\"",
        "openAppLocation": "OpenAppLocation(Enum) = \"app\""
    },
    "com.joehribar.toggl.ViewProjectIntent": {
        "project": "ProjectDetails(Object)",
        "workspace": "WorkspaceDetails(Object)",
        "graph1Type": "DashboardGraphType(Enum) = \"today\"",
        "graph2Type": "DashboardGraphType(Enum) = \"thisWeek\"",
        "thisWeekShowsLast7Days": "Bool",
        "detailsGroupingMode": "DetailsGroupingMode(Enum) = \"descriptions\"",
        "showMoreGraphItems": "Bool",
        "showMoreGraphs": "Bool",
        "showMoreGraphsXL": "Bool",
        "timersMode": "DashboardTimersMode(Enum) = \"savedTimers\"",
        "savedTimers": "SavedTimerDetails(Object)",
        "includeMatchingSavedTimers": "Bool",
        "recentTimersSorting": "ProjectWidgetSortingMode(Enum) = \"lastUsed\"",
        "compactMode": "Bool = True",
        "showStartControls": "Bool",
        "startControlsInterval1": "TimerWidgetStartInterval(Enum) = \"min1\"",
        "startControlsInterval2": "TimerWidgetStartInterval(Enum) = \"min5\"",
        "startControlsInterval3": "TimerWidgetStartInterval(Enum) = \"lastStopTime\"",
        "showPageControls": "Bool",
        "showTimers": "Bool",
        "showCurrentTimeEntry": "Bool",
        "showTimePeriodSwitchButton": "Bool",
        "includeWeekByDayInTimePeriodSwitch": "Bool = True",
        "appearance": "Appearance(Enum) = \"system\"",
        "alwaysShowProjectColor": "Bool",
        "alwaysShowProjectColorGradient": "Bool",
        "useBlackWhenColorNotShown": "Bool",
        "useBlackWhenColorNotShownGradient": "Bool",
        "customColor": "String",
        "textColor": "TextColor(Enum) = \"black\"",
        "openAppLocation": "OpenAppLocation(Enum) = \"app\""
    },
    "com.joehribar.toggl.ConfigureTimeryFocusFilter": {
        "setWorkspace": "Bool = \"0\"",
        "workspace": "WorkspaceAppEntity(Object)",
        "filterClients": "Bool = \"0\"",
        "filterClientsMode": "FocusFilterClientsMode(Enum) = \"include\"",
        "filteredClients": "array(ClientAppEntity(Object))",
        "filterProjects": "Bool = \"0\"",
        "filterProjectsMode": "FocusFilterProjectsMode(Enum) = \"include\"",
        "filteredProjects": "array(ProjectAppEntity(Object))",
        "filterTags": "Bool = \"0\"",
        "filterTagsMode": "FocusFilterTagsMode(Enum) = \"include\"",
        "filteredTags": "array(TagAppEntity(Object))",
        "setReports": "Bool = \"0\"",
        "reportsOverview": "ReportsOverviewAppEntity(Object)",
        "summaryReport": "SummaryReportAppEntity(Object)"
    },
    "com.joehribar.toggl.ExportSavedReport": {
        "reportType": "ExportSavedReportType(Enum) = \"reportsOverview\"",
        "reportsOverview": "ReportsOverviewAppEntity(Object)",
        "summaryReport": "SummaryReportAppEntity(Object)",
        "fileType": "ExportSavedReportFileType(Enum) = \"png\"",
        "ThisIsReturnValue:Export Saved Report": "12(Object)"
    },
    "com.joehribar.toggl.OpenTimery": {
        "openAppLocation": "OpenAppLocationAppEnum(Enum) = \"app\"",
        "reportsOverview": "ReportsOverviewAppEntity(Object)",
        "summaryReport": "SummaryReportAppEntity(Object)"
    },
    "com.joehribar.toggl.PerformActionAppIntent": {
        "action": "PerformActionAppIntentAction(Enum) = \"startSavedTimer\"",
        "secondaryAction": "PerformActionAppIntentAction(Enum) = \"startSavedTimer\""
    },
    "com.joehribar.toggl.StartLiveActivity": {
        "ThisIsReturnValue:Start Live Activity": "TimeEntryAppEntity(Object)"
    },
    "com.joehribar.toggl.StartRecentTimer": {
        "mode": "StartRecentTimerMode(Enum) = \"fromList\"",
        "recentTimerEntity": "RecentTimerAppEntity(Object)",
        "listSortingMode": "StartRecentTimerListSortingMode(Enum) = \"lastUsed\"",
        "startTimeMode": "StartTimeAppEnum(Enum) = \"currentTime\"",
        "specifiedStartTime": "String",
        "minutesAgo": "Integer",
        "widgetId": "String",
        "widgetRecentTimerId": "String",
        "widgetRecentTimerProjectId": "Integer = \"0\"",
        "widgetRecentTimerTaskId": "Integer = \"0\"",
        "widgetRecentTimerDescription": "String",
        "widgetRecentTimerTags": "array(String) = \"array()\"",
        "widgetRecentTimerBillable": "Bool = \"0\"",
        "ThisIsReturnValue:Start Recent Timer": "TimeEntryAppEntity(Object)"
    },
    "com.joehribar.toggl.StartSavedTimer": {
        "savedTimerEntity": "SavedTimerAppEntity(Object)",
        "startTimeMode": "StartTimeAppEnum(Enum) = \"currentTime\"",
        "specifiedStartTime": "String",
        "minutesAgo": "Integer",
        "ThisIsReturnValue:Start Saved Timer": "TimeEntryAppEntity(Object)"
    },
    "com.leomehlig.today.AddTaskIntent": {
        "title": "String",
        "taskType": "TaskTypeEntity(Enum) = \"timed\"",
        "day": "String",
        "startDate": "String",
        "duration": "Float = \"15\"",
        "symbol": "SymbolEntity(Object)",
        "notes": "String",
        "hexString": "String",
        "theme": "ThemeType(Enum)",
        "subtasks": "array(String)",
        "recurrence": "TaskRecurranceType(Enum) = \"once\"",
        "ThisIsReturnValue:shortcuts.add.result_value": "TaskEntity(Object)"
    },
    "com.leomehlig.today.DayScheduleIntent": {
        "day": "RelativeDayEntity(Enum) = \"today\"",
        "otherDate": "String",
        "ThisIsReturnValue:shortcuts.check_schedule.result_value": "array(TaskEntity(Object))"
    },
    "com.leomehlig.today.DeleteTaskIntent": {
        "tasks": "array(TaskEntity(Object))",
        "recurringDelete": "RecurringDeleteType(Enum)"
    },
    "com.leomehlig.today.DuplicateTaskIntent": {
        "task": "array(TaskEntity(Object))",
        "ThisIsReturnValue:shortcuts.duplicate.result_value": "array(TaskEntity(Object))"
    },
    "com.leomehlig.today.EditIntent": {
        "tasks": "array(TaskEntity(Object))",
        "detail": "EditableTaskProperty(Enum)",
        "title": "String",
        "notes": "String",
        "subtasks": "array(String)",
        "status": "TaskCompletionStateType(Enum) = \"completed\"",
        "theme": "ThemeType(Enum)",
        "hex": "String",
        "duration": "Float",
        "day": "String",
        "startTime": "String",
        "endTime": "String",
        "symbol": "SymbolEntity(Object)",
        "recurringEditType": "RecurringEditType(Enum)",
        "taskType": "TaskTypeEntity(Enum) = \"timed\"",
        "ThisIsReturnValue:shortcuts.edit.result_value": "array(TaskEntity(Object))"
    },
    "com.leomehlig.today.FocusTimerIntent": {
        "task": "TaskEntity(Object)",
        "isSilent": "Bool = \"0\"",
        "ThisIsReturnValue:shortcuts.focus.result_value": "TaskEntity(Object)"
    },
    "com.leomehlig.today.GetCurrentTaskIntent": {
        "includeCompleted": "Bool = \"0\"",
        "ThisIsReturnValue:shortcuts.get_current.result_value": "array(TaskEntity(Object))"
    },
    "com.leomehlig.today.OpenDayIntent": {
        "date": "String"
    },
    "com.leomehlig.today.OpenInboxIntent": {},
    "com.leomehlig.today.OpenTaskIntent": {
        "task": "TaskEntity(Object)",
        "ThisIsReturnValue:shortcuts.open_task.title": "TaskEntity(Object)"
    },
    "com.leomehlig.today.ShowInboxIntent": {
        "includeCompleted": "Bool = \"0\"",
        "limitToggle": "Bool = \"0\"",
        "limit": "Integer = \"5\"",
        "ThisIsReturnValue:shortcuts.show_inbox.result_value": "array(TaskEntity(Object))"
    },
    "com.leomehlig.today.ShowTaskIntent": {
        "tasks": "array(TaskEntity(Object))",
        "prompt": "String",
        "ThisIsReturnValue:shortcuts.show_tasks.title": "array(TaskEntity(Object))"
    },
    "com.lifx.lifx.LFXLightThemeIntent": {
        "target": "Target(Object)",
        "theme": "String"
    },
    "com.lifx.lifx.LFXLightSceneIntent": {
        "scene": "Scene(Object)",
        "duration": "Integer = 1"
    },
    "com.lifx.lifx.LFXLightStateIntent": {
        "target": "Target(Object)",
        "power": "Bool = True",
        "brightness": "Integer = 100",
        "color": "Color(Object)",
        "duration": "Integer = 1",
        "ThisIsReturnValue:Target": "Target(Object)"
    },
    "com.lifx.lifx.LFXLightPowerIntent": {
        "target": "Target(Object)",
        "power": "Bool = True",
        "duration": "Integer = 1",
        "ThisIsReturnValue:Target": "Target(Object)"
    },
    "com.lifx.lifx.LFXLightBrightnessIntent": {
        "target": "Target(Object)",
        "brightness": "Integer = 100",
        "duration": "Integer = 1",
        "ThisIsReturnValue:Target": "Target(Object)"
    },
    "com.lifx.lifx.LFXLightColorIntent": {
        "target": "Target(Object)",
        "isWhite": "Bool = True",
        "hue": "Integer",
        "saturation": "Integer = 100",
        "kelvin": "Integer = 3500",
        "duration": "Integer = 1",
        "ThisIsReturnValue:Target": "Target(Object)"
    },
    "com.lifx.lifx.LFXGetLightsIntent": {
        "ThisIsReturnValue:Lights": "Target(Object)"
    },
    "com.lifx.lifx.LFXGetThemesIntent": {
        "ThisIsReturnValue:Themes": "String"
    },
    "com.lifx.lifx.LFXGetScenesIntent": {
        "ThisIsReturnValue:Scenes": "Scene(Object)"
    },
    "com.lifx.lifx.LFXCleanCycleIntent": {
        "target": "Target(Object)",
        "active": "Bool = True",
        "duration": "TimeInterval(Object)"
    },
    "com.lukilabs.lukiapp.SelectDocumentIntent": {
        "workspace": "Workspace(Object)",
        "document": "CraftDocument(Object)",
        "isBrandingEnabled": "Bool"
    },
    "com.lukilabs.lukiapp.OpenCraftIntent": {},
    "com.lukilabs.lukiapp.OpenDocumentIntent": {
        "workspace": "Workspace(Object)",
        "document": "CraftDocument(Object)"
    },
    "com.lukilabs.lukiapp.OpenSpaceIntent": {
        "workspace": "Workspace(Object)",
        "tab": "Tab(Enum) = \"current\""
    },
    "com.lukilabs.lukiapp.SelectWorkspaceIntent": {
        "workspace": "Workspace(Object)"
    },
    "com.lukilabs.lukiapp.QuickAddIntent": {
        "workspace": "Workspace(Object)",
        "folder": "CraftFolder(Object)",
        "title": "String",
        "content": "String"
    },
    "com.lukilabs.lukiapp.AddToDocumentIntent": {
        "workspace": "Workspace(Object)",
        "document": "CraftDocument(Object)",
        "content": "String",
        "insertPosition": "InsertPosition(Enum) = \"append\""
    },
    "com.lukilabs.lukiapp.OpenAndSearchIntent": {
        "workspace": "Workspace(Object)",
        "query": "String"
    },
    "com.microsoft.bing.OpenCashbackIntent": {},
    "com.microsoft.bing.OpenMoneyIntent": {},
    "com.microsoft.bing.OpenNewsIntent": {},
    "com.microsoft.bing.OpenRewardsIntent": {},
    "com.microsoft.bing.OpenShoppingIntent": {},
    "com.microsoft.bing.OpenSydneyAndSummerizeBigNewsIntent": {},
    "com.microsoft.bing.OpenSydneyAndWriteEmailIntent": {},
    "com.microsoft.bing.OpenSydneyIntent": {
        "query": "String"
    },
    "com.microsoft.bing.OpenWallpaperIntent": {},
    "com.microsoft.bing.OpenWeatherIntent": {},
    "com.microsoft.msedge.OpenInChromeIntent": {
        "url": "String"
    },
    "com.microsoft.msedge.SearchInChromeIntent": {
        "searchPhrase": "String"
    },
    "com.microsoft.msedge.OpenInChromeIncognitoIntent": {
        "url": "String"
    },
    "com.microsoft.msedge.AddReadingListItemToChromeIntent": {
        "url": "String"
    },
    "com.microsoft.msedge.AddBookmarkToChromeIntent": {
        "url": "String"
    },
    "com.microsoft.msedge.OpenReadingListIntent": {},
    "com.microsoft.msedge.OpenBookmarksIntent": {},
    "com.microsoft.msedge.OpenRecentTabsIntent": {},
    "com.microsoft.msedge.OpenTabGridIntent": {},
    "com.microsoft.msedge.SearchWithVoiceIntent": {},
    "com.microsoft.msedge.OpenNewTabIntent": {},
    "com.microsoft.msedge.PlayDinoGameIntent": {},
    "com.microsoft.msedge.SetChromeDefaultBrowserIntent": {},
    "com.microsoft.msedge.ViewHistoryIntent": {},
    "com.microsoft.msedge.OpenNewIncognitoTabIntent": {},
    "com.microsoft.msedge.ManagePaymentMethodsIntent": {},
    "com.microsoft.msedge.RunSafetyCheckIntent": {},
    "com.microsoft.msedge.ManagePasswordsIntent": {},
    "com.microsoft.msedge.ManageSettingsIntent": {},
    "com.microsoft.msedge.OpenLatestTabIntent": {},
    "com.microsoft.msedge.OpenLensIntent": {},
    "com.microsoft.msedge.ClearBrowsingDataIntent": {},
    "com.microsoft.msedge.OpenEdgeCopilotIntent": {},
    "com.microsoft.to-do.WLShowListIntent": {
        "list": "List(Object)"
    },
    "com.microsoft.to-do.WLAddTaskIntent": {
        "taskTitle": "String",
        "list": "List(Object)",
        "addToMyDay": "Bool",
        "isImportant": "Bool",
        "reminder": "String",
        "dueDate": "String",
        "notes": "String"
    },
    "com.microsoft.to-do.WLChooseListIntent": {
        "list": "List(Object)"
    },
    "com.microsoft.to-do.WLChooseListForAddTaskIntent": {
        "list": "List(Object)"
    },
    "com.microsoft.to-do.WLChooseListForMyDayIntent": {
        "list": "List(Object)"
    },
    "com.openai.chat.AskIntent": {
        "prompt": "String",
        "newChat": "Bool = \"0\"",
        "model": "ModelEntity(Object)",
        "continuous": "Bool = \"0\"",
        "ThisIsReturnValue:Ask ChatGPT": "String"
    },
    "com.openai.chat.OpenVoiceModeIntent": {},
    "com.overdesigned.Cheatsheet.CSAddCheatIntent": {
        "text": "String",
        "icon": "IconToGo(Object)",
        "title": "String",
        "folder": "FolderToGo(Object)",
        "ThisIsReturnValue:New Cheat": "CheatToGo(Object)"
    },
    "com.overdesigned.Cheatsheet.CSAppendCheatIntent": {
        "cheat": "CheatToGo(Object)",
        "text": "String",
        "ThisIsReturnValue:Cheat": "CheatToGo(Object)"
    },
    "com.overdesigned.Cheatsheet.CSDeleteCheatIntent": {
        "cheats": "array(CheatToGo(Object))"
    },
    "com.overdesigned.Cheatsheet.CSFindCheatsIntent": {
        "limit": "Integer = \"1\"",
        "order": "SortOrderToGo(Enum) = \"auto\"",
        "folder": "FolderToGo(Object)",
        "ThisIsReturnValue:Get Cheats (Deprecated)": "array(CheatToGo(Object))"
    },
    "com.overdesigned.Cheatsheet.CSMoveCheatIntent": {
        "cheat": "CheatToGo(Object)",
        "folder": "FolderToGo(Object)",
        "ThisIsReturnValue:Cheat": "CheatToGo(Object)"
    },
    "com.overdesigned.Cheatsheet.CSMoveCheatToTopIntent": {
        "cheat": "CheatToGo(Object)",
        "folder": "FolderToGo(Object)",
        "ThisIsReturnValue:Cheat": "CheatToGo(Object)"
    },
    "com.overdesigned.Cheatsheet.CSOpenCheatIntent": {
        "cheat": "CheatToGo(Object)"
    },
    "com.overdesigned.Cheatsheet.CSOpenFolderIntent": {
        "folder": "FolderToGo(Object)"
    },
    "com.overdesigned.Cheatsheet.CSSetCheatIconIntent": {
        "cheat": "CheatToGo(Object)",
        "icon": "IconToGo(Object)",
        "ThisIsReturnValue:Cheat": "CheatToGo(Object)"
    },
    "com.overdesigned.Cheatsheet.CSSetCheatTitleIntent": {
        "cheat": "CheatToGo(Object)",
        "title": "String",
        "ThisIsReturnValue:Cheat": "CheatToGo(Object)"
    },
    "com.overdesigned.Cheatsheet.GetCheatFromURL": {
        "urls": "array(String)",
        "ThisIsReturnValue:Get Cheats from URLs": "array(CheatToGo(Object))"
    },
    "com.rivian.ios.consumer.CloseFrunkIntent": {
        "vehicle": "VehicleIntentEntity(Object)"
    },
    "com.rivian.ios.consumer.CloseLiftgateIntent": {
        "vehicle": "VehicleIntentEntity(Object)"
    },
    "com.rivian.ios.consumer.CloseWindowsIntent": {
        "vehicle": "VehicleIntentEntity(Object)"
    },
    "com.rivian.ios.consumer.LockDoorsIntent": {
        "vehicle": "VehicleIntentEntity(Object)"
    },
    "com.rivian.ios.consumer.OpenAppIntent": {},
    "com.rivian.ios.consumer.OpenFrunkIntent": {
        "vehicle": "VehicleIntentEntity(Object)"
    },
    "com.rivian.ios.consumer.OpenLiftgateIntent": {
        "vehicle": "VehicleIntentEntity(Object)"
    },
    "com.rivian.ios.consumer.OpenWindowsIntent": {
        "vehicle": "VehicleIntentEntity(Object)"
    },
    "com.rivian.ios.consumer.StartChargingIntent": {
        "vehicle": "VehicleIntentEntity(Object)"
    },
    "com.rivian.ios.consumer.StartMotionCamIntent": {
        "vehicle": "VehicleIntentEntity(Object)"
    },
    "com.rivian.ios.consumer.StartPreconditioningIntent": {
        "vehicle": "VehicleIntentEntity(Object)"
    },
    "com.rivian.ios.consumer.StopChargingIntent": {
        "vehicle": "VehicleIntentEntity(Object)"
    },
    "com.rivian.ios.consumer.StopMotionCamIntent": {
        "vehicle": "VehicleIntentEntity(Object)"
    },
    "com.rivian.ios.consumer.StopPreconditioningIntent": {
        "vehicle": "VehicleIntentEntity(Object)"
    },
    "com.rivian.ios.consumer.UnlockDoorsIntent": {
        "vehicle": "VehicleIntentEntity(Object)"
    },
    "com.sindresorhus.Actions.AddToListIntent": {
        "list": "None",
        "item": "12(Object)",
        "prepend": "Bool = \"0\"",
        "ThisIsReturnValue:Modified List": "Object"
    },
    "com.sindresorhus.Actions.ApplyCaptureDateIntent": {
        "images": "None",
        "setModificationDate": "Bool = \"0\"",
        "ThisIsReturnValue:Images with Updated Capture Date": "Object"
    },
    "com.sindresorhus.Actions.Boolean": {
        "boolean": "Bool",
        "ThisIsReturnValue:Boolean": "Bool"
    },
    "com.sindresorhus.Actions.CalculateWithSoulver": {
        "expression": "String",
        "decimalPlaces": "Integer = \"2\"",
        "showThousandsSeparator": "Bool = \"1\"",
        "abbreviateLargeNumbers": "Bool = \"1\"",
        "useLiveCurrencyRates": "Bool = \"0\"",
        "ThisIsReturnValue:Soulver Result": "String"
    },
    "com.sindresorhus.Actions.ClampNumberIntent": {
        "number": "Float",
        "minimum": "Float",
        "maximum": "Float",
        "ThisIsReturnValue:Clamped Number": "Float"
    },
    "com.sindresorhus.Actions.ColorIntent": {
        "color": "String",
        "shouldSetOpacity": "Bool = \"0\"",
        "opacity": "Float = \"1\"",
        "ThisIsReturnValue:Color": "ColorAppEntity(Object)"
    },
    "com.sindresorhus.Actions.CombineListsIntent": {
        "list1": "None",
        "list2": "None",
        "list3": "None",
        "list4": "None",
        "list5": "None",
        "list6": "None",
        "list7": "None",
        "list8": "None",
        "list9": "None",
        "list10": "None",
        "ThisIsReturnValue:Combined List": "Object"
    },
    "com.sindresorhus.Actions.ConvertCoordinatesToLocation": {
        "latitude": "Float",
        "longitude": "Float",
        "ThisIsReturnValue:Location": "10(Object)"
    },
    "com.sindresorhus.Actions.CreateURLIntent": {
        "scheme": "String = \"https\"",
        "host": "String",
        "path": "String",
        "queryItems": "array(String) = \"array()\"",
        "fragment": "String",
        "user": "String",
        "password": "String",
        "useCustomPort": "Bool = \"0\"",
        "port": "Integer",
        "ThisIsReturnValue:URL": "String"
    },
    "com.sindresorhus.Actions.DateToUnixTimeIntent": {
        "date": "String",
        "ThisIsReturnValue:Unix Time": "Integer"
    },
    "com.sindresorhus.Actions.EditURLIntent": {
        "url": "String",
        "action": "EditURLActionAppEnum(Enum) = \"addQueryItem\"",
        "queryItemName": "String",
        "queryItemValue": "String",
        "addPathComponentValue": "String",
        "appendToQueryValue": "String",
        "appendToFragmentValue": "String",
        "removeQueryItemsNamedValue": "String",
        "username": "String",
        "password": "String",
        "setQueryValue": "String",
        "setFragmentValue": "String",
        "setPathValue": "String",
        "setSchemeValue": "String",
        "setHostValue": "String",
        "ThisIsReturnValue:Modified URL": "String"
    },
    "com.sindresorhus.Actions.FilterListIntent": {
        "list": "array(String)",
        "shouldKeep": "Bool = \"1\"",
        "condition": "FilterConditionAppEnum(Enum) = \"contains\"",
        "matchText": "String",
        "caseSensitive": "Bool = \"0\"",
        "shouldLimit": "Bool = \"0\"",
        "limit": "Integer = \"4\"",
        "ThisIsReturnValue:Filtered List": "array(String)"
    },
    "com.sindresorhus.Actions.FlashScreen": {},
    "com.sindresorhus.Actions.FormatCurrencyIntent": {
        "amount": "Float",
        "currency": "CurrencyAppEntity(Object)",
        "ThisIsReturnValue:Formatted Currency": "String"
    },
    "com.sindresorhus.Actions.FormatDateDifferenceIntent": {
        "firstDate": "String",
        "secondDate": "String",
        "ThisIsReturnValue:Formatted Date Difference": "String"
    },
    "com.sindresorhus.Actions.FormatDurationIntent": {
        "duration": "Float",
        "unitStyle": "FormatDurationUnitStyleAppEnum(Enum) = \"full\"",
        "showSeconds": "Bool = \"1\"",
        "showMinutes": "Bool = \"1\"",
        "showHours": "Bool = \"1\"",
        "showDays": "Bool = \"1\"",
        "showMonths": "Bool = \"0\"",
        "showYears": "Bool = \"0\"",
        "maximumUnitCount": "Integer = \"6\"",
        "ThisIsReturnValue:Formatted Duration": "String"
    },
    "com.sindresorhus.Actions.FormatNumberCompactIntent": {
        "number": "Float",
        "abbreviatedUnit": "Bool = \"0\"",
        "ThisIsReturnValue:Formatted Number": "String"
    },
    "com.sindresorhus.Actions.FormatPersonName": {
        "givenName": "String",
        "middleName": "String",
        "familyName": "String",
        "namePrefix": "String",
        "nickname": "String",
        "style": "FormatPersonNameStyleAppEnum(Enum) = \"medium\"",
        "ThisIsReturnValue:Formatted Person Name": "String"
    },
    "com.sindresorhus.Actions.GenerateUUIDIntent": {
        "ThisIsReturnValue:UUID": "String"
    },
    "com.sindresorhus.Actions.GeoURIIntent": {
        "location": "10(Object)",
        "includeAccuracy": "Bool = \"1\"",
        "ThisIsReturnValue:Geo URI": "String"
    },
    "com.sindresorhus.Actions.GetActionsVersion": {
        "ThisIsReturnValue:Actions App Version": "ActionsVersionAppEntity(Object)"
    },
    "com.sindresorhus.Actions.GetAudioPlaybackDestinationIntent": {
        "ThisIsReturnValue:Audio Playback Destination": "String"
    },
    "com.sindresorhus.Actions.GetAverageColorIntent": {
        "colors": "array(ColorAppEntity(Object))",
        "ThisIsReturnValue:Average Color": "ColorAppEntity(Object)"
    },
    "com.sindresorhus.Actions.GetBatteryStateIntent": {
        "state": "BatteryStateTypeAppEnum(Enum) = \"charging\"",
        "ThisIsReturnValue:Battery State": "Bool"
    },
    "com.sindresorhus.Actions.GetBooleanFromInput": {
        "booleanString": "String",
        "ThisIsReturnValue:Boolean": "Bool"
    },
    "com.sindresorhus.Actions.GetDeviceDetailsExtended": {
        "ThisIsReturnValue:Device Details": "DeviceDetailsAppEntity(Object)"
    },
    "com.sindresorhus.Actions.GetDeviceMotionData": {
        "sampleCount": "Integer = \"1\"",
        "interval": "Float = \"0.1\"",
        "ThisIsReturnValue:Device Motion Data": "array(DeviceMotion_AppEntity(Object))"
    },
    "com.sindresorhus.Actions.GetDeviceOrientationIntent": {
        "ThisIsReturnValue:Device Orientation": "DeviceOrientationAppEnum(Enum)"
    },
    "com.sindresorhus.Actions.GetEmojisIntent": {
        "text": "String",
        "ThisIsReturnValue:Emojis": "String"
    },
    "com.sindresorhus.Actions.GetFileIconIntent": {
        "files": "None",
        "ThisIsReturnValue:File Icon": "Object"
    },
    "com.sindresorhus.Actions.GetFilePathIntent": {
        "file": "None",
        "type": "FilePathTypeAppEnum(Enum) = \"path\"",
        "ThisIsReturnValue:File Path": "array(String)"
    },
    "com.sindresorhus.Actions.GetHighResolutionTimestamp": {
        "ThisIsReturnValue:High-Resolution Timestamp": "Integer"
    },
    "com.sindresorhus.Actions.GetIndexOfListItem": {
        "list": "array(String)",
        "item": "String",
        "ThisIsReturnValue:Index of List Item": "Integer"
    },
    "com.sindresorhus.Actions.GetModifierKeyState": {
        "ThisIsReturnValue:Modifier Key State": "ModifierKeyState_AppEntity(Object)"
    },
    "com.sindresorhus.Actions.GetMusicPlaylistsIntent": {
        "ThisIsReturnValue:Music Playlists": "array(String)"
    },
    "com.sindresorhus.Actions.GetParagraphsFromTextIntent": {
        "text": "String",
        "language": "NLLanguageAppEntity(Object)",
        "ThisIsReturnValue:Paragraphs": "array(String)"
    },
    "com.sindresorhus.Actions.GetQueryItemValueFromURLIntent": {
        "url": "String",
        "queryItemName": "String",
        "ThisIsReturnValue:URL Query Item Value": "String"
    },
    "com.sindresorhus.Actions.GetQueryItemsFromURLAsDictionaryIntent": {
        "url": "String",
        "ThisIsReturnValue:URL Query Items Dictionary": "12(Object)"
    },
    "com.sindresorhus.Actions.GetQueryItemsFromURLIntent": {
        "url": "String",
        "ThisIsReturnValue:URL Query Items": "array(URLQueryItemAppEntity(Object))"
    },
    "com.sindresorhus.Actions.GetRandomNumberFromSeed": {
        "minimum": "Integer",
        "maximum": "Integer",
        "seed": "String",
        "ThisIsReturnValue:Random Number": "Integer"
    },
    "com.sindresorhus.Actions.GetRelatedWordsIntent": {
        "word": "String",
        "maximumCount": "Integer = \"50\"",
        "language": "NLLanguageAppEntity(Object)",
        "ThisIsReturnValue:Related Words": "array(String)"
    },
    "com.sindresorhus.Actions.GetSentencesFromTextIntent": {
        "text": "String",
        "language": "NLLanguageAppEntity(Object)",
        "ThisIsReturnValue:Sentences": "array(String)"
    },
    "com.sindresorhus.Actions.GetUniformTypeIdentifierIntent": {
        "file": "12(Object)",
        "ThisIsReturnValue:Uniform Type Identifier": "String"
    },
    "com.sindresorhus.Actions.GetUserDetailsIntent": {
        "type": "UserDetailsTypeAppEnum(Enum) = \"name\"",
        "ThisIsReturnValue:User Details": "String"
    },
    "com.sindresorhus.Actions.IsAudioPlayingIntent": {
        "ThisIsReturnValue:Is Audio Playing": "Bool"
    },
    "com.sindresorhus.Actions.IsBluetoothOnIntent": {
        "ThisIsReturnValue:Is Bluetooth On": "Bool"
    },
    "com.sindresorhus.Actions.IsCallActive": {
        "ThisIsReturnValue:Is Call Active": "Bool"
    },
    "com.sindresorhus.Actions.IsCameraOn": {
        "ThisIsReturnValue:Is Camera On": "Bool"
    },
    "com.sindresorhus.Actions.IsCellularDataOn": {
        "ThisIsReturnValue:Is Cellular Data On": "Bool"
    },
    "com.sindresorhus.Actions.IsCellularLowDataModeOn": {
        "ThisIsReturnValue:Is Cellular Low Data Mode On": "Bool"
    },
    "com.sindresorhus.Actions.IsConformingToUTIIntent": {
        "utiString": "String",
        "parentUTIString": "String",
        "ThisIsReturnValue:Is Conforming to Uniform Type Identifier": "Bool"
    },
    "com.sindresorhus.Actions.IsConnectedToVPNIntent": {
        "ThisIsReturnValue:Is Connected to VPN": "Bool"
    },
    "com.sindresorhus.Actions.IsDay": {
        "day": "String",
        "type": "DayType_AppEnum(Enum) = \"monday\"",
        "ThisIsReturnValue:Is Day": "Bool"
    },
    "com.sindresorhus.Actions.IsDeviceMoving": {
        "timeout": "Float = \"1\"",
        "minAcceleration": "Float = \"0.01\"",
        "ThisIsReturnValue:Is Device Moving": "Bool"
    },
    "com.sindresorhus.Actions.IsDeviceOrientationIntent": {
        "orientation": "IsDeviceOrientationAppEnum(Enum)",
        "ThisIsReturnValue:Is Device Orientation": "Bool"
    },
    "com.sindresorhus.Actions.IsLowPowerModeIntent": {
        "ThisIsReturnValue:Is Low Power Mode On": "Bool"
    },
    "com.sindresorhus.Actions.IsOnlineIntent": {
        "ThisIsReturnValue:Is Online": "Bool"
    },
    "com.sindresorhus.Actions.IsShakingDevice": {
        "timeout": "Float = \"2\"",
        "ThisIsReturnValue:Is Shaking Device": "Bool"
    },
    "com.sindresorhus.Actions.IsSilentModeOnIntent": {
        "ThisIsReturnValue:Is Silent Mode On": "Bool"
    },
    "com.sindresorhus.Actions.IsWiFiOnIntent": {
        "ThisIsReturnValue:Is Wi-Fi On": "Bool"
    },
    "com.sindresorhus.Actions.PlayAlertSound": {},
    "com.sindresorhus.Actions.PrettyPrintDictionariesIntent": {
        "dictionaries": "array(String)",
        "ThisIsReturnValue:Pretty Printed Dictionaries": "array(String)"
    },
    "com.sindresorhus.Actions.RandomBooleanIntent": {
        "ThisIsReturnValue:Random Boolean": "Bool"
    },
    "com.sindresorhus.Actions.RandomColorIntent": {
        "ThisIsReturnValue:Random Color": "ColorAppEntity(Object)"
    },
    "com.sindresorhus.Actions.RandomDateTimeIntent": {
        "start": "String",
        "end": "String",
        "ThisIsReturnValue:Random Date and Time": "String"
    },
    "com.sindresorhus.Actions.RandomEmojiIntent": {
        "ThisIsReturnValue:Random Emoticon": "String"
    },
    "com.sindresorhus.Actions.RandomFloatingPointNumberIntent": {
        "minimum": "Float",
        "maximum": "Float",
        "seed": "String",
        "ThisIsReturnValue:Random Floating-Point Number": "Float"
    },
    "com.sindresorhus.Actions.RandomTextIntent": {
        "length": "Integer = \"10\"",
        "lowercase": "Bool = \"1\"",
        "uppercase": "Bool = \"1\"",
        "digits": "Bool = \"1\"",
        "useCustomCharacters": "Bool = \"0\"",
        "customCharacters": "String",
        "seed": "String",
        "ThisIsReturnValue:Random Text": "String"
    },
    "com.sindresorhus.Actions.RemoveDuplicateLinesIntent": {
        "text": "String",
        "caseInsensitive": "Bool = \"0\"",
        "ThisIsReturnValue:Text with Deduplicated Lines": "String"
    },
    "com.sindresorhus.Actions.RemoveEmojiIntent": {
        "text": "String",
        "ThisIsReturnValue:Text without Emojis": "String"
    },
    "com.sindresorhus.Actions.RemoveEmptyLinesIntent": {
        "text": "String",
        "ThisIsReturnValue:Text without Empty and Whitespace-only Lines": "String"
    },
    "com.sindresorhus.Actions.RemoveFromListIntent": {
        "list": "None",
        "action": "RemoveFromListActionAppEnum(Enum) = \"firstItem\"",
        "index": "Integer",
        "rangeLowerBound": "Integer",
        "rangeUpperBound": "Integer",
        "randomItemCount": "Integer = \"1\"",
        "ThisIsReturnValue:Modified List": "Object"
    },
    "com.sindresorhus.Actions.RemoveNonPrintableCharactersIntent": {
        "text": "String",
        "ThisIsReturnValue:Text without Non-Printable Characters": "String"
    },
    "com.sindresorhus.Actions.ReverseLines": {
        "text": "String",
        "ThisIsReturnValue:Text with Lines Reversed": "String"
    },
    "com.sindresorhus.Actions.ReverseListIntent": {
        "list": "None",
        "ThisIsReturnValue:Reversed List": "Object"
    },
    "com.sindresorhus.Actions.RoundNumberToMultipleIntent": {
        "number": "Float",
        "multiple": "Integer",
        "mode": "NumberRoundingModeAppEnum(Enum) = \"normal\"",
        "ThisIsReturnValue:Rounded Number": "Integer"
    },
    "com.sindresorhus.Actions.SampleColorIntent": {
        "ThisIsReturnValue:Sampled Color": "ColorAppEntity(Object)"
    },
    "com.sindresorhus.Actions.SendFeedbackIntent": {
        "message": "String",
        "email": "String",
        "ThisIsReturnValue:Send Feedback": "String"
    },
    "com.sindresorhus.Actions.SetFileCreationModificationDateIntent": {
        "file": "12(Object)",
        "type": "SetFileDateTypeAppEnum(Enum) = \"both\"",
        "date": "String",
        "modifyOriginal": "Bool = \"0\"",
        "ThisIsReturnValue:File with Updated Creation and Modification Date": "12(Object)"
    },
    "com.sindresorhus.Actions.SetUniformTypeIdentifier": {
        "file": "12(Object)",
        "typeIdentifier": "String",
        "ThisIsReturnValue:File with Updated Uniform Type Identifier": "12(Object)"
    },
    "com.sindresorhus.Actions.ShuffleListIntent": {
        "list": "None",
        "shouldLimit": "Bool = \"0\"",
        "limit": "Integer = \"10\"",
        "ThisIsReturnValue:Shuffled List": "Object"
    },
    "com.sindresorhus.Actions.SortListIntent": {
        "list": "array(String)",
        "ascending": "Bool = \"1\"",
        "sortType": "SortTypeAppEnum(Enum) = \"natural\"",
        "ThisIsReturnValue:Sorted List": "array(String)"
    },
    "com.sindresorhus.Actions.SpellOutNumberIntent": {
        "number": "Integer",
        "locale": "LocaleAppEntity(Object)",
        "ThisIsReturnValue:Spelled Out Number": "String"
    },
    "com.sindresorhus.Actions.TransformListsIntent": {
        "type": "OperationTypeAppEnum(Enum) = \"intersection\"",
        "list1": "None",
        "list2": "None",
        "ThisIsReturnValue:Transformed Lists": "Object"
    },
    "com.sindresorhus.Actions.TransformTextIntent": {
        "text": "String",
        "transformation": "TransformationAppEnum(Enum)",
        "ThisIsReturnValue:Transformed Text": "String"
    },
    "com.sindresorhus.Actions.TransformTextWithJavaScriptIntent": {
        "text": "String",
        "javaScriptCode": "String = \"return $text.toLowerCase();\"",
        "ThisIsReturnValue:Transformed Text": "String"
    },
    "com.sindresorhus.Actions.TrimWhitespaceIntent": {
        "text": "String",
        "ThisIsReturnValue:Text with Trimmed Whitespace": "String"
    },
    "com.sindresorhus.Actions.TruncateListIntent": {
        "list": "None",
        "limit": "Integer",
        "ThisIsReturnValue:Truncated List": "Object"
    },
    "com.sindresorhus.Actions.TruncateNumber": {
        "number": "Float",
        "decimalPlaces": "Integer = \"0\"",
        "ThisIsReturnValue:Truncated Number": "Float"
    },
    "com.sindresorhus.Actions.TruncateTextIntent": {
        "text": "String",
        "maximumLength": "Integer",
        "truncationIndicator": "String = \"…\"",
        "ThisIsReturnValue:Truncated Text": "String"
    },
    "com.sindresorhus.Actions.UnixTimeToDateIntent": {
        "unixTime": "Integer",
        "ThisIsReturnValue:Date": "String"
    },
    "com.sindresorhus.Actions.WaitMilliseconds": {
        "duration": "Integer"
    },
    "com.sindresorhus.Actions.AskForText": {
        "prompt": "String",
        "type": "InputTypeAppEnum(Enum) = \"text\"",
        "message": "String",
        "defaultAnswer": "String",
        "timeout": "Float",
        "timeoutReturnValue": "String",
        "showCancelButton": "Bool = \"1\""
    },
    "com.sindresorhus.Actions.Authenticate": {
        "openURL": "String",
        "timeout": "Float"
    },
    "com.sindresorhus.Actions.Authenticate2": {
        "openURL": "String",
        "timeout": "Float",
        "ThisIsReturnValue:Is Authenticated": "Bool"
    },
    "com.sindresorhus.Actions.BlurImages": {
        "images": "None",
        "amount": "Float",
        "ThisIsReturnValue:Blurred Images": "Object"
    },
    "com.sindresorhus.Actions.ChooseFromListExtendedIntent": {
        "list": "array(String)",
        "prompt": "String",
        "message": "String",
        "selectMultiple": "Bool = \"0\"",
        "selectAllInitially": "Bool = \"0\"",
        "allowCustomItems": "Bool = \"0\"",
        "useTimeout": "Bool = \"0\"",
        "timeout": "Float = \"10\"",
        "timeoutReturnValue": "ChooseFromListTimeoutValueAppEnum(Enum) = \"nothing\""
    },
    "com.sindresorhus.Actions.CombineVideosIntent": {
        "videos": "None",
        "ThisIsReturnValue:Combined Video": "12(Object)"
    },
    "com.sindresorhus.Actions.CreateColorImageIntent": {
        "color": "String = \"#ff69b4\"",
        "width": "Integer",
        "height": "Integer",
        "opacity": "Float = \"1\"",
        "ThisIsReturnValue:Color Image": "12(Object)"
    },
    "com.sindresorhus.Actions.CreateMenuItem": {
        "menuTitle": "String",
        "sfSymbolName": "String",
        "emoji": "String",
        "subtitle": "String",
        "iconType": "MenuItemIconType(Enum) = \"sfSymbol\"",
        "foreground": "MenuItemStyle(Enum) = \"default\"",
        "background": "MenuItemStyle(Enum) = \"default\"",
        "backgroundShape": "MenuItemBackgroundShape(Enum) = \"circle\"",
        "data": "String",
        "ThisIsReturnValue:Menu Item": "MenuItem(Object)"
    },
    "com.sindresorhus.Actions.DebugIntent": {
        "ThisIsReturnValue:Debug Info": "String"
    },
    "com.sindresorhus.Actions.EncryptFile": {
        "shouldEncrypt": "Bool = \"1\"",
        "file": "12(Object)",
        "key": "String",
        "decryptedType": "String = \"public.data\"",
        "ThisIsReturnValue:Encrypted/Decrypted File": "12(Object)"
    },
    "com.sindresorhus.Actions.EncryptText": {
        "shouldEncrypt": "Bool = \"1\"",
        "text": "String",
        "key": "String",
        "ThisIsReturnValue:Encrypted/Decrypted Text": "String"
    },
    "com.sindresorhus.Actions.GenerateCSVIntent": {
        "dictionaries": "None",
        "keys": "array(String) = \"array()\"",
        "delimiter": "CSVDelimiterAppEnum(Enum) = \"comma\"",
        "customDelimiter": "String",
        "ThisIsReturnValue:CSV File": "12(Object)"
    },
    "com.sindresorhus.Actions.GenerateRandomData": {
        "size": "Integer",
        "outputType": "GenerateRandomDataOutputTypeAppEnum(Enum) = \"hex\"",
        "ThisIsReturnValue:Random Data": "12(Object)"
    },
    "com.sindresorhus.Actions.GetAverageColorOfImage": {
        "image": "12(Object)",
        "ThisIsReturnValue:Average Color of Image": "ColorAppEntity(Object)"
    },
    "com.sindresorhus.Actions.GetBluetoothDevice": {
        "deviceIdentifier": "String",
        "timeout": "Float = \"2\"",
        "ThisIsReturnValue:Bluetooth Device": "BluetoothDevice_AppEntity(Object)"
    },
    "com.sindresorhus.Actions.GetBluetoothDevices": {
        "scanDuration": "Float = \"5\"",
        "includeUnnamedDevices": "Bool = \"0\"",
        "ThisIsReturnValue:Bluetooth Devices": "array(BluetoothDevice_AppEntity(Object))"
    },
    "com.sindresorhus.Actions.GetCompassHeading": {
        "headingType": "CompassHeadingType_AppEnum(Enum) = \"magnetic\"",
        "ThisIsReturnValue:Compass Heading": "Float"
    },
    "com.sindresorhus.Actions.GetDominantColorsOfImage": {
        "image": "12(Object)",
        "count": "Integer = \"5\"",
        "excludeWhite": "Bool = \"0\"",
        "excludeBlack": "Bool = \"0\"",
        "ThisIsReturnValue:Dominant Colors of Image": "array(ColorAppEntity(Object))"
    },
    "com.sindresorhus.Actions.GetElevation": {
        "ThisIsReturnValue:Elevation": "Bool"
    },
    "com.sindresorhus.Actions.GetImageLocation": {
        "image": "12(Object)",
        "ThisIsReturnValue:Image Location": "String"
    },
    "com.sindresorhus.Actions.GetMapImageOfLocation": {
        "location": "10(Object)",
        "radius": "Bool = \"10\"",
        "width": "Integer = \"1000\"",
        "height": "Integer = \"1000\"",
        "showPlacemark": "Bool = \"1\"",
        "mapType": "MapTypeAppEnum(Enum) = \"standard\"",
        "appearance": "AppearanceAppEnum(Enum) = \"system\"",
        "ThisIsReturnValue:Map Image of Location": "12(Object)"
    },
    "com.sindresorhus.Actions.GetTitleOfURLIntent": {
        "url": "String",
        "ThisIsReturnValue:Title of URL": "String"
    },
    "com.sindresorhus.Actions.GetUnsplashImageIntent": {
        "keywords": "array(String) = \"array()\"",
        "onlyFeaturedImages": "Bool = \"1\"",
        "size": "UnsplashImageSizeAppEnum(Enum) = \"any\"",
        "sizeWidth": "Integer",
        "sizeHeight": "Integer",
        "ThisIsReturnValue:Unsplash Image": "12(Object)"
    },
    "com.sindresorhus.Actions.GlobalVariableDelete": {
        "deleteAll": "Bool = \"0\"",
        "keys": "array(String)"
    },
    "com.sindresorhus.Actions.GlobalVariableGetAll": {
        "ThisIsReturnValue:All Global Variables": "12(Object)"
    },
    "com.sindresorhus.Actions.GlobalVariableGetBoolean": {
        "key": "String",
        "ThisIsReturnValue:Global Variable — Boolean": "Bool"
    },
    "com.sindresorhus.Actions.GlobalVariableGetNumber": {
        "key": "String",
        "ThisIsReturnValue:Global Variable — Number": "Float"
    },
    "com.sindresorhus.Actions.GlobalVariableGetText": {
        "key": "String",
        "ThisIsReturnValue:Global Variable — Text": "String"
    },
    "com.sindresorhus.Actions.GlobalVariableSetBoolean": {
        "shouldToggle": "Bool = \"0\"",
        "key": "String",
        "value": "Bool"
    },
    "com.sindresorhus.Actions.GlobalVariableSetNumber": {
        "action": "GlobalVariableSetNumberAction_AppEnum(Enum) = \"set\"",
        "key": "String",
        "value": "Float"
    },
    "com.sindresorhus.Actions.GlobalVariableSetText": {
        "key": "String",
        "value": "String"
    },
    "com.sindresorhus.Actions.HapticFeedbackIntent": {
        "type": "HapticFeedbackTypeAppEnum(Enum)"
    },
    "com.sindresorhus.Actions.HexEncode": {
        "input": "12(Object)",
        "action": "HexEncodeActionAppEnum(Enum) = \"encode\"",
        "decodeContentType": "String",
        "ThisIsReturnValue:Hex Encoded Data": "12(Object)"
    },
    "com.sindresorhus.Actions.HideShortcutsAppIntent": {},
    "com.sindresorhus.Actions.InvertImages": {
        "images": "None",
        "ThisIsReturnValue:Inverted Images": "Object"
    },
    "com.sindresorhus.Actions.IsAccessibilityFeatureOn": {
        "feature": "AccessibilityFeature_AppEnum(Enum)",
        "ThisIsReturnValue:Is Accessibility Feature On": "Bool"
    },
    "com.sindresorhus.Actions.IsDarkModeIntent": {
        "ThisIsReturnValue:Is Dark Mode On": "Bool"
    },
    "com.sindresorhus.Actions.IsDeviceLocked": {
        "ThisIsReturnValue:Is Device Locked": "Bool"
    },
    "com.sindresorhus.Actions.IsHostReachable": {
        "host": "String",
        "port": "Integer",
        "timeout": "Float = \"10\"",
        "debugMode": "Bool = \"0\"",
        "ThisIsReturnValue:Is Host Reachable": "Bool"
    },
    "com.sindresorhus.Actions.IsMicrophoneOnIntent": {
        "ThisIsReturnValue:Is Microphone On": "Bool"
    },
    "com.sindresorhus.Actions.IsReachableIntent": {
        "host": "String",
        "timeout": "Float = \"10\"",
        "requireSuccessStatusCode": "Bool = \"1\"",
        "useGetMethod": "Bool = \"0\"",
        "ThisIsReturnValue:Is Web Server Reachable": "Bool"
    },
    "com.sindresorhus.Actions.IsScreenLockedIntent": {
        "ThisIsReturnValue:Is Screen Locked": "Bool"
    },
    "com.sindresorhus.Actions.JoinWiFiIntent": {
        "ssid": "String",
        "password": "String",
        "waitForConnection": "Bool = \"1\"",
        "isWEP": "Bool = \"0\"",
        "isHidden": "Bool = \"0\""
    },
    "com.sindresorhus.Actions.MergeDictionariesIntent": {
        "dictionary1": "12(Object)",
        "dictionary2": "12(Object)",
        "dictionary3": "12(Object)",
        "dictionary4": "12(Object)",
        "dictionary5": "12(Object)",
        "dictionary6": "12(Object)",
        "dictionary7": "12(Object)",
        "dictionary8": "12(Object)",
        "dictionary9": "12(Object)",
        "dictionary10": "12(Object)",
        "ThisIsReturnValue:Merged Dictionary": "12(Object)"
    },
    "com.sindresorhus.Actions.OverwriteFile": {
        "source": "12(Object)",
        "destination": "12(Object)",
        "ThisIsReturnValue:New Destination File": "12(Object)"
    },
    "com.sindresorhus.Actions.ParseCSVIntent": {
        "file": "12(Object)",
        "hasHeader": "Bool = \"1\"",
        "delimiter": "CSVDelimiterAppEnum(Enum) = \"comma\"",
        "customDelimiter": "String",
        "ThisIsReturnValue:Parsed CSV": "Object"
    },
    "com.sindresorhus.Actions.ParseJSON5Intent": {
        "file": "12(Object)",
        "ThisIsReturnValue:Parsed JSON5": "12(Object)"
    },
    "com.sindresorhus.Actions.RemoveDuplicatesFromListIntent": {
        "list": "None",
        "ThisIsReturnValue:Deduplicated List": "Object"
    },
    "com.sindresorhus.Actions.ScanDocumentsIntent": {},
    "com.sindresorhus.Actions.ScanQRCodesInImageIntent": {
        "image": "12(Object)",
        "multiple": "Bool = \"0\"",
        "ThisIsReturnValue:QR Code Messages": "array(String)"
    },
    "com.sindresorhus.Actions.SetImageLocation": {
        "coordinateString": "String",
        "images": "None",
        "ThisIsReturnValue:Images with Updated Location": "Object"
    },
    "com.sindresorhus.Actions.SymbolImageIntent": {
        "symbolName": "String",
        "size": "Integer = \"128\"",
        "rendering": "SymbolImageRenderingAppEnum(Enum) = \"monochrome\"",
        "color": "String = \"#ff69b4\"",
        "paletteColors": "array(String) = \"array(#ff69b4(string), )\"",
        "ThisIsReturnValue:SF Symbol Image": "12(Object)"
    },
    "com.sindresorhus.Actions.TranscribeAudioIntent": {
        "file": "12(Object)",
        "locale": "SFLocaleAppEntity(Object)",
        "offline": "Bool = \"0\"",
        "ThisIsReturnValue:Transcription": "String"
    },
    "com.sindresorhus.Actions.WriteTextIntent": {
        "text": "String",
        "shouldEdit": "Bool = \"0\"",
        "editorTitle": "String"
    },
    "com.sindresorhus.One-Thing.GetTextColorIntent": {
        "ThisIsReturnValue:Text Color": "String"
    },
    "com.sindresorhus.One-Thing.GetTextIntent": {
        "textType": "TextType_AppEnum(Enum) = \"text\"",
        "ThisIsReturnValue:Text": "String"
    },
    "com.sindresorhus.One-Thing.SetTextColorIntent": {
        "textColor": "String"
    },
    "com.sindresorhus.One-Thing.SetTextIntent": {
        "text": "String",
        "textType": "TextType_AppEnum(Enum) = \"text\""
    },
    "com.tapbots.Ivory.PTHIvoryOpenFediverseURLIntent": {
        "url": "String",
        "account": "String"
    },
    "com.tapbots.Ivory.PTHIvoryPostStatusIntent": {
        "text": "String",
        "account": "String",
        "replyPostURL": "String",
        "ThisIsReturnValue:Account": "String"
    },
    "com.tapbots.Ivory.PTHIvoryOpenIntent": {
        "tab": "TabType(Enum) = \"timeline\"",
        "query": "String",
        "profile": "String",
        "account": "Account(Object)"
    },
    "com.tapbots.Ivory.PTHIvoryTimelineWidgetIntent": {
        "account": "Account(Object)",
        "timeline": "Timeline(Object)",
        "name": "TimelineName(Enum) = \"fullName\"",
        "header": "Bool"
    },
    "com.tapbots.Ivory.PTHIvoryLatestFollowersWidgetIntent": {
        "account": "Account(Object)",
        "header": "Bool"
    },
    "com.tapbots.Ivory.PTHIvoryFollowersCountWidgetIntent": {
        "account": "Account(Object)",
        "header": "Bool"
    },
    "com.tapbots.Ivory.PTHIvoryTimelineImageWidgetIntent": {
        "account": "Account(Object)",
        "timeline": "Timeline(Object)",
        "header": "Bool"
    },
    "com.tapbots.Ivory.PTHIvoryStatsWidgetIntent": {
        "account": "Account(Object)",
        "header": "Bool = True"
    },
    "com.todoist.ios.CreateTaskIntent": {
        "content": "String",
        "contentDescription": "String",
        "project": "IntentProject(Object)",
        "section": "IntentSection(Object)",
        "dueDate": "String",
        "priority": "IntentPriority(Enum) = \"priority4\"",
        "labels": "IntentLabel(Object)",
        "ThisIsReturnValue:Task": "IntentTask(Object)"
    },
    "com.todoist.ios.OpenTodayIntent": {},
    "com.todoist.ios.OpenUpcomingIntent": {},
    "com.todoist.ios.OpenProjectIntent": {
        "project": "IntentProject(Object)"
    },
    "com.todoist.ios.OpenLabelIntent": {
        "label": "IntentLabel(Object)"
    },
    "com.todoist.ios.OpenFilterIntent": {
        "filter": "IntentFilter(Object)"
    },
    "com.todoist.ios.OpenViewIntent": {
        "viewMode": "ViewMode(Enum) = \"today\"",
        "project": "IntentProject(Object)",
        "label": "IntentLabel(Object)",
        "filter": "IntentFilter(Object)"
    },
    "com.todoist.ios.GetProjectsIntent": {
        "query": "String",
        "isLimited": "Bool",
        "limit": "Integer = 5",
        "ThisIsReturnValue:Projects": "IntentProject(Object)"
    },
    "com.todoist.ios.OpenProductivityIntent": {
        "productivityGoal": "ProductivityGoal(Enum) = \"daily\""
    },
    "com.todoist.ios.OpenNextTaskIntent": {},
    "com.tplink.kasa-ios.TapoDeviceToggleIntent": {
        "devices": "Intent_Device(Object)",
        "state": "Intent_DeviceState(Enum) = \"on\""
    },
    "com.tplink.kasa-ios.TapoBulbColorSetIntent": {
        "devices": "Intent_Device(Object)",
        "color": "Intent_Color(Enum)",
        "brightness": "Integer = 100"
    },
    "com.tplink.kasa-ios.TapoRunShortcutIntent": {
        "shortcut": "Intent_Shortcut(Object)"
    },
    "com.tplink.kasa-ios.TapoTriggerAlarmIntent": {
        "device": "Intent_HubDevice(Object)",
        "alarm": "Intent_Alarm(Object)",
        "degree": "Intent_AlarmDegree(Enum) = \"Normal\"",
        "duration": "Intent_AlarmDuration(Enum) = \"fives\""
    },
    "com.tplink.kasa-ios.TapoSetTemperatureIntent": {
        "device": "Intent_Device(Object)",
        "temperature": "Integer = 25"
    },
    "com.tplink.kasa-ios.KasaDeviceToggleIntent": {
        "devices": "Intent_Device(Object)",
        "state": "Intent_DeviceState(Enum) = \"on\""
    },
    "com.tplink.kasa-ios.KasaColorSetIntent": {
        "devices": "Intent_Device(Object)",
        "color": "Intent_Color(Enum)",
        "brightness": "Integer = 100"
    },
    "com.tplink.kasa-ios.KasaRunSceneIntent": {
        "scene": "Intent_Scene(Object)"
    },
    "com.wiheads.paste.CreateItemIntent": {
        "content": "String",
        "list": "ListEntity(Object)",
        "ThisIsReturnValue:Create Item": "String"
    },
    "com.wiheads.paste.CreatePinboardIntent": {
        "name": "String",
        "ThisIsReturnValue:Create Pinboard": "ListEntity(Object)"
    },
    "com.wiheads.paste.GetItemAtIndexIntent": {
        "index": "Integer = \"0\"",
        "list": "ListEntity(Object)",
        "ThisIsReturnValue:Get Item at Index": "String"
    },
    "com.wiheads.paste.GetLatestItemIntent": {
        "type": "ItemType(Enum) = \"text\"",
        "list": "ListEntity(Object)",
        "ThisIsReturnValue:Get Latest Item": "String"
    },
    "com.wiheads.paste.SelectListsWidgetConfigurationIntent": {
        "lists": "array(ListEntity(Object))"
    },
    "dk.simonbs.DataJar.DeleteValueIntent": {
        "keyPath": "String",
        "errorWhenValueNotFound": "Bool",
        "deleteStrategy": "DeleteStrategy(Enum) = \"disallowArraysAndDictionaries\""
    },
    "dk.simonbs.DataJar.GetValueIntent": {
        "keyPath": "String",
        "fallbackValues": "File(Object)",
        "ThisIsReturnValue:Projects": "String"
    },
    "dk.simonbs.DataJar.SetValueIntent": {
        "keyPath": "String",
        "values": "File(Object)",
        "valueConversionMode": "ValueConversionMode(Enum) = \"automatic\"",
        "overwriteStrategy": "OverwriteStrategy(Enum) = \"disallowArraysAndDictionaries\"",
        "filename": "String"
    },
    "dk.simonbs.DataJar.InsertValueInArrayIntent": {
        "values": "File(Object)",
        "keyPath": "String",
        "insertionPoint": "ArrayValueInsertionPoint(Enum) = \"beginning\"",
        "index": "Integer = 1",
        "valueConversionMode": "ValueConversionMode(Enum) = \"automatic\""
    },
    "dk.simonbs.DataJar.GetTypeOfValueIntent": {
        "keyPath": "String",
        "ThisIsReturnValue:Type of Value": "String"
    },
    "dk.simonbs.DataJar.CheckIfValueExistsIntent": {
        "keyPath": "String",
        "ThisIsReturnValue:Value Exists": "Bool"
    },
    "dk.simonbs.DataJar.GetKeysIntent": {
        "source": "GetKeysSource(Enum) = \"dictionary\"",
        "keyPath": "String",
        "errorWhenValueNotFound": "Bool = True",
        "ThisIsReturnValue:Error Message": "String"
    },
    "dk.simonbs.DataJar.GetChildCountIntent": {
        "keyPath": "String",
        "errorWhenValueNotFound": "Bool = True",
        "ThisIsReturnValue:Error Message": "String"
    },
    "dk.simonbs.DataJar.ViewValueIntent": {
        "keyPath": "String"
    },
    "dk.simonbs.Jayson.ViewJSONIntent": {
        "files": "String",
        "viewDestination": "ViewDestination(Enum) = \"app\"",
        "closeTabs": "Bool",
        "showText": "Bool",
        "filename": "String",
        "saveDestination": "SaveDestination(Enum) = \"none\"",
        "ThisIsReturnValue:Error Message": "String"
    },
    "dk.simonbs.Jayson.GetFileIntent": {
        "folder": "Folder(Enum) = \"iCloud\"",
        "filename": "String",
        "ThisIsReturnValue:File": "File(Object)"
    },
    "dk.simonbs.Jayson.PrettifyJSONIntent": {
        "json": "String",
        "compact": "Bool",
        "indentMode": "IndentMode(Enum) = \"spaces\"",
        "indentSpaceCount": "Integer = 2",
        "ThisIsReturnValue:Prettified JSON": "String"
    },
    "dk.simonbs.Scriptable.RunScriptIntent": {
        "fileName": "String"
    },
    "dk.simonbs.Scriptable.RunScriptWithArgumentsIntent": {
        "fileName": "String",
        "encodedArguments": "String"
    },
    "dk.simonbs.Scriptable.ParameterizedRunScriptIntent": {
        "fileName": "String",
        "parameter": "File(Object)",
        "texts": "String",
        "urls": "String",
        "images": "File(Object)",
        "files": "File(Object)",
        "runInApp": "Bool",
        "ThisIsReturnValue:Prettified JSON": "String"
    },
    "dk.simonbs.Scriptable.CreateFileBookmarkIntent": {
        "name": "String",
        "location": "File(Object)"
    },
    "dk.simonbs.Scriptable.RunScriptInlineIntent": {
        "script": "String",
        "parameter": "File(Object)",
        "texts": "String",
        "urls": "String",
        "images": "File(Object)",
        "files": "File(Object)",
        "runInApp": "Bool",
        "ThisIsReturnValue:Answer": "String"
    },
    "dk.simonbs.Scriptable.RunScriptWidgetConfigurationIntent": {
        "scriptFile": "ScriptFile(Object)",
        "interactAction": "WidgetInteractAction(Enum) = \"openApp\"",
        "url": "String",
        "parameter": "String"
    },
    "dk.simonbs.Scriptable.RefreshAllWidgetsIntent": {},
    "fm.overcast.overcast.OCChapterNextIntent": {},
    "fm.overcast.overcast.OCChapterPreviousIntent": {},
    "fm.overcast.overcast.OCCurrentEpisodeInfoIntent": {
        "ThisIsReturnValue:Current Episode Info": "OCIntentEpisode(Object)"
    },
    "fm.overcast.overcast.OCPauseIntent": {},
    "fm.overcast.overcast.OCPlayIntent": {},
    "fm.overcast.overcast.OCPlaybackSpeedIntent": {
        "speed": "Float = \"1\""
    },
    "fm.overcast.overcast.OCPodcastNextIntent": {},
    "fm.overcast.overcast.OCPodcastPreviousIntent": {},
    "fm.overcast.overcast.OCSeekBackIntent": {
        "seconds": "Float"
    },
    "fm.overcast.overcast.OCSeekForwardIntent": {
        "seconds": "Float"
    },
    "fm.overcast.overcast.OCSleepTimerCancelIntent": {},
    "fm.overcast.overcast.OCSleepTimerEOFIntent": {},
    "fm.overcast.overcast.OCSleepTimerIntervalIntent": {
        "interval": "Float"
    },
    "fm.overcast.overcast.OCSmartSpeedIntent": {
        "state": "OCIntentParamState(Enum) = \"on\""
    },
    "fm.overcast.overcast.OCStarIntent": {
        "state": "OCIntentParamState(Enum) = \"on\""
    },
    "fm.overcast.overcast.OCVoiceBoostIntent": {
        "state": "OCIntentParamState(Enum) = \"on\""
    },
    "fm.overcast.overcast.PlayFeed": {
        "feed": "FeedEntity(Object)"
    },
    "fm.overcast.overcast.PlayPlaylist": {
        "playlist": "PlaylistEntity(Object)"
    },
    "in.muditbhargava.LookUp.AddToCollectionIntent": {
        "collectionsNamed": "CollectionEntity(Object)",
        "word": "String",
        "ThisIsReturnValue:Add Word to Collection": "AddToCollectionResultEntity(Object)"
    },
    "in.muditbhargava.LookUp.ClipboardSearchIntent": {
        "intentWord": "String",
        "lookupType": "LookUpTypeAppEnum(Enum) = \"meaning\"",
        "ThisIsReturnValue:Search for a Word": "MeaningResultAppEntity(Object)"
    },
    "in.muditbhargava.LookUp.ExportCollectionIntent": {
        "collection": "CollectionEntity(Object)",
        "ThisIsReturnValue:Export Collection as PDF": "12(Object)"
    },
    "in.muditbhargava.LookUp.FindCollectedWordsIntent": {
        "collection": "CollectionEntity(Object)",
        "shouldFilterByDate": "Bool",
        "addedBefore": "String",
        "addedAfter": "String",
        "sortOptions": "SortOptionsAppEnum(Enum) = \"listOrder\"",
        "sortOrderAlphabetically": "SortOrderAlphabeticallyAppEnum(Enum) = \"AtoZ\"",
        "sortOrderDateCreated": "SortOrderDateCreatedAppEnum(Enum) = \"mostRecentFirst\"",
        "shouldLimit": "Bool",
        "fetchLimit": "Integer = \"5\"",
        "ThisIsReturnValue:Find Words in Collection": "array(CollectionEntryAppEntity(Object))"
    },
    "in.muditbhargava.LookUp.PronunciationIntent": {
        "word": "String"
    },
    "in.muditbhargava.LookUp.WoDIntent": {
        "ThisIsReturnValue:Get Word of the Day": "WordOfTheDayResultAppEntity(Object)"
    },
    "io.pushcut.Pushcut.RunShortcutIntent": {
        "shortcut": "String",
        "eventType": "EventType(Enum) = \"atTime\"",
        "time": "String",
        "arrivingLocation": "Placemark(Object)",
        "leavingLocation": "Placemark(Object)",
        "input": "String",
        "reminderIdentifier": "String"
    },
    "io.pushcut.Pushcut.ShowNotificationIntent": {
        "notification": "String",
        "eventType": "EventType(Enum) = \"now\"",
        "time": "String",
        "arrivingLocation": "Placemark(Object)",
        "leavingLocation": "Placemark(Object)",
        "title": "String",
        "text": "String",
        "input": "String",
        "reminderIdentifier": "String",
        "image": "File(Object)",
        "timeSensitive": "TimeSensitiveType(Enum)",
        "threadId": "String",
        "ThisIsReturnValue:Notification": "Notification(Object)"
    },
    "io.pushcut.Pushcut.CancelNotificationIntent": {
        "reminderIdentifier": "String",
        "shouldCancelRemote": "Bool"
    },
    "io.pushcut.Pushcut.SendNotificationIntent": {
        "notification": "String",
        "asJson": "ConfigurationType(Enum) = \"simple\"",
        "devices": "String",
        "title": "String",
        "text": "String",
        "input": "String",
        "json": "String",
        "timeSensitive": "TimeSensitiveType(Enum)",
        "reminderIdentifier": "String",
        "image": "File(Object)",
        "delay": "String",
        "threadId": "String",
        "ThisIsReturnValue:Error Message": "String"
    },
    "io.pushcut.Pushcut.ExecuteServerActionIntent": {
        "actionType": "ServerActionType(Enum) = \"shortcut\"",
        "shortcut": "String",
        "homekit": "String",
        "input": "String",
        "isDelayed": "Bool",
        "delay": "TimeInterval(Object) = 5.0",
        "waitForResult": "ServerActionTimeout(Enum) = \"nowait\"",
        "actionIdentifier": "String",
        "ThisIsReturnValue:Error Message": "String"
    },
    "io.pushcut.Pushcut.CancelServerActionIntent": {
        "actionIdentifier": "String"
    },
    "io.pushcut.Pushcut.SendNotificationFocusFilter": {
        "notifications": "array(NotificationEntity(Object))",
        "devices": "array(AppDevice(Object))",
        "homekitTasks": "array(String)",
        "shortcutTasks": "array(String)"
    },
    "io.pushcut.Pushcut.CreateServerSchedule": {
        "homekitTask": "String",
        "shortcutTask": "String",
        "taskType": "ServerScheduleTaskType(Enum)",
        "jobType": "ServerScheduleJobType(Enum)",
        "interval": "Integer = \"15\"",
        "intervalUnit": "CronJobIntervalUnit(Enum) = \"minutes\"",
        "weekdays": "array(CronJobWeekDay(Enum))",
        "time": "String",
        "shouldExecuteOnServerStart": "Bool",
        "note": "String",
        "ThisIsReturnValue:CreateServerSchedule.Title": "ServerSchedule(Object)"
    },
    "io.pushcut.Pushcut.EnableDisableServerSchedule": {
        "schedule": "ServerSchedule(Object)",
        "shouldEnable": "Bool = \"1\"",
        "ThisIsReturnValue:EnableDisableServerSchedule.Title": "ServerSchedule(Object)"
    },
    "io.pushcut.Pushcut.GetServerStatus": {
        "ThisIsReturnValue:GetServerStatus.Title": "array(ServerStatus(Object))"
    },
    "io.pushcut.Pushcut.OpenPushcut": {
        "action": "AppOpenAction(Enum)"
    },
    "io.pushcut.Pushcut.RunHomeKitScene": {
        "widgetId": "String",
        "actionHash": "String",
        "scene": "String"
    },
    "io.pushcut.Pushcut.RunIntegration": {
        "widgetId": "String",
        "actionHash": "String",
        "action": "String",
        "input": "String"
    },
    "io.pushcut.Pushcut.RunShortcut": {
        "shortcutName": "String",
        "input": "String"
    },
    "io.pushcut.Pushcut.UploadImageIntent": {
        "image": "12(Object)",
        "imageName": "String"
    },
    "io.robbie.HomeAssistant.CallServiceIntent": {
        "server": "IntentServer(Object)",
        "service": "String",
        "payload": "String"
    },
    "io.robbie.HomeAssistant.SendLocationIntent": {
        "location": "Placemark(Object)",
        "ThisIsReturnValue:Location": "Placemark(Object)"
    },
    "io.robbie.HomeAssistant.FireEventIntent": {
        "server": "IntentServer(Object)",
        "eventName": "String = \"shortcut_event\"",
        "eventData": "String"
    },
    "io.robbie.HomeAssistant.GetCameraImageIntent": {
        "server": "IntentServer(Object)",
        "cameraID": "String",
        "ThisIsReturnValue:Error": "String"
    },
    "io.robbie.HomeAssistant.RenderTemplateIntent": {
        "server": "IntentServer(Object)",
        "template": "String = \"{{ now() }}\"",
        "ThisIsReturnValue:Error": "String"
    },
    "io.robbie.HomeAssistant.PerformActionIntent": {
        "action": "IntentActionAppEntity(Object)"
    },
    "io.robbie.HomeAssistant.WidgetActionsIntent": {
        "actions": "array(IntentActionAppEntity(Object))"
    },
    "io.robbie.HomeAssistant.UpdateSensorsIntent": {},
    "io.robbie.HomeAssistant.OpenPageIntent": {
        "page": "IntentPanel(Object)"
    },
    "io.robbie.HomeAssistant.WidgetOpenPageIntent": {
        "pages": "IntentPanel(Object)"
    },
    "io.robbie.HomeAssistant.AssistIntent": {
        "server": "IntentServer(Object)",
        "text": "String",
        "language": "IntentLanguage(Object)",
        "ThisIsReturnValue:Result": "IntentAssistResult(Object)"
    },
    "ke.bou.GizmoPack.AddWalletPassIntent": {
        "passes": "File(Object)",
        "preview": "Bool"
    },
    "ke.bou.GizmoPack.CreateWalletPassIntent": {
        "title": "String",
        "descript": "String",
        "barcode": "PassBarcodeFormat(Enum) = \"qr\"",
        "barcodeData": "String",
        "barcodeLabel": "String",
        "type": "PassType(Enum) = \"generic\"",
        "transitType": "PassTransitType(Enum) = \"generic\"",
        "from": "String",
        "to": "String",
        "genericPrimary": "String",
        "couponPrimary": "String",
        "eventTicketPrimary": "String",
        "storeCardPrimary": "String",
        "boardingPassFooter": "File(Object)",
        "couponStrip": "File(Object)",
        "genericThumbnail": "File(Object)",
        "storeCardStrip": "File(Object)",
        "eventTicketStrip": "File(Object)",
        "eventTicketBackground": "File(Object)",
        "eventTicketThumbnail": "File(Object)",
        "header": "String",
        "secondary": "String",
        "auxiliary": "String",
        "back": "String",
        "backgroundColor": "String",
        "foregroundColor": "String",
        "labelColor": "String",
        "icon": "File(Object)",
        "logo": "File(Object)",
        "location": "Placemark(Object)",
        "distance": "Distance(Object) = 100.0",
        "date": "String",
        "ThisIsReturnValue:Pass": "File(Object)"
    },
    "ke.bou.GizmoPack.FuzzyFinderIntent": {
        "items": "String"
    },
    "ke.bou.GizmoPack.GenerateCSVIntent": {
        "rows": "File(Object)",
        "allFields": "Bool = True",
        "fields": "String",
        "delimiter": "CSVDelimiter(Enum) = \"comma\"",
        "customDelimiter": "String = \";\"",
        "ThisIsReturnValue:CSV File": "File(Object)"
    },
    "ke.bou.GizmoPack.ParseCSVIntent": {
        "file": "File(Object)",
        "hasHeader": "Bool = True",
        "fields": "String",
        "delimiter": "ParseCSVDelimiter(Enum) = \"detect\"",
        "customDelimiter": "String = \";\"",
        "ThisIsReturnValue:Rows": "File(Object)"
    },
    "ke.bou.GizmoPack.QueryDocumentIntent": {
        "file": "File(Object)",
        "queryType": "DocumentQueryType(Enum) = \"css\"",
        "cssQuery": "String = \"head > title\"",
        "xpathQuery": "String = \"//head/title\"",
        "outputType": "QueryDocumentOutput(Enum) = \"text\"",
        "oneResult": "Bool",
        "ThisIsReturnValue:Output": "File(Object)"
    },
    "ke.bou.GizmoPack.SnapshotMapIntent": {
        "location": "Placemark(Object)",
        "mapType": "MapType(Enum) = \"standard\"",
        "style": "UserInterfaceStyle(Enum) = \"unknown\"",
        "pointsOfInterest": "MapPointsOfInterest(Enum) = \"includeAll\"",
        "latitude": "Distance(Object) = 25.0",
        "width": "Float = 256.0",
        "height": "Float = 256.0",
        "ThisIsReturnValue:Image": "File(Object)"
    },
    "ke.bou.GizmoPack.UniversalVariablesIntent": {
        "operation": "UniversalVariableOperation(Enum) = \"unknown\"",
        "setValue": "File(Object)",
        "setName": "String",
        "setReturnPrevious": "Bool",
        "getName": "String",
        "addValue": "File(Object)",
        "addName": "String",
        "addPosition": "UniversalVariablesListPosition(Enum) = \"end\"",
        "deleteName": "String",
        "addIndex": "Integer",
        "removePosition": "UniversalVariablesListPosition(Enum) = \"start\"",
        "removeIndex": "Integer",
        "removeName": "String",
        "database": "UniversalVariablesDatabase(Enum)",
        "ThisIsReturnValue:Values": "File(Object)"
    },
    "ke.bou.GizmoPack.QueryRecordsIntent": {
        "fields": "String",
        "input": "File(Object)",
        "outputType": "QueryRecordsOutput(Enum) = \"automatic\"",
        "hasWhere": "Bool",
        "whereClause": "String",
        "hasGroupBy": "Bool",
        "groupByClause": "String",
        "hasOrderBy": "Bool",
        "orderByClause": "String",
        "hasLimit": "Bool",
        "limitClause": "Integer = 1",
        "ThisIsReturnValue:Output": "File(Object)"
    },
    "ke.bou.GizmoPack.QueryJSONIntent": {
        "input": "File(Object)",
        "queryType": "JSONQueryType(Enum) = \"jsonPath\"",
        "jsonPathQuery": "String = \"$\"",
        "jqQuery": "String = \".[]\"",
        "slurp": "Bool",
        "ThisIsReturnValue:Result": "File(Object)"
    },
    "ke.bou.GizmoPack.CombineListsIntent": {
        "firstList": "String",
        "secondList": "String",
        "operation": "CombineListsOperation(Enum)",
        "removeDuplicates": "Bool",
        "ThisIsReturnValue:Combined List": "String"
    },
    "ke.bou.GizmoPack.TrimFileIntent": {
        "file": "File(Object)",
        "characterClass": "TrimFileCharacterClass(Enum)",
        "lineCount": "Integer = 1",
        "position": "TrimFilePosition(Enum)",
        "ThisIsReturnValue:Trimmed File": "File(Object)"
    },
    "ke.bou.GizmoPack.FilterDictionariesIntent": {
        "dictionaries": "File(Object)",
        "key": "String",
        "operation": "FilterDictionariesOperation(Enum)",
        "isValue": "String",
        "isNotValue": "String",
        "ThisIsReturnValue:Dictionaries": "File(Object)"
    },
    "ke.bou.GizmoPack.EncodeHexIntent": {
        "operation": "EncodeHexOperation(Enum) = \"encode\"",
        "input": "File(Object)",
        "ThisIsReturnValue:Hex Encoded": "File(Object)"
    },
    "ke.bou.GizmoPack.HashDataIntent": {
        "input": "File(Object)",
        "algorithm": "HashDataAlgorithm(Enum) = \"sha512\"",
        "hmacMd5Key": "File(Object)",
        "hmacSha1Key": "File(Object)",
        "hmacSha224Key": "File(Object)",
        "hmacSha256Key": "File(Object)",
        "hmacSha384Key": "File(Object)",
        "hmacSha512Key": "File(Object)",
        "outputEncoding": "BinaryOutputEncoding(Enum) = \"hex\"",
        "ThisIsReturnValue:Digest": "File(Object)"
    },
    "ke.bou.GizmoPack.RandomDataIntent": {
        "size": "Integer = 32",
        "outputEncoding": "BinaryOutputEncoding(Enum) = \"hex\"",
        "ThisIsReturnValue:Random Data": "File(Object)"
    },
    "ke.bou.GizmoPack.ShortcutMetadataIntent": {
        "shortcut": "File(Object)",
        "ThisIsReturnValue:Shortcut Metadata": "ShortcutMetadata(Object)"
    },
    "ke.bou.GizmoPack.EncodePlistIntent": {
        "operation": "EncodeDecode(Enum) = \"decode\"",
        "format": "PlistFormat(Enum) = \"xml\"",
        "input": "File(Object)",
        "ThisIsReturnValue:Plist Encoded": "File(Object)"
    },
    "ke.bou.GizmoPack.OverwriteFileIntent": {
        "file": "File(Object)",
        "overwrite": "File(Object)",
        "isFolder": "Bool",
        "path": "String"
    },
    "ke.bou.GizmoPack.ParseDateIntent": {
        "date": "String",
        "format": "String = \"MM/dd/yyyy\"",
        "errorIfInvalid": "Bool",
        "locale": "DateLocale(Object)",
        "ThisIsReturnValue:Parsed Date": "String"
    },
    "ke.bou.GizmoPack.FileInfoIntent": {
        "file": "File(Object)",
        "ThisIsReturnValue:File Info": "FileMetadata(Object)"
    },
    "ke.bou.GizmoPack.SignJWTIntent": {
        "key": "File(Object)",
        "algorithm": "JWTAlgorithm(Enum)",
        "issuer": "String",
        "keyID": "String",
        "audience": "String",
        "notBefore": "TimeInterval(Object)",
        "expiration": "TimeInterval(Object) = 1200.0",
        "subject": "String",
        "jwtID": "String",
        "ThisIsReturnValue:JWT": "String"
    },
    "ke.bou.GizmoPack.WakeOnLANIntent": {
        "address": "String",
        "broadcastAddress": "String = \"255.255.255.255\"",
        "port": "Integer = 9"
    },
    "maccatalyst.com.Christopher-Hannah.Text-Case.TextCaseIntent": {
        "format": "TextCaseFormat(Enum) = \"apTitleCase\"",
        "text": "String",
        "ThisIsReturnValue:Formatted Text": "String"
    },
    "maccatalyst.com.Christopher-Hannah.Text-Case.FormatWithFlowIntent": {
        "text": "String",
        "flow": "IntentFlow(Object)",
        "ThisIsReturnValue:Formatted Text": "String"
    },
    "maccatalyst.com.Christopher-Hannah.Text-Case.ReplaceIntent": {
        "mode": "Mode(Enum) = \"all\"",
        "match": "String",
        "replacement": "String",
        "text": "String",
        "ThisIsReturnValue:Formatted Text": "String"
    },
    "maccatalyst.com.Christopher-Hannah.Text-Case.RemoveIntent": {
        "mode": "Mode(Enum) = \"all\"",
        "match": "String",
        "text": "String",
        "ThisIsReturnValue:Formatted Text": "String"
    },
    "maccatalyst.com.Christopher-Hannah.Text-Case.AddPrefixIntent": {
        "prefix": "String",
        "text": "String",
        "ThisIsReturnValue:Formatted Text": "String"
    },
    "maccatalyst.com.Christopher-Hannah.Text-Case.AddSuffixIntent": {
        "suffix": "String",
        "text": "String",
        "ThisIsReturnValue:Formatted Text": "String"
    },
    "maccatalyst.com.Christopher-Hannah.Text-Case.ReplaceWithLineBreaksIntent": {
        "match": "String",
        "text": "String",
        "ThisIsReturnValue:Formatted Text": "String"
    },
    "maccatalyst.com.Christopher-Hannah.Text-Case.ReplaceLineBreaksWithIntent": {
        "with": "String",
        "text": "String",
        "ThisIsReturnValue:Formatted Text": "String"
    },
    "me.damir.dropover-mac.AddToShelfIntent": {
        "files": "File(Object)",
        "append": "Bool"
    },
    "me.damir.dropover-mac.CreateCloudSessionIntent": {
        "files": "File(Object)",
        "title": "String",
        "copyToClipboard": "Bool",
        "expirationDate": "TimeInterval(Object) = 7.0",
        "createsZip": "Bool",
        "ThisIsReturnValue:URL": "String"
    },
    "me.damir.dropover-mac.GetFilesFromShelfIntent": {
        "closeShelf": "Bool",
        "ThisIsReturnValue:Files": "File(Object)"
    },
    "me.damir.dropover-mac.OpenRecentShelfIntent": {},
    "net.shinyfrog.bear-iOS.SFCreateNoteIntent": {
        "title": "String = \"New note\"",
        "text": "String = \"text\"",
        "tags": "String = \"tag\"",
        "ThisIsReturnValue:Note": "IntentNote(Object)"
    },
    "net.shinyfrog.bear-iOS.SFCreateNoteFromURLIntent": {
        "URL": "String",
        "tags": "String",
        "ThisIsReturnValue:Note": "IntentNote(Object)"
    },
    "net.shinyfrog.bear-iOS.SFGetNoteIntent": {
        "title": "String",
        "ThisIsReturnValue:Note": "IntentNote(Object)"
    },
    "net.shinyfrog.bear-iOS.SFAddToNoteIntent": {
        "note": "IntentNote(Object)",
        "text": "String = \"text\"",
        "insert": "InsertionMode(Enum) = \"append\"",
        "header": "String",
        "timestamp": "Bool",
        "ThisIsReturnValue:Note": "IntentNote(Object)"
    },
    "net.shinyfrog.bear-iOS.SFTrashNoteIntent": {
        "note": "IntentNote(Object)"
    },
    "net.shinyfrog.bear-iOS.SFArchiveNoteIntent": {
        "note": "IntentNote(Object)"
    },
    "net.shinyfrog.bear-iOS.SFPinNoteIntent": {
        "note": "IntentNote(Object)",
        "pin": "Bool = True"
    },
    "net.shinyfrog.bear-iOS.SFSearchNotesIntent": {
        "term": "String = \"search\"",
        "limit": "Bool",
        "searchLimit": "Integer = 10",
        "openInBear": "Bool",
        "ThisIsReturnValue:Notes": "IntentNote(Object)"
    },
    "net.shinyfrog.bear-iOS.SFSearchTagsIntent": {
        "term": "String = \"tag\"",
        "limit": "Bool",
        "searchLimit": "Integer = 10",
        "ThisIsReturnValue:Tags": "IntentTag(Object)"
    },
    "net.shinyfrog.bear-iOS.SFOpenNoteIntent": {
        "note": "IntentNote(Object)"
    },
    "net.shinyfrog.bear-iOS.SFOpenTagIntent": {
        "tag": "String = \"tag\""
    },
    "net.shinyfrog.bear-iOS.SFOpenLocationIntent": {
        "location": "LocationType(Enum) = \"notes\""
    },
    "net.shinyfrog.bear-iOS.SFGetTagIntent": {
        "tag": "String",
        "ThisIsReturnValue:Tag": "IntentTag(Object)"
    },
    "net.shinyfrog.bear-iOS.SFAddFilesToNoteIntent": {
        "files": "File(Object)",
        "note": "IntentNote(Object)",
        "insert": "InsertionMode(Enum) = \"append\"",
        "ThisIsReturnValue:Note": "IntentNote(Object)"
    },
    "net.shinyfrog.bear-iOS.SFAddTagsToNoteIntent": {
        "note": "IntentNote(Object)",
        "tags": "String",
        "ThisIsReturnValue:note": "IntentNote(Object)"
    },
    "net.shinyfrog.bear-iOS.SFGetNoteFilesIntent": {
        "note": "IntentNote(Object)",
        "ThisIsReturnValue:Files": "File(Object)"
    },
    "net.shinyfrog.bear-iOS.SFRemoveTagIntent": {
        "tag": "String",
        "note": "IntentNote(Object)"
    },
    "net.shinyfrog.bear-iOS.SFExportNoteIntent": {
        "note": "IntentNote(Object)",
        "format": "ExportType(Enum)",
        "ThisIsReturnValue:File": "File(Object)"
    },
    "org.joinmastodon.app.SendPostIntent": {
        "content": "String",
        "accounts": "Account(Object)",
        "visibility": "PostVisibility(Enum) = \"public\"",
        "ThisIsReturnValue:Posts": "Post(Object)"
    },
    "AsheKube.app.a-Shell-mini.ExecuteCommandIntent": {
        "command": "String = \" \"",
        "openWindow": "Enum(Enum) = \"default\"",
        "keepGoing": "Bool",
        "ThisIsReturnValue:output": "String"
    },
    "AsheKube.app.a-Shell-mini.GetFileIntent": {
        "fileName": "String",
        "errorIfNotFound": "Bool = True",
        "ThisIsReturnValue:File": "File(Object)"
    },
    "AsheKube.app.a-Shell-mini.PutFileIntent": {
        "file": "File(Object)",
        "overwrite": "Bool = True"
    },
    "AsheKube.app.a-Shell.ExecuteCommandIntent": {
        "command": "String = \" \"",
        "openWindow": "Enum(Enum) = \"default\"",
        "keepGoing": "Bool",
        "ThisIsReturnValue:output": "String"
    },
    "AsheKube.app.a-Shell.GetFileIntent": {
        "fileName": "String",
        "errorIfNotFound": "Bool = True",
        "ThisIsReturnValue:File": "File(Object)"
    },
    "AsheKube.app.a-Shell.PutFileIntent": {
        "file": "File(Object)",
        "overwrite": "Bool = True"
    },
    "com.flexibits.fantastical2.iphone.FKRUpcomingCalendarItemIntent": {
        "itemType": "IntentItemType(Enum) = \"unspecified\"",
        "ThisIsReturnValue:Upcoming Item": "IntentCalendarItem(Object)"
    },
    "com.flexibits.fantastical2.iphone.FKRShowScheduleIntent": {
        "day": "IntentScheduleDay(Enum)",
        "date": "String",
        "ThisIsReturnValue:Show Schedule": "array(IntentCalendarItem(Object))"
    },
    "com.flexibits.fantastical2.iphone.FKROverdueRemindersIntent": {
        "ThisIsReturnValue:Calendar Items": "IntentCalendarItem(Object)"
    },
    "com.flexibits.fantastical2.iphone.FKRShowCalendarIntent": {
        "calendar": "(Object)",
        "calendarName": "String",
        "date": "String",
        "ThisIsReturnValue:Calendar": "Object"
    },
    "com.flexibits.fantastical2.iphone.FKRShowListIntent": {
        "list": "(Object)",
        "listName": "String",
        "date": "String",
        "ThisIsReturnValue:List ": "Object"
    },
    "com.flexibits.fantastical2.iphone.FKRCreateFromClipboardIntent": {
        "ThisIsReturnValue:Calendar Item Title": "String"
    },
    "com.flexibits.fantastical2.iphone.FKRCreateFromInputIntent": {
        "input": "String",
        "notes": "String",
        "ThisIsReturnValue:Create From Input": "IntentCalendarItem(Object)"
    },
    "com.flexibits.fantastical2.iphone.FKROpenOnDateIntent": {
        "date": "String"
    },
    "com.flexibits.fantastical2.iphone.FKRChangeCalendarSetIntent": {
        "calendarSet": "CalendarSetEntity(Object)"
    },
    "com.flexibits.fantastical2.iphone.FKRDateWidgetConfigIntent": {
        "theme": "IntentWidgetTheme(Enum) = \"mirrorSystem\"",
        "showMonth": "Bool = True",
        "showWeather": "Bool"
    },
    "com.flexibits.fantastical2.iphone.FKRUpNextWidgetConfigIntent": {
        "theme": "IntentWidgetTheme(Enum) = \"mirrorSystem\"",
        "calendarSet": "IntentCalendarSet(Object)",
        "includeEvents": "Bool = True",
        "includeTasks": "Bool = True",
        "showWeather": "Bool = True",
        "todayOnly": "Bool"
    },
    "com.flexibits.fantastical2.iphone.FKREventListWidgetConfigIntent": {
        "theme": "IntentWidgetTheme(Enum) = \"mirrorSystem\"",
        "calendarSet": "IntentCalendarSet(Object)",
        "eventTypes": "IntentShowEventType(Enum) = \"all\"",
        "taskTypes": "IntentShowTaskType(Enum) = \"all\"",
        "showWeather": "Bool = True",
        "action": "IntentOptionalActionType(Enum) = \"addEvent\""
    },
    "com.flexibits.fantastical2.iphone.FKRDateCalendarWidgetConfigIntent": {
        "theme": "IntentWidgetTheme(Enum) = \"mirrorSystem\"",
        "showEvents": "Bool = True",
        "indicatorType": "IntentEventIndicatorType(Enum) = \"heatmap\"",
        "calendarSet": "IntentCalendarSet(Object)",
        "showWeather": "Bool = True"
    },
    "com.flexibits.fantastical2.iphone.FKRCalendarWidgetConfigIntent": {
        "theme": "IntentWidgetTheme(Enum) = \"mirrorSystem\"",
        "showEvents": "Bool = True",
        "indicatorType": "IntentEventIndicatorType(Enum) = \"heatmap\"",
        "calendarSet": "IntentCalendarSet(Object)"
    },
    "com.flexibits.fantastical2.iphone.FKREventListCalendarWidgetConfigIntent": {
        "theme": "IntentWidgetTheme(Enum) = \"mirrorSystem\"",
        "calendarSet": "IntentCalendarSet(Object)",
        "eventTypes": "IntentShowEventType(Enum) = \"all\"",
        "taskTypes": "IntentShowTaskType(Enum) = \"all\"",
        "showHeatmap": "Bool = True",
        "indicatorType": "IntentEventIndicatorType(Enum) = \"heatmap\"",
        "showWeather": "Bool = True",
        "action": "IntentOptionalActionType(Enum) = \"addEvent\""
    },
    "com.flexibits.fantastical2.iphone.FKREventListSmallWidgetConfigIntent": {
        "theme": "IntentWidgetTheme(Enum) = \"mirrorSystem\"",
        "calendarSet": "IntentCalendarSet(Object)",
        "eventTypes": "IntentShowEventType(Enum) = \"all\"",
        "taskTypes": "IntentShowTaskType(Enum) = \"all\"",
        "showWeather": "Bool = True"
    },
    "com.flexibits.fantastical2.iphone.FKRActionWidgetConfigIntent": {
        "theme": "IntentWidgetTheme(Enum) = \"mirrorSystem\"",
        "action": "IntentActionType(Enum) = \"addEvent\""
    },
    "com.flexibits.fantastical2.iphone.FKRGetAttendeesFromEventIntent": {
        "calendarItem": "IntentCalendarItem(Object)",
        "ThisIsReturnValue:Get Invitees from Event": "array(IntentAttendee(Object))"
    },
    "com.flexibits.fantastical2.iphone.FKRChangeCalendarViewIntent": {
        "view": "IntentCalendarView(Enum)"
    },
    "com.flexibits.fantastical2.iphone.FKRUpNextLockScreenWidgetConfigIntent": {
        "calendarSet": "IntentCalendarSet(Object)",
        "eventTypes": "IntentShowEventType(Enum) = \"timed\"",
        "taskTypes": "IntentShowTaskType(Enum) = \"timed\""
    },
    "com.flexibits.fantastical2.iphone.FKRActionLockScreenWidgetConfigIntent": {
        "action": "IntentActionType(Enum) = \"addEvent\""
    },
    "com.flexibits.fantastical2.iphone.FKRCalendarLockScreenWidgetConfigIntent": {},
    "com.flexibits.fantastical2.iphone.FantasticalFocusFilterIntent": {
        "selectedCalendarSets": "array(CalendarSetEntity(Object))"
    },
    "com.omnigroup.OmniFocus3.MacAppStore.RunOmniJSIntent": {
        "script": "String",
        "input": "String",
        "associatedFiles": "File(Object)",
        "ThisIsReturnValue:Omni Automation Result": "String"
    },
    "com.omnigroup.OmniFocus3.MacAppStore.RunPlugInIntent": {
        "pluginAction": "PlugInActionIntentRef(Object)"
    },
    "com.omnigroup.OmniFocus3.MacAppStore.AddTaskIntent": {
        "title": "String",
        "project": "Project(Object)",
        "tags": "Tag(Object)",
        "flagged": "Bool",
        "estimatedMinutes": "Integer",
        "deferDate": "String",
        "dueDate": "String",
        "attachments": "File(Object)",
        "note": "String",
        "ThisIsReturnValue:Item": "Task(Object)"
    },
    "com.omnigroup.OmniFocus3.MacAppStore.FindTasksIntent": {
        "projectCriteriaType": "ProjectCriteriaType(Enum) = \"ignored\"",
        "project": "Project(Object)",
        "tagCriteriaType": "TagCriteriaType(Enum) = \"ignored\"",
        "anyOfTags": "Tag(Object)",
        "allOfTags": "Tag(Object)",
        "noneOfTags": "Tag(Object)",
        "availabilityType": "AvailabilityType(Enum) = \"remaining\"",
        "flaggedStatusType": "FlaggedStatusType(Enum) = \"ignored\"",
        "terms": "String",
        "limitByDates": "Bool",
        "deferUntilLowerBound": "String",
        "deferUntilUpperBound": "String",
        "dueDateLowerBound": "String",
        "dueDateUpperBound": "String",
        "completionDateLowerBound": "String",
        "completionDateUpperBound": "String",
        "taskSortType": "TaskSortType(Enum) = \"parentsLastRankPath\"",
        "limitItemsCount": "Integer = 25",
        "ThisIsReturnValue:Items": "Task(Object)"
    },
    "com.omnigroup.OmniFocus3.MacAppStore.GetDatabaseObjectFromInputIntent": {
        "input": "String = \"{ \"type\": \"project\", \"primaryKey\": \"pwanCgZeLXG\", \"version\": 1.0}\"",
        "ThisIsReturnValue:Database Object Result": "DatabaseObjectResult(Object)"
    },
    "com.omnigroup.OmniFocus3.MacAppStore.ShowFromChoiceIntent": {
        "chooseFromListType": "ChooseFromListType(Enum)",
        "project": "Project(Object)",
        "folder": "Folder(Object)",
        "tag": "Tag(Object)",
        "perspective": "Perspective(Object)",
        "task": "Task(Object)"
    },
    "com.omnigroup.OmniFocus3.MacAppStore.AddTaskPaperIntent": {
        "taskPaperInput": "String",
        "targetType": "TaskPaperTargetType(Enum) = \"inbox\"",
        "targetFolder": "String",
        "targetProject": "String",
        "targetTask": "String",
        "ThisIsReturnValue:Items": "Task(Object)"
    },
    "com.omnigroup.OmniFocus3.MacAppStore.TodaysForecastIntent": {
        "sections": "ForecastSection(Object)",
        "ThisIsReturnValue:Items": "Task(Object)"
    },
    "com.omnigroup.OmniFocus3.MacAppStore.FindTagsIntent": {
        "title": "String",
        "ThisIsReturnValue:Tags": "Tag(Object)"
    },
    "com.omnigroup.OmniFocus3.MacAppStore.FindProjectsIntent": {
        "title": "String",
        "folders": "Folder(Object)",
        "ThisIsReturnValue:Projects": "Project(Object)"
    },
    "com.omnigroup.OmniFocus3.MacAppStore.SelectPerspectiveIntent": {
        "perspective": "Perspective(Object)",
        "fontSize": "Integer = 14",
        "linesPerItem": "Integer = 1",
        "hideQuickEntry": "Bool",
        "ThisIsReturnValue:Perspective": "Perspective(Object)"
    },
    "com.omnigroup.OmniFocus3.MacAppStore.ConfigureForecastWidgetIntent": {
        "hideQuickEntry": "Bool",
        "showTaskTitles": "Bool = True",
        "fontSize": "Integer = 14",
        "linesPerItem": "Integer = 1"
    },
    "com.omnigroup.OmniFocus3.MacAppStore.SelectPerspectiveLockScreenIntent": {
        "perspective": "Perspective(Object)"
    },
    "com.omnigroup.OmniFocus3.iOS.RunOmniJSIntent": {
        "script": "String",
        "input": "String",
        "associatedFiles": "File(Object)",
        "ThisIsReturnValue:Omni Automation Result": "String"
    },
    "com.omnigroup.OmniFocus3.iOS.RunPlugInIntent": {
        "pluginAction": "PlugInActionIntentRef(Object)"
    },
    "com.omnigroup.OmniFocus3.iOS.AddTaskIntent": {
        "title": "String",
        "project": "Project(Object)",
        "tags": "Tag(Object)",
        "flagged": "Bool",
        "estimatedMinutes": "Integer",
        "deferDate": "String",
        "dueDate": "String",
        "attachments": "File(Object)",
        "note": "String",
        "ThisIsReturnValue:Item": "Task(Object)"
    },
    "com.omnigroup.OmniFocus3.iOS.FindTasksIntent": {
        "projectCriteriaType": "ProjectCriteriaType(Enum) = \"ignored\"",
        "project": "Project(Object)",
        "tagCriteriaType": "TagCriteriaType(Enum) = \"ignored\"",
        "anyOfTags": "Tag(Object)",
        "allOfTags": "Tag(Object)",
        "noneOfTags": "Tag(Object)",
        "availabilityType": "AvailabilityType(Enum) = \"remaining\"",
        "flaggedStatusType": "FlaggedStatusType(Enum) = \"ignored\"",
        "terms": "String",
        "limitByDates": "Bool",
        "deferUntilLowerBound": "String",
        "deferUntilUpperBound": "String",
        "dueDateLowerBound": "String",
        "dueDateUpperBound": "String",
        "completionDateLowerBound": "String",
        "completionDateUpperBound": "String",
        "taskSortType": "TaskSortType(Enum) = \"parentsLastRankPath\"",
        "limitItemsCount": "Integer = 25",
        "ThisIsReturnValue:Items": "Task(Object)"
    },
    "com.omnigroup.OmniFocus3.iOS.GetDatabaseObjectFromInputIntent": {
        "input": "String = \"{ \"type\": \"project\", \"primaryKey\": \"pwanCgZeLXG\", \"version\": 1.0}\"",
        "ThisIsReturnValue:Database Object Result": "DatabaseObjectResult(Object)"
    },
    "com.omnigroup.OmniFocus3.iOS.ShowFromChoiceIntent": {
        "chooseFromListType": "ChooseFromListType(Enum)",
        "project": "Project(Object)",
        "folder": "Folder(Object)",
        "tag": "Tag(Object)",
        "perspective": "Perspective(Object)",
        "task": "Task(Object)"
    },
    "com.omnigroup.OmniFocus3.iOS.AddTaskPaperIntent": {
        "taskPaperInput": "String",
        "targetType": "TaskPaperTargetType(Enum) = \"inbox\"",
        "targetFolder": "String",
        "targetProject": "String",
        "targetTask": "String",
        "ThisIsReturnValue:Items": "Task(Object)"
    },
    "com.omnigroup.OmniFocus3.iOS.TodaysForecastIntent": {
        "sections": "ForecastSection(Object)",
        "ThisIsReturnValue:Items": "Task(Object)"
    },
    "com.omnigroup.OmniFocus3.iOS.FindTagsIntent": {
        "title": "String",
        "ThisIsReturnValue:Tags": "Tag(Object)"
    },
    "com.omnigroup.OmniFocus3.iOS.FindProjectsIntent": {
        "title": "String",
        "folders": "Folder(Object)",
        "ThisIsReturnValue:Projects": "Project(Object)"
    },
    "com.omnigroup.OmniFocus3.iOS.SelectPerspectiveIntent": {
        "perspective": "Perspective(Object)",
        "fontSize": "Integer = 14",
        "linesPerItem": "Integer = 2",
        "hideQuickEntry": "Bool",
        "ThisIsReturnValue:Perspective": "Perspective(Object)"
    },
    "com.omnigroup.OmniFocus3.iOS.ConfigureForecastWidgetIntent": {
        "fontSize": "Integer = 14",
        "linesPerItem": "Integer = 2",
        "hideQuickEntry": "Bool"
    },
    "codes.rambo.AirBuddyHelper.GetDeviceStatusIntent": {
        "device": "IntentDevice(Object)",
        "failureMode": "IntentFailureMode(Enum)",
        "ThisIsReturnValue:Device": "IntentDeviceStatus(Object)"
    },
    "codes.rambo.AirBuddyHelper.GetDeviceBatteryIntent": {
        "device": "IntentDeviceStatus(Object)",
        "battery": "IntentBatteryPosition(Enum) = \"main\"",
        "ThisIsReturnValue:Battery": "IntentBattery(Object)"
    },
    "codes.rambo.AirBuddyHelper.GetHeadsetStateDetailsIntent": {
        "device": "IntentDeviceStatus(Object)",
        "property": "IntentHeadsetStateProperty(Enum) = \"anyBudInEar\"",
        "ThisIsReturnValue:Result": "Bool"
    },
    "codes.rambo.AirBuddyHelper.ConnectHeadsetIntent": {
        "headset": "IntentDevice(Object)",
        "listeningMode": "IntentHeadsetListeningMode(Enum)",
        "micMode": "IntentHeadsetMicState(Enum)",
        "ThisIsReturnValue:Headset": "IntentDeviceStatus(Object)"
    },
    "codes.rambo.AirBuddyHelper.DisconnectHeadsetIntent": {
        "target": "IntentDisconnectTarget(Enum)",
        "headset": "IntentDevice(Object)",
        "failureMode": "IntentFailureMode(Enum)",
        "ThisIsReturnValue:Headset": "IntentDevice(Object)"
    },
    "codes.rambo.AirBuddyHelper.GetDevicesListIntent": {
        "deviceKind": "IntentDeviceKind(Enum)",
        "connectionState": "IntentConnectionFilter(Enum)",
        "nearbyState": "IntentNearbyFilter(Enum)",
        "ThisIsReturnValue:Devices": "IntentDevice(Object)"
    },
    "codes.rambo.AirBuddyHelper.DevicesWidgetConfigurationIntent": {
        "devices": "IntentDevice(Object)",
        "style": "IntentWidgetStyle(Object)"
    },
    "codes.rambo.AirBuddyHelper.GetFirmwareVersionIntent": {
        "device": "IntentDevice(Object)",
        "failureMode": "IntentFailureMode(Enum)",
        "ThisIsReturnValue:Device Model": "IntentDeviceModel(Object)"
    },
    "codes.rambo.AirBuddyHelper.GetLatestFirmwareVersionIntent": {
        "model": "IntentDeviceModel(Object)",
        "ThisIsReturnValue:Device Model": "IntentDeviceModel(Object)"
    },
    "codes.rambo.AirBuddyHelper.SetSpatialAudioModeIntent": {
        "spatialAudioEnabled": "Bool",
        "spatialAudioMode": "IntentSpatialAudioMode(Enum) = \"fixed\"",
        "spatializeStereoEnabled": "Bool"
    },
    "codes.rambo.AirBuddyHelper.GetSpatialAudioModeIntent": {
        "ThisIsReturnValue:State": "IntentSpatialAudioState(Object)"
    },
    "codes.rambo.AirBuddyHelper.AirPodsWidgetConfigurationIntent": {
        "automatic": "Bool = True",
        "device": "IntentDevice(Object)",
        "action": "IntentDeviceAction(Object)",
        "style": "IntentWidgetStyle(Object)"
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleZoomIntent": {
        "operation": "Operation(Enum) = \"turn\"",
        "state": "State(Enum) = \"on\""
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleVoiceOverIntent": {
        "operation": "Operation(Enum) = \"turn\"",
        "state": "State(Enum) = \"on\""
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXStartSpeakScreenIntent": {},
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXStartMagnifierIntent": {},
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleVoiceControlIntent": {
        "operation": "Operation(Enum) = \"turn\"",
        "state": "State(Enum) = \"on\""
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleSwitchControlIntent": {
        "operation": "Operation(Enum) = \"turn\"",
        "state": "State(Enum) = \"on\""
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXStartGuidedAccessIntent": {},
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleAssistiveTouchIntent": {
        "operation": "Operation(Enum) = \"turn\"",
        "state": "State(Enum) = \"on\""
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleSmartInvertIntent": {
        "operation": "Operation(Enum) = \"turn\"",
        "state": "State(Enum) = \"on\""
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleClassicInvertIntent": {
        "operation": "Operation(Enum) = \"turn\"",
        "state": "State(Enum) = \"on\""
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleTransparencyIntent": {
        "operation": "Operation(Enum) = \"turn\"",
        "state": "State(Enum) = \"on\""
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleContrastIntent": {
        "operation": "Operation(Enum) = \"turn\"",
        "state": "State(Enum) = \"on\""
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleWhitePointIntent": {
        "operation": "Operation(Enum) = \"turn\"",
        "state": "State(Enum) = \"on\""
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleMonoAudioIntent": {
        "operation": "Operation(Enum) = \"turn\"",
        "state": "State(Enum) = \"on\""
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleLEDFlashIntent": {
        "operation": "Operation(Enum) = \"turn\"",
        "state": "State(Enum) = \"on\""
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleAudioDescriptionsIntent": {
        "operation": "Operation(Enum) = \"turn\"",
        "state": "State(Enum) = \"on\""
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleCaptionsIntent": {
        "operation": "Operation(Enum) = \"turn\"",
        "state": "State(Enum) = \"on\""
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXSetLargeTextIntent": {
        "textSize": "Enum(Enum) = \"ExtraSmall\""
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleReduceMotionIntent": {
        "operation": "Operation(Enum) = \"turn\"",
        "state": "State(Enum) = \"on\""
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleSoundDetectionIntent": {
        "operation": "SoundDetectionOperation(Enum) = \"start\""
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXSetSoundDetectorIntent": {
        "parameter": "Sound(Object)",
        "operation": "Operation(Enum) = \"turn\"",
        "state": "State(Enum) = \"on\""
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleBackgroundSoundsIntent": {
        "operation": "Operation(Enum) = \"turn\"",
        "state": "State(Enum) = \"on\"",
        "setting": "BackgroundSoundsSetting(Enum) = \"backgroundSounds\""
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXSetBackgroundSoundIntent": {
        "backgroundSound": "BackgroundSounds(Enum) = \"BalancedNoise\""
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXSetBackgroundSoundVolumeIntent": {
        "volumeValue": "Float = 10.0",
        "volumeType": "BackgroundSoundsVolume(Enum) = \"volume\""
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleLiveCaptionsIntent": {
        "operation": "Operation(Enum) = \"turn\"",
        "state": "State(Enum) = \"on\""
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleColorFiltersIntent": {
        "operation": "Operation(Enum) = \"turn\"",
        "state": "State(Enum) = \"on\""
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXStartRemoteWatchScreenIntent": {},
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleAutoAnswerCallsIntent": {
        "operation": "Operation(Enum) = \"turn\"",
        "state": "State(Enum) = \"on\""
    },
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXSetLeftRightBalanceIntent": {
        "operation": "LeftRightBalanceOperation(Enum) = \"toggle\"",
        "parameter": "State(Enum)",
        "value": "Float"
    },
    "com.apple.Notes.ICNoteIntent": {
        "note": "IntentNote(Object)",
        "ThisIsReturnValue:Note": "IntentNote(Object)"
    },
    "com.apple.Notes.ICNotesFolderIntent": {
        "folder": "IntentNotesFolder(Object)",
        "ThisIsReturnValue:Folder": "IntentNotesFolder(Object)"
    },
    "com.apple.Notes.AddTagsToNotesLinkAction": {
        "notes": "array(NoteEntity(Object))",
        "tags": "array(TagEntity(Object))",
        "ThisIsReturnValue:Add Tags to Notes": "array(NoteEntity(Object))"
    },
    "com.apple.Notes.AppendToNoteLinkAction": {
        "entity": "NoteEntity(Object)",
        "text": "12(Object)",
        "ThisIsReturnValue:Append to Note": "NoteEntity(Object)"
    },
    "com.apple.Notes.ChangeFolderSettingLinkAction": {
        "changeOperation": "ChangeOperation(Enum)",
        "setting": "FolderViewSetting(Enum)"
    },
    "com.apple.Notes.ChangeSettingLinkAction": {
        "changeOperation": "ChangeOperation(Enum)",
        "setting": "NotesSetting(Enum)"
    },
    "com.apple.Notes.CloseAppLocationLinkAction": {
        "target": "NotesView(Enum)"
    },
    "com.apple.Notes.CloseNoteLinkAction": {
        "target": "NoteEntity(Object)"
    },
    "com.apple.Notes.CreateFolderLinkAction": {
        "name": "String",
        "ThisIsReturnValue:Create Folder": "FolderEntity(Object)"
    },
    "com.apple.Notes.CreateNoteLinkAction": {
        "name": "String",
        "contents": "12(Object)",
        "folder": "FolderEntity(Object)",
        "ThisIsReturnValue:Create Note": "NoteEntity(Object)"
    },
    "com.apple.Notes.CreateTagLinkAction": {
        "name": "String",
        "ThisIsReturnValue:Create Tag": "TagEntity(Object)"
    },
    "com.apple.Notes.DeleteFoldersLinkAction": {
        "entities": "array(FolderEntity(Object))"
    },
    "com.apple.Notes.DeleteNotesLinkAction": {
        "entities": "array(NoteEntity(Object))"
    },
    "com.apple.Notes.DeleteTagsLinkAction": {
        "entities": "array(TagEntity(Object))"
    },
    "com.apple.Notes.MoveNotesToFolderLinkAction": {
        "container": "FolderEntity(Object)",
        "entities": "array(NoteEntity(Object))"
    },
    "com.apple.Notes.OpenAccountLinkAction": {
        "target": "AccountEntity(Object)"
    },
    "com.apple.Notes.OpenAppLocationLinkAction": {
        "target": "NotesView(Enum)"
    },
    "com.apple.Notes.OpenFolderLinkAction": {
        "target": "FolderEntity(Object)"
    },
    "com.apple.Notes.OpenNoteLinkAction": {
        "target": "NoteEntity(Object)"
    },
    "com.apple.Notes.OpenTagLinkAction": {
        "target": "TagEntity(Object)"
    },
    "com.apple.Notes.PinNotesLinkAction": {
        "operation": "FavoriteOperation(Enum)",
        "entities": "array(NoteEntity(Object))",
        "ThisIsReturnValue:Pin Notes": "array(NoteEntity(Object))"
    },
    "com.apple.Notes.RemoveTagsFromNotesLinkAction": {
        "notes": "array(NoteEntity(Object))",
        "tags": "array(TagEntity(Object))",
        "ThisIsReturnValue:Remove Tags from Notes": "array(NoteEntity(Object))"
    },
    "com.apple.clock.OpenTab": {
        "tab": "MTAppIntentsTab(Enum)"
    },
    "com.apple.iBooksX.BookReaderChangePageNavigationIntent": {
        "changeOperation": "ChangeOperation(Enum)",
        "setting": "BookPageNavigationSetting(Enum) = \"pageTurning\""
    },
    "com.apple.iBooksX.BookReaderChangeThemeIntent": {
        "changeOperation": "ChangeOperation(Enum)",
        "setting": "BookThemeSetting(Enum) = \"lightMode\""
    },
    "com.apple.iBooksX.BookReaderNavigatePagesIntent": {
        "direction": "NavigateSequentiallyDirection(Enum)"
    },
    "com.apple.iBooksX.OpenBookIntent": {
        "mode": "OpenMode(Enum) = \"mostRecent\"",
        "target": "BookAppEntity(Object)"
    },
    "com.apple.iBooksX.OpenDefaultCollectionIntent": {
        "target": "DefaultCollectionItem(Enum)"
    },
    "com.apple.iBooksX.OpenTabBarItemIntent": {
        "target": "TabBarItem(Enum)"
    },
    "com.apple.iBooksX.PlayAudiobookIntent": {
        "mode": "PlayMode(Enum) = \"mostRecent\"",
        "target": "AudiobookAppEntity(Object)"
    },
    "com.apple.iBooksX.SearchBooksIntent": {
        "searchPhrase": "String"
    },
    "com.charliemonroe.Downie-4.XUDownloadURLsIntent": {
        "urls": "String",
        "postprocessing": "Postprocessing(Enum)",
        "destination": "File(Object)"
    },
    "com.charliemonroe.Downie-4.XUDownloadURLsInTextIntent": {
        "text": "String",
        "postprocessing": "Postprocessing(Enum)",
        "destination": "File(Object)"
    },
    "com.hegenberg.BetterTouchTool.ActivateHoveredAppInDockIntent": {},
    "com.hegenberg.BetterTouchTool.BluetoothDeviceConnectionIntent": {
        "action": "BluetoothActionAppEnum(Enum) = \"connectDevice\"",
        "deviceSelectionConnect": "BluetoothDeviceAppEntity(Object)",
        "manualDeviceNameOrAddressConnect": "String",
        "manualDeviceNameOrAddressDisconnect": "String",
        "deviceSelectionDisconnect": "BluetoothDeviceAppEntity(Object)",
        "inputDictionaryJSON": "String"
    },
    "com.hegenberg.BetterTouchTool.CallBetterTouchToolScriptingInterfaceIntent": {
        "scriptingFunction": "ScriptingFunctionAppEnum(Enum)",
        "inputJSON": "String = \"{}\"",
        "ThisIsReturnValue:Call BetterTouchTool Scripting Interface": "String"
    },
    "com.hegenberg.BetterTouchTool.CloseAllNotificationsIntent": {},
    "com.hegenberg.BetterTouchTool.CloseWindowUnderCursorIntent": {},
    "com.hegenberg.BetterTouchTool.ConnectBluetoothMidiDeviceIntent": {
        "connectType": "BTMidiConnectTypeAppEnum(Enum) = \"showAvailable\"",
        "deviceName": "String"
    },
    "com.hegenberg.BetterTouchTool.ControlCenterIntent": {},
    "com.hegenberg.BetterTouchTool.ConvertFileOutputToJSONIntent": {
        "input": "None",
        "includeFileContentAsBase64": "Bool",
        "ThisIsReturnValue:File JSON": "String"
    },
    "com.hegenberg.BetterTouchTool.ConvertInputListToJSONArrayIntent": {
        "inputList": "String",
        "ThisIsReturnValue:JSON Array String": "String"
    },
    "com.hegenberg.BetterTouchTool.ConvertJSONOutputToFileIntent": {
        "inputJSON": "String",
        "ThisIsReturnValue:Files": "Object"
    },
    "com.hegenberg.BetterTouchTool.CustomMoveResizeIntent": {
        "name": "String",
        "windowToUse": "CustomMoveWindowAppEnum(Enum) = \"0\"",
        "windowTitle": "String",
        "windowAnchorToReposition": "CustomMoveWindowAnchorPointAppEnum(Enum) = \"topLeftCornerOfWindow\"",
        "moveFromMonitorPosition": "CustomMoveResizeScreenAnchorPointAppEnum(Enum) = \"topLeftCornerOfScreen\"",
        "moveByScreens": "CustomMoveByScreensAppEnum(Enum) = \"0\"",
        "moveDirection": "CustomMoveDirectionAppEnum(Enum) = \"right\"",
        "startScreen": "CustomMoveStartScreenAppEnum(Enum) = \"relativeToWindowScreen\"",
        "moveWindowAnchorX": "Bool = \"1\"",
        "moveXUnit": "CustomMoveXUnitAppEnum(Enum) = \"px\"",
        "moveXBy": "Float",
        "moveWindowAnchorY": "Bool = \"1\"",
        "moveYUnit": "CustomMoveYUnitAppEnum(Enum) = \"px\"",
        "moveYBy": "Float",
        "changeWindowWidth": "CustomMoveChangeWidthAppEnum(Enum)",
        "fixedWidth": "Integer",
        "percentageOfScreenWidth": "String",
        "addOrSubstractFromCurrentWidth": "String",
        "changeWindowHeight": "CustomMoveChangeHeightAppEnum(Enum)",
        "fixedHeight": "String",
        "percentageOfScreenHeight": "String",
        "addOrSubstractFromCurrentHeight": "String",
        "takeDockAndMenubarIntoAccount": "Bool = \"1\""
    },
    "com.hegenberg.BetterTouchTool.FindImageOnScreenIntent": {
        "image": "12(Object)",
        "moveMouse": "ImageFoundMoveMouseAppEnum(Enum)",
        "searchOn": "SearchPictureOnAppEnum(Enum)",
        "treshold": "Float = \"60\"",
        "ThisIsReturnValue:Find Image On Screen": "array(String)"
    },
    "com.hegenberg.BetterTouchTool.FloatOnTopDisableAllIntent": {},
    "com.hegenberg.BetterTouchTool.FloatOnTopIntent": {},
    "com.hegenberg.BetterTouchTool.FloatingWebViewIntent": {
        "urlOrHTML": "UrlOrHTMLAppEnum(Enum) = \"renderHTML\"",
        "html": "String",
        "url": "String",
        "windowBackground": "WebviewBackgroundAppEnum(Enum) = \"transparent\"",
        "width": "Integer = \"400\"",
        "height": "Integer = \"400\"",
        "resizable": "Bool = \"1\"",
        "position": "RelativeWebViewPositioningAppEnum(Enum) = \"mouse_pos\"",
        "offsetX": "String",
        "offsetY": "String",
        "movable": "FloatingHTMLMovableAppEnum(Enum) = \"byDraggingAndHoldingCMD\"",
        "updatePosition": "Bool",
        "titlebar": "WebviewTitlebarStyleAppEnum(Enum) = \"standardTitlebar\"",
        "windowShadow": "Bool = \"1\"",
        "ignoreMouseEvents": "Bool",
        "closeWhenClickingOutside": "Bool",
        "showBTTDockIcon": "Bool",
        "zIndex": "FloatingWebViewLevelAppEnum(Enum) = \"above_all\"",
        "zIndexManual": "Integer",
        "whenRunMultipleTimes": "WhenRunningMultipleTimesAppEnum(Enum) = \"toggleBetweenVisibleAndHidden\"",
        "doNotKeepActiveInBackground": "Bool",
        "userAgent": "String",
        "systemBrowserPrefix": "String",
        "closeAfterSystemBrowserOpen": "Bool",
        "userScript": "String",
        "identifierW": "String = \"PLEASE ENTER A NAME\"",
        "input": "String",
        "sharedSecret": "String",
        "variable1": "String",
        "variable2": "String",
        "variable3": "String",
        "variable4": "String",
        "variable5": "String",
        "variable6": "String",
        "variable7": "String"
    },
    "com.hegenberg.BetterTouchTool.GetSelectedTextIntent": {
        "ThisIsReturnValue:Get Selected Text": "String"
    },
    "com.hegenberg.BetterTouchTool.HapticFeedbackIntent": {
        "feedbackType": "HapticFeedbackTypeAppEnum(Enum)"
    },
    "com.hegenberg.BetterTouchTool.MinimizeWindowUnderCursorIntent": {},
    "com.hegenberg.BetterTouchTool.MissionControlIntent": {},
    "com.hegenberg.BetterTouchTool.MouseClicksIntent": {
        "clickType": "ClickTypeAppEnum(Enum) = \"0\"",
        "clickAmount": "ClickAmountAppEnum(Enum)",
        "useCurrentlyPressedModifiers": "ModifiersMouseClickAppEnum(Enum) = \"0\"",
        "shift": "Bool",
        "fn": "Bool",
        "ctrl": "Bool",
        "opt": "Bool",
        "cmd": "Bool",
        "upDown": "DownUpClickAppEnum(Enum) = \"0\""
    },
    "com.hegenberg.BetterTouchTool.MoveMouseIntent": {
        "x": "Integer",
        "y": "Integer",
        "anchorPoint": "RelativeMouseMovementsAppEnum(Enum) = \"0\"",
        "combinedXY": "String = \"{0,0}\"",
        "moveType": "MoveTypeAppEnum(Enum)"
    },
    "com.hegenberg.BetterTouchTool.NightShiftIntent": {},
    "com.hegenberg.BetterTouchTool.PastePreviousClipboardItemsIntent": {
        "itemsToPaste": "String",
        "pasteStyle": "PasteStyleAppEnum(Enum) = \"1\""
    },
    "com.hegenberg.BetterTouchTool.RestoreSavedMousePosIntent": {},
    "com.hegenberg.BetterTouchTool.RestoreWindowLayoutIntent": {
        "layoutName": "String"
    },
    "com.hegenberg.BetterTouchTool.RunRealJavaScriptIntent": {
        "javascript": "String = \"let input = @ShortcutInput@;\n#Insert script code here\noutputToShortcuts('please call the outputToShortcuts function somwhere in your script');\"",
        "input": "String",
        "ThisIsReturnValue:Run Real Java Script": "String"
    },
    "com.hegenberg.BetterTouchTool.SaveMousePosIntent": {},
    "com.hegenberg.BetterTouchTool.SaveWindowLayoutIntent": {
        "layoutName": "String"
    },
    "com.hegenberg.BetterTouchTool.SendKeyboardShortcutIntent": {
        "cmd": "Bool",
        "ctrl": "Bool",
        "opt": "Bool",
        "shift": "Bool",
        "fn": "Bool",
        "keyOrKeyCode": "KeyOrKeycodeAppEnum(Enum) = \"character\"",
        "character": "String",
        "keyCode": "Integer",
        "app": "AppAppEntity(Object)",
        "bringAppToFront": "Bool",
        "switchBackAfterSending": "Bool"
    },
    "com.hegenberg.BetterTouchTool.ShowClipboardManagerIntent": {},
    "com.hegenberg.BetterTouchTool.ShowHUDIntent": {
        "backgroundColor": "String = \"30,30,30,180\"",
        "duration": "Float",
        "direction": "HudDirectionAppEnum(Enum)",
        "imageOrText": "HudTypeAppEnum(Enum) = \"ShowText\"",
        "title": "String",
        "subTitle": "String",
        "imageFile": "12(Object)",
        "inputTitle": "String"
    },
    "com.hegenberg.BetterTouchTool.ShowHideCursorIntent": {
        "action": "HideCursorActionAppEnum(Enum) = \"toggle\""
    },
    "com.hegenberg.BetterTouchTool.ShowMenubarInContextMenuIntent": {},
    "com.hegenberg.BetterTouchTool.SleepDisplayIntent": {},
    "com.hegenberg.BetterTouchTool.SwitchToLoginscreenIntent": {},
    "com.hegenberg.BetterTouchTool.ToggleCursorSizeIntent": {
        "cursorSize": "Float = \"350\""
    },
    "com.hegenberg.BetterTouchTool.TriggerContextMenuItemIntent": {
        "contextMenuTrigger": "String",
        "howToUse": "String = \"Using this you can trigger context-menu items or sub-items for the current mouse-cursor position in any application. To do this just enter the path to the item separated by ;\n\nFor example, if you want to trigger the \"Open Link in New Tab\" item that is available in Safari when right-clicking a link, just enter \"Open Link in New Tab\" (without the quotes!).\nIf you want to trigger the \"Share => Mail\" item in Finder you'd enter \"Share;Mail;\"\n\nYou can also trigger an item by it's position (e.g. if the title varies). For example: \"Share;(2)\" will trigger the second item in the Share menu in Safari. \"(1);(2)\" will select the first context-menu item and if it has a sub-menu it will trigger its second item. Just always put the position in parentheses.\n\nIf an item can have multiple names based on it's state (e.g. hide and show), or if you want to trigger a similar item in different applications where it may have slightly different names, you can use || to trigger either one of them. For example Reload||Reload Page; will work in Safari and Chrome\n\nAdditionally you can also use a wildcard * if a menu-item has variable parts.\""
    },
    "com.hegenberg.BetterTouchTool.TriggerMenubarItemIntent": {
        "menubarTrigger": "String",
        "howToUse": "String = \"How to use:\nEnter the path to the menubar item you want to click in the textfield above, separated by semicolons. For example: \"File;New;Window\" (without the quotes!) will trigger the menubar item named \"Window\"\n\nYou can also trigger a menu-item by it's position (e.g. if the title varies). For example: \"File;(2)\" will trigger the second item in the File menu. \"(2);(2)\" will trigger the second item in the File menu. Just always put the position in parentheses.\n\nIf you want to trigger an item from the Apple menu, use \"apple\". For example: \"apple;Dock;Turn Hiding On\".\n\nIf an item can have multiple names based on it's state (e.g. hide and show) you can use || to toggle one of them. For example Edit;Start Dictation||Cancel Dictation will either start or cancel dictation :-)\n\nAdditionally you can also use a wildcard * if a menu-item has variable parts.\""
    },
    "com.hegenberg.BetterTouchTool.TriggerNamedTriggerIntent": {
        "namedTriggerName": "String",
        "ThisIsReturnValue:Execute Named Trigger in BetterTouchTool": "String"
    },
    "com.hegenberg.BetterTouchTool.TypeOrPasteTextIntent": {
        "text": "String",
        "format": "PasteFormatAppEnum(Enum) = \"0\"",
        "insertBy": "InsertTextByAppEnum(Enum)",
        "defaultString": "Bool",
        "moveTextCursor": "Integer",
        "richtext": "Bool"
    },
    "com.hegenberg.BetterTouchTool.UploadToIMGURIntent": {
        "picture": "12(Object)",
        "ThisIsReturnValue:Upload To Imgur.com": "String"
    },
    "com.hegenberg.BetterTouchTool.ZoomWindowUnderCursorIntent": {},
    "fyi.lunar.Lunar.AdjustHardwareColorsIntent": {
        "screen": "Screen(Object)",
        "red": "Integer = \"50\"",
        "green": "Integer = \"50\"",
        "blue": "Integer = \"50\"",
        "delayBetween": "Bool = \"0\""
    },
    "fyi.lunar.Lunar.AdjustSoftwareColorsAdvancesIntent": {
        "screen": "Screen(Object)",
        "minRed": "Float = \"0\"",
        "minGreen": "Float = \"0\"",
        "minBlue": "Float = \"0\"",
        "maxRed": "Float = \"1\"",
        "maxGreen": "Float = \"1\"",
        "maxBlue": "Float = \"1\"",
        "redFactor": "Float = \"1\"",
        "greenFactor": "Float = \"1\"",
        "blueFactor": "Float = \"1\""
    },
    "fyi.lunar.Lunar.AdjustSoftwareColorsIntent": {
        "screen": "Screen(Object)",
        "red": "Float = \"0.5\"",
        "green": "Float = \"0.5\"",
        "blue": "Float = \"0.5\""
    },
    "fyi.lunar.Lunar.ApplyPresetIntent": {
        "preset": "String"
    },
    "fyi.lunar.Lunar.ChangeAdaptiveModeIntent": {
        "mode": "AdaptiveModeKeyForIntent(Enum)"
    },
    "fyi.lunar.Lunar.CleaningModeIntent": {
        "deactivateAutomatically": "Bool = \"1\"",
        "deactivateAfter": "Float = \"120\""
    },
    "fyi.lunar.Lunar.ConnectSidecarIntent": {
        "sidecar": "Sidecar(Object)"
    },
    "fyi.lunar.Lunar.ControlScreenValueBool": {
        "property": "DisplayProperty(Object)",
        "screen": "Screen(Object)",
        "state": "ScreenToggleState(Enum)",
        "skipMissingScreen": "Bool",
        "ThisIsReturnValue:Control a boolean Screen Value": "Bool"
    },
    "fyi.lunar.Lunar.ControlScreenValueFloatNumeric": {
        "property": "DisplayProperty(Object)",
        "screen": "Screen(Object)",
        "value": "Float",
        "skipMissingScreen": "Bool",
        "ThisIsReturnValue:Control a floating point Screen Value": "Float"
    },
    "fyi.lunar.Lunar.ControlScreenValueNumeric": {
        "property": "DisplayProperty(Object)",
        "screen": "Screen(Object)",
        "value": "Integer",
        "skipMissingScreen": "Bool",
        "ThisIsReturnValue:Control an integer Screen Value": "Integer"
    },
    "fyi.lunar.Lunar.DisconnectScreenIntent": {
        "screen": "Screen(Object)"
    },
    "fyi.lunar.Lunar.FixMonitorArrangementIntent": {
        "onlySameUUID": "Bool = \"1\"",
        "wait": "Bool = \"0\""
    },
    "fyi.lunar.Lunar.HorizontalMonitorLayoutIntent": {
        "screenLeft": "Screen(Object)",
        "screenRight": "Screen(Object)"
    },
    "fyi.lunar.Lunar.HorizontalMonitorThreeLayoutIntent": {
        "screenLeft": "Screen(Object)",
        "screenMiddle": "Screen(Object)",
        "screenRight": "Screen(Object)"
    },
    "fyi.lunar.Lunar.MakeMonitorMainIntent": {
        "screen": "Screen(Object)",
        "skipMissingScreen": "Bool"
    },
    "fyi.lunar.Lunar.MirrorSetIntent": {
        "skipMissingScreen": "Bool",
        "mirrorMaster": "Screen(Object)",
        "mirrors": "array(Screen(Object))"
    },
    "fyi.lunar.Lunar.NightModeIntent": {
        "state": "Bool = \"1\"",
        "toggle": "Bool = \"0\""
    },
    "fyi.lunar.Lunar.PowerOffIntent": {
        "screen": "Screen(Object)",
        "skipMissingScreen": "Bool"
    },
    "fyi.lunar.Lunar.PowerOffSoftwareIntent": {
        "skipMissingScreen": "Bool",
        "screen": "Screen(Object)",
        "visibleScreen": "Screen(Object)",
        "disableScreen": "Bool = \"1\""
    },
    "fyi.lunar.Lunar.PowerOnSoftwareIntent": {
        "skipMissingScreen": "Bool",
        "screen": "Screen(Object)"
    },
    "fyi.lunar.Lunar.ReadDDCIntent": {
        "screen": "Screen(Object)",
        "vcp": "Integer",
        "ThisIsReturnValue:DDC Read Value from Screen": "String"
    },
    "fyi.lunar.Lunar.ReadHardwareColorsIntent": {
        "skipMissingScreen": "Bool",
        "screen": "Screen(Object)",
        "ThisIsReturnValue:Read Color Gain Values (in hardware)": "ScreenColorGain(Object)"
    },
    "fyi.lunar.Lunar.ReadSoftwareColorsIntent": {
        "skipMissingScreen": "Bool",
        "screen": "Screen(Object)",
        "ThisIsReturnValue:Read Color Gamma Tables (in software)": "ScreenGammaTable(Object)"
    },
    "fyi.lunar.Lunar.ReconnectScreenIntent": {
        "screen": "Screen(Object)",
        "ThisIsReturnValue:Reconnect screen": "String"
    },
    "fyi.lunar.Lunar.ResetColorGainIntent": {
        "screen": "Screen(Object)"
    },
    "fyi.lunar.Lunar.ResetColorGammaIntent": {
        "screen": "Screen(Object)"
    },
    "fyi.lunar.Lunar.RotateScreenIntent": {
        "screen": "Screen(Object)",
        "rotation": "ScreenRotationDegrees(Enum)",
        "skipMissingScreen": "Bool",
        "ThisIsReturnValue:Rotate Screen": "Integer"
    },
    "fyi.lunar.Lunar.SetBrightnessContrastIntent": {
        "screen": "Screen(Object)",
        "value": "Float",
        "skipMissingScreen": "Bool",
        "ThisIsReturnValue:Set Brightness & Contrast": "Float"
    },
    "fyi.lunar.Lunar.SetBrightnessIntent": {
        "screen": "Screen(Object)",
        "value": "Float",
        "skipMissingScreen": "Bool",
        "ThisIsReturnValue:Set Brightness": "Float"
    },
    "fyi.lunar.Lunar.SetContrastIntent": {
        "screen": "Screen(Object)",
        "value": "Float",
        "skipMissingScreen": "Bool",
        "ThisIsReturnValue:Set Contrast": "Float"
    },
    "fyi.lunar.Lunar.SetInputIntent": {
        "screen": "Screen(Object)",
        "input": "Integer",
        "skipMissingScreen": "Bool",
        "ThisIsReturnValue:Change Video Input Source": "Integer"
    },
    "fyi.lunar.Lunar.SetPanelModeIntent": {
        "mode": "PanelMode(Object)"
    },
    "fyi.lunar.Lunar.SetPanelPresetIntent": {
        "unlockBrightnessControl": "Bool",
        "unlockAdaptiveBrightness": "Bool",
        "unlockNightShift": "Bool",
        "unlockTrueTone": "Bool",
        "minBrightness": "Integer = \"4\"",
        "maxBrightness": "Integer = \"500\"",
        "preset": "PanelPreset(Object)"
    },
    "fyi.lunar.Lunar.SetSubZeroDimmingIntent": {
        "screen": "Screen(Object)",
        "value": "Float",
        "skipMissingScreen": "Bool",
        "ThisIsReturnValue:Set Sub-zero Dimming": "Float"
    },
    "fyi.lunar.Lunar.SetVolumeIntent": {
        "screen": "Screen(Object)",
        "value": "Float",
        "skipMissingScreen": "Bool",
        "ThisIsReturnValue:Set Volume": "Float"
    },
    "fyi.lunar.Lunar.SetXDRBrightnessIntent": {
        "screen": "Screen(Object)",
        "value": "Float",
        "skipMissingScreen": "Bool",
        "ThisIsReturnValue:Set XDR Brightness": "Float"
    },
    "fyi.lunar.Lunar.SleepMacIntent": {},
    "fyi.lunar.Lunar.StopMirroringIntent": {
        "skipMissingScreen": "Bool",
        "mirrorMaster": "Screen(Object)"
    },
    "fyi.lunar.Lunar.SwapMonitorsIntent": {
        "screen1": "Screen(Object)",
        "screen2": "Screen(Object)",
        "swapOrientations": "Bool = \"1\""
    },
    "fyi.lunar.Lunar.ThreeAboveOneMonitorLayoutIntent": {
        "screenLeft": "Screen(Object)",
        "screenMiddle": "Screen(Object)",
        "screenRight": "Screen(Object)",
        "screenBottom": "Screen(Object)"
    },
    "fyi.lunar.Lunar.ToggleAudioMuteIntent": {
        "screen": "Screen(Object)",
        "state": "ScreenToggleState(Enum)",
        "skipMissingScreen": "Bool",
        "ThisIsReturnValue:Toggle Audio Mute": "Bool"
    },
    "fyi.lunar.Lunar.ToggleBlackOutIntent": {
        "screen": "Screen(Object)",
        "state": "ScreenToggleState(Enum)",
        "allowMirroring": "Bool = \"0\"",
        "skipMissingScreen": "Bool",
        "ThisIsReturnValue:Toggle Power (BlackOut)": "Bool"
    },
    "fyi.lunar.Lunar.ToggleFacelightIntent": {
        "screen": "Screen(Object)",
        "state": "ScreenToggleState(Enum)",
        "skipMissingScreen": "Bool",
        "ThisIsReturnValue:Toggle Facelight": "Bool"
    },
    "fyi.lunar.Lunar.ToggleGammaIntent": {
        "screen": "Screen(Object)",
        "state": "ScreenToggleState(Enum)"
    },
    "fyi.lunar.Lunar.ToggleHDRIntent": {
        "screen": "Screen(Object)",
        "state": "ScreenToggleState(Enum)",
        "skipMissingScreen": "Bool",
        "ThisIsReturnValue:Toggle HDR": "Bool"
    },
    "fyi.lunar.Lunar.ToggleScreenConnectionIntent": {
        "screen": "Screen(Object)",
        "ThisIsReturnValue:Toggle screen connection": "String"
    },
    "fyi.lunar.Lunar.ToggleSubZeroIntent": {
        "screen": "Screen(Object)",
        "state": "ScreenToggleState(Enum)",
        "skipMissingScreen": "Bool",
        "ThisIsReturnValue:Toggle Sub-zero Dimming": "Bool"
    },
    "fyi.lunar.Lunar.ToggleSystemAdaptiveBrightnessIntent": {
        "screen": "Screen(Object)",
        "state": "ScreenToggleState(Enum)",
        "skipMissingScreen": "Bool",
        "ThisIsReturnValue:Toggle System Adaptive Brightness": "Bool"
    },
    "fyi.lunar.Lunar.ToggleXDRIntent": {
        "screen": "Screen(Object)",
        "state": "ScreenToggleState(Enum)",
        "skipMissingScreen": "Bool",
        "ThisIsReturnValue:Toggle XDR Brightness": "Bool"
    },
    "fyi.lunar.Lunar.TwoAboveOneMonitorLayoutIntent": {
        "screenLeft": "Screen(Object)",
        "screenMiddle": "Screen(Object)",
        "screenRight": "Screen(Object)"
    },
    "fyi.lunar.Lunar.VerticalMonitorLayoutIntent": {
        "screenTop": "Screen(Object)",
        "screenBottom": "Screen(Object)"
    },
    "fyi.lunar.Lunar.WriteDDCIntent": {
        "screen": "Screen(Object)",
        "vcp": "Integer",
        "value": "Integer"
    },
    "com.flexibits.fantastical2.FKRUpcomingCalendarItemIntent": {
        "itemType": "IntentItemType(Enum) = \"unspecified\"",
        "ThisIsReturnValue:Upcoming Item": "IntentCalendarItem(Object)"
    },
    "com.flexibits.fantastical2.FKRShowScheduleIntent": {
        "day": "IntentScheduleDay(Enum)",
        "date": "String",
        "ThisIsReturnValue:Show Schedule": "array(IntentCalendarItem(Object))"
    },
    "com.flexibits.fantastical2.FKROverdueRemindersIntent": {
        "ThisIsReturnValue:Calendar Items": "IntentCalendarItem(Object)"
    },
    "com.flexibits.fantastical2.FKRShowCalendarIntent": {
        "calendar": "(Object)",
        "calendarName": "String",
        "date": "String",
        "ThisIsReturnValue:Calendar": "Object"
    },
    "com.flexibits.fantastical2.FKRShowListIntent": {
        "list": "(Object)",
        "listName": "String",
        "date": "String",
        "ThisIsReturnValue:List ": "Object"
    },
    "com.flexibits.fantastical2.FKRCreateFromClipboardIntent": {
        "ThisIsReturnValue:Calendar Item Title": "String"
    },
    "com.flexibits.fantastical2.FKRCreateFromInputIntent": {
        "input": "String",
        "notes": "String",
        "ThisIsReturnValue:Create From Input": "IntentCalendarItem(Object)"
    },
    "com.flexibits.fantastical2.FKROpenOnDateIntent": {
        "date": "String"
    },
    "com.flexibits.fantastical2.FKRChangeCalendarSetIntent": {
        "calendarSet": "CalendarSetEntity(Object)"
    },
    "com.flexibits.fantastical2.FKRDateWidgetConfigIntent": {
        "theme": "IntentWidgetTheme(Enum) = \"mirrorSystem\"",
        "showMonth": "Bool = True",
        "showWeather": "Bool"
    },
    "com.flexibits.fantastical2.FKRUpNextWidgetConfigIntent": {
        "theme": "IntentWidgetTheme(Enum) = \"mirrorSystem\"",
        "calendarSet": "IntentCalendarSet(Object)",
        "includeEvents": "Bool = True",
        "includeTasks": "Bool = True",
        "showWeather": "Bool = True",
        "todayOnly": "Bool"
    },
    "com.flexibits.fantastical2.FKREventListWidgetConfigIntent": {
        "theme": "IntentWidgetTheme(Enum) = \"mirrorSystem\"",
        "calendarSet": "IntentCalendarSet(Object)",
        "eventTypes": "IntentShowEventType(Enum) = \"all\"",
        "taskTypes": "IntentShowTaskType(Enum) = \"all\"",
        "showWeather": "Bool = True",
        "action": "IntentOptionalActionType(Enum) = \"addEvent\""
    },
    "com.flexibits.fantastical2.FKRDateCalendarWidgetConfigIntent": {
        "theme": "IntentWidgetTheme(Enum) = \"mirrorSystem\"",
        "showEvents": "Bool = True",
        "indicatorType": "IntentEventIndicatorType(Enum) = \"heatmap\"",
        "calendarSet": "IntentCalendarSet(Object)",
        "showWeather": "Bool = True"
    },
    "com.flexibits.fantastical2.FKRCalendarWidgetConfigIntent": {
        "theme": "IntentWidgetTheme(Enum) = \"mirrorSystem\"",
        "showEvents": "Bool = True",
        "indicatorType": "IntentEventIndicatorType(Enum) = \"heatmap\"",
        "calendarSet": "IntentCalendarSet(Object)"
    },
    "com.flexibits.fantastical2.FKREventListCalendarWidgetConfigIntent": {
        "theme": "IntentWidgetTheme(Enum) = \"mirrorSystem\"",
        "calendarSet": "IntentCalendarSet(Object)",
        "eventTypes": "IntentShowEventType(Enum) = \"all\"",
        "taskTypes": "IntentShowTaskType(Enum) = \"all\"",
        "showHeatmap": "Bool = True",
        "indicatorType": "IntentEventIndicatorType(Enum) = \"heatmap\"",
        "showWeather": "Bool = True",
        "action": "IntentOptionalActionType(Enum) = \"addEvent\""
    },
    "com.flexibits.fantastical2.FKREventListSmallWidgetConfigIntent": {
        "theme": "IntentWidgetTheme(Enum) = \"mirrorSystem\"",
        "calendarSet": "IntentCalendarSet(Object)",
        "eventTypes": "IntentShowEventType(Enum) = \"all\"",
        "taskTypes": "IntentShowTaskType(Enum) = \"all\"",
        "showWeather": "Bool = True"
    },
    "com.flexibits.fantastical2.FKRActionWidgetConfigIntent": {
        "theme": "IntentWidgetTheme(Enum) = \"mirrorSystem\"",
        "action": "IntentActionType(Enum) = \"addEvent\""
    },
    "com.flexibits.fantastical2.FKRGetAttendeesFromEventIntent": {
        "calendarItem": "IntentCalendarItem(Object)",
        "ThisIsReturnValue:Get Invitees from Event": "array(IntentAttendee(Object))"
    },
    "com.flexibits.fantastical2.FKRChangeCalendarViewIntent": {
        "view": "IntentCalendarView(Enum)"
    },
    "com.flexibits.fantastical2.FKRUpNextLockScreenWidgetConfigIntent": {
        "calendarSet": "IntentCalendarSet(Object)",
        "eventTypes": "IntentShowEventType(Enum) = \"timed\"",
        "taskTypes": "IntentShowTaskType(Enum) = \"timed\""
    },
    "com.flexibits.fantastical2.FKRActionLockScreenWidgetConfigIntent": {
        "action": "IntentActionType(Enum) = \"addEvent\""
    },
    "com.flexibits.fantastical2.FKRCalendarLockScreenWidgetConfigIntent": {},
    "com.flexibits.fantastical2.FBUpcomingCalendarItemIntent": {
        "itemType": "IntentItemType(Enum) = \"unspecified\"",
        "ThisIsReturnValue:Title": "String"
    },
    "com.flexibits.fantastical2.FBShowScheduleIntent": {
        "day": "IntentScheduleDay(Enum) = \"today\"",
        "date": "String",
        "ThisIsReturnValue:Calendar Item Title": "String"
    },
    "com.flexibits.fantastical2.FBOverdueRemindersIntent": {
        "ThisIsReturnValue:Calendar Items": "IntentCalendarItem(Object)"
    },
    "com.flexibits.fantastical2.FBShowCalendarIntent": {
        "calendar": "(Object)",
        "calendarName": "String",
        "date": "String",
        "ThisIsReturnValue:Calendar": "Object"
    },
    "com.flexibits.fantastical2.FBShowListIntent": {
        "list": "(Object)",
        "listName": "String",
        "date": "String",
        "ThisIsReturnValue:List ": "Object"
    },
    "com.flexibits.fantastical2.FBCreateFromClipboardIntent": {
        "ThisIsReturnValue:Calendar Item Title": "String"
    },
    "com.flexibits.fantastical2.FBCreateFromInputIntent": {
        "input": "String",
        "ThisIsReturnValue:Calendar Item Title": "String"
    },
    "com.flexibits.fantastical2.FBOpenOnDateIntent": {
        "date": "String"
    },
    "com.flexibits.fantastical2.FBChangeCalendarSetIntent": {
        "calendarSetName": "String"
    },
    "com.flexibits.fantastical2.FBDateWidgetConfigIntent": {
        "theme": "IntentWidgetTheme(Enum) = \"mirrorSystem\"",
        "showMonth": "Bool = True",
        "showWeather": "Bool"
    },
    "com.flexibits.fantastical2.FBUpNextWidgetConfigIntent": {
        "theme": "IntentWidgetTheme(Enum) = \"mirrorSystem\"",
        "calendarSet": "IntentCalendarSet(Object)",
        "includeEvents": "Bool = True",
        "includeTasks": "Bool = True",
        "showWeather": "Bool = True",
        "todayOnly": "Bool"
    },
    "com.flexibits.fantastical2.FBEventListWidgetConfigIntent": {
        "theme": "IntentWidgetTheme(Enum) = \"mirrorSystem\"",
        "calendarSet": "IntentCalendarSet(Object)",
        "eventTypes": "IntentShowEventType(Enum) = \"all\"",
        "taskTypes": "IntentShowTaskType(Enum) = \"all\"",
        "showWeather": "Bool = True",
        "action": "IntentOptionalActionType(Enum) = \"addEvent\""
    },
    "com.flexibits.fantastical2.FBDateCalendarWidgetConfigIntent": {
        "theme": "IntentWidgetTheme(Enum) = \"mirrorSystem\"",
        "showEvents": "Bool = True",
        "indicatorType": "IntentEventIndicatorType(Enum) = \"heatmap\"",
        "calendarSet": "IntentCalendarSet(Object)",
        "showWeather": "Bool = True"
    },
    "com.flexibits.fantastical2.FBCalendarWidgetConfigIntent": {
        "theme": "IntentWidgetTheme(Enum) = \"mirrorSystem\"",
        "showEvents": "Bool = True",
        "indicatorType": "IntentEventIndicatorType(Enum) = \"heatmap\"",
        "calendarSet": "IntentCalendarSet(Object)"
    },
    "com.flexibits.fantastical2.FBEventListCalendarWidgetConfigIntent": {
        "theme": "IntentWidgetTheme(Enum) = \"mirrorSystem\"",
        "calendarSet": "IntentCalendarSet(Object)",
        "eventTypes": "IntentShowEventType(Enum) = \"all\"",
        "taskTypes": "IntentShowTaskType(Enum) = \"all\"",
        "showHeatmap": "Bool = True",
        "indicatorType": "IntentEventIndicatorType(Enum) = \"heatmap\"",
        "showWeather": "Bool = True",
        "action": "IntentOptionalActionType(Enum) = \"addEvent\""
    },
    "com.flexibits.fantastical2.FBEventListSmallWidgetConfigIntent": {
        "theme": "IntentWidgetTheme(Enum) = \"mirrorSystem\"",
        "calendarSet": "IntentCalendarSet(Object)",
        "eventTypes": "IntentShowEventType(Enum) = \"all\"",
        "taskTypes": "IntentShowTaskType(Enum) = \"all\"",
        "showWeather": "Bool = True"
    },
    "com.flexibits.fantastical2.FBActionWidgetConfigIntent": {
        "theme": "IntentWidgetTheme(Enum) = \"mirrorSystem\"",
        "action": "IntentActionType(Enum) = \"addEvent\""
    },
    "com.flexibits.fantastical2.FBGetAttendeesFromEventIntent": {
        "calendarItem": "IntentCalendarItem(Object)",
        "ThisIsReturnValue:Invitees": "IntentAttendee(Object)"
    },
    "com.flexibits.fantastical2.FBChangeCalendarViewIntent": {
        "view": "IntentCalendarView(Enum)"
    },
    "com.flexibits.fantastical2.FBUpNextLockScreenWidgetConfigIntent": {
        "calendarSet": "IntentCalendarSet(Object)",
        "eventTypes": "IntentShowEventType(Enum) = \"timed\"",
        "taskTypes": "IntentShowTaskType(Enum) = \"timed\""
    },
    "com.flexibits.fantastical2.FBActionLockScreenWidgetConfigIntent": {
        "action": "IntentActionType(Enum) = \"addEvent\""
    },
    "com.flexibits.fantastical2.FBCalendarLockScreenWidgetConfigIntent": {},
    "com.flexibits.fantastical2.FantasticalFocusFilterIntent": {
        "selectedCalendarSets": "array(CalendarSetEntity(Object))"
    }
}