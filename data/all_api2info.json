{
    "is.workflow.actions.previewdocument": "is.workflow.actions.previewdocument(WFInput: WFVariablePickerParameter(Object), WFQuickLookActionFullScreen: Bool)\nParameters:\n    WFInput:  Input.\n    WFQuickLookActionFullScreen:  Full Screen.\nDescription:\n    Quick Look: Displays a preview of the input using the system Quick Look.\nParameterSummary: Show ${WFInput} in Quick Look\n",
    "is.workflow.actions.resizewindow": "is.workflow.actions.resizewindow(WFConfiguration: Enum = \"Fit Screen\", WFWidth: Integer, WFHeight: Integer, WFWindow: WFVariablePickerParameter(Object), WFBringToFront: Bool = True)\nParameters:\n    WFConfiguration:  Configuration. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Fit Screen\", \"Top Half\", \"Bottom Half\", \"Left Half\", \"Right Half\", \"Top Left Quarter\", \"Top Right Quarter\", \"Bottom Left Quarter\", \"Bottom Right Quarter\", \"Dimensions\".\n    WFWidth:  Width. This value depends on the value of WFConfiguration. This parameter is only valid when the value of \"WFConfiguration\" is \"Dimensions\".\n    WFHeight:  Height. This value depends on the value of WFConfiguration. This parameter is only valid when the value of \"WFConfiguration\" is \"Dimensions\".\n    WFWindow:  Window. The window(s) to resize.\n    WFBringToFront:  Bring to Front.\nDescription:\n    Resize Window: Resizes one or more windows to the specified width and height.\nParameterSummary: (WFBringToFront,WFWindow,WFConfiguration,WFWidth,WFHeight) Resize ${WFWindow} to ${WFConfiguration} ${WFWidth} × ${WFHeight}; (WFBringToFront,WFWindow,WFConfiguration) Resize ${WFWindow} to ${WFConfiguration} \n",
    "is.workflow.actions.format.date": "is.workflow.actions.format.date(WFDateFormatStyle: Enum = \"Short\", WFRelativeDateFormatStyle: Enum = \"Medium\", WFTimeFormatStyle: Enum = \"Short\", WFISO8601IncludeTime: Bool, WFDateFormat: String, WFDate: String, WFLocale: WFLocalePickerParameter(Object)) -> Formatted Date: NSString(Object)\nParameters:\n    WFDateFormatStyle:  Date Format. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"None\", \"Short\", \"Medium\", \"Long\", \"Relative\", \"RFC 2822\", \"ISO 8601\", \"Custom\". This value depends on the value of WFTimeFormatStyle. This parameter is only valid when the value of \"WFTimeFormatStyle\" is \"None\", \"Short\", \"Medium\", \"Long\".\n    WFRelativeDateFormatStyle:  Alternate Format. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Short\", \"Medium\", \"Long\". This value depends on the value of WFDateFormatStyle. This parameter is only valid when the value of \"WFDateFormatStyle\" is \"Relative\".\n    WFTimeFormatStyle:  Time Format. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"None\", \"Short\", \"Medium\", \"Long\", \"Relative\". This value depends on the value of WFDateFormatStyle. This parameter is only valid when the value of \"WFDateFormatStyle\" is \"None\", \"Short\", \"Medium\", \"Long\", \"Relative\".\n    WFISO8601IncludeTime:  Include ISO 8601 Time. This value depends on the value of WFDateFormatStyle. This parameter is only valid when the value of \"WFDateFormatStyle\" is \"ISO 8601\".\n    WFDateFormat:  Format String. This value depends on the value of WFDateFormatStyle. This parameter is only valid when the value of \"WFDateFormatStyle\" is \"Custom\".\n    WFDate:  Date.\n    WFLocale:  Locale. This value depends on the value of WFDateFormatStyle. This parameter is only valid when the value of \"WFDateFormatStyle\" is \"RFC 2822\", \"ISO 8601\".\nReturn Value:\n    Formatted Date: \nDescription:\n    Format Date: Formats a date and time into text.. Custom format strings use the format patterns from Unicode Technical Standard #35 (unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns).\nParameterSummary: Format ${WFDate}\n",
    "is.workflow.actions.list": "is.workflow.actions.list(WFItems: WFContentArrayParameter(Object) = ['One', 'Two']) -> List: WFContentItem(Object)\nParameters:\n    WFItems:  Items.\nReturn Value:\n    List: \nDescription:\n    List: Allows you to specify a list of items to be passed to the next action.. If you specify a variable, the contents of that variable will be included in the list.\nParameterSummary: (WFBringToFront,WFWindow,WFConfiguration) Resize ${WFWindow} to ${WFConfiguration} \n",
    "com.apple.TVRemoteUIService.LaunchApplicationIntent": "com.apple.TVRemoteUIService.LaunchApplicationIntent(application: WFMediaRoutePickerParameter(Object), device: WFMediaRoutePickerParameter(Object), ShowWhenRun: Bool = True)\nParameters:\n    application: \n    device: \n    ShowWhenRun: \nDescription:\n    Open App on Apple TV: Allows you to specify a list of items to be passed to the next action.. If you specify a variable, the contents of that variable will be included in the list.\nParameterSummary: Open ${application} on ${device}\n",
    "is.workflow.actions.filter.photos": "is.workflow.actions.filter.photos(WFContentItemFilter: WFContentPredicateOperatorParameter, WFContentItemInputParameter: WFVariablePickerParameter(Object), WFContentItemSortProperty: WFDynamicEnumerationParameter(Object), WFContentItemSortEnabled: Bool, WFContentItemSortOrder: WFDynamicEnumerationParameter(Object), WFContentItemLimitEnabled: Bool = True, WFContentItemLimitNumber: Integer = 1)\nParameters:\n    WFContentItemFilter: \n    WFContentItemInputParameter: \n    WFContentItemSortProperty: \n    WFContentItemSortEnabled: \n    WFContentItemSortOrder: \n    WFContentItemLimitEnabled: \n    WFContentItemLimitNumber: \nDescription:\n    Find Photos: Allows you to specify a list of items to be passed to the next action.. If you specify a variable, the contents of that variable will be included in the list.\nParameterSummary: Find Photos that meed the need of the user\n",
    "is.workflow.actions.properties.trello": "is.workflow.actions.properties.trello(WFContentItemPropertyName: Enum, WFInput: WFVariablePickerParameter(Object))\nParameters:\n    WFContentItemPropertyName:  The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Description\", \"URL\", \"Card Due Date\", \"Card Attachments\", \"Name\".\n    WFInput: \nDescription:\n    Get Details of Trello Item: Allows you to specify a list of items to be passed to the next action.. If you specify a variable, the contents of that variable will be included in the list.\nParameterSummary: Get ${WFContentItemPropertyName} from ${WFInput}\n",
    "is.workflow.actions.getlatestlivephotos": "is.workflow.actions.getlatestlivephotos(WFGetLatestPhotoCount: Integer = 1) -> Latest Live Photos: PHAsset(Object)\nParameters:\n    WFGetLatestPhotoCount: \nReturn Value:\n    Latest Live Photos: \nDescription:\n    Get Latest Live Photos: Gets the most recent Live Photos from the photo library.\nParameterSummary: Get the latest ${WFGetLatestPhotoCount}\n",
    "is.workflow.actions.flashlight": "is.workflow.actions.flashlight(operation: Enum = \"set\", state: Bool = True, WFFlashlightLevel: Integer = 25)\nParameters:\n    operation:  The value of this Enum must be one of the following values (The text in parentheses describes the value): \"set\", \"toggle\".\n    state: \n    WFFlashlightLevel: \nDescription:\n    Set Flashlight: Gets the most recent Live Photos from the photo library.\nParameterSummary: (operation,state) ${operation} flashlight ${state}; (operation,WFFlashlightLevel) ${operation} flashlight; (operation,state,WFFlashlightLevel) ${operation} flashlight ${state}\n",
    "is.workflow.actions.detect.number": "is.workflow.actions.detect.number(WFInput: Integer) -> Numbers: WFNumberContentItem(Object)\nParameters:\n    WFInput:  Input.\nReturn Value:\n    Numbers: \nDescription:\n    Get Numbers from Input: Returns numbers from the previous action's output.\nParameterSummary: Get numbers from ${WFInput}\n",
    "is.workflow.actions.statistics": "is.workflow.actions.statistics(WFStatisticsOperation: Enum = \"Average\", Input: WFVariablePickerParameter(Object)) -> Statistics: NSNumber(Object)\nParameters:\n    WFStatisticsOperation:  Operation. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Average\", \"Minimum\", \"Maximum\", \"Sum\", \"Median\", \"Mode\", \"Range\", \"Standard Deviation\".\n    Input:  Input.\nReturn Value:\n    Statistics: \nDescription:\n    Calculate Statistics: Calculates statistics on the numbers that are provided as input.\nParameterSummary: Calculate the ${WFStatisticsOperation} of ${Input}\n",
    "is.workflow.actions.location": "is.workflow.actions.location(WFLocation: WFLocationParameter(Object)) -> Location: WFLocationContentItem(Object)\nParameters:\n    WFLocation:  Location.\nReturn Value:\n    Location: \nDescription:\n    Location: Passes the specified location to the next action.\nParameterSummary: ${WFLocation}\n",
    "is.workflow.actions.calculateexpression": "is.workflow.actions.calculateexpression(Input: String) -> Calculation Result: NSDecimalNumber(Object)\nParameters:\n    Input:  Input. 7 + 7.\nReturn Value:\n    Calculation Result: \nDescription:\n    Calculate Expression: Evaluates the mathematical expression in the given input string and outputs the result as a number.\nParameterSummary: Calculate expression ${Input}\n",
    "is.workflow.actions.count": "is.workflow.actions.count(WFCountType: Enum = \"Items\", Input: WFVariablePickerParameter(Object)) -> Count: NSDecimalNumber(Object)\nParameters:\n    WFCountType:  Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Items\", \"Characters\", \"Words\", \"Sentences\", \"Lines\".\n    Input:  Input.\nReturn Value:\n    Count: \nDescription:\n    Count: Counts the number of items, characters, words, sentences, or lines passed as input.. This is just like the Count in Sesame Street, but instead of a vampire, it's a Shortcuts action.\nParameterSummary: Count ${WFCountType} in ${Input}\n",
    "is.workflow.actions.getupcomingreminders": "is.workflow.actions.getupcomingreminders(WFGetUpcomingItemCalendar: WFRemindersListPickerParameter(Object), WFGetUpcomingItemCount: Integer = 1) -> Upcoming Reminders: REMReminder(Object)\nParameters:\n    WFGetUpcomingItemCalendar:  List.\n    WFGetUpcomingItemCount: \nReturn Value:\n    Upcoming Reminders: \nDescription:\n    Get Upcoming Reminders: Gets upcoming reminders, ordered from nearest to farthest away due date.\nParameterSummary: Get ${WFGetUpcomingItemCount} from ${WFGetUpcomingItemCalendar}\n",
    "is.workflow.actions.properties.contacts": "is.workflow.actions.properties.contacts(WFContentItemPropertyName: Enum, WFInput: WFVariablePickerParameter(Object))\nParameters:\n    WFContentItemPropertyName:  The value of this Enum must be one of the following values (The text in parentheses describes the value): \"First Name\", \"Middle Name\", \"Last Name\", \"Phone Numbers\", \"Email Addresses\", \"Street Addresses\", \"URLs\", \"Birthday\", \"Contact Photo\", \"Prefix\", \"Suffix\", \"Nickname\", \"Phonetic First Name\", \"Phonetic Middle Name\", \"Phonetic Last Name\", \"Company\", \"Job Title\", \"Department\", \"Notes\", \"File Size\", \"File Extension\", \"Creation Date\", \"File Path\", \"Last Modified Date\", \"Name\".\n    WFInput: \nDescription:\n    Get Details of Contacts: Gets upcoming reminders, ordered from nearest to farthest away due date.\nParameterSummary: Get ${WFContentItemPropertyName} from ${WFInput}\n",
    "is.workflow.actions.wordpress.post": "is.workflow.actions.wordpress.post(WFAccount: WFAccountPickerParameter(Object), Blog: WFDynamicEnumerationParameter(Object), Title: String, Type: WFDynamicEnumerationParameter(Object), Format: WFDynamicEnumerationParameter(Object), Status: WFDynamicEnumerationParameter(Object), Categories: WFDynamicTagFieldParameter(Object), Tags: WFDynamicTagFieldParameter(Object), Advanced: Bool, AllowComments: Bool, Slug: String, Excerpt: String, Date: String, Template: WFDynamicEnumerationParameter(Object), ThumbnailImage: WFVariablePickerParameter(Object), ShowCustomFields: Bool, CustomFields: WFDictionaryParameter(Object), WFInput: WFVariablePickerParameter(Object)) -> WordPress Post URL: NSURL(Object)\nParameters:\n    WFAccount:  Account.\n    Blog:  Blog.\n    Title:  Title.\n    Type:  Type.\n    Format:  Format.\n    Status:  Status.\n    Categories:  Categories. Finance, News.\n    Tags:  Tags. stock market, trends.\n    Advanced:  Advanced.\n    AllowComments:  Allow Comments. This value depends on the value of Advanced. This parameter is only valid when the value of \"Advanced\" is True.\n    Slug:  Slug. quarterly-results. This value depends on the value of Advanced. This parameter is only valid when the value of \"Advanced\" is True.\n    Excerpt:  Excerpt. An overall great quarter. This value depends on the value of Advanced. This parameter is only valid when the value of \"Advanced\" is True.\n    Date:  Publish Date. optional. This value depends on the value of Advanced. This parameter is only valid when the value of \"Advanced\" is True.\n    Template:  Template. This value depends on the value of Advanced. This parameter is only valid when the value of \"Advanced\" is True.\n    ThumbnailImage:  Featured Image. Choose Variable. This value depends on the value of Advanced. This parameter is only valid when the value of \"Advanced\" is True.\n    ShowCustomFields:  Custom Fields. This value depends on the value of Advanced. This parameter is only valid when the value of \"Advanced\" is True.\n    CustomFields:  Custom Fields. This value depends on the value of Advanced. This parameter is only valid when the value of \"Advanced\" is True. This value depends on the value of ShowCustomFields. This parameter is only valid when the value of \"ShowCustomFields\" is True.\n    WFInput:  Content.\nReturn Value:\n    WordPress Post URL: The URL of the new blog post\nDescription:\n    Post to WordPress: Posts the input to a WordPress blog as a new post or page.\nParameterSummary: Post ${WFInput} as ${Title}\n",
    "is.workflow.actions.ride.requestride": "is.workflow.actions.ride.requestride(IntentAppDefinition: WFIntentAppPickerParameter(Object), PickupLocation: WFLocationParameter(Object), DropOffLocation: WFLocationParameter(Object), RideOption: WFRideOptionParameter(Object), PaymentMethod: WFPaymentMethodParameter(Object), PartySize: Integer = 1) -> Request Ride: INRideStatus(Object)\nParameters:\n    IntentAppDefinition:  App.\n    PickupLocation:  Pickup Location.\n    DropOffLocation:  Drop Off Location.\n    RideOption:  Ride Type.\n    PaymentMethod:  Payment Method.\n    PartySize:  Party Size.\nReturn Value:\n    Request Ride: \nDescription:\n    Request Ride: Requests a ride from the specified pickup location to a specified drop off location.\nParameterSummary: Request ride from ${PickupLocation} to ${DropOffLocation} with ${IntentAppDefinition}\n",
    "is.workflow.actions.print": "is.workflow.actions.print(WFInput: WFVariablePickerParameter(Object))\nParameters:\n    WFInput:  Input.\nDescription:\n    Print: Prints the input using AirPrint.\nParameterSummary: Print ${WFInput}\n",
    "is.workflow.actions.filter.reminders": "is.workflow.actions.filter.reminders(WFContentItemFilter: WFContentPredicateOperatorParameter, WFContentItemInputParameter: WFVariablePickerParameter(Object), WFContentItemSortProperty: WFDynamicEnumerationParameter(Object), WFContentItemSortOrder: WFDynamicEnumerationParameter(Object), WFContentItemLimitEnabled: Bool = True, WFContentItemLimitNumber: Integer = 1)\nParameters:\n    WFContentItemFilter: \n    WFContentItemInputParameter: \n    WFContentItemSortProperty: \n    WFContentItemSortOrder: \n    WFContentItemLimitEnabled: \n    WFContentItemLimitNumber: \nDescription:\n    Find Reminders: Prints the input using AirPrint.\nParameterSummary: Find Reminders that meed the need of the user\n",
    "is.workflow.actions.choosefrommenu": "is.workflow.actions.choosefrommenu(WFMenuPrompt: String, WFMenuItems: WFChooseFromMenuArrayParameter = ['One', 'Two'])\nParameters:\n    WFMenuPrompt:  Prompt. The instruction provided when the menu is presented..\n    WFMenuItems:  Items.\nDescription:\n    Choose from Menu: Presents a menu and runs different actions based on which menu item was chosen.\nParameterSummary: Choose from menu with ${WFMenuPrompt}\n",
    "is.workflow.actions.makezip": "is.workflow.actions.makezip(WFZIPName: String, WFArchiveFormat: WFArchiveFormatParameter(Object), WFInput: WFVariablePickerParameter(Object)) -> Archive: WFGenericFileContentItem(Object)\nParameters:\n    WFZIPName:  Archive Name. optional.\n    WFArchiveFormat:  Format.\n    WFInput:  Input.\nReturn Value:\n    Archive: Archive\nDescription:\n    Make Archive: Makes an archive out of the files passed as input. Supports creating zip, tar.gz, tar.bz2, tar.xz, tar, gzip, cpio, or iso archives.\nParameterSummary: Make ${WFArchiveFormat} archive from ${WFInput}\n",
    "is.workflow.actions.createplaylist": "is.workflow.actions.createplaylist(WFPlaylistName: String, WFPlaylistAuthor: String, WFPlaylistDescription: String, WFPlaylistItems: WFVariablePickerParameter(Object)) -> New Playlist: MPMediaItem(Object)\nParameters:\n    WFPlaylistName:  Playlist Name.\n    WFPlaylistAuthor:  Author. Shortcuts.\n    WFPlaylistDescription:  Description. All of my favorites.\n    WFPlaylistItems:  Music. Items in your music library or items from the Find iTunes Store Items action..\nReturn Value:\n    New Playlist: \nDescription:\n    Create Playlist: Creates a new playlist in the Music app, adding any items passed as input to the new playlist.\nParameterSummary: Create playlist ${WFPlaylistName} with ${WFPlaylistItems}\n",
    "is.workflow.actions.documentpicker.open": "is.workflow.actions.documentpicker.open(WFFileErrorIfNotFound: Bool = True, WFGetFolderContents: Bool, WFFile: WFFilePickerParameter(Object), WFGetFilePath: String) -> File: (public.data(Object) or public.folder(Object))\nParameters:\n    WFFileErrorIfNotFound:  Error If Not Found.\n    WFGetFolderContents:  If Folder, Fetch Contents.\n    WFFile:  Folder.\n    WFGetFilePath:  Path. example.txt. The relative path to retrieve, such as “folder/file.txt”.\nReturn Value:\n    File: \nDescription:\n    Get File from Folder: Gets a file or folder by a relative path, starting at a folder you choose.\nParameterSummary: Get file from ${WFFile} at path ${WFGetFilePath}\n",
    "is.workflow.actions.playpodcast": "is.workflow.actions.playpodcast(WFPodcastShow: WFPodcastPickerParameter(Object))\nParameters:\n    WFPodcastShow:  Podcast. The podcast to be played.\nDescription:\n    Play Podcast: Plays a podcast using the Podcasts app.\nParameterSummary: Play ${WFPodcastShow}\n",
    "com.apple.TVRemoteUIService.SleepAppleTVIntent": "com.apple.TVRemoteUIService.SleepAppleTVIntent(device: WFMediaRoutePickerParameter(Object))\nParameters:\n    device: \nDescription:\n    Sleep Apple TV: Plays a podcast using the Podcasts app.\nParameterSummary: Sleep ${device}\n",
    "is.workflow.actions.getparentdirectory": "is.workflow.actions.getparentdirectory(WFInput: WFFilePickerParameter(Object)) -> Get Parent Directory: public.folder(Object)\nParameters:\n    WFInput:  Files.\nReturn Value:\n    Get Parent Directory: \nDescription:\n    Get Parent Directory: Gets the common parent directory of the files passed in.\nParameterSummary: Get parent directory of ${WFInput}\n",
    "is.workflow.actions.displaysleep": "is.workflow.actions.displaysleep()\nDescription:\n    Put Display to Sleep: Puts the display(s) of this Mac to sleep.\nParameterSummary: Put the display to sleep\n",
    "com.apple.TVRemoteUIService.PauseContentIntent": "com.apple.TVRemoteUIService.PauseContentIntent(mediaCommand: Enum = \"Play/Pause\", device: WFMediaRoutePickerParameter(Object))\nParameters:\n    mediaCommand:  The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Play/Pause\", \"Pause\", \"Play\".\n    device: \nDescription:\n    Play/Pause Apple TV: Puts the display(s) of this Mac to sleep.\nParameterSummary: ${mediaCommand} ${device}\n",
    "is.workflow.actions.clearupnext": "is.workflow.actions.clearupnext()\nDescription:\n    Clear Playing Next: Clears all the music in your Playing Next queue.\nParameterSummary: Clear Playing Next\n",
    "com.apple.mobiletimer-framework.MobileTimerIntents.MTCreateAlarmIntent": "com.apple.mobiletimer-framework.MobileTimerIntents.MTCreateAlarmIntent()\nDescription:\n    MTCreateAlarmIntent: Clears all the music in your Playing Next queue.\nParameterSummary: (operation,state,WFFlashlightLevel) ${operation} flashlight ${state}\n",
    "is.workflow.actions.sendemail": "is.workflow.actions.sendemail(WFSendEmailActionShowComposeSheet: Bool = True, WFEmailAccountActionSelectedAccount: WFMailSenderPickerParameter(Object), WFSendEmailActionFrom: String, WFSendEmailActionToRecipients: WFEmailAddressFieldParameter(Object), WFSendEmailActionCcRecipients: WFEmailAddressFieldParameter(Object), WFSendEmailActionBccRecipients: WFEmailAddressFieldParameter(Object), WFSendEmailActionSubject: String, WFSendEmailActionInputAttachments: String, WFSendEmailActionSaveAsDraft: Bool)\nParameters:\n    WFSendEmailActionShowComposeSheet:  Show Compose Sheet.\n    WFEmailAccountActionSelectedAccount:  From. This value depends on the value of WFSendEmailActionShowComposeSheet. This parameter is only valid when the value of \"WFSendEmailActionShowComposeSheet\" is False.\n    WFSendEmailActionFrom:  From. optional. The email address to send from. This must be an email address that is set up in the Mail app.. This value depends on the value of WFSendEmailActionShowComposeSheet. This parameter is only valid when the value of \"WFSendEmailActionShowComposeSheet\" is True.\n    WFSendEmailActionToRecipients:  To. Recipients.\n    WFSendEmailActionCcRecipients:  Cc. Email addresses.\n    WFSendEmailActionBccRecipients:  Bcc. Email addresses.\n    WFSendEmailActionSubject:  Subject.\n    WFSendEmailActionInputAttachments:  Message.\n    WFSendEmailActionSaveAsDraft:  Save as Draft. This value depends on the value of WFSendEmailActionShowComposeSheet. This parameter is only valid when the value of \"WFSendEmailActionShowComposeSheet\" is False.\nDescription:\n    Send Email: Presents an email composer. Pass text into the action to set the email body. Other types of input are added as attachments.\nParameterSummary: Send ${WFSendEmailActionInputAttachments} to ${WFSendEmailActionToRecipients} as ${WFSendEmailActionSubject}\n",
    "is.workflow.actions.showinstore": "is.workflow.actions.showinstore(WFProduct: WFVariablePickerParameter(Object))\nParameters:\n    WFProduct:  Product.\nDescription:\n    Show in iTunes Store: Shows the iTunes products or App Store apps passed as input in a store sheet. This is useful with the Find iTunes Store Items and Find App Store Apps actions.\nParameterSummary: Show ${WFProduct} in iTunes Store\n",
    "is.workflow.actions.pocket.add": "is.workflow.actions.pocket.add(WFPocketTags: String, WFInputURL: String)\nParameters:\n    WFPocketTags:  Tags. example, tags. A comma-separated list of tags to apply to the items added to Pocket..\n    WFInputURL:  URL.\nDescription:\n    Add to Pocket: Adds the input to Pocket.\nParameterSummary: Add ${WFInputURL}\n",
    "com.apple.TVRemoteUIService.ReduceLoudSoundsIntent": "com.apple.TVRemoteUIService.ReduceLoudSoundsIntent(toggle: Bool, device: WFMediaRoutePickerParameter(Object))\nParameters:\n    toggle: \n    device: \nDescription:\n    Set Reduce Loud Sounds: Adds the input to Pocket.\nParameterSummary: Set Reduce Loud Sounds ${WFContentItemPropertyName} on ${device}\n",
    "is.workflow.actions.playmusic": "is.workflow.actions.playmusic(WFMediaItems: WFMediaPickerParameter(Object), WFPlayMusicActionShuffle: Enum, WFPlayMusicActionRepeat: Enum)\nParameters:\n    WFMediaItems:  Music. Selects music to start playing.. The music to be played.\n    WFPlayMusicActionShuffle:  Shuffle. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Off\", \"Songs\".\n    WFPlayMusicActionRepeat:  Repeat. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"None\", \"One\", \"All\".\nDescription:\n    Play Music: Plays music using the Music app.\nParameterSummary: Play ${WFMediaItems}\n",
    "is.workflow.actions.evernote.append": "is.workflow.actions.evernote.append(WFInput: WFVariablePickerParameter(Object), WFEvernoteNotesTitleSearch: String, WFEvernoteWriteMode: Enum = \"Append\", WFEvernoteNotesNotebookName: WFEvernoteNotebookPickerParameter(Object)) -> Note: ENNoteRef(Object)\nParameters:\n    WFInput:  Content. The content to add to your note.\n    WFEvernoteNotesTitleSearch:  Note Title. The title (or part of the title) of the note to append to.\n    WFEvernoteWriteMode:  Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Append\", \"Prepend\".\n    WFEvernoteNotesNotebookName:  In Notebook. The notebook in which the note is located (optional).\nReturn Value:\n    Note: \nDescription:\n    Append to Evernote: Finds a note using the specified criteria and appends the input to the note.\nParameterSummary: ${WFEvernoteWriteMode} ${WFInput} to the note ${WFEvernoteNotesTitleSearch}\n",
    "is.workflow.actions.lowpowermode.set": "is.workflow.actions.lowpowermode.set(operation: Enum = \"set\", OnValue: Bool = True)\nParameters:\n    operation:  The value of this Enum must be one of the following values (The text in parentheses describes the value): \"set\", \"toggle\".\n    OnValue: \nDescription:\n    Set Low Power Mode: Finds a note using the specified criteria and appends the input to the note.\nParameterSummary: (operation,OnValue) ${operation} lowpower mode ${OnValue}; (operation) ${operation} lowpower mode\n",
    "is.workflow.actions.trello.add.card": "is.workflow.actions.trello.add.card(WFTrelloName: String, WFTrelloBoard: WFTrelloBoardPickerParameter(Object), WFTrelloList: WFTrelloListPickerParameter(Object), WFTrelloDueDate: String, WFTrelloCardPosition: Enum = \"Top\", WFTrelloAttachments: WFVariablePickerParameter(Object), WFTrelloDescription: String) -> Trello Card: WFTrelloCard(Object)\nParameters:\n    WFTrelloName:  Item.\n    WFTrelloBoard:  Board.\n    WFTrelloList:  List.\n    WFTrelloDueDate:  Due. Tomorrow at 1pm.\n    WFTrelloCardPosition:  Position. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Top\", \"Bottom\".\n    WFTrelloAttachments:  Attachments. Choose Variable. A list of items to be attached to the new card as files..\n    WFTrelloDescription:  Description.\nReturn Value:\n    Trello Card: \nDescription:\n    Add Trello Card: Creates a new card on the specified list and board in your Trello account.\nParameterSummary: Add ${WFTrelloName} to the ${WFTrelloCardPosition} of ${WFTrelloList} in ${WFTrelloBoard}\n",
    "is.workflow.actions.extracttextfromimage": "is.workflow.actions.extracttextfromimage(WFImage: WFVariablePickerParameter(Object)) -> Text from Image: WFStringContentItem(Object)\nParameters:\n    WFImage:  Image.\nReturn Value:\n    Text from Image: List of text\nDescription:\n    Extract Text from Image: Uses OCR to extract text from an image.\nParameterSummary: Extract text from ${WFImage}\n",
    "is.workflow.actions.listeningmode.set": "is.workflow.actions.listeningmode.set(WFRoute: WFMediaRoutePickerParameter(Object), WFListeningMode: WFListeningModePickerParameter(Object))\nParameters:\n    WFRoute:  Route.\n    WFListeningMode:  Noise Control mode.\nDescription:\n    Set Noise Control Mode: Uses OCR to extract text from an image.\nParameterSummary: (WFRoute) Set Noise Control mode on ${WFRoute}; (WFRoute,WFListeningMode) Set Noise Control mode on ${WFRoute} to ${WFListeningMode}\n",
    "is.workflow.actions.detect.text": "is.workflow.actions.detect.text(WFInput: WFVariablePickerParameter(Object)) -> Text: WFStringContentItem(Object)\nParameters:\n    WFInput:  Input.\nReturn Value:\n    Text: \nDescription:\n    Get Text from Input: Returns text from the previous action's output.\n\nFor example, this action can get the name of a photo or song, or the text of a web page.\nParameterSummary: Get text from ${WFInput}\n",
    "is.workflow.actions.detect.contacts": "is.workflow.actions.detect.contacts(WFInput: WFVariablePickerParameter(Object)) -> Contacts: WFContactContentItem(Object)\nParameters:\n    WFInput:  Input.\nReturn Value:\n    Contacts: \nDescription:\n    Get Contacts from Input: Gets contacts from the result of the previous action.\nParameterSummary: Get contacts from ${WFInput}\n",
    "is.workflow.actions.posters.get": "is.workflow.actions.posters.get(WFPosterType: Enum = \"All\") -> Wallpapers: WFPosterRepresentation(Object)\nParameters:\n    WFPosterType:  Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"All\", \"Current\".\nReturn Value:\n    Wallpapers: \nDescription:\n    Get All Wallpapers: Gets all of your Lock Screen wallpapers, and returns them as output so you can use them with other actions.\nParameterSummary: (WFPosterType) Get ${WFPosterType} wallpapers\n",
    "is.workflow.actions.getlatestphotoimport": "is.workflow.actions.getlatestphotoimport() -> Imported Photos: PHAsset(Object)\nReturn Value:\n    Imported Photos: \nDescription:\n    Get Last Import: Gets the most recent photo import from the Photos app.\nParameterSummary: Get last import\n",
    "is.workflow.actions.workout.end": "is.workflow.actions.workout.end(IntentAppDefinition: WFIntentAppPickerParameter(Object) = {'BundleIdentifier': 'com.apple.SessionTrackerApp'})\nParameters:\n    IntentAppDefinition:  App.\nDescription:\n    End Workout: Ends the active workout on your Apple Watch.\nParameterSummary: End workout\n",
    "is.workflow.actions.evernote.delete": "is.workflow.actions.evernote.delete(WFInput: WFVariablePickerParameter(Object))\nParameters:\n    WFInput:  Notes.\nDescription:\n    Delete Notes: Deletes the notes passed as input from Evernote.\nParameterSummary: Delete ${WFInput}\n",
    "is.workflow.actions.removereminders": "is.workflow.actions.removereminders(WFInputReminders: WFVariablePickerParameter(Object))\nParameters:\n    WFInputReminders:  Reminders.\nDescription:\n    Remove Reminders: Removes all reminders passed into the action from the lists they are contained in.. This is a destructive and permanent action. You will be asked to confirm before reminders are removed.\nParameterSummary: Remove ${WFInputReminders}\n",
    "is.workflow.actions.playsound": "is.workflow.actions.playsound(WFInput: WFVariablePickerParameter(Object))\nParameters:\n    WFInput:  Sound File. Choose Variable.\nDescription:\n    Play Sound: Plays the audio file passed as input, or a default notification sound if no audio file was passed.\nParameterSummary: Play sound\n",
    "is.workflow.actions.getlastscreenshot": "is.workflow.actions.getlastscreenshot(WFGetLatestPhotoCount: Integer = 1) -> Latest Screenshots: PHAsset(Object)\nParameters:\n    WFGetLatestPhotoCount: \nReturn Value:\n    Latest Screenshots: \nDescription:\n    Get Latest Screenshots: Gets the most recent screenshots from the photo library.\nParameterSummary: Get the latest ${WFGetLatestPhotoCount}\n",
    "is.workflow.actions.getmarkdownfromrichtext": "is.workflow.actions.getmarkdownfromrichtext(WFInput: WFVariablePickerParameter(Object)) -> Markdown from Rich Text: NSString(Object)\nParameters:\n    WFInput:  Rich Text.\nReturn Value:\n    Markdown from Rich Text: Markdown\nDescription:\n    Make Markdown from Rich Text: Converts the rich text passed as input to Markdown text (comparable to Aaron Swartz's html2text script).\nParameterSummary: Make Markdown from ${WFInput}\n",
    "com.apple.musicrecognition.RecognizeMusicIntent": "com.apple.musicrecognition.RecognizeMusicIntent(WFShazamMediaActionShowWhenRun: Bool = True, addToLibrary: Bool = True, WFShazamMediaActionErrorIfNotRecognized: Bool = True) -> Shazam Media: WFShazamMedia(Object)\nParameters:\n    WFShazamMediaActionShowWhenRun:  Show When Run.\n    addToLibrary:  Add to Library.\n    WFShazamMediaActionErrorIfNotRecognized:  Error If Not Recognized.\nReturn Value:\n    Shazam Media: \nDescription:\n    Recognize Music: Uses the microphone to listen to and identify nearby media.\nParameterSummary: Recognize Music\n",
    "is.workflow.actions.getitemtype": "is.workflow.actions.getitemtype(WFInput: WFVariablePickerParameter(Object)) -> Type: NSString(Object)\nParameters:\n    WFInput:  Item.\nReturn Value:\n    Type: \nDescription:\n    Get Type: Returns the type of every item passed as input. For example, if a URL is passed, this action will return “URL”.\nParameterSummary: Get type of ${WFInput}\n",
    "is.workflow.actions.airplanemode.set": "is.workflow.actions.airplanemode.set(operation: Enum = \"set\", OnValue: Bool = True)\nParameters:\n    operation:  The value of this Enum must be one of the following values (The text in parentheses describes the value): \"set\", \"toggle\".\n    OnValue: \nDescription:\n    Set airplanemode: Returns the type of every item passed as input. For example, if a URL is passed, this action will return “URL”.\nParameterSummary: (operation,OnValue) ${operation} airplan mode ${OnValue}; (operation) ${operation} airplan mode\n",
    "is.workflow.actions.detect.date": "is.workflow.actions.detect.date(WFInput: WFVariablePickerParameter(Object)) -> Dates: WFDateContentItem(Object)\nParameters:\n    WFInput:  Input.\nReturn Value:\n    Dates: \nDescription:\n    Get Dates from Input: Returns any dates found in the output from the previous action.\nParameterSummary: Get dates from ${WFInput}\n",
    "is.workflow.actions.encodemedia": "is.workflow.actions.encodemedia(WFMedia: WFVariablePickerParameter(Object), WFMediaAudioOnly: Bool, WFMediaAudioFormat: Enum = \"M4A\", WFMediaSize: Enum = \"Passthrough\", WFMediaSpeed: Enum = \"Normal\", WFMediaPreserveTransparency: Bool, WFMediaCustomSpeed: Integer, Metadata: Bool, WFMetadataTitle: String, WFMetadataArtist: String, WFMetadataAlbum: String, WFMetadataGenre: String, WFMetadataYear: String, WFMetadataArtwork: WFVariablePickerParameter(Object)) -> Encoded Media: AVAsset(Object)\nParameters:\n    WFMedia:  Media.\n    WFMediaAudioOnly:  Audio Only.\n    WFMediaAudioFormat:  Format. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"M4A\", \"AIFF\". This value depends on the value of WFMediaAudioOnly. This parameter is only valid when the value of \"WFMediaAudioOnly\" is True.\n    WFMediaSize:  Size. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"640x480\", \"960x540\", \"1280x720\", \"1920x1080\", \"3840x2160\", \"HEVC 1920x1080\", \"HEVC 3840x2160\", \"ProRes 422\", \"Passthrough\". This value depends on the value of WFMediaAudioOnly. This parameter is only valid when the value of \"WFMediaAudioOnly\" is False.\n    WFMediaSpeed:  Speed. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"0.5X\", \"Normal\", \"2X\", \"Custom\".\n    WFMediaPreserveTransparency:  Preserve Transparency. This value depends on the value of WFMediaSize. This parameter is only valid when the value of \"WFMediaSize\" is \"HEVC 1920x1080\", \"HEVC 3840x2160\", \"ProRes 422\".\n    WFMediaCustomSpeed:  Custom Speed. 1.0. A number greater than zero that indicates how fast or slow to encode the media. Values between 0.0 and 1.0 slow down the media.. This value depends on the value of WFMediaSpeed. This parameter is only valid when the value of \"WFMediaSpeed\" is \"Custom\".\n    Metadata:  Metadata.\n    WFMetadataTitle:  Title. My Great Track. This value depends on the value of Metadata. This parameter is only valid when the value of \"Metadata\" is True.\n    WFMetadataArtist:  Artist. Nicholas Fryingpan. This value depends on the value of Metadata. This parameter is only valid when the value of \"Metadata\" is True.\n    WFMetadataAlbum:  Album. Abbey Road. This value depends on the value of Metadata. This parameter is only valid when the value of \"Metadata\" is True.\n    WFMetadataGenre:  Genre. Indie. This value depends on the value of Metadata. This parameter is only valid when the value of \"Metadata\" is True.\n    WFMetadataYear:  Year. 2001. This value depends on the value of Metadata. This parameter is only valid when the value of \"Metadata\" is True.\n    WFMetadataArtwork:  Artwork. Choose Variable. This value depends on the value of Metadata. This parameter is only valid when the value of \"Metadata\" is True.\nReturn Value:\n    Encoded Media: \nDescription:\n    Encode Media: Re-encodes the media passed as input at the specified size, optionally converting to audio.\nParameterSummary: Encode ${WFMedia}\n",
    "com.apple.TVRemoteUIService.WakeAppleTVIntent": "com.apple.TVRemoteUIService.WakeAppleTVIntent(device: WFMediaRoutePickerParameter(Object))\nParameters:\n    device: \nDescription:\n    Wake Apple TV: Re-encodes the media passed as input at the specified size, optionally converting to audio.\nParameterSummary: Wake ${device}\n",
    "is.workflow.actions.file.reveal": "is.workflow.actions.file.reveal(WFFile: WFFilePickerParameter(Object))\nParameters:\n    WFFile:  Files.\nDescription:\n    Reveal Files in Finder: Opens windows in the Finder with the specified files selected.\nParameterSummary: Reveal ${WFFile}\n",
    "is.workflow.actions.gethtmlfromrichtext": "is.workflow.actions.gethtmlfromrichtext(WFMakeFullDocument: Bool, WFInput: WFVariablePickerParameter(Object)) -> HTML from Rich Text: NSString(Object)\nParameters:\n    WFMakeFullDocument:  Make Full Document. This indicates whether or not this action writes out an entire HTML document. If this is turned off, partial HTML will be returned if possible..\n    WFInput:  Rich Text.\nReturn Value:\n    HTML from Rich Text: HTML\nDescription:\n    Make HTML from Rich Text: Converts the rich text passed as input to HTML text.\nParameterSummary: Make HTML from ${WFInput}\n",
    "is.workflow.actions.getpodcastsfromlibrary": "is.workflow.actions.getpodcastsfromlibrary() -> Podcasts: WFPodcastShowContentItem(Object)\nReturn Value:\n    Podcasts: \nDescription:\n    Get Podcasts from Library: Gets a list of all shows in your Podcast library.\nParameterSummary: (operation) ${operation} airplan mode\n",
    "is.workflow.actions.detect.emailaddress": "is.workflow.actions.detect.emailaddress(WFInput: String) -> Email Addresses: WFEmailAddressContentItem(Object)\nParameters:\n    WFInput:  Input.\nReturn Value:\n    Email Addresses: \nDescription:\n    Get Email Addresses from Input: Returns any email addresses found in the output from the previous action.\nParameterSummary: Get email addresses from ${WFInput}\n",
    "is.workflow.actions.properties.itunesartist": "is.workflow.actions.properties.itunesartist(WFContentItemPropertyName: Enum, WFInput: WFVariablePickerParameter(Object))\nParameters:\n    WFContentItemPropertyName:  The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Genre\", \"Type\", \"Store ID\", \"Store URL\", \"Artwork\", \"Artwork URL\", \"Name\".\n    WFInput: \nDescription:\n    Get Details of iTunes Artist: Returns any email addresses found in the output from the previous action.\nParameterSummary: Get ${WFContentItemPropertyName} from ${WFInput}\n",
    "is.workflow.actions.setvalueforkey": "is.workflow.actions.setvalueforkey(WFDictionaryKey: String, WFDictionaryValue: String, WFDictionary: WFVariablePickerParameter(Object)) -> Dictionary: WFDictionaryContentItem(Object)\nParameters:\n    WFDictionaryKey:  Key.\n    WFDictionaryValue:  Value.\n    WFDictionary:  Dictionary.\nReturn Value:\n    Dictionary: \nDescription:\n    Set Dictionary Value: Sets a value in the dictionary passed into the action. \nParameterSummary: Set ${WFDictionaryKey} to ${WFDictionaryValue} in ${WFDictionary}\n",
    "is.workflow.actions.getitemfromlist": "is.workflow.actions.getitemfromlist(WFItemSpecifier: Enum = \"First Item\", WFItemIndex: Integer, WFItemRangeStart: Integer, WFItemRangeEnd: Integer, WFInput: WFVariablePickerParameter(Object)) -> Item from List: WFContentItem(Object)\nParameters:\n    WFItemSpecifier:  Get. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"First Item\", \"Last Item\", \"Random Item\", \"Item At Index\", \"Items in Range\".\n    WFItemIndex:  Index. 1. This value depends on the value of WFItemSpecifier. This parameter is only valid when the value of \"WFItemSpecifier\" is \"Item At Index\".\n    WFItemRangeStart:  Start Index. This value depends on the value of WFItemSpecifier. This parameter is only valid when the value of \"WFItemSpecifier\" is \"Items in Range\".\n    WFItemRangeEnd:  End Index. This value depends on the value of WFItemSpecifier. This parameter is only valid when the value of \"WFItemSpecifier\" is \"Items in Range\".\n    WFInput:  List.\nReturn Value:\n    Item from List: \nDescription:\n    Get Item from List: Returns one or more items from the list passed as input. You can get the first item, the last item, a random item, the item at a particular index, or items in a range of indexes.. Lists use one-based indexing, so the first item is at index 1, the second is at index 2, etc.\nParameterSummary: (WFItemSpecifier,WFItemIndex,WFInput) Get ${WFItemSpecifier} ${WFItemIndex} from ${WFInput}; (WFItemSpecifier,WFInput) Get ${WFItemSpecifier} from ${WFInput}; (WFItemSpecifier,WFItemRangeStart,WFItemRangeEnd,WFInput) Get ${WFItemSpecifier} ${WFItemRangeStart} to ${WFItemRangeEnd} from ${WFInput}\n",
    "is.workflow.actions.getrichtextfrommarkdown": "is.workflow.actions.getrichtextfrommarkdown(WFInput: WFVariablePickerParameter(Object)) -> Rich Text from Markdown: public.html(Object)\nParameters:\n    WFInput:  Markdown Text. Markdown.\nReturn Value:\n    Rich Text from Markdown: \nDescription:\n    Make Rich Text from Markdown: Takes the inputted Markdown and turns it into rich text, which can then be converted to other formats.\nParameterSummary: Make rich text from ${WFInput}\n",
    "is.workflow.actions.getclassaction": "is.workflow.actions.getclassaction(Class: String = \"NSURL\", Input: WFVariablePickerParameter(Object)) -> Object of Class: WFContentItem(Object)\nParameters:\n    Class:  Class. NSURL.\n    Input:  Input.\nReturn Value:\n    Object of Class: \nDescription:\n    Get Object of Class: Returns a particular object class from the input.\nParameterSummary: Get object of class ${Class} from ${Input}\n",
    "is.workflow.actions.delay": "is.workflow.actions.delay(WFDelayTime: Integer = 1)\nParameters:\n    WFDelayTime: \nDescription:\n    Wait: Waits for the specified number of seconds before continuing with the next action.\nParameterSummary: Wait ${WFDelayTime}\n",
    "is.workflow.actions.image.resize": "is.workflow.actions.image.resize(WFImageResizeKey: Enum = \"Size\", WFImageResizeWidth: Integer = 640, WFImageResizeHeight: Integer, WFImageResizePercentage: Integer, WFImageResizeLength: Integer, WFImage: WFVariablePickerParameter(Object)) -> Resized Image: WFImage(Object)\nParameters:\n    WFImageResizeKey:  By. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Size\", \"Percentage\", \"Longest Edge\".\n    WFImageResizeWidth:  Width. Auto Width. This value depends on the value of WFImageResizeKey. This parameter is only valid when the value of \"WFImageResizeKey\" is \"Size\".\n    WFImageResizeHeight:  Height. Auto Height. This value depends on the value of WFImageResizeKey. This parameter is only valid when the value of \"WFImageResizeKey\" is \"Size\".\n    WFImageResizePercentage:  Percentage. 100. This value depends on the value of WFImageResizeKey. This parameter is only valid when the value of \"WFImageResizeKey\" is \"Percentage\".\n    WFImageResizeLength:  Longest Edge Size. 640. This value depends on the value of WFImageResizeKey. This parameter is only valid when the value of \"WFImageResizeKey\" is \"Longest Edge\".\n    WFImage:  Image.\nReturn Value:\n    Resized Image: \nDescription:\n    Resize Image: Scales images to a particular width and height.. If the width or height is not set, that dimension is automatically calculated to maintain the original image's aspect ratio.\nParameterSummary: (WFImageResizeKey,WFImage,WFImageResizeLength) Resize ${WFImage} to ${WFImageResizeKey} ${WFImageResizeLength}; (WFImageResizeKey,WFImage,WFImageResizeHeight,WFImageResizeWidth) Resize ${WFImage} to ${WFImageResizeKey} ${WFImageResizeWidth} × ${WFImageResizeHeight}; (WFImageResizeKey,WFImage,WFImageResizePercentage) Resize ${WFImage} by ${WFImageResizeKey} ${WFImageResizePercentage}%\n",
    "is.workflow.actions.runapplescript": "is.workflow.actions.runapplescript(Input: WFVariablePickerParameter(Object), Script: WFOSAScriptEditorParameter(Object) = \"on run {input, parameters}\n    (* Your script goes here *)\n    return input\nend run\") -> AppleScript Result: (WFDictionaryContentItem(Object) or WFStringContentItem(Object) or WFBooleanContentItem(Object) or WFNumberContentItem(Object))\nParameters:\n    Input:  Input. The input passed to this action will be passed to the first argument of the `on run` handler..\n    Script: \nReturn Value:\n    AppleScript Result: The output from the script\nDescription:\n    Run AppleScript: This action executes an AppleScript.\nParameterSummary: Run AppleScript with ${Input}\n",
    "com.apple.TVRemoteUIService.SkipContentIntent": "com.apple.TVRemoteUIService.SkipContentIntent(skipCommand: Enum = \"Forward\", skipDuration: Integer = 10, device: WFMediaRoutePickerParameter(Object))\nParameters:\n    skipCommand:  The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Forward\", \"Backward\".\n    skipDuration: \n    device: \nDescription:\n    Skip Content on Apple TV: This action executes an AppleScript.\nParameterSummary: Skip ${skipCommand} ${skipDuration} seconds on ${device}\n",
    "is.workflow.actions.scanbarcode": "is.workflow.actions.scanbarcode() -> QR/Barcode: WFMachineReadableCode\nReturn Value:\n    QR/Barcode: \nDescription:\n    Scan QR or Barcode: Scans a QR code or barcode using the camera, and returns the text/URL that is found.\nParameterSummary: Scan QR or barcode\n",
    "is.workflow.actions.selectphoto": "is.workflow.actions.selectphoto(WFPhotoPickerTypes: Enum = ['Images', 'Live Photos', 'Videos'], WFSelectMultiplePhotos: Bool) -> Photos: PHAsset(Object)\nParameters:\n    WFPhotoPickerTypes:  Include. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Images\", \"Live Photos\", \"Videos\".\n    WFSelectMultiplePhotos:  Select Multiple.\nReturn Value:\n    Photos: The selected photos/videos\nDescription:\n    Select Photos: Prompts to choose photos and videos from your photo library.\nParameterSummary: Select photos\n",
    "is.workflow.actions.gettimebetweendates": "is.workflow.actions.gettimebetweendates(WFTimeUntilFromDate: String, WFInput: String, WFTimeUntilUnit: Enum = \"Minutes\") -> Time Between Dates: NSNumber(Object)\nParameters:\n    WFTimeUntilFromDate:  First Date.\n    WFInput:  Second Date.\n    WFTimeUntilUnit:  In. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Total Time\", \"Seconds\", \"Minutes\", \"Hours\", \"Days\", \"Weeks\", \"Months\", \"Years\".\nReturn Value:\n    Time Between Dates: \nDescription:\n    Get Time Between Dates: Subtracts the specified date from the date passed into the action. For example, this action could get the number of minutes from now until a calendar event passed in as input.. This action outputs a negative number if the input date takes place before the specified date.\nParameterSummary: Get time between ${WFTimeUntilFromDate} and ${WFInput} in ${WFTimeUntilUnit}\n",
    "is.workflow.actions.removeevents": "is.workflow.actions.removeevents(WFCalendarIncludeFutureEvents: Bool, WFInputEvents: WFVariablePickerParameter(Object))\nParameters:\n    WFCalendarIncludeFutureEvents:  Include Future Events. When enabled, any repeats of an event in the future are also removed..\n    WFInputEvents:  Events.\nDescription:\n    Remove Events: Removes all events passed into the action from the calendars they are contained in.. This is a destructive and permanent action. You will be asked to confirm before events are removed.\nParameterSummary: Remove ${WFInputEvents}\n",
    "is.workflow.actions.selectphone": "is.workflow.actions.selectphone() -> Phone Numbers: WFPhoneNumber(Object)\nReturn Value:\n    Phone Numbers: \nDescription:\n    Select Phone Number: Prompts to pick a phone number from your contacts and passes the selection to the next action.\nParameterSummary: (WFImageResizeKey,WFImage,WFImageResizePercentage) Resize ${WFImage} by ${WFImageResizeKey} ${WFImageResizePercentage}%\n",
    "is.workflow.actions.dismisssiri": "is.workflow.actions.dismisssiri()\nDescription:\n    Dismiss Siri and Continue: Switches into the Shortcuts app and continues to the next action.\nParameterSummary: Dismiss Siri and Continue\n",
    "is.workflow.actions.file.move": "is.workflow.actions.file.move(WFFile: WFFilePickerParameter(Object), WFFolder: WFFilePickerParameter(Object), WFReplaceExisting: Bool) -> File: public.data(Object)\nParameters:\n    WFFile:  File.\n    WFFolder:  Folder.\n    WFReplaceExisting:  Replace Existing Files.\nReturn Value:\n    File: \nDescription:\n    Move File: Moves the specified file to a new location.\nParameterSummary: Move ${WFFile} to ${WFFolder}\n",
    "is.workflow.actions.pausemusic": "is.workflow.actions.pausemusic(WFPlayPauseBehavior: Enum = \"Play/Pause\", WFMediaRoute: WFMediaRoutePickerParameter(Object) = \"Local\")\nParameters:\n    WFPlayPauseBehavior:  Play/Pause. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Play/Pause\", \"Play\", \"Pause\".\n    WFMediaRoute:  Device.\nDescription:\n    Play/Pause: Plays or pauses the currently playing media.\nParameterSummary: ${WFPlayPauseBehavior} on ${WFMediaRoute}\n",
    "is.workflow.actions.runsshscript": "is.workflow.actions.runsshscript(WFSSHScript: String, WFSSHHost: String, WFSSHPort: String = \"22\", WFSSHUser: String, WFSSHAuthenticationType: Enum = \"Password\", WFSSHPassword: String, WFSSHKey: WFSSHKeyParameter(Object), WFInput: WFVariablePickerParameter(Object)) -> Shell Script Result: public.data(Object)\nParameters:\n    WFSSHScript:  Script.\n    WFSSHHost:  Host. 192.168.1.100.\n    WFSSHPort:  Port. 22.\n    WFSSHUser:  User. root.\n    WFSSHAuthenticationType:  Authentication. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Password\", \"SSH Key\".\n    WFSSHPassword:  Password. ••••••••. This value depends on the value of WFSSHAuthenticationType. This parameter is only valid when the value of \"WFSSHAuthenticationType\" is \"Password\".\n    WFSSHKey:  SSH Key. This value depends on the value of WFSSHAuthenticationType. This parameter is only valid when the value of \"WFSSHAuthenticationType\" is \"SSH Key\".\n    WFInput:  Input. Choose Variable. The input passed to the shell script (stdin).\nReturn Value:\n    Shell Script Result: The output from the shell script (stdout)\nDescription:\n    Run Script Over SSH: Runs a script on a remote computer over SSH.\nParameterSummary: Run script over SSH\n",
    "is.workflow.actions.takevideo": "is.workflow.actions.takevideo(WFCameraCaptureDevice: Enum = \"Back\", WFCameraCaptureQuality: Enum = \"High\", WFRecordingStart: Enum = \"Immediately\") -> Video: com.apple.quicktime-movie(Object)\nParameters:\n    WFCameraCaptureDevice:  Camera. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Front\", \"Back\".\n    WFCameraCaptureQuality:  Quality. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Low\", \"Medium\", \"High\".\n    WFRecordingStart:  Start Recording. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"On Tap\", \"Immediately\".\nReturn Value:\n    Video: Video from the camera.\nDescription:\n    Take Video: Uses the camera to take a video clip.\nParameterSummary: () Take video; (WFCameraCaptureDevice) Take video with ${WFCameraCaptureDevice} camera\n",
    "is.workflow.actions.vibrate": "is.workflow.actions.vibrate(WFVibrateHapticType: Enum = \"Default\")\nParameters:\n    WFVibrateHapticType:  Haptic Pattern. When run on Apple Watch, the selected pattern will be tapped on to your wrist.. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Default\", \"Up Direction\", \"Down Direction\", \"Success\", \"Failure\", \"Retry\", \"Start\", \"Stop\", \"Click\".\nDescription:\n    Vibrate Device: Vibrates the device for a short amount of time.\nParameterSummary: Vibrate device\n",
    "is.workflow.actions.ejectdisk": "is.workflow.actions.ejectdisk(WFInput: WFFilePickerParameter(Object))\nParameters:\n    WFInput:  Disk.\nDescription:\n    Eject Disk: This action ejects a mounted disk or volume.\nParameterSummary: Eject ${WFInput}\n",
    "is.workflow.actions.getitemname": "is.workflow.actions.getitemname(WFInput: WFVariablePickerParameter(Object), GetWebPageTitle: Bool = True) -> Name: NSString(Object)\nParameters:\n    WFInput:  Item.\n    GetWebPageTitle:  Get Web Page Title. If this option is enabled, and a URL is passed in, this action will fetch the title of the corresponding web page..\nReturn Value:\n    Name: \nDescription:\n    Get Name: Returns the name of every item passed as input. Depending on the input, this could be a file name, the title of a website, the title of a calendar event, etc.\nParameterSummary: Get name of ${WFInput}\n",
    "is.workflow.actions.waittoreturn": "is.workflow.actions.waittoreturn()\nDescription:\n    Wait to Return: Pauses execution until you leave the Shortcuts app and return to it.\n\nThis action might be useful after an action that switches apps, to pause execution until you return to the Shortcuts app.\n\nThis action will only take affect when running shortcuts in the Shortcuts app.\nParameterSummary: Wait to return\n",
    "is.workflow.actions.choosefromlist": "is.workflow.actions.choosefromlist(WFInput: WFVariablePickerParameter(Object), WFChooseFromListActionPrompt: String, WFChooseFromListActionSelectMultiple: Bool, WFChooseFromListActionSelectAll: Bool) -> Chosen Item: WFContentItem(Object)\nParameters:\n    WFInput:  List.\n    WFChooseFromListActionPrompt:  Prompt. optional. The instruction provided when the list is presented..\n    WFChooseFromListActionSelectMultiple:  Select Multiple. When enabled, multiple items may be chosen from the list..\n    WFChooseFromListActionSelectAll:  Select All Initially. When enabled, all of the items in the list will start out selected when Choose from List is presented.. This value depends on the value of WFChooseFromListActionSelectMultiple. This parameter is only valid when the value of \"WFChooseFromListActionSelectMultiple\" is True.\nReturn Value:\n    Chosen Item: \nDescription:\n    Choose from List: Presents a menu of the items passed as input to the action and outputs the user's selection.\nParameterSummary: Choose from ${WFInput}\n",
    "is.workflow.actions.airdropdocument": "is.workflow.actions.airdropdocument(WFInput: WFVariablePickerParameter(Object))\nParameters:\n    WFInput:  Content.\nDescription:\n    AirDrop: Prompts to share the input via AirDrop.\nParameterSummary: AirDrop ${WFInput}\n",
    "is.workflow.actions.gettraveltime": "is.workflow.actions.gettraveltime(WFGetDirectionsCustomLocation: WFLocationParameter(Object), WFDestination: WFLocationParameter(Object), WFGetDirectionsActionMode: Enum = \"Driving\") -> Travel Time: WFTripInfo(Object)\nParameters:\n    WFGetDirectionsCustomLocation:  Start Location.\n    WFDestination:  End Location. The destination.\n    WFGetDirectionsActionMode:  Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Driving\", \"Walking\", \"Transit\", \"Biking\".\nReturn Value:\n    Travel Time: The amount of time it will take to get to the destination. If passed into an action expecting a date, this will be the date and time of arrival if you leave now.\nDescription:\n    Get Travel Time: Estimates the amount of time it will take to travel to the location passed into this action.. Travel times are provided by Apple Maps and take into account current traffic conditions.\nParameterSummary: Get ${WFGetDirectionsActionMode} time from ${WFGetDirectionsCustomLocation} to ${WFDestination}\n",
    "is.workflow.actions.showinblindsquare": "is.workflow.actions.showinblindsquare(WFBlindSquareSimulation: Bool, WFInput: WFLocationParameter(Object))\nParameters:\n    WFBlindSquareSimulation:  Start Simulation.\n    WFInput:  Location.\nDescription:\n    Open in BlindSquare: Opens BlindSquare showing information about the place passed as input, so you can save it as a favorite, start tracking it, or start simulation mode.\nParameterSummary: Open ${WFInput}\n",
    "is.workflow.actions.personalhotspot.password.set": "is.workflow.actions.personalhotspot.password.set(WFInput: String)\nParameters:\n    WFInput:  Password. hello_world.\nDescription:\n    Set Hotspot Password: Sets the Personal Hotspot password.\nParameterSummary: Set Personal Hotspot password to ${WFInput}\n",
    "is.workflow.actions.dictatetext": "is.workflow.actions.dictatetext(WFSpeechLanguage: Enum, WFDictateTextStopListening: Enum = \"After Pause\") -> Dictated Text: NSString(Object)\nParameters:\n    WFSpeechLanguage:  Language. The value of this Enum must be one of the following values (The text in parentheses describes the value): .\n    WFDictateTextStopListening:  Stop Listening. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"After Pause\", \"After Short Pause\", \"On Tap\".\nReturn Value:\n    Dictated Text: \nDescription:\n    Dictate Text: Transcribes what you say aloud into text and passes the result to the next action.\nParameterSummary: Dictate text\n",
    "is.workflow.actions.filter.locations": "is.workflow.actions.filter.locations(WFContentItemFilter: WFContentPredicateOperatorParameter, WFContentItemInputParameter: WFVariablePickerParameter(Object), WFContentItemSortProperty: WFDynamicEnumerationParameter(Object), WFContentItemSortOrder: WFDynamicEnumerationParameter(Object))\nParameters:\n    WFContentItemFilter: \n    WFContentItemInputParameter: \n    WFContentItemSortProperty: \n    WFContentItemSortOrder: \nDescription:\n    Filter Locations: Transcribes what you say aloud into text and passes the result to the next action.\nParameterSummary: Find Locations that meed the need of the user\n",
    "is.workflow.actions.setvariable": "is.workflow.actions.setvariable(WFInput: WFVariablePickerParameter(Object), WFVariableName: String)\nParameters:\n    WFInput:  Input.\n    WFVariableName:  Variable. Variable Name.\nDescription:\n    Set Variable: Sets the value of the specified variable to the input of this action.\nParameterSummary: Set variable ${WFVariableName} to ${WFInput}\n",
    "is.workflow.actions.file": "is.workflow.actions.file(WFFile: WFFilePickerParameter(Object)) -> File: public.data(Object)\nParameters:\n    WFFile:  File.\nReturn Value:\n    File: \nDescription:\n    File: Passes the specified files or folders as output.\nParameterSummary: ${WFFile}\n",
    "is.workflow.actions.getbatterylevel": "is.workflow.actions.getbatterylevel(Subject: Enum = \"Battery Level\") -> Battery State: (NSDecimalNumber(Object) or WFBooleanContentItem(Object))\nParameters:\n    Subject:  Get. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Battery Level\", \"Is Charging\", \"Is Connected to Charger\".\nReturn Value:\n    Battery State: A number with the current battery percentage, or a Yes/No Boolean value.\nDescription:\n    Get Battery Status: Returns information about the battery and any charger connected to the device.. You can use this action to obtain the current battery percentage, or to know whether your device is plugged into a charger or is charging.\nParameterSummary: Get ${Subject}\n",
    "is.workflow.actions.postonfacebook": "is.workflow.actions.postonfacebook(FacebookContent: WFVariablePickerParameter(Object))\nParameters:\n    FacebookContent:  Content. Content to share..\nDescription:\n    Post on Facebook: Shares the input on Facebook.\nParameterSummary: Post ${FacebookContent}\n",
    "is.workflow.actions.openurl": "is.workflow.actions.openurl(WFInput: String)\nParameters:\n    WFInput:  URL.\nDescription:\n    Open URLs: Opens URLs passed into the action in Safari.\nParameterSummary: Open ${WFInput}\n",
    "is.workflow.actions.gettextfrompdf": "is.workflow.actions.gettextfrompdf(WFInput: WFFilePickerParameter(Object), WFGetTextFromPDFTextType: Enum = \"Text\", WFGetTextFromPDFPageHeader: String, WFGetTextFromPDFPageFooter: String, WFCombinePages: Bool = True) -> Text: (NSString(Object) or NSAttributedString(Object))\nParameters:\n    WFInput:  PDF. Document.\n    WFGetTextFromPDFTextType:  Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Text\", \"Rich Text\".\n    WFGetTextFromPDFPageHeader:  Page Header Text. Page Header.\n    WFGetTextFromPDFPageFooter:  Page Footer Text. Page Footer.\n    WFCombinePages:  Combine Pages.\nReturn Value:\n    Text: \nDescription:\n    Get Text from PDF: Gets text from the provided PDF file.\nParameterSummary: Get ${WFGetTextFromPDFTextType} from PDF ${WFInput}\n",
    "is.workflow.actions.takescreenshot": "is.workflow.actions.takescreenshot(WFTakeScreenshotScreenshotType: Enum = \"Full Screen\", WFTakeScreenshotActionInteractiveSelectionType: Enum = \"Window\", WFTakeScreenshotMainMonitorOnly: Bool) -> Screenshot: WFImage(Object)\nParameters:\n    WFTakeScreenshotScreenshotType:  Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Full Screen\", \"Interactive\".\n    WFTakeScreenshotActionInteractiveSelectionType:  Selection. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Window\", \"Custom\". This value depends on the value of WFTakeScreenshotScreenshotType. This parameter is only valid when the value of \"WFTakeScreenshotScreenshotType\" is \"Interactive\".\n    WFTakeScreenshotMainMonitorOnly:  Capture Main Display Only. This value depends on the value of WFTakeScreenshotScreenshotType. This parameter is only valid when the value of \"WFTakeScreenshotScreenshotType\" is \"Full Screen\".\nReturn Value:\n    Screenshot: Image from the device's screen.\nDescription:\n    Take Screenshot: Take a screenshot of the device's screen.\nParameterSummary: (WFCameraCaptureDevice) Take video with ${WFCameraCaptureDevice} camera\n",
    "is.workflow.actions.quit.app": "is.workflow.actions.quit.app(WFQuitAppMode: Enum = \"App\", WFAppsExcept: WFAppPickerParameter(Object), WFApp: WFAppPickerParameter(Object), WFAskToSaveChanges: Bool = True)\nParameters:\n    WFQuitAppMode:  Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"App\", \"All Apps\".\n    WFAppsExcept:  Apps. Choose. This value depends on the value of WFQuitAppMode. This parameter is only valid when the value of \"WFQuitAppMode\" is \"All Apps\".\n    WFApp:  App. Choose. This value depends on the value of WFQuitAppMode. This parameter is only valid when the value of \"WFQuitAppMode\" is \"App\".\n    WFAskToSaveChanges:  Ask to Save Changes.\nDescription:\n    Quit App: Quits one or all open applications. You can choose a list of apps to keep open.\nParameterSummary: (WFQuitAppMode,WFAppsExcept,WFAskToSaveChanges) Quit ${WFQuitAppMode} except ${WFAppsExcept}; (WFQuitAppMode,WFApp,WFAskToSaveChanges) Quit ${WFQuitAppMode} ${WFApp}\n",
    "is.workflow.actions.text.match.getgroup": "is.workflow.actions.text.match.getgroup(matches: String, WFGetGroupType: Enum, WFGroupIndex: Integer)\nParameters:\n    matches: \n    WFGetGroupType:  The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Group At Index\", \"All Groups\".\n    WFGroupIndex:  This value depends on the value of WFGetGroupType. This parameter is only valid when the value of \"WFGetGroupType\" is \"Group At Index\".\nDescription:\n    Get Group from Matched Text: Quits one or all open applications. You can choose a list of apps to keep open.\nParameterSummary: (WFGetGroupType,matches) Get ${WFGetGroupType} in ${matches}; (WFGetGroupType,matches,WFGroupIndex) Get ${WFGetGroupType} ${WFGroupIndex} in ${matches}\n",
    "is.workflow.actions.properties.podcast": "is.workflow.actions.properties.podcast(WFContentItemPropertyName: Enum, WFInput: WFVariablePickerParameter(Object))\nParameters:\n    WFContentItemPropertyName:  The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Duration\", \"Store URL\", \"Genre\", \"Type\", \"Store ID\", \"Store URL\", \"Artwork\", \"Artwork URL\", \"Name\".\n    WFInput: \nDescription:\n    Get Details of Podcast Episode: Quits one or all open applications. You can choose a list of apps to keep open.\nParameterSummary: Get ${WFContentItemPropertyName} from ${WFInput}\n",
    "is.workflow.actions.image.rotate": "is.workflow.actions.image.rotate(WFImageRotateAmount: Integer = 90, WFImage: WFVariablePickerParameter(Object)) -> Rotated Image/Video: (WFImage(Object) or AVAsset(Object))\nParameters:\n    WFImageRotateAmount:  Degrees. 90.\n    WFImage:  Image.\nReturn Value:\n    Rotated Image/Video: \nDescription:\n    Rotate Image/Video: Turns an image or video clockwise by a particular number of degrees.\nParameterSummary: Rotate ${WFImage} by ${WFImageRotateAmount} degrees\n",
    "is.workflow.actions.properties.podcastshow": "is.workflow.actions.properties.podcastshow(WFContentItemPropertyName: Enum, WFInput: WFVariablePickerParameter(Object))\nParameters:\n    WFContentItemPropertyName:  The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Feed URL\", \"Genre\", \"Episode Count\", \"Artist\", \"Store ID\", \"Store URL\", \"Artwork\", \"Artwork URL\", \"Name\".\n    WFInput: \nDescription:\n    Get Details of Podcast: Turns an image or video clockwise by a particular number of degrees.\nParameterSummary: Get ${WFContentItemPropertyName} from ${WFInput}\n",
    "is.workflow.actions.setters.reminders": "is.workflow.actions.setters.reminders(WFInput: String, WFReminderContentItemDueDate: String, WFContentItemPropertyName: Enum, Mode: Enum, Show-WFReminderContentItemTags: Bool, WFImageCombineMode: Bool)\nParameters:\n    WFInput: \n    WFReminderContentItemDueDate: \n    WFContentItemPropertyName:  The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Title\", \"Notes\", \"URL\", \"Priority\", \"Due Date\", \"Start Date\", \"Completed\", \"List\", \"Location\", \"Recurrence\", \"Alerts\".\n    Mode:  The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Set\", \"Add\", \"Remove\".\n    Show-WFReminderContentItemTags: \n    WFImageCombineMode: \nDescription:\n    Edit Reminder: Turns an image or video clockwise by a particular number of degrees.\nParameterSummary: Edit reminder\n",
    "is.workflow.actions.getrichtextfromhtml": "is.workflow.actions.getrichtextfromhtml(WFHTML: WFVariablePickerParameter(Object)) -> Rich Text from HTML: public.html(Object)\nParameters:\n    WFHTML:  HTML. HTML.\nReturn Value:\n    Rich Text from HTML: \nDescription:\n    Make Rich Text from HTML: Takes the inputted HTML and turns it into rich text, which can then be converted to other formats.\nParameterSummary: Make rich text from ${WFHTML}\n",
    "is.workflow.actions.properties.locations": "is.workflow.actions.properties.locations(WFContentItemPropertyName: Enum, WFInput: WFVariablePickerParameter(Object))\nParameters:\n    WFContentItemPropertyName:  The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Latitude\", \"Longitude\", \"Street\", \"City\", \"State\", \"ZIP Code\", \"Region\", \"Phone Numbers\", \"Label\", \"URL\", \"Name\".\n    WFInput: \nDescription:\n    Get Details of Locations: Takes the inputted HTML and turns it into rich text, which can then be converted to other formats.\nParameterSummary: Get ${WFContentItemPropertyName} from ${WFInput}\n",
    "is.workflow.actions.openin": "is.workflow.actions.openin(WFOpenInAskWhenRun: Bool, WFSelectedApp: WFAppPickerParameter(Object), WFAppName: String, WFInput: WFFilePickerParameter(Object))\nParameters:\n    WFOpenInAskWhenRun:  Show Open In Menu.\n    WFSelectedApp:  App. Default App. This value depends on the value of WFOpenInAskWhenRun. This parameter is only valid when the value of \"WFOpenInAskWhenRun\" is False.\n    WFAppName:  App Name.\n    WFInput:  File.\nDescription:\n    Open File: Opens the input as a file in the specified app.\nParameterSummary: (WFInput,WFOpenInAskWhenRun) Open ${WFInput}; (WFInput,WFOpenInAskWhenRun,WFSelectedApp) Open ${WFInput} in ${WFSelectedApp}\n",
    "is.workflow.actions.url.getheaders": "is.workflow.actions.url.getheaders(WFInput: String) -> Headers of URL: NSDictionary(Object)\nParameters:\n    WFInput:  URL.\nReturn Value:\n    Headers of URL: \nDescription:\n    Get Headers of URL: Retrieves the HTTP headers of the URL passed as input using a HEAD request.\nParameterSummary: Get headers of ${WFInput}\n",
    "is.workflow.actions.dropbox.createfolder": "is.workflow.actions.dropbox.createfolder(WFFilePath: String)\nParameters:\n    WFFilePath:  Path. The path of the new folder. For example, if you want to create “Adventure” in an existing folder titled “Photos”, put “/Photos/Adventure/”.\nDescription:\n    Create Dropbox Folder: Makes a new Dropbox folder.\nParameterSummary: (WFInput,WFOpenInAskWhenRun,WFSelectedApp) Open ${WFInput} in ${WFSelectedApp}\n",
    "is.workflow.actions.image.convert": "is.workflow.actions.image.convert(WFImageFormat: WFImageConvertFormatPickerParameter(Object) = \"JPEG\", WFImageCompressionQuality: Float = 0.75, WFImagePreserveMetadata: Bool = True, WFInput: WFVariablePickerParameter(Object)) -> Converted Image: WFImage(Object)\nParameters:\n    WFImageFormat:  Format.\n    WFImageCompressionQuality:  Quality. Allows you to choose the image quality used when compressing the image file. Higher quality images will look better, but result in larger files.. This value depends on the value of WFImageFormat. This parameter is only valid when the value of \"WFImageFormat\" is \"JPEG\".\n    WFImagePreserveMetadata:  Preserve Metadata. When Preserve Metadata is turned off, all metadata, such as the GPS coordinates where the photo was taken, will be stripped from the image file.. This value depends on the value of WFImageFormat. This parameter is only valid when the value of \"WFImageFormat\" is \"JPEG\", \"PNG\", \"TIFF\", \"HEIF\", \"Match Input\".\n    WFInput:  Image.\nReturn Value:\n    Converted Image: \nDescription:\n    Convert Image: Converts the images passed into the action to the specified image format.\nParameterSummary: Convert ${WFInput} to ${WFImageFormat}\n",
    "is.workflow.actions.recordaudio": "is.workflow.actions.recordaudio(WFRecordingCompression: Enum = \"Normal\", WFRecordingStart: Enum = \"On Tap\", WFRecordingEnd: Enum = \"On Tap\", WFRecordingTimeInterval: Enum) -> Recorded Audio: com.apple.m4a-audio(Object)\nParameters:\n    WFRecordingCompression:  Audio Quality. High-quality audio takes up a lot more space than normal audio, so stick with normal unless you really need it. Normal audio is returned as an M4A file (with AAC audio), while high-quality audio is returned in uncompressed WAV format.. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Normal\", \"Very High\".\n    WFRecordingStart:  Start Recording. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"On Tap\", \"Immediately\".\n    WFRecordingEnd:  Finish Recording. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"On Tap\", \"After Time\".\n    WFRecordingTimeInterval:  Duration. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"sec\", \"min\", \"hr\". This value depends on the value of WFRecordingEnd. This parameter is only valid when the value of \"WFRecordingEnd\" is \"After Time\".\nReturn Value:\n    Recorded Audio: \nDescription:\n    Record Audio: Uses the microphone to record audio.\nParameterSummary: Record audio\n",
    "is.workflow.actions.properties.appstore": "is.workflow.actions.properties.appstore(WFContentItemPropertyName: Enum, WFInput: WFVariablePickerParameter(Object))\nParameters:\n    WFContentItemPropertyName:  The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Artist\", \"Price\", \"Currency Code\", \"Formatted Price\", \"Release Date\", \"Category\", \"Description\", \"Rating\", \"# of Rating\", \"Rating (This Version)\", \"# of Rating (This Version)\", \"Version\", \"Last Updated\", \"Release Notes\", \"Content Rating\", \"Minimum OS Version\", \"Is Universal\", \"Supports Game Center\", \"Supported Devices\", \"Supported Languages\", \"Screenshot URLs\", \"iPad Screenshot URLs\", \"Download Size\", \"Bundle Identifier\", \"Store ID\", \"Store URL\", \"Artwork\", \"Artwork URL\", \"Name\".\n    WFInput: \nDescription:\n    Get Details of App Store App: Uses the microphone to record audio.\nParameterSummary: Get ${WFContentItemPropertyName} from ${WFInput}\n",
    "is.workflow.actions.getnameofemoji": "is.workflow.actions.getnameofemoji(WFInput: String) -> Name of Emoji: NSString(Object)\nParameters:\n    WFInput:  Text.\nReturn Value:\n    Name of Emoji: \nDescription:\n    Get Name of Emoji: Gets the names of emoji passed into the action.\nParameterSummary: Get name of emoji in ${WFInput}\n",
    "is.workflow.actions.downloadurl": "is.workflow.actions.downloadurl(WFURL: String, WFHTTPMethod: Enum = \"GET\", ShowHeaders: Bool, WFHTTPHeaders: WFDictionaryParameter(Object), WFHTTPBodyType: Enum = \"JSON\", WFFormValues: WFDictionaryParameter(Object), WFJSONValues: WFDictionaryParameter(Object), WFRequestVariable: WFVariablePickerParameter(Object)) -> Contents of URL: public.data(Object)\nParameters:\n    WFURL:  URL.\n    WFHTTPMethod:  Method. The HTTP method to use.. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"GET\", \"POST\", \"PUT\", \"PATCH\", \"DELETE\".\n    ShowHeaders:  Headers.\n    WFHTTPHeaders:  Headers. This value depends on the value of ShowHeaders. This parameter is only valid when the value of \"ShowHeaders\" is True.\n    WFHTTPBodyType:  Request Body. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"JSON\", \"Form\", \"File\". This value depends on the value of WFHTTPMethod. This parameter is only valid when the value of \"WFHTTPMethod\" is \"GET\".\n    WFFormValues:  Form Values. This value depends on the value of WFHTTPBodyType. This parameter is only valid when the value of \"WFHTTPBodyType\" is \"Form\". This value depends on the value of WFHTTPMethod. This parameter is only valid when the value of \"WFHTTPMethod\" is \"GET\".\n    WFJSONValues:  JSON Values. This value depends on the value of WFHTTPBodyType. This parameter is only valid when the value of \"WFHTTPBodyType\" is \"JSON\". This value depends on the value of WFHTTPMethod. This parameter is only valid when the value of \"WFHTTPMethod\" is \"GET\".\n    WFRequestVariable:  File. Choose Variable. This value depends on the value of WFHTTPBodyType. This parameter is only valid when the value of \"WFHTTPBodyType\" is \"File\". This value depends on the value of WFHTTPMethod. This parameter is only valid when the value of \"WFHTTPMethod\" is \"GET\".\nReturn Value:\n    Contents of URL: The fetched data\nDescription:\n    Get Contents of URL: Gets the contents of URLs passed into the action. Useful for downloading files and web content, or for making API requests.. To make a multipart HTTP request, choose \"Form\" as the request body type and add files as field values.\nParameterSummary: Get contents of ${WFURL}\n",
    "com.apple.facetime.facetime": "com.apple.facetime.facetime(IntentAppDefinition: WFIntentAppPickerParameter(Object) = {'BundleIdentifier': 'com.apple.TelephonyUtilities.PhoneIntentHandler'}, WFFaceTimeType: Enum = \"Video\", WFFaceTimeContact: WFContactFieldParameter(Object))\nParameters:\n    IntentAppDefinition:  App.\n    WFFaceTimeType:  Call Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Video\", \"Audio\".\n    WFFaceTimeContact:  Contact.\nDescription:\n    FaceTime: Calls the contact passed in as input using FaceTime.\nParameterSummary: ${WFFaceTimeType} Call ${WFFaceTimeContact}\n",
    "com.apple.TVRemoteUIService.LaunchRemoteIntent": "com.apple.TVRemoteUIService.LaunchRemoteIntent(device: WFMediaRoutePickerParameter(Object))\nParameters:\n    device: \nDescription:\n    Show remote control: Calls the contact passed in as input using FaceTime.\nParameterSummary: Show remote control for ${device}\n",
    "is.workflow.actions.instapaper.get": "is.workflow.actions.instapaper.get(WFInstapaperFolder: WFDynamicEnumerationParameter(Object), WFBookmarkCount: Integer = 5) -> Instapaper Bookmarks: WFURLContentItem(Object)\nParameters:\n    WFInstapaperFolder:  Folder. The folder to get bookmarks from. Leaving this empty will get items from Instapaper's Home folder..\n    WFBookmarkCount: \nReturn Value:\n    Instapaper Bookmarks: \nDescription:\n    Get Instapaper Bookmarks: Gets the contents of a folder in Instapaper. Requires Instapaper Premium.\nParameterSummary: Get ${WFBookmarkCount} from ${WFInstapaperFolder}\n",
    "is.workflow.actions.trello.get": "is.workflow.actions.trello.get(WFTrelloItemType: Enum = \"Boards\", WFTrelloBoard: WFTrelloBoardPickerParameter(Object), WFTrelloList: WFTrelloListPickerParameter(Object)) -> Trello Items: (WFTrelloBoard(Object) or WFTrelloList(Object) or WFTrelloCard(Object))\nParameters:\n    WFTrelloItemType:  Get. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Boards\", \"Lists\", \"Cards\".\n    WFTrelloBoard:  Board. This value depends on the value of WFTrelloItemType. This parameter is only valid when the value of \"WFTrelloItemType\" is \"Lists\", \"Cards\".\n    WFTrelloList:  List. This value depends on the value of WFTrelloItemType. This parameter is only valid when the value of \"WFTrelloItemType\" is \"Cards\".\nReturn Value:\n    Trello Items: \nDescription:\n    Get Trello Items: Gets cards, lists, or boards in your Trello account.\nParameterSummary: (WFInput,WFOpenInAskWhenRun,WFSelectedApp) Open ${WFInput} in ${WFSelectedApp}\n",
    "is.workflow.actions.evernote.get": "is.workflow.actions.evernote.get(WFEvernoteNotesTitleSearch: String, WFEvernoteNotesTags: WFEvernoteTagsTagFieldParameter(Object), WFEvernoteNotesNotebookName: WFEvernoteNotebookPickerParameter(Object), WFEvernoteNotesCount: Integer = 1) -> Notes: ENNoteRef(Object)\nParameters:\n    WFEvernoteNotesTitleSearch:  Title Search. optional. Text to look for in the title of notes..\n    WFEvernoteNotesTags:  Tags. optional. A list of tags with which to find matching notes. Wildcard characters (*) may be used..\n    WFEvernoteNotesNotebookName:  In Notebook. The notebook in which to look for notes (optional).\n    WFEvernoteNotesCount: \nReturn Value:\n    Notes: \nDescription:\n    Get Notes: Gets recent notes from Evernote, optionally filtering based on criteria.\nParameterSummary: Get ${WFEvernoteNotesCount}\n",
    "is.workflow.actions.text.combine": "is.workflow.actions.text.combine(text: String, WFTextSeparator: Enum = \"New Lines\", WFTextCustomSeparator: String)\nParameters:\n    text: \n    WFTextSeparator:  The value of this Enum must be one of the following values (The text in parentheses describes the value): \"New Lines\", \"Spaces\", \"Custom\".\n    WFTextCustomSeparator:  Text). This value depends on the value of WFTextSeparator. This parameter is only valid when the value of \"WFTextSeparator\" is \"Custom\".\nDescription:\n    Combine Text: Gets recent notes from Evernote, optionally filtering based on criteria.\nParameterSummary: (text,WFTextSeparator) Combine ${text} with ${WFTextSeparator}; (text,WFTextSeparator,WFTextCustomSeparator) Combine ${text} with ${WFTextSeparator} ${WFTextCustomSeparator}\n",
    "is.workflow.actions.addnewcontact": "is.workflow.actions.addnewcontact(WFContactFirstName: String, WFContactLastName: String, WFContactCompany: String, WFContactPhoto: WFVariablePickerParameter(Object), WFContactPhoneNumbers: WFPhoneNumberFieldParameter(Object), WFContactEmails: WFEmailAddressFieldParameter(Object), WFContactNotes: String, ShowWhenRun: Bool = True) -> New Contact: WFContact(Object)\nParameters:\n    WFContactFirstName:  First name. First Name. The first name of the contact..\n    WFContactLastName:  Last name. Last Name. The last name of the contact..\n    WFContactCompany:  Company. optional. The company of the contact..\n    WFContactPhoto:  Photo. Choose.\n    WFContactPhoneNumbers:  Phone Number. optional.\n    WFContactEmails:  Email Address. optional.\n    WFContactNotes:  Notes. Optionally, notes for this contact..\n    ShowWhenRun:  Show Compose Sheet.\nReturn Value:\n    New Contact: The new contact\nDescription:\n    Add New Contact: Creates a new contact.\nParameterSummary: Add ${WFContactFirstName}${WFContactLastName} to Contacts\n",
    "is.workflow.actions.appendvariable": "is.workflow.actions.appendvariable(WFVariableName: String, WFInput: WFVariablePickerParameter(Object)) -> Variable: WFContentItem(Object)\nParameters:\n    WFVariableName:  Variable. Variable Name.\n    WFInput:  Input.\nReturn Value:\n    Variable: The updated contents of the variable.\nDescription:\n    Add to Variable: Appends this action's input to the specified variable, creating the variable if it does not exist.\n\nThis allows you to make a variable hold multiple items.\nParameterSummary: Add ${WFInput} to ${WFVariableName}\n",
    "is.workflow.actions.contacts": "is.workflow.actions.contacts(WFContact: WFContactFieldParameter(Object)) -> Contacts: WFContact(Object)\nParameters:\n    WFContact:  Contact. Contacts.\nReturn Value:\n    Contacts: \nDescription:\n    Contacts: Passes the specified contacts to the next action.\nParameterSummary: ${WFContact}\n",
    "is.workflow.actions.getupcomingevents": "is.workflow.actions.getupcomingevents(WFGetUpcomingItemCalendar: WFCalendarPickerParameter(Object), WFGetUpcomingItemCount: Integer = 1, WFDateSpecifier: Enum = \"Any Day\", WFSpecifiedDate: String) -> Upcoming Events: EKEvent(Object)\nParameters:\n    WFGetUpcomingItemCalendar:  Calendar.\n    WFGetUpcomingItemCount: \n    WFDateSpecifier:  Day. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Any Day\", \"Today\", \"Tomorrow\", \"Specified Day\".\n    WFSpecifiedDate:  Specified Day. June 29, 2007. This value depends on the value of WFDateSpecifier. This parameter is only valid when the value of \"WFDateSpecifier\" is \"Specified Day\".\nReturn Value:\n    Upcoming Events: \nDescription:\n    Get Upcoming Events: Gets upcoming calendar events, ordered from nearest to farthest away in time.\nParameterSummary: Get ${WFGetUpcomingItemCount} from ${WFGetUpcomingItemCalendar}\n",
    "is.workflow.actions.setters.contacts": "is.workflow.actions.setters.contacts(WFInput: String, WFContactContentItemContactPhoto: WFPhotoMediaContentItem, WFContentItemPropertyName: Enum, Mode: Enum, Show-WFContactContentItemURLs: Bool, WFContactContentItemGroup: WFContactFieldParameter(Object), WFContactContentItemFirstName: String)\nParameters:\n    WFInput: \n    WFContactContentItemContactPhoto: \n    WFContentItemPropertyName:  The value of this Enum must be one of the following values (The text in parentheses describes the value): \"First Name\", \"Last Name\", \"Nickname\", \"Company\", \"Job Title\", \"Department\", \"Birthday\", \"Note\", \"Phone Number\", \"Email Address\", \"Street\", \"City\", \"State\", \"ZIP\", \"Country\", \"URL\", \"Date\", \"Related Name\", \"Social Profile\", \"Instant Message\", \"Phone Number (Home)\", \"Phone Number (Work)\", \"Phone Number (iPhone)\", \"Phone Number (Main)\", \"Phone Number (Home Fax)\", \"Phone Number (Work Fax)\", \"Phone Number (Pager)\", \"Phone Number (Other)\", \"Email Address (Home)\", \"Email Address (Work)\", \"Email Address (Other)\", \"URL (Home)\", \"URL (Work)\", \"URL (Other)\", \"Date (Anniversary)\", \"Date (Other)\", \"Related Name (Mother)\", \"Related Name (Father)\", \"Related Name (Parent)\", \"Related Name (Brother)\", \"Related Name (Sister)\", \"Related Name (Child)\", \"Related Name (Friend)\", \"Related Name (Spouse)\", \"Related Name (Partner)\", \"Related Name (Assistant)\", \"Related Name (Manager)\", \"Related Name (Other)\", \"Social Profile (Facebook)\", \"Social Profile (Twitter)\", \"Social Profile (LinkedIn)\", \"Social Profile (Flickr)\", \"Social Profile (Game Center)\", \"Social Profile (MySpace)\", \"Social Profile (AIM)\", \"Social Profile (Yahoo)\", \"Social Profile (Jabber)\", \"Social Profile (ICQ)\", \"Social Profile (MSN)\", \"Social Profile (QQ)\", \"Social Profile (Skype)\", \"Social Profile (Google Talk)\", \"Social Profile (Facebook Messenger)\", \"Social Profile (WhatsApp)\", \"Social Profile (Line)\", \"Social Profile (Kik)\", \"Social Profile (Pinterest)\", \"Social Profile (Snapchat)\", \"Social Profile (Viber)\", \"Social Profile (WeChat)\", \"Social Profile (Sina Weibo)\", \"Social Profile (Tencent Weibo)\", \"Social Profile (Yelp)\", \"Social Profile (Foursquare)\", \"Social Profile (Renren)\".\n    Mode:  The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Set\", \"Add\", \"Remove\".\n    Show-WFContactContentItemURLs: \n    WFContactContentItemGroup: \n    WFContactContentItemFirstName: \nDescription:\n    Edit Contact: Gets upcoming calendar events, ordered from nearest to farthest away in time.\nParameterSummary: Edit contact\n",
    "is.workflow.actions.getdistance": "is.workflow.actions.getdistance(WFGetDirectionsCustomLocation: WFLocationParameter(Object), WFGetDistanceDestination: WFLocationParameter(Object), WFGetDirectionsActionMode: Enum = \"Direct\", WFDistanceUnit: Enum, Accuracy: WFLocationAccuracyParameter(Object)) -> Distance: NSNumber(Object)\nParameters:\n    WFGetDirectionsCustomLocation:  Start Location.\n    WFGetDistanceDestination:  End Location. The destination.\n    WFGetDirectionsActionMode:  Route Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Direct\", \"Driving\", \"Walking\", \"Biking\".\n    WFDistanceUnit:  Unit. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Miles\", \"Kilometers\".\n    Accuracy:  Precision.\nReturn Value:\n    Distance: The distance to the location in miles or kilometers.\nDescription:\n    Get Distance: Calculates the distance to the location passed into this action.\nParameterSummary: Get distance from ${WFGetDirectionsCustomLocation} to ${WFGetDistanceDestination}\n",
    "is.workflow.actions.getwifi": "is.workflow.actions.getwifi(WFNetworkDetailsNetwork: WFNetworkPickerParameter(Object), WFWiFiDetail: Enum = \"Network Name\", WFCellularDetail: Enum = \"Carrier Name\") -> Network Details: (NSString(Object) or NSNumber(Object))\nParameters:\n    WFNetworkDetailsNetwork:  Network.\n    WFWiFiDetail:  Get. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Network Name\", \"BSSID\", \"Wi-Fi Standard\", \"RX Rate\", \"TX Rate\", \"RSSI\", \"Noise\", \"Channel Number\", \"Hardware MAC Address\". This value depends on the value of WFNetworkDetailsNetwork. This parameter is only valid when the value of \"WFNetworkDetailsNetwork\" is \"Wi-Fi\".\n    WFCellularDetail:  Get. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Carrier Name\", \"Radio Technology\", \"Country Code\", \"Is Roaming Abroad\", \"Number of Signal Bars\". This value depends on the value of WFNetworkDetailsNetwork. This parameter is only valid when the value of \"WFNetworkDetailsNetwork\" is \"Cellular\".\nReturn Value:\n    Network Details: \nDescription:\n    Get Network Details: Gets information about the currently connected networks.\nParameterSummary: (WFNetworkDetailsNetwork,WFCellularDetail) Get ${WFNetworkDetailsNetwork} network's ${WFCellularDetail}; (WFNetworkDetailsNetwork) Get ${WFNetworkDetailsNetwork} network details; (WFNetworkDetailsNetwork,WFWiFiDetail) Get ${WFNetworkDetailsNetwork} network's ${WFWiFiDetail}\n",
    "is.workflow.actions.skipforward": "is.workflow.actions.skipforward(WFMediaRoute: WFMediaRoutePickerParameter(Object) = \"Local\")\nParameters:\n    WFMediaRoute:  Device.\nDescription:\n    Skip Forward: Skips to the next song in the current music queue.\nParameterSummary: Skip forward on ${WFMediaRoute}\n",
    "is.workflow.actions.alert": "is.workflow.actions.alert(WFAlertActionTitle: String, WFAlertActionMessage: String = \"Do you want to continue?\", WFAlertActionCancelButtonShown: Bool = True)\nParameters:\n    WFAlertActionTitle:  Title. optional.\n    WFAlertActionMessage:  Message. Informational message.\n    WFAlertActionCancelButtonShown:  Show Cancel Button.\nDescription:\n    Show Alert: Displays an alert with a title, a message, and two buttons. If the user selects the OK button, the shortcut continues. The cancel button stops the shortcut.\nParameterSummary: Show alert ${WFAlertActionMessage}\n",
    "is.workflow.actions.overlayimageonimage": "is.workflow.actions.overlayimageonimage(WFImage: WFVariablePickerParameter(Object), WFInput: WFVariablePickerParameter(Object), WFShouldShowImageEditor: Bool = True, WFImagePosition: Enum = \"Center\", WFImageWidth: Integer, WFImageHeight: Integer, WFImageX: Integer, WFImageY: Integer, WFRotation: Integer, WFOverlayImageOpacity: Integer = 100) -> Overlaid Image: WFImageContentItem(Object)\nParameters:\n    WFImage:  Image.\n    WFInput:  Image. Background images.\n    WFShouldShowImageEditor:  Show Image Editor.\n    WFImagePosition:  Position. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Center\", \"Top Left\", \"Top Right\", \"Bottom Left\", \"Bottom Right\", \"Custom\". This value depends on the value of WFShouldShowImageEditor. This parameter is only valid when the value of \"WFShouldShowImageEditor\" is False.\n    WFImageWidth:  Width. Auto. This value depends on the value of WFShouldShowImageEditor. This parameter is only valid when the value of \"WFShouldShowImageEditor\" is False.\n    WFImageHeight:  Height. Auto. This value depends on the value of WFShouldShowImageEditor. This parameter is only valid when the value of \"WFShouldShowImageEditor\" is False.\n    WFImageX:  X Coordinate. 0. This value depends on the value of WFShouldShowImageEditor. This parameter is only valid when the value of \"WFShouldShowImageEditor\" is False. This value depends on the value of WFImagePosition. This parameter is only valid when the value of \"WFImagePosition\" is \"Custom\".\n    WFImageY:  Y Coordinate. 0. This value depends on the value of WFShouldShowImageEditor. This parameter is only valid when the value of \"WFShouldShowImageEditor\" is False. This value depends on the value of WFImagePosition. This parameter is only valid when the value of \"WFImagePosition\" is \"Custom\".\n    WFRotation:  Rotation (Degrees). 0. This value depends on the value of WFShouldShowImageEditor. This parameter is only valid when the value of \"WFShouldShowImageEditor\" is False.\n    WFOverlayImageOpacity:  Opacity. 100%. This value depends on the value of WFShouldShowImageEditor. This parameter is only valid when the value of \"WFShouldShowImageEditor\" is False.\nReturn Value:\n    Overlaid Image: The combined images\nDescription:\n    Overlay Image: Overlays an image on top of another image.\nParameterSummary: Overlay ${WFImage} on ${WFInput}\n",
    "is.workflow.actions.getvalueforkey": "is.workflow.actions.getvalueforkey(WFGetDictionaryValueType: Enum = \"Value\", WFDictionaryKey: String, WFInput: WFVariablePickerParameter(Object)) -> Dictionary Value: (WFStringContentItem(Object) or WFNumberContentItem(Object) or WFDateContentItem(Object) or WFDictionaryContentItem(Object) or WFBooleanContentItem(Object))\nParameters:\n    WFGetDictionaryValueType:  Get. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Value\", \"All Keys\", \"All Values\".\n    WFDictionaryKey:  Key. This value depends on the value of WFGetDictionaryValueType. This parameter is only valid when the value of \"WFGetDictionaryValueType\" is \"Value\".\n    WFInput:  Dictionary.\nReturn Value:\n    Dictionary Value: \nDescription:\n    Get Dictionary Value: Gets the value for the specified key in the dictionary passed into the action. . You can reference values deep inside of a dictionary by providing multiple keys separated by dots. For example, to get the value \"soup\" from the dictionary {\"beverages\": [{\"favorite\": \"soup\"}]}, you can specify the key path \"beverages.1.favorite\".\nParameterSummary: (WFGetDictionaryValueType,WFInput) Get ${WFGetDictionaryValueType} in ${WFInput}; (WFGetDictionaryValueType,WFDictionaryKey,WFInput) Get ${WFGetDictionaryValueType} for ${WFDictionaryKey} in ${WFInput}\n",
    "is.workflow.actions.openworkflow": "is.workflow.actions.openworkflow(WFWorkflow: WFWorkflowPickerParameter(Object))\nParameters:\n    WFWorkflow:  Shortcut.\nDescription:\n    Open Shortcut: Opens a shortcut in the Shortcuts editor.\nParameterSummary: Open ${WFWorkflow}\n",
    "is.workflow.actions.podcasts.subscribe": "is.workflow.actions.podcasts.subscribe(WFInput: String)\nParameters:\n    WFInput:  Podcast URL.\nDescription:\n    Follow Podcast: Follows podcasts or podcast feed URLs passed into the action.\nParameterSummary: Follow ${WFInput}\n",
    "is.workflow.actions.mountdiskimage": "is.workflow.actions.mountdiskimage(WFInput: WFFilePickerParameter(Object)) -> Mounted Volume: WFGenericFileContentItem(Object)\nParameters:\n    WFInput:  File.\nReturn Value:\n    Mounted Volume: The mounted volume\nDescription:\n    Mount Disk Image: Mounts a disk image (.dmg) file on your desktop.\nParameterSummary: Mount disk image ${WFInput}\n",
    "is.workflow.actions.personalhotspot.set": "is.workflow.actions.personalhotspot.set(operation: Enum = \"set\", OnValue: Bool = True)\nParameters:\n    operation:  The value of this Enum must be one of the following values (The text in parentheses describes the value): \"set\", \"toggle\".\n    OnValue: \nDescription:\n    Set personalhotspot: Sets the device's Personal Hotspot to on or off.. When turning Personal Hotspot on, this action will make the hotspot discoverable for only a short period of time, in order to preserve battery life.\nParameterSummary: (operation,OnValue) ${operation} personal hotspot ${OnValue}; (operation) ${operation} personal hotspot\n",
    "is.workflow.actions.filter.images": "is.workflow.actions.filter.images(WFContentItemFilter: WFContentPredicateOperatorParameter, WFContentItemInputParameter: WFVariablePickerParameter(Object), WFContentItemSortProperty: WFDynamicEnumerationParameter(Object), WFContentItemSortOrder: WFDynamicEnumerationParameter(Object), WFContentItemLimitEnabled: Bool = True, WFContentItemLimitNumber: Integer = 1)\nParameters:\n    WFContentItemFilter: \n    WFContentItemInputParameter: \n    WFContentItemSortProperty: \n    WFContentItemSortOrder: \n    WFContentItemLimitEnabled: \n    WFContentItemLimitNumber: \nDescription:\n    Filter Images: Sets the device's Personal Hotspot to on or off.. When turning Personal Hotspot on, this action will make the hotspot discoverable for only a short period of time, in order to preserve battery life.\nParameterSummary: Find Images that meed the need of the user\n",
    "is.workflow.actions.properties.articles": "is.workflow.actions.properties.articles(WFContentItemPropertyName: Enum, WFInput: WFVariablePickerParameter(Object))\nParameters:\n    WFContentItemPropertyName:  The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Title\", \"Author\", \"Published Date\", \"Body\", \"Excerpt\", \"Number of Words\", \"Main Image URL\", \"URL\", \"Name\".\n    WFInput: \nDescription:\n    Get Details of Article: Sets the device's Personal Hotspot to on or off.. When turning Personal Hotspot on, this action will make the hotspot discoverable for only a short period of time, in order to preserve battery life.\nParameterSummary: Get ${WFContentItemPropertyName} from ${WFInput}\n",
    "is.workflow.actions.runjavascriptforautomation": "is.workflow.actions.runjavascriptforautomation(Input: WFVariablePickerParameter(Object), Script: WFOSAScriptEditorParameter(Object) = \"function run(input, parameters) {\n\t// Your script goes here\n\treturn input;\n}\") -> JavaScript Result: (WFDictionaryContentItem(Object) or WFStringContentItem(Object) or WFBooleanContentItem(Object) or WFNumberContentItem(Object))\nParameters:\n    Input:  Input. The input passed to this action will be passed to the first argument of the `run` function..\n    Script: \nReturn Value:\n    JavaScript Result: The output from the script\nDescription:\n    Run JavaScript for Mac Automation: This action executes a JavaScript for Automation (JXA) script.\nParameterSummary: Run JavaScript for Automation with ${Input}\n",
    "com.apple.TVRemoteUIService.ToggleSystemAppearanceIntent": "com.apple.TVRemoteUIService.ToggleSystemAppearanceIntent(appearanceToggle: Enum, device: WFMediaRoutePickerParameter(Object))\nParameters:\n    appearanceToggle:  The value of this Enum must be one of the following values (The text in parentheses describes the value): \"dark\", \"light\".\n    device: \nDescription:\n    Set Light/Dark Mode: This action executes a JavaScript for Automation (JXA) script.\nParameterSummary: Toggle System Appearance to ${appearanceToggle} on ${device}\n",
    "is.workflow.actions.searchappstore": "is.workflow.actions.searchappstore(WFSearchTerm: String, WFAttribute: WFDynamicEnumerationParameter(Object), WFEntity: WFDynamicEnumerationParameter(Object), WFCountry: WFiTunesStoreCountryPickerParameter(Object), WFItemLimit: Integer = 25) -> App Store Apps: WFAppStoreAppContentItem(Object)\nParameters:\n    WFSearchTerm:  Search. Apps.\n    WFAttribute:  Search By.\n    WFEntity:  Results.\n    WFCountry:  Region.\n    WFItemLimit: \nReturn Value:\n    App Store Apps: \nDescription:\n    Find App Store Apps: Searches the App Store, returning the apps that match the specified search terms. You can get more details about the results using the Get Details of App Store App action.\nParameterSummary: Find ${WFSearchTerm} on the App Store\n",
    "is.workflow.actions.personalhotspot.password.get": "is.workflow.actions.personalhotspot.password.get() -> Personal Hotspot Password: NSString(Object)\nReturn Value:\n    Personal Hotspot Password: \nDescription:\n    Get Hotspot Password: Returns the password of your Personal Hotspot.\nParameterSummary: Get Personal Hotspot password\n",
    "is.workflow.actions.address": "is.workflow.actions.address(WFAddressLine1: String, WFAddressLine2: String, WFCity: String, WFState: String, WFPostalCode: String, WFCountry: WFCountryFieldParameter(Object)) -> Street Address: WFStreetAddress(Object)\nParameters:\n    WFAddressLine1:  Line 1. One Apple Park Way.\n    WFAddressLine2:  Line 2.\n    WFCity:  City. Cupertino.\n    WFState:  State. California.\n    WFPostalCode:  Postal Code. 95014.\n    WFCountry:  Region. United States.\nReturn Value:\n    Street Address: \nDescription:\n    Street Address: Passes the specified address to the next action.\nParameterSummary: (operation) ${operation} personal hotspot\n",
    "is.workflow.actions.setvolume": "is.workflow.actions.setvolume(WFVolumeSetting: Enum = \"Media\", WFVolume: Float = 0.5)\nParameters:\n    WFVolumeSetting:  Volume Setting. The volume setting to change, either Media or Ringtone.. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Media\", \"Ringtone\".\n    WFVolume:  Volume. If you set the volume using a variable, use a number between 0 and 1 (for example, pass 0.5 for half volume)..\nDescription:\n    Set Volume: Sets the volume of the device.\nParameterSummary: (WFVolume) Set volume to ${WFVolume}; (WFVolumeSetting,WFVolume) Set ${WFVolumeSetting} volume to ${WFVolume}\n",
    "is.workflow.actions.tumblr.post": "is.workflow.actions.tumblr.post(WFInput: WFVariablePickerParameter(Object), WFComposeInApp: WFTumblrComposeInAppParameter(Object), WFBlogName: WFTumblrBlogPickerParameter(Object), WFPostType: Enum = \"Text\", WFPostState: Enum = \"Post Now\", WFPostTitle: String, WFPostSource: String, WFPostCaption: String, WFPostTags: String, WFPostDescription: String) -> Tumblr Post URL: WFURLContentItem(Object)\nParameters:\n    WFInput:  Content.\n    WFComposeInApp:  Compose In Tumblr.\n    WFBlogName:  Blog. The name of the blog to post to.. This value depends on the value of WFComposeInApp. This parameter is only valid when the value of \"WFComposeInApp\" is False.\n    WFPostType:  Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Text\", \"Photos\", \"Quote\", \"Link\", \"Chat\", \"Audio\", \"Video\".\n    WFPostState:  Post Status. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Post Now\", \"Add to Queue\", \"Save as Draft\", \"Post Privately\". This value depends on the value of WFComposeInApp. This parameter is only valid when the value of \"WFComposeInApp\" is False.\n    WFPostTitle:  Title. optional. This value depends on the value of WFPostType. This parameter is only valid when the value of \"WFPostType\" is \"Text\", \"Link\", \"Chat\".\n    WFPostSource:  Source. optional. This value depends on the value of WFPostType. This parameter is only valid when the value of \"WFPostType\" is \"Quote\".\n    WFPostCaption:  Caption. optional. This value depends on the value of WFPostType. This parameter is only valid when the value of \"WFPostType\" is \"Audio\", \"Video\", \"Photos\". This value depends on the value of WFComposeInApp. This parameter is only valid when the value of \"WFComposeInApp\" is False.\n    WFPostTags:  Tags. shortcuts, apple.\n    WFPostDescription:  Description. This value depends on the value of WFPostType. This parameter is only valid when the value of \"WFPostType\" is \"Link\".\nReturn Value:\n    Tumblr Post URL: The URL of the new post\nDescription:\n    Post to Tumblr: Posts the content passed into the action to Tumblr.\nParameterSummary: Post ${WFInput}\n",
    "is.workflow.actions.posters.switch": "is.workflow.actions.posters.switch(WFPoster: WFPosterPickerParameter(Object))\nParameters:\n    WFPoster:  Wallpaper.\nDescription:\n    Switch Between Wallpapers: Switches the current Lock Screen wallpaper.. If the wallpaper has a linked Focus, this action will set the Focus, too.\nParameterSummary: Switch to ${WFPoster}\n",
    "is.workflow.actions.addframetogif": "is.workflow.actions.addframetogif(WFImage: WFVariablePickerParameter(Object), WFInputGIF: WFVariablePickerParameter(Object), WFGIFDelayTime: Integer = 0.25, WFGIFAutoSize: Bool = True, WFGIFManualSizeWidth: Integer, WFGIFManualSizeHeight: Integer) -> GIF: com.compuserve.gif(Object)\nParameters:\n    WFImage:  Image.\n    WFInputGIF:  GIF. An existing animated GIF, if desired..\n    WFGIFDelayTime:  Delay Time. 0.25.\n    WFGIFAutoSize:  Auto Size.\n    WFGIFManualSizeWidth:  Width. 500. This value depends on the value of WFGIFAutoSize. This parameter is only valid when the value of \"WFGIFAutoSize\" is False.\n    WFGIFManualSizeHeight:  Height. 500. This value depends on the value of WFGIFAutoSize. This parameter is only valid when the value of \"WFGIFAutoSize\" is False.\nReturn Value:\n    GIF: An animated GIF\nDescription:\n    Add Frame to GIF: Adds an image to the existing animated GIF passed as input. If no GIF is passed as input, a new animated GIF is created.\nParameterSummary: Add ${WFImage} to ${WFInputGIF}\n",
    "is.workflow.actions.dropbox.open": "is.workflow.actions.dropbox.open(WFShowFilePicker: Bool = True, SelectMultiple: Bool, WFGetFilePath: String, WFGetFileInitialDirectoryPath: String, WFFileErrorIfNotFound: Bool = True) -> File: public.data(Object)\nParameters:\n    WFShowFilePicker:  Show Document Picker.\n    SelectMultiple:  Select Multiple. This value depends on the value of WFShowFilePicker. This parameter is only valid when the value of \"WFShowFilePicker\" is True.\n    WFGetFilePath:  File Path. example.txt. The path to retrieve, such as “/folder/file.txt”. This value depends on the value of WFShowFilePicker. This parameter is only valid when the value of \"WFShowFilePicker\" is False.\n    WFGetFileInitialDirectoryPath:  Initial Path. optional.\n    WFFileErrorIfNotFound:  Error If Not Found. This value depends on the value of WFShowFilePicker. This parameter is only valid when the value of \"WFShowFilePicker\" is False.\nReturn Value:\n    File: \nDescription:\n    Get Dropbox File: Gets files from Dropbox. Turn off “Show Document Picker” to specify a path to retrieve.\nParameterSummary: (WFVolumeSetting,WFVolume) Set ${WFVolumeSetting} volume to ${WFVolume}\n",
    "is.workflow.actions.unzip": "is.workflow.actions.unzip(WFArchive: WFVariablePickerParameter(Object)) -> Files: WFGenericFileContentItem(Object)\nParameters:\n    WFArchive:  Archive. Archive.\nReturn Value:\n    Files: \nDescription:\n    Extract Archive: Extracts files from the archive passed as input. Many archive formats are supported, including zip, rar, tar.gz, tar.bz2, tar, gzip, cpio, cab, and iso archives.\nParameterSummary: Extract ${WFArchive}\n",
    "is.workflow.actions.dropbox.appendfile": "is.workflow.actions.dropbox.appendfile(WFFilePath: String, WFAppendFileWriteMode: Enum = \"Append\", WFAppendOnNewLine: Bool = True, WFInput: String) -> Appended File: public.data(Object)\nParameters:\n    WFFilePath:  File Path. example.txt. The name or path of the file to retrieve. For example, if you are appending a file called “notes.txt” in a folder called “Public”, use “/Public/notes.txt”..\n    WFAppendFileWriteMode:  Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Append\", \"Prepend\".\n    WFAppendOnNewLine:  Make New Line.\n    WFInput:  Text.\nReturn Value:\n    Appended File: The file that was appended to\nDescription:\n    Append to Dropbox Text File: Adds the text passed as input to the end of the specified file.. If no file exists yet at the specified path, a new file will be created. Make sure to include a file extension (usually .txt) at the end of your path.\nParameterSummary: ${WFAppendFileWriteMode} ${WFInput}\n",
    "is.workflow.actions.urlencode": "is.workflow.actions.urlencode(WFEncodeMode: Enum = \"Encode\", WFInput: String) -> URL Encoded Text: WFStringContentItem(Object)\nParameters:\n    WFEncodeMode:  Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Encode\", \"Decode\".\n    WFInput:  Text.\nReturn Value:\n    URL Encoded Text: \nDescription:\n    URL Encode: Encodes or decodes text passed into the action to be suitable for inclusion in a URL by adding or removing percent escapes when appropriate.\nParameterSummary: URL ${WFEncodeMode} ${WFInput}\n",
    "is.workflow.actions.handoff": "is.workflow.actions.handoff()\nDescription:\n    Continue in Shortcuts App: Switches into the Shortcuts app and continues to the next action.\nParameterSummary: Continue in Shortcuts app\n",
    "is.workflow.actions.nothing": "is.workflow.actions.nothing() -> Nothing: WFContentItem(Object)\nReturn Value:\n    Nothing: Nothing\nDescription:\n    Nothing: This action does nothing and produces no output. It is useful to separate blocks of actions, or to explicitly pass an empty input to an action.\nParameterSummary: Nothing\n",
    "is.workflow.actions.round": "is.workflow.actions.round(WFInput: Integer, WFRoundTo: Enum = \"Ones Place\", WFRoundMode: Enum = \"Normal\", TenToThePowerOf: Integer) -> Rounded Number: NSDecimalNumber(Object)\nParameters:\n    WFInput:  Number.\n    WFRoundTo:  Value. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Millions\", \"Hundred Thousands\", \"Ten Thousands\", \"Thousands\", \"Hundreds Place\", \"Tens Place\", \"Ones Place\", \"Tenths\", \"Hundredths\", \"Thousandths\", \"Ten Thousandths\", \"Hundred Thousandths\", \"Millionths\", \"Ten Millionths\", \"Hundred Millionths\", \"Billionths\", \"10 ^\".\n    WFRoundMode:  Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Normal\", \"Always Round Up\", \"Always Round Down\".\n    TenToThePowerOf:  Ten to the Power of. This value depends on the value of WFRoundTo. This parameter is only valid when the value of \"WFRoundTo\" is \"10 ^\".\nReturn Value:\n    Rounded Number: \nDescription:\n    Round Number: Rounds the number(s) passed into the action.\nParameterSummary: (WFInput,WFRoundTo,WFRoundMode,TenToThePowerOf) Round ${WFInput} to ${WFRoundTo} ${TenToThePowerOf}; (WFInput,WFRoundTo,WFRoundMode) Round ${WFInput} to ${WFRoundTo}\n",
    "is.workflow.actions.getparkedcarlocation": "is.workflow.actions.getparkedcarlocation() -> Car Location: WFParkedCarContentItem(Object)\nReturn Value:\n    Car Location: The location of the car and its associated details. If no location is known, this action returns nothing.\nDescription:\n    Get Parked Car Location: Fetches the details of your Parked Car, as stored in the Maps app.\nParameterSummary: (WFInput,WFRoundTo,WFRoundMode) Round ${WFInput} to ${WFRoundTo}\n",
    "is.workflow.actions.seek": "is.workflow.actions.seek(WFSeekBehavior: Enum = \"To Time\", WFTimeInterval: Enum, WFMediaRoute: WFMediaRoutePickerParameter(Object) = \"Local\")\nParameters:\n    WFSeekBehavior:  Seek Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"To Time\", \"Forward By\", \"Backward By\".\n    WFTimeInterval:  Time Interval. 30. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"sec\", \"min\", \"hr\".\n    WFMediaRoute:  Device.\nDescription:\n    Seek: Seek to a specific time, or forward and backward by some duration, in the currently playing media.\nParameterSummary: Seek ${WFSeekBehavior} ${WFTimeInterval} on ${WFMediaRoute}\n",
    "is.workflow.actions.trello.add.board": "is.workflow.actions.trello.add.board(WFTrelloName: String, WFTrelloDescription: String) -> Trello Board: WFTrelloBoard(Object)\nParameters:\n    WFTrelloName:  Name. Shortcuts.\n    WFTrelloDescription:  Description.\nReturn Value:\n    Trello Board: \nDescription:\n    Create Trello Board: Creates a new board in your Trello account.\nParameterSummary: Create the board ${WFTrelloName}\n",
    "is.workflow.actions.wallpaper.set": "is.workflow.actions.wallpaper.set(WFInput: WFVariablePickerParameter(Object), WFWallpaperLocation: Enum = ['Lock Screen', 'Home Screen'], WFWallpaperShowPreview: Bool = True, WFWallpaperPerspectiveZoom: Bool, WFSelectedPoster: WFPosterPickerParameter(Object), WFWallpaperSmartCrop: Bool = True, WFWallpaperLegibilityBlur: Bool = True) -> Wallpaper: WFPosterRepresentation(Object)\nParameters:\n    WFInput:  Image.\n    WFWallpaperLocation:  Wallpaper Location. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Lock Screen\", \"Home Screen\".\n    WFWallpaperShowPreview:  Show Preview. This value depends on the value of WFWallpaperLocation. This parameter is only valid when the value of \"WFWallpaperLocation\" is \"Home Screen\".\n    WFWallpaperPerspectiveZoom:  Perspective Zoom. This value depends on the value of WFWallpaperShowPreview. This parameter is only valid when the value of \"WFWallpaperShowPreview\" is False.\n    WFSelectedPoster:  Wallpaper.\n    WFWallpaperSmartCrop:  Crop to Subject.\n    WFWallpaperLegibilityBlur:  Legibility Blur. This value depends on the value of WFWallpaperLocation. This parameter is only valid when the value of \"WFWallpaperLocation\" is \"Lock Screen\".\nReturn Value:\n    Wallpaper: \nDescription:\n    Set Wallpaper Photo: Sets the wallpaper to the specified image.\nParameterSummary: (WFWallpaperLocation,WFInput) Set ${WFWallpaperLocation} wallpaper to ${WFInput}; (WFWallpaperLocation,WFInput,WFWallpaperPerspectiveZoom) Set ${WFWallpaperLocation} wallpaper to ${WFInput}; (WFWallpaperLocation,WFSelectedPoster,WFInput,WFWallpaperShowPreview,WFWallpaperLegibilityBlur,WFWallpaperSmartCrop) Set ${WFSelectedPoster} to ${WFInput} for ${WFWallpaperLocation}; (WFWallpaperLocation,WFSelectedPoster,WFInput,WFWallpaperShowPreview,WFWallpaperSmartCrop) Set ${WFSelectedPoster} to ${WFInput} for ${WFWallpaperLocation}; (WFWallpaperLocation,WFSelectedPoster,WFInput,WFWallpaperLegibilityBlur,WFWallpaperSmartCrop) Set ${WFSelectedPoster} to ${WFInput} for ${WFWallpaperLocation}; (WFInput) Set wallpaper to ${WFInput}; (WFWallpaperLocation,WFInput,WFWallpaperShowPreview) Set ${WFWallpaperLocation} wallpaper to ${WFInput}; (WFWallpaperLocation,WFSelectedPoster,WFInput,WFWallpaperSmartCrop) Set ${WFSelectedPoster} to ${WFInput} for ${WFWallpaperLocation}\n",
    "is.workflow.actions.safari.geturl": "is.workflow.actions.safari.geturl() -> Web Page: WFSafariWebPage(Object)\nReturn Value:\n    Web Page: \nDescription:\n    Get Current Web Page from Safari: Gets the web page of the frontmost Safari window.\nParameterSummary: Get current web page from Safari\n",
    "is.workflow.actions.getdevicedetails": "is.workflow.actions.getdevicedetails(WFDeviceDetail: Enum = \"Device Name\") -> Device Details: (NSString(Object) or NSNumber(Object))\nParameters:\n    WFDeviceDetail:  Get. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Device Name\", \"Device Hostname\", \"Device Model\", \"Device Is Watch\", \"System Version\", \"System Build Number\", \"Screen Width\", \"Screen Height\", \"Current Volume\", \"Current Brightness\", \"Current Appearance\".\nReturn Value:\n    Device Details: \nDescription:\n    Get Device Details: Gets information about the current device.\nParameterSummary: Get the ${WFDeviceDetail}\n",
    "is.workflow.actions.pinboard.get": "is.workflow.actions.pinboard.get(WFPinTags: String, WFBookmarkCount: Integer = 5) -> Pinboard Bookmarks: WFURLContentItem(Object)\nParameters:\n    WFPinTags:  Tags. apple longread. If specified, only items matching all of these tags will be returned. Supports a maximum of three tags..\n    WFBookmarkCount: \nReturn Value:\n    Pinboard Bookmarks: \nDescription:\n    Get Pinboard Bookmarks: Gets bookmarks in your Pinboard account.\nParameterSummary: Get ${WFBookmarkCount}\n",
    "is.workflow.actions.properties.reminders": "is.workflow.actions.properties.reminders(WFContentItemPropertyName: Enum = \"List\", WFInput: WFVariablePickerParameter(Object))\nParameters:\n    WFContentItemPropertyName:  The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Title\", \"Notes\", \"Due Date\", \"Priority\", \"Is Completed\", \"Is Flagged\", \"Completion Date\", \"List\", \"Tags\", \"URL\", \"Images\", \"Has Subtasks\", \"Subtasks\", \"Parent Reminder\", \"Has Alarms\", \"Reminder Location\", \"File Size\", \"File Extension\", \"Creation Date\", \"File Path\", \"Last Modified Date\", \"Name\".\n    WFInput: \nDescription:\n    Get Details of Reminders: Gets bookmarks in your Pinboard account.\nParameterSummary: Get ${WFContentItemPropertyName} from ${WFInput}\n",
    "is.workflow.actions.image.flip": "is.workflow.actions.image.flip(WFImageFlipDirection: Enum = \"Horizontal\", WFInput: WFVariablePickerParameter(Object)) -> Flipped Image: WFImage(Object)\nParameters:\n    WFImageFlipDirection:  Direction. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Horizontal\", \"Vertical\".\n    WFInput:  Image.\nReturn Value:\n    Flipped Image: \nDescription:\n    Flip Image: Reverses the direction of images either horizontally or vertically.\nParameterSummary: Flip ${WFInput} ${WFImageFlipDirection}\n",
    "is.workflow.actions.trello.add.list": "is.workflow.actions.trello.add.list(WFTrelloName: String, WFTrelloBoard: WFTrelloBoardPickerParameter(Object), WFTrelloPosition: Enum = \"Top\") -> Trello List: WFTrelloList(Object)\nParameters:\n    WFTrelloName:  Name. List.\n    WFTrelloBoard:  Board.\n    WFTrelloPosition:  Position. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Top\", \"Bottom\".\nReturn Value:\n    Trello List: \nDescription:\n    Create Trello List: Creates a new list on the specified board in your Trello account.\nParameterSummary: Create the list ${WFTrelloName} in ${WFTrelloBoard}\n",
    "is.workflow.actions.notification": "is.workflow.actions.notification(WFNotificationActionTitle: String, WFNotificationActionBody: String = \"Hello World\", WFNotificationActionSound: Bool = True, WFInput: WFVariablePickerParameter(Object))\nParameters:\n    WFNotificationActionTitle:  Title. optional.\n    WFNotificationActionBody:  Body. Text.\n    WFNotificationActionSound:  Play Sound.\n    WFInput:  Attachment. Choose Variable. An image or video to include in the notification.\nDescription:\n    Show Notification: Displays a local notification.\nParameterSummary: Show notification ${WFNotificationActionBody}\n",
    "is.workflow.actions.properties.eventattendees": "is.workflow.actions.properties.eventattendees(WFContentItemPropertyName: Enum, WFInput: WFVariablePickerParameter(Object))\nParameters:\n    WFContentItemPropertyName:  The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Status\", \"Role\", \"Type\", \"Is Me\", \"Email Address\", \"Name\".\n    WFInput: \nDescription:\n    Get Details of Event Attendees: Displays a local notification.\nParameterSummary: Get ${WFContentItemPropertyName} from ${WFInput}\n",
    "is.workflow.actions.properties.images": "is.workflow.actions.properties.images(WFContentItemPropertyName: Enum, WFInput: WFVariablePickerParameter(Object))\nParameters:\n    WFContentItemPropertyName:  The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Album\", \"Width\", \"Height\", \"Date Taken\", \"Media Type\", \"Photo Type\", \"Is a Screenshot\", \"Is a Screen Recording\", \"Location\", \"Duration\", \"Frame Rate\", \"Orientation\", \"Camera Make\", \"Camera Model\", \"Metadata Dictionary\", \"Is Favorite\", \"File Size\", \"File Extension\", \"Creation Date\", \"File Path\", \"Last Modified Date\", \"Name\".\n    WFInput: \nDescription:\n    Get Details of Images: Displays a local notification.\nParameterSummary: Get ${WFContentItemPropertyName} from ${WFInput}\n",
    "is.workflow.actions.debug.contentattribution": "is.workflow.actions.debug.contentattribution(Input: WFVariablePickerParameter(Object))\nParameters:\n    Input:  Input.\nDescription:\n    Show Content Attribution: Shows the Content Source of Input contents\nParameterSummary: Show Content Attribution of ${Input}\n",
    "is.workflow.actions.share": "is.workflow.actions.share(WFInput: WFVariablePickerParameter(Object))\nParameters:\n    WFInput:  Input.\nDescription:\n    Share: Prompts to share the input.\nParameterSummary: Share ${WFInput}\n",
    "is.workflow.actions.searchweb": "is.workflow.actions.searchweb(WFSearchWebDestination: Enum = \"Google\", WFInputText: String)\nParameters:\n    WFSearchWebDestination:  Service. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Amazon\", \"Bing\", \"DuckDuckGo\", \"eBay\", \"Google\", \"Reddit\", \"Twitter\", \"Yahoo!\", \"YouTube\".\n    WFInputText:  Text.\nDescription:\n    Search Web: Searches the web for the text provided as input.\nParameterSummary: Search ${WFSearchWebDestination} for ${WFInputText}\n",
    "is.workflow.actions.openapp": "is.workflow.actions.openapp(WFSelectedApp: WFAppPickerParameter(Object), WFAppName: String, WFOpenInSlideOver: Bool) -> App: WFAppContentItem(Object)\nParameters:\n    WFSelectedApp:  App.\n    WFAppName:  App Name.\n    WFOpenInSlideOver:  Slide Over.\nReturn Value:\n    App: \nDescription:\n    Open App: Opens the specified app.\nParameterSummary: Open ${WFSelectedApp}\n",
    "is.workflow.actions.text.split": "is.workflow.actions.text.split(text: String, WFTextSeparator: Enum, WFTextCustomSeparator: String)\nParameters:\n    text: \n    WFTextSeparator:  The value of this Enum must be one of the following values (The text in parentheses describes the value): \"New Lines\", \"Spaces\", \"Custom\", \"Every Character\".\n    WFTextCustomSeparator:  Text). This value depends on the value of WFTextSeparator. This parameter is only valid when the value of \"WFTextSeparator\" is \"Custom\".\nDescription:\n    SplitText: Opens the specified app.\nParameterSummary: (text,WFTextSeparator) Split ${text} by ${WFTextSeparator}; (text,WFTextSeparator,WFTextCustomSeparator) Split ${text} by ${WFTextSeparator} ${WFTextCustomSeparator}\n",
    "is.workflow.actions.makediskimage": "is.workflow.actions.makediskimage(WFInput: WFFilePickerParameter(Object), VolumeName: String, EncryptImage: Bool, SizeToFit: Bool, ImageSize: WFUnitQuantityFieldParameter(Object) = 1) -> Disk Image: WFGenericFileContentItem(Object)\nParameters:\n    WFInput:  Files.\n    VolumeName:  Volume Name. optional.\n    EncryptImage:  Encrypt.\n    SizeToFit:  Size to Fit Contents.\n    ImageSize:  Image Size. This value depends on the value of SizeToFit. This parameter is only valid when the value of \"SizeToFit\" is False.\nReturn Value:\n    Disk Image: Disk Image\nDescription:\n    Make Disk Image: Creates a new disk image (.dmg) file. The disk image will contain any files passed as input.\nParameterSummary: Make disk image with ${WFInput}\n",
    "is.workflow.actions.rss.extract": "is.workflow.actions.rss.extract(WFURLs: String) -> RSS Feeds from Page: WFURLContentItem(Object)\nParameters:\n    WFURLs:  Page.\nReturn Value:\n    RSS Feeds from Page: \nDescription:\n    Get RSS Feeds from Page: Extracts any RSS feed URLs from the given web URLs or web page.\nParameterSummary: Get RSS feeds from ${WFURLs}\n",
    "is.workflow.actions.pinboard.add": "is.workflow.actions.pinboard.add(WFPinTitle: String, WFPinTags: String, WFPinPublic: Bool = True, WFPinUnread: Bool = True, WFPinDescription: String, WFPinboardURL: String)\nParameters:\n    WFPinTitle:  Title. optional.\n    WFPinTags:  Tags. apple longread.\n    WFPinPublic:  Public.\n    WFPinUnread:  Unread.\n    WFPinDescription:  Description.\n    WFPinboardURL:  URL.\nDescription:\n    Add to Pinboard: Adds the URL passed into the action to your Pinboard.\nParameterSummary: Add ${WFPinboardURL}\n",
    "is.workflow.actions.detect.phonenumber": "is.workflow.actions.detect.phonenumber(WFInput: String) -> Phone Numbers: WFPhoneNumberContentItem(Object)\nParameters:\n    WFInput:  Input.\nReturn Value:\n    Phone Numbers: \nDescription:\n    Get Phone Numbers from Input: Returns any phone numbers found in the output from the previous action.\nParameterSummary: Get phone numbers from ${WFInput}\n",
    "is.workflow.actions.exportsong": "is.workflow.actions.exportsong(WFExportSongActionSelectMultiple: Bool) -> Music: MPMediaItem(Object)\nParameters:\n    WFExportSongActionSelectMultiple:  Select Multiple Songs.\nReturn Value:\n    Music: \nDescription:\n    Select Music: Prompts to select music from your local music library.\nParameterSummary: Select music\n",
    "is.workflow.actions.measurement.create": "is.workflow.actions.measurement.create(WFMeasurementUnitType: WFUnitTypePickerParameter(Object) = \"Length\", WFMeasurementUnit: WFUnitQuantityFieldParameter(Object)) -> Measurement: NSMeasurement(Object)\nParameters:\n    WFMeasurementUnitType:  Type.\n    WFMeasurementUnit:  Value.\nReturn Value:\n    Measurement: \nDescription:\n    Measurement: Passes the specified measurement (including number and unit) to the next action.\nParameterSummary: ${WFMeasurementUnitType}\n${WFMeasurementUnit}\n",
    "is.workflow.actions.showresult": "is.workflow.actions.showresult(Text: String)\nParameters:\n    Text:  Result.\nDescription:\n    Show Result: Shows a preview of the provided content. If run from Siri, speaks the provided text.\nParameterSummary: Show ${Text}\n",
    "is.workflow.actions.makegif": "is.workflow.actions.makegif(WFMakeGIFActionDelayTime: Integer = 0.2, WFMakeGIFActionLoopEnabled: Bool = True, WFMakeGIFActionLoopCount: Integer, WFMakeGIFActionAutoSize: Bool = True, WFMakeGIFActionManualSizeWidth: Integer, WFMakeGIFActionManualSizeHeight: Integer, WFInput: WFVariablePickerParameter(Object)) -> GIF: com.compuserve.gif(Object)\nParameters:\n    WFMakeGIFActionDelayTime:  Seconds Per Photo. 0.2.\n    WFMakeGIFActionLoopEnabled:  Loop Forever.\n    WFMakeGIFActionLoopCount:  This value depends on the value of WFMakeGIFActionLoopEnabled. This parameter is only valid when the value of \"WFMakeGIFActionLoopEnabled\" is False.\n    WFMakeGIFActionAutoSize:  Auto Size.\n    WFMakeGIFActionManualSizeWidth:  Width. 500. This value depends on the value of WFMakeGIFActionAutoSize. This parameter is only valid when the value of \"WFMakeGIFActionAutoSize\" is False.\n    WFMakeGIFActionManualSizeHeight:  Height. 500. This value depends on the value of WFMakeGIFActionAutoSize. This parameter is only valid when the value of \"WFMakeGIFActionAutoSize\" is False.\n    WFInput:  Content.\nReturn Value:\n    GIF: An animated GIF\nDescription:\n    Make GIF: Creates an animated GIF from the images or video passed into the action.\nParameterSummary: Make GIF from ${WFInput}\n",
    "is.workflow.actions.properties.safariwebpage": "is.workflow.actions.properties.safariwebpage(WFContentItemPropertyName: Enum, WFInput: WFVariablePickerParameter(Object))\nParameters:\n    WFContentItemPropertyName:  The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Page Contents\", \"Page Selection\", \"Page URL\", \"Name\".\n    WFInput: \nDescription:\n    Get Details of Safari Web Page: Creates an animated GIF from the images or video passed into the action.. Safari Web Page items are only available when running your shortcut as an Action Extension in Safari.\nParameterSummary: Get ${WFContentItemPropertyName} from ${WFInput}\n",
    "is.workflow.actions.setclipboard": "is.workflow.actions.setclipboard(WFLocalOnly: Bool, WFExpirationDate: String, WFInput: WFVariablePickerParameter(Object))\nParameters:\n    WFLocalOnly:  Local Only. When enabled, the input will only be copied locally, and will not be shared to other devices via Handoff..\n    WFExpirationDate:  Expire At. Today at 3 PM. When set, the clipboard contents will expire and be automatically deleted at the specified time. Optional..\n    WFInput:  Content.\nDescription:\n    Copy to Clipboard: Copies the result of the last action to the clipboard.\nParameterSummary: Copy ${WFInput} to clipboard\n",
    "is.workflow.actions.selectemail": "is.workflow.actions.selectemail() -> Email Addresses: WFEmailAddress(Object)\nReturn Value:\n    Email Addresses: \nDescription:\n    Select Email Address: Prompts to pick an email address from your contacts and passes the selection to the next action.\nParameterSummary: (text,WFTextSeparator,WFTextCustomSeparator) Split ${text} by ${WFTextSeparator} ${WFTextCustomSeparator}\n",
    "is.workflow.actions.filter.displays": "is.workflow.actions.filter.displays(WFContentItemFilter: WFContentPredicateOperatorParameter, WFContentItemInputParameter: WFVariablePickerParameter(Object), WFContentItemSortProperty: WFDynamicEnumerationParameter(Object), WFContentItemSortOrder: WFDynamicEnumerationParameter(Object))\nParameters:\n    WFContentItemFilter: \n    WFContentItemInputParameter: \n    WFContentItemSortProperty: \n    WFContentItemSortOrder: \nDescription:\n    Find Displays: Prompts to pick an email address from your contacts and passes the selection to the next action.\nParameterSummary: Find Displays that meed the need of the user\n",
    "is.workflow.actions.converttimezone": "is.workflow.actions.converttimezone(Date: String, SourceTimeZone: WFTimeZonePickerParameter(Object), DestinationTimeZone: WFTimeZonePickerParameter(Object)) -> Converted Date: NSDateComponents(Object)\nParameters:\n    Date:  Date. June 29, 2007.\n    SourceTimeZone:  Time Zone.\n    DestinationTimeZone:  Destination Time Zone.\nReturn Value:\n    Converted Date: \nDescription:\n    Convert Time Zone: Converts the specified date and time from one time zone to another.\nParameterSummary: Convert ${Date} from ${SourceTimeZone} to ${DestinationTimeZone}\n",
    "is.workflow.actions.removefromalbum": "is.workflow.actions.removefromalbum(WFRemoveAlbumSelectedGroup: WFPhotoAlbumPickerParameter(Object), WFInput: WFVariablePickerParameter(Object)) -> Removed Photo Media: PHAsset(Object)\nParameters:\n    WFRemoveAlbumSelectedGroup:  Album. Photo Album.\n    WFInput:  Input. Photos, videos to remove.\nReturn Value:\n    Removed Photo Media: The removed items\nDescription:\n    Remove from Photo Album: Removes the photos or videos passed as input from the specified photo album.\nParameterSummary: Remove ${WFInput} from ${WFRemoveAlbumSelectedGroup}\n",
    "is.workflow.actions.setparkedcar": "is.workflow.actions.setparkedcar(WFLocation: WFLocationParameter(Object), WFSetParkedCarNotes: String, WFImage: WFVariablePickerParameter(Object)) -> Parked Car: WFParkedCarContentItem(Object)\nParameters:\n    WFLocation:  Location. The location of the car..\n    WFSetParkedCarNotes:  Notes. Optional text that will be stored along with your parked car..\n    WFImage:  Image. An optional image of the location where you parked the car..\nReturn Value:\n    Parked Car: The location of the car and its associated details, if any.\nDescription:\n    Set Parked Car: Saves details of your Parked Car in the Maps app.\nParameterSummary: Set Parked Car at ${WFLocation}\n",
    "is.workflow.actions.venmo.pay": "is.workflow.actions.venmo.pay(IntentAppDefinition: WFIntentAppPickerParameter(Object) = {'BundleIdentifier': 'com.apple.PassKit.PassKitIntentsExtension'}, WFVenmoActionRecipients: WFContactHandleFieldParameter(Object), WFVenmoActionAmount: Float, WFVenmoActionAppSwitch: Bool, WFVenmoActionNote: String)\nParameters:\n    IntentAppDefinition:  App.\n    WFVenmoActionRecipients:  Recipients. Phone or email.\n    WFVenmoActionAmount:  Amount. 7.00.\n    WFVenmoActionAppSwitch:  Open in App.\n    WFVenmoActionNote:  Note.\nDescription:\n    Send Payment: Sends a payment to the specified people using a payment app on your device.\nParameterSummary: Send ${WFVenmoActionAmount} to ${WFVenmoActionRecipients}\n",
    "is.workflow.actions.deskconnect.send": "is.workflow.actions.deskconnect.send(WFInput: WFVariablePickerParameter(Object))\nParameters:\n    WFInput:  Content.\nDescription:\n    Send via DeskConnect: Sends the input to another device via DeskConnect. DeskConnect makes it easy to send web pages, documents, pictures, and anything else between your devices.\nParameterSummary: Send ${WFInput} via the missing link between your devices, DeskConnect 💔\n",
    "is.workflow.actions.detect.link": "is.workflow.actions.detect.link(WFInput: String) -> URLs: WFURLContentItem(Object)\nParameters:\n    WFInput:  Input.\nReturn Value:\n    URLs: \nDescription:\n    Get URLs from Input: Returns any links found in the output from the previous action.\nParameterSummary: Get URLs from ${WFInput}\n",
    "is.workflow.actions.readinglist": "is.workflow.actions.readinglist(WFURL: String)\nParameters:\n    WFURL:  URL.\nDescription:\n    Add to Reading List: Adds URLs passed into the action to your reading list.\nParameterSummary: Add ${WFURL} to Reading List\n",
    "is.workflow.actions.generatebarcode": "is.workflow.actions.generatebarcode(WFQRErrorCorrectionLevel: Enum = \"Medium\", WFText: String) -> QR Code: WFImage(Object)\nParameters:\n    WFQRErrorCorrectionLevel:  Error Correction. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Low\", \"Medium\", \"Quartile\", \"High\".\n    WFText:  Text.\nReturn Value:\n    QR Code: \nDescription:\n    Generate QR Code: Generates a QR code from the input text.\nParameterSummary: Generate QR code from ${WFText}\n",
    "is.workflow.actions.todoist.add": "is.workflow.actions.todoist.add(WFTodoistContent: String, WFTodoistProject: WFTodoistProjectPickerParameter(Object) = \"Inbox\", WFTodoistDueDate: String, WFTodoistReminder: String, WFTodoistReminderType: Enum = \"Email\", WFTodoistPriority: Enum = \"4\", WFTodoistNotes: String, WFTodoistFile: WFVariablePickerParameter(Object)) -> Todoist Item: NSURL(Object)\nParameters:\n    WFTodoistContent:  Item.\n    WFTodoistProject:  Project.\n    WFTodoistDueDate:  Due Date. May 23.\n    WFTodoistReminder:  Remind Me On. May 23 at 1 PM.\n    WFTodoistReminderType:  Reminder Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Email\", \"Push Notification\", \"Text Message\". This value depends on the value of WFTodoistReminder. This parameter is only valid when the value of \"WFTodoistReminder\" is \"\".\n    WFTodoistPriority:  Priority. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"4\", \"3\", \"2\", \"1\".\n    WFTodoistNotes:  Notes.\n    WFTodoistFile:  Files. Choose Variable. Files to attach to the item.\nReturn Value:\n    Todoist Item: The URL of the newly created item\nDescription:\n    Add Todoist Item: Adds a new item to Todoist.\nParameterSummary: Add ${WFTodoistContent} to ${WFTodoistProject}\n",
    "is.workflow.actions.date": "is.workflow.actions.date(WFDateActionMode: Enum = \"Current Date\", WFDateActionDate: String) -> Date: NSDate(Object)\nParameters:\n    WFDateActionMode:  Use. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Current Date\", \"Specified Date\".\n    WFDateActionDate:  Date. June 29, 2007. This value depends on the value of WFDateActionMode. This parameter is only valid when the value of \"WFDateActionMode\" is \"Specified Date\".\nReturn Value:\n    Date: \nDescription:\n    Date: Passes the specified date and time to the next action.\nParameterSummary: (WFDateActionMode) ${WFDateActionMode}; (WFDateActionMode,WFDateActionDate) ${WFDateActionMode} ${WFDateActionDate}\n",
    "is.workflow.actions.getframesfromimage": "is.workflow.actions.getframesfromimage(WFImage: WFVariablePickerParameter(Object)) -> Frames from Image: (WFImageContentItem(Object) or WFPhotoMediaContentItem(Object))\nParameters:\n    WFImage:  Image. An animated GIF or photo burst.\nReturn Value:\n    Frames from Image: The frames\nDescription:\n    Get Frames from Image: Splits an animated GIF or a photo burst into individual frames.\nParameterSummary: Get frames from ${WFImage}\n",
    "is.workflow.actions.repeat.each": "is.workflow.actions.repeat.each(WFInput: WFVariablePickerParameter(Object)) -> Repeat with Each: WFContentItem(Object)\nParameters:\n    WFInput:  Items. A list of items.\nReturn Value:\n    Repeat with Each: Every item passed to the “End Repeat” action\nDescription:\n    Repeat with Each: Takes a list of items as input, and runs the contained actions once for each item in the list.\nParameterSummary: Repeat with each item in ${WFInput}\n",
    "is.workflow.actions.searchmaps": "is.workflow.actions.searchmaps(WFInput: WFLocationParameter(Object), WFSearchMapsActionApp: WFMapsAppPickerParameter(Object) = \"Maps\")\nParameters:\n    WFInput:  Location.\n    WFSearchMapsActionApp:  App.\nDescription:\n    Open in Maps: Opens your choice of Maps, Google Maps, or Waze and searches for the location, place, or text that was passed into the action.\nParameterSummary: Open ${WFInput} in Maps\n",
    "is.workflow.actions.showwebpage": "is.workflow.actions.showwebpage(WFEnterSafariReader: Bool, WFURL: String)\nParameters:\n    WFEnterSafariReader:  Enter Safari Reader. Enter Safari Reader mode if it’s available for the given web page..\n    WFURL:  URL.\nDescription:\n    Show Web View: Shows the web URL passed into the action in a Safari View Controller, allowing you to view the web page without switching apps.\nParameterSummary: Show web view at ${WFURL}\n",
    "is.workflow.actions.setbrightness": "is.workflow.actions.setbrightness(WFBrightness: Float = 0.5)\nParameters:\n    WFBrightness: \nDescription:\n    Set Brightness: Shows the web URL passed into the action in a Safari View Controller, allowing you to view the web page without switching apps.\nParameterSummary: Set brightness to ${WFBrightness}\n",
    "is.workflow.actions.rss": "is.workflow.actions.rss(WFRSSFeedURL: String = \"https://www.apple.com/newsroom/rss-feed.rss\", WFRSSItemQuantity: Integer = 10) -> RSS Items: (WFArticle(Object) or NSURL(Object))\nParameters:\n    WFRSSFeedURL:  URL. RSS feed.\n    WFRSSItemQuantity: \nReturn Value:\n    RSS Items: \nDescription:\n    Get Items from RSS Feed: Downloads the latest items from an RSS feed.\nParameterSummary: Get ${WFRSSItemQuantity} from ${WFRSSFeedURL}\n",
    "is.workflow.actions.announcenotifications.set": "is.workflow.actions.announcenotifications.set(operation: Enum = \"set\", OnValue: Bool = True)\nParameters:\n    operation:  The value of this Enum must be one of the following values (The text in parentheses describes the value): \"set\", \"toggle\".\n    OnValue: \nDescription:\n    Set announce notifications: Downloads the latest items from an RSS feed.\nParameterSummary: (operation,OnValue) ${operation} announce notifications ${OnValue}; (operation) ${operation} announce notifications\n",
    "is.workflow.actions.health.quantity.log": "is.workflow.actions.health.quantity.log(WFQuantitySampleType: WFQuantityTypePickerParameter(Object), WFQuantitySampleQuantity: WFHealthQuantityFieldParameter(Object), WFQuantitySampleAdditionalQuantity: WFHealthQuantityAdditionalFieldParameter(Object), WFQuantitySampleAdditionalEnumeration: WFHealthQuantityAdditionalPickerParameter(Object), WFCategorySampleEnumeration: WFHealthCategoryPickerParameter(Object), WFCategorySampleAdditionalEnumerationKey: WFHealthCategoryAdditionalPickerParameter(Object), WFQuantitySampleDate: String, WFSampleEndDate: String) -> Health Sample: WFHKSampleContentItem(Object)\nParameters:\n    WFQuantitySampleType:  Type.\n    WFQuantitySampleQuantity:  Value. Sample Value.\n    WFQuantitySampleAdditionalQuantity:  10).\n    WFQuantitySampleAdditionalEnumeration:  Reason.\n    WFCategorySampleEnumeration:  Value.\n    WFCategorySampleAdditionalEnumerationKey:  Value.\n    WFQuantitySampleDate:  Date. optional. The date and time of the data point. The current date will be used if you don't provide a date..\n    WFSampleEndDate:  End Date. optional. The date and time for the end of the data point. The current date will be used if you don't provide a date..\nReturn Value:\n    Health Sample: \nDescription:\n    Log Health Sample: Adds a data point into the Health app. You can log anything that the Health app supports, including your weight, steps taken, running distance, caloric intake and more.\nParameterSummary: (operation) ${operation} announce notifications\n",
    "is.workflow.actions.vpn.set": "is.workflow.actions.vpn.set(WFVPNOperation: Enum = \"Connect\", WFOnDemandValue: Bool = True, WFVPN: WFVPNPickerParameter(Object))\nParameters:\n    WFVPNOperation:  Operation. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Connect\", \"Disconnect\", \"Toggle\", \"Set On Demand\", \"Toggle On Demand\".\n    WFOnDemandValue:  Set On Demand To. This value depends on the value of WFVPNOperation. This parameter is only valid when the value of \"WFVPNOperation\" is \"Set On Demand\".\n    WFVPN:  VPN. The VPN that will be configured by running this action..\nDescription:\n    Set VPN: Connects, disconnects or changes the On Demand setting for a VPN Configuration on this device.. VPN Configurations can be set up in the Settings app. On macOS, you must authenticate as an administrator to change the On Demand setting for a VPN Configuration.\nParameterSummary: (WFVPNOperation,WFVPN) ${WFVPNOperation} ${WFVPN} VPN; (WFVPNOperation,WFOnDemandValue,WFVPN) ${WFVPNOperation} to ${WFOnDemandValue} for ${WFVPN} VPN\n",
    "is.workflow.actions.image.mask": "is.workflow.actions.image.mask(WFInput: WFVariablePickerParameter(Object), WFMaskType: Enum = \"Rounded Rectangle\", WFMaskCornerRadius: Integer, WFCustomMaskImage: WFVariablePickerParameter(Object)) -> Masked Image: WFImageContentItem(Object)\nParameters:\n    WFInput:  Image. Images to mask.\n    WFMaskType:  Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Rounded Rectangle\", \"Ellipse\", \"Icon\", \"Custom Image\".\n    WFMaskCornerRadius:  Corner Radius. 0. A radius to apply to each corner of the source image in pixels.. This value depends on the value of WFMaskType. This parameter is only valid when the value of \"WFMaskType\" is \"Rounded Rectangle\".\n    WFCustomMaskImage:  Custom Image. Image. An alpha mask to apply to the source image, where darker colors become transparent and lighter colors remain opaque. If the mask is sized differently than the source image, the mask is resized to match the dimensions of the source image.. This value depends on the value of WFMaskType. This parameter is only valid when the value of \"WFMaskType\" is \"Custom Image\".\nReturn Value:\n    Masked Image: The masked images\nDescription:\n    Mask Image: Applies a mask to each image passed into the action. For example, you can cut images into a rounded rectangle, ellipse or icon shape, or provide a custom alpha mask.\nParameterSummary: (WFInput,WFMaskType,WFCustomMaskImage) Mask ${WFInput} with ${WFMaskType} ${WFCustomMaskImage}; (WFInput,WFMaskType,WFMaskCornerRadius) Mask ${WFInput} with ${WFMaskType} shape; (WFInput,WFMaskType) Mask ${WFInput} with ${WFMaskType} shape\n",
    "is.workflow.actions.detect.dictionary": "is.workflow.actions.detect.dictionary(WFInput: WFVariablePickerParameter(Object)) -> Dictionary: WFDictionaryContentItem(Object)\nParameters:\n    WFInput:  Input.\nReturn Value:\n    Dictionary: \nDescription:\n    Get Dictionary from Input: Makes a dictionary from the text passed as input. JSON (like {\"foo\": \"bar\"}), key-value pairs (like foo=bar&baz=biz), and XML-based plist are supported.\nParameterSummary: Get dictionary from ${WFInput}\n",
    "is.workflow.actions.math": "is.workflow.actions.math(WFInput: Integer, WFMathOperation: Enum = \"+\", WFScientificMathOperation: Enum, WFMathOperand: Integer, WFScientificMathOperand: Integer) -> Calculation Result: NSDecimalNumber(Object)\nParameters:\n    WFInput:  Number.\n    WFMathOperation:  Operation. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"+\", \"-\", \"×\", \"÷\", \"…\".\n    WFScientificMathOperation:  Scientific Operation. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Modulus\", \"x^2\", \"x^3\", \"x^y\", \"e^x\", \"10^x\", \"ln(x)\", \"log(x)\", \"√x\", \"∛x\", \"x!\", \"sin(x)\", \"cos(x)\", \"tan(x)\", \"abs(x)\". This value depends on the value of WFMathOperation. This parameter is only valid when the value of \"WFMathOperation\" is \"…\".\n    WFMathOperand:  Operand. Number. This value depends on the value of WFMathOperation. This parameter is only valid when the value of \"WFMathOperation\" is \"…\".\n    WFScientificMathOperand:  Operand. Number. This value depends on the value of WFMathOperation. This parameter is only valid when the value of \"WFMathOperation\" is \"…\". This value depends on the value of WFScientificMathOperation. This parameter is only valid when the value of \"WFScientificMathOperation\" is \"Modulus\", \"x^y\".\nReturn Value:\n    Calculation Result: \nDescription:\n    Calculate: Performs a number operation on the input and returns the result.\nParameterSummary: (WFInput,WFMathOperation,WFMathOperand) ${WFInput} ${WFMathOperation} ${WFMathOperand}; (WFInput,WFMathOperation,WFScientificMathOperation,WFScientificMathOperand) ${WFInput} ${WFMathOperation} ${WFScientificMathOperand}\n",
    "is.workflow.actions.openpasswords": "is.workflow.actions.openpasswords(WFShowPasswordsSearchTerm: String)\nParameters:\n    WFShowPasswordsSearchTerm:  Search Term.\nDescription:\n    Show Passwords: Opens your saved passwords.\nParameterSummary: Show Passwords\n",
    "is.workflow.actions.properties.parkedcar": "is.workflow.actions.properties.parkedcar(WFContentItemPropertyName: Enum, WFInput: WFVariablePickerParameter(Object))\nParameters:\n    WFContentItemPropertyName:  The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Date\", \"Location\", \"Notes\", \"Photo\", \"Was Location Set by User\", \"Name\".\n    WFInput: \nDescription:\n    Get Details of Parked Car: Opens your saved passwords.\nParameterSummary: Get ${WFContentItemPropertyName} from ${WFInput}\n",
    "is.workflow.actions.showdefinition": "is.workflow.actions.showdefinition(Word: String)\nParameters:\n    Word:  Word. word.\nDescription:\n    Show Definition: Shows the definition of the word passed into the action.\nParameterSummary: Show definition of ${Word}\n",
    "is.workflow.actions.output": "is.workflow.actions.output(WFOutput: String, WFNoOutputSurfaceBehavior: Enum = \"Do Nothing\", WFResponse: String)\nParameters:\n    WFOutput:  Result.\n    WFNoOutputSurfaceBehavior:  If there’s nowhere to output. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Respond\", \"Do Nothing\", \"Copy to Clipboard\".\n    WFResponse:  Result. This value depends on the value of WFNoOutputSurfaceBehavior. This parameter is only valid when the value of \"WFNoOutputSurfaceBehavior\" is \"Respond\".\nDescription:\n    Stop and Output: Stops execution of the current shortcut, and outputs content. This action is useful when:\n\n• Running a shortcut from another shortcut (using the Run Shortcut action). The output will be used as the output of the Run Shortcut action.\n• Running a shortcut from Quick Actions in Finder on macOS. The output will be saved as a file alongside the files selected in Finder.\n• Running a shortcut from Services on macOS. The output will replace the selected text, if applicable.\n• Or, when running a shortcut from another location that supports output, like the command-line or the Shortcuts URL scheme.\n\nNo more actions will be run after this action.\nParameterSummary: Stop and output ${WFOutput}\n",
    "is.workflow.actions.cellulardata.set": "is.workflow.actions.cellulardata.set(operation: Enum = \"set\", OnValue: Bool = True)\nParameters:\n    operation:  The value of this Enum must be one of the following values (The text in parentheses describes the value): \"set\", \"toggle\".\n    OnValue: \nDescription:\n    Set Cellular Data: Stops execution of the current shortcut, and outputs content. This action is useful when:\n\n• Running a shortcut from another shortcut (using the Run Shortcut action). The output will be used as the output of the Run Shortcut action.\n• Running a shortcut from Quick Actions in Finder on macOS. The output will be saved as a file alongside the files selected in Finder.\n• Running a shortcut from Services on macOS. The output will replace the selected text, if applicable.\n• Or, when running a shortcut from another location that supports output, like the command-line or the Shortcuts URL scheme.\n\nNo more actions will be run after this action.\nParameterSummary: (operation,OnValue) ${operation} cellular data ${OnValue}; (operation) ${operation} cellular data\n",
    "is.workflow.actions.viewresult": "is.workflow.actions.viewresult(WFInput: WFVariablePickerParameter(Object))\nParameters:\n    WFInput:  Input.\nDescription:\n    View Content Graph: Shows the results of the previous action in the Content Graph.\nParameterSummary: View Content Graph of ${WFInput}\n",
    "is.workflow.actions.runjavascriptonwebpage": "is.workflow.actions.runjavascriptonwebpage(WFJavaScript: String = \"var result = [];\n// Get all links from the page\nvar elements = document.querySelectorAll(\"a\");\nfor (let element of elements) {\n\tresult.push({\n\t\t\"url\": element.href,\n\t\t\"text\": element.innerText\n\t});\n}\n\n// Call completion to finish\ncompletion(result);\", WFInput: WFVariablePickerParameter(Object)) -> JavaScript Result: (WFDictionaryContentItem(Object) or WFStringContentItem(Object) or WFBooleanContentItem(Object) or WFNumberContentItem(Object))\nParameters:\n    WFJavaScript:  JavaScript.\n    WFInput:  Web Page. Safari web pages.\nReturn Value:\n    JavaScript Result: The output from the JavaScript (JSON)\nDescription:\n    Run JavaScript: Runs JavaScript on a Safari web page passed in as input. Safari Web Page items are only available when running your shortcut as an Action Extension in Safari.\nParameterSummary: (operation) ${operation} cellular data\n",
    "is.workflow.actions.ask": "is.workflow.actions.ask(WFInputType: Enum, WFAskActionPrompt: String, WFAllowsMultilineText: Bool = True, WFAskActionDefaultAnswerDateAndTime: String, WFAskActionAllowsNegativeNumbers: Bool, urlAnswer: String, WFAskActionAllowsDecimalNumbers: Bool, WFAskActionDefaultAnswerTime: String, WFAskActionDefaultAnswerNumber: Integer, WFAskActionDefaultAnswer: String, WFAskActionDefaultAnswerURL: String, WFAskActionDefaultAnswerDate: String, WFAskActionImmediateDictation: String, WFAskActionDateGranularity: String) -> Provided Input: (NSString(Object) or NSDecimalNumber(Object) or NSURL(Object) or NSDate(Object))\nParameters:\n    WFInputType:  The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Date\", \"Date and Time\", \"Text\", \"Number\", \"URL\", \"Time\".\n    WFAskActionPrompt: \n    WFAllowsMultilineText: \n    WFAskActionDefaultAnswerDateAndTime: \n    WFAskActionAllowsNegativeNumbers: \n    urlAnswer: \n    WFAskActionAllowsDecimalNumbers: \n    WFAskActionDefaultAnswerTime: \n    WFAskActionDefaultAnswerNumber: \n    WFAskActionDefaultAnswer:  Default Answer.\n    WFAskActionDefaultAnswerURL: \n    WFAskActionDefaultAnswerDate: \n    WFAskActionImmediateDictation: \n    WFAskActionDateGranularity: \nReturn Value:\n    Provided Input: \nDescription:\n    Ask for Input from the User: Displays a dialog prompting the user to enter a piece of information.\nParameterSummary: Ask for ${WFInputType} with ${WFAskActionPrompt}\n",
    "is.workflow.actions.properties.weather.conditions": "is.workflow.actions.properties.weather.conditions(WFContentItemPropertyName: Enum, WFInput: WFVariablePickerParameter(Object))\nParameters:\n    WFContentItemPropertyName:  The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Date\", \"Location\", \"Temperature\", \"Low\", \"High\", \"Feels Like\", \"Condition\", \"Visibility\", \"Dewpoint\", \"Humidity\", \"Pressure\", \"Precipitation Amount\", \"Precipitation Chance\", \"Wind Speed\", \"Wind Direction\", \"UV Index\", \"Sunrise Time\", \"Sunset Time\", \"Air Quality Index\", \"Air Quality Category\", \"Air Pollutants\", \"Name\".\n    WFInput: \nDescription:\n    Get Details of Weather Conditions: Displays a dialog prompting the user to enter a piece of information.\nParameterSummary: Get ${WFContentItemPropertyName} from ${WFInput}\n",
    "is.workflow.actions.repeat.count": "is.workflow.actions.repeat.count(WFRepeatCount: Integer = 1) -> Repeat: WFContentItem(Object)\nParameters:\n    WFRepeatCount: \nReturn Value:\n    Repeat: \nDescription:\n    Repeat: Repeats the contained actions, running them the specified number of times.\nParameterSummary: Repeat ${WFRepeatCount}\n",
    "is.workflow.actions.file.rename": "is.workflow.actions.file.rename(WFFile: WFFilePickerParameter(Object), WFNewFilename: String) -> File: public.data(Object)\nParameters:\n    WFFile:  File.\n    WFNewFilename:  Name.\nReturn Value:\n    File: \nDescription:\n    Rename File: Renames the specified file.\nParameterSummary: Rename ${WFFile} to ${WFNewFilename}\n",
    "is.workflow.actions.addtoplaylist": "is.workflow.actions.addtoplaylist(WFPlaylistName: WFPlaylistPickerParameter(Object), WFInput: WFVariablePickerParameter(Object)) -> Updated Playlist: MPMediaItem(Object)\nParameters:\n    WFPlaylistName:  Playlist.\n    WFInput:  Music. Items in your music library or items from the Find iTunes Store Items action..\nReturn Value:\n    Updated Playlist: The contents of the updated playlist\nDescription:\n    Add to Playlist: Adds the items passed as input to the specified playlist.\nParameterSummary: Add ${WFInput} to ${WFPlaylistName}\n",
    "is.workflow.actions.addmusictoupnext": "is.workflow.actions.addmusictoupnext(WFWhenToPlay: Enum = \"Next\", WFMusic: WFVariablePickerParameter(Object))\nParameters:\n    WFWhenToPlay:  Play. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Next\", \"Later\".\n    WFMusic:  Music. Items in your music library or items from the Find iTunes Store Items action..\nDescription:\n    Add to Playing Next: Adds the music passed as input to your Playing Next queue.\nParameterSummary: Add ${WFMusic} to ${WFWhenToPlay} of Playing Next\n",
    "is.workflow.actions.makespokenaudiofromtext": "is.workflow.actions.makespokenaudiofromtext(WFInput: String, WFSpeakTextRate: Float = 0.5, WFSpeakTextPitch: Float = 1.0, WFSpeakTextLanguage: WFSpeakTextLanguagePickerParameter(Object) = \"Default\", WFSpeakTextVoice: WFSpeakTextVoicePickerParameter(Object) = \"Default\") -> Spoken Audio: com.apple.coreaudio-format(Object)\nParameters:\n    WFInput:  Text.\n    WFSpeakTextRate:  Rate.\n    WFSpeakTextPitch:  Pitch.\n    WFSpeakTextLanguage:  Language.\n    WFSpeakTextVoice:  Voice.\nReturn Value:\n    Spoken Audio: Audio File\nDescription:\n    Make Spoken Audio from Text: Creates an audio file from text, using text-to-speech.\nParameterSummary: Make spoken audio from ${WFInput}\n",
    "is.workflow.actions.lightroom.import": "is.workflow.actions.lightroom.import(applyPreset: Bool, presetGroup: Enum = \"Color\", preset: WFLightroomPresetPickerParameter(Object), WFInput: WFVariablePickerParameter(Object))\nParameters:\n    applyPreset:  Apply Preset.\n    presetGroup:  Preset Group. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"B&W\", \"Color\", \"Creative\", \"Curve\", \"Grain\", \"Sharpening\", \"Vignetting\". This value depends on the value of applyPreset. This parameter is only valid when the value of \"applyPreset\" is True.\n    preset:  Preset. This value depends on the value of applyPreset. This parameter is only valid when the value of \"applyPreset\" is True.\n    WFInput:  Photos.\nDescription:\n    Import to Lightroom: Imports the photos passed as input into Lightroom.\nParameterSummary: Import ${WFInput} to Lightroom\n",
    "is.workflow.actions.homeaccessory": "is.workflow.actions.homeaccessory(WFHomeTriggerActionSets: WFHomeAccessoryPickerParameter(Object))\nParameters:\n    WFHomeTriggerActionSets:  Scenes and Accessories.\nDescription:\n    Home: Sets a Home accessory.\nParameterSummary: Set ${WFHomeTriggerActionSets}\n",
    "is.workflow.actions.workout.start": "is.workflow.actions.workout.start(IntentAppDefinition: WFIntentAppPickerParameter(Object) = {'BundleIdentifier': 'com.apple.SessionTrackerApp'}, workoutName: WFFitnessWorkoutTypePickerParameter(Object), isOpenEnded: Bool = True, WorkoutGoal: WFWorkoutGoalQuantityFieldParameter(Object) = \"15\")\nParameters:\n    IntentAppDefinition:  App.\n    workoutName:  Type.\n    isOpenEnded:  Open Goal.\n    WorkoutGoal:  Value. This value depends on the value of isOpenEnded. This parameter is only valid when the value of \"isOpenEnded\" is False.\nDescription:\n    Start Workout: Starts a workout on your Apple Watch.\nParameterSummary: (isOpenEnded,workoutName) Start ${workoutName} Workout with ${isOpenEnded}; (isOpenEnded,workoutName,WorkoutGoal) Start ${workoutName} Workout for ${isOpenEnded} ${WorkoutGoal}\n",
    "is.workflow.actions.tweet": "is.workflow.actions.tweet(TweetInput: String)\nParameters:\n    TweetInput:  Tweet. Content to tweet..\nDescription:\n    Tweet: Tweets the input.\nParameterSummary: Tweet ${TweetInput}\n",
    "is.workflow.actions.photos.createalbum": "is.workflow.actions.photos.createalbum(AlbumName: String, WFInput: WFVariablePickerParameter(Object)) -> Saved Photo Media: PHAsset(Object)\nParameters:\n    AlbumName:  Album Name. If there is already a photo album by this name, photos will be added to the existing album instead of creating a new one..\n    WFInput:  Photos. Photos, videos, or audio to include in the new album.\nReturn Value:\n    Saved Photo Media: The items saved to the album\nDescription:\n    Create Photo Album: Creates a new album in the Photos app, including the specified photos and videos.\nParameterSummary: Create photo album ${AlbumName} with ${WFInput}\n",
    "is.workflow.actions.properties.itunesstore": "is.workflow.actions.properties.itunesstore(WFContentItemPropertyName: Enum, WFInput: WFVariablePickerParameter(Object))\nParameters:\n    WFContentItemPropertyName:  The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Artist\", \"Price\", \"Currency Code\", \"Formatted Price\", \"Release Date\", \"Genre\", \"Duration\", \"Is Streamable\", \"Is Explicit\", \"Description\", \"Store ID\", \"Store URL\", \"Artwork\", \"Artwork URL\", \"Name\".\n    WFInput: \nDescription:\n    Get Details of iTunes Product: Creates a new album in the Photos app, including the specified photos and videos.\nParameterSummary: Get ${WFContentItemPropertyName} from ${WFInput}\n",
    "is.workflow.actions.phonenumber": "is.workflow.actions.phonenumber(WFPhoneNumber: WFPhoneNumberFieldParameter(Object)) -> Phone Number: WFPhoneNumber(Object)\nParameters:\n    WFPhoneNumber:  Phone Number. Type in a phone number.\nReturn Value:\n    Phone Number: \nDescription:\n    Phone Number: Passes the specified phone numbers to the next action.\nParameterSummary: (isOpenEnded,workoutName,WorkoutGoal) Start ${workoutName} Workout for ${isOpenEnded} ${WorkoutGoal}\n",
    "is.workflow.actions.venmo.request": "is.workflow.actions.venmo.request(IntentAppDefinition: WFIntentAppPickerParameter(Object) = {'BundleIdentifier': 'com.apple.PassKit.PassKitIntentsExtension'}, WFVenmoActionRecipients: WFContactHandleFieldParameter(Object), WFVenmoActionAmount: Float, WFVenmoActionAppSwitch: Bool, ShowWhenRun: Bool = True, WFVenmoActionNote: String)\nParameters:\n    IntentAppDefinition:  App.\n    WFVenmoActionRecipients:  Recipients. Contact.\n    WFVenmoActionAmount:  Amount.\n    WFVenmoActionAppSwitch:  Open in App.\n    ShowWhenRun:  Show When Run. This value depends on the value of WFVenmoActionAppSwitch. This parameter is only valid when the value of \"WFVenmoActionAppSwitch\" is False.\n    WFVenmoActionNote:  Note.\nDescription:\n    Request Payment: Requests a payment from the specified people using a payment app on your device.\nParameterSummary: Request ${WFVenmoActionAmount} from ${WFVenmoActionRecipients}\n",
    "is.workflow.actions.text.replace": "is.workflow.actions.text.replace(WFReplaceTextFind: String, WFReplaceTextReplace: String, WFReplaceTextCaseSensitive: Bool = True, WFReplaceTextRegularExpression: Bool, WFInput: String) -> Updated Text: NSString(Object)\nParameters:\n    WFReplaceTextFind:  Find Text. Hello. The text to be replaced..\n    WFReplaceTextReplace:  Replace With. World. The text to replace all occurrences of Find Text..\n    WFReplaceTextCaseSensitive:  Case Sensitive. When disabled, the capitalization of letters is ignored..\n    WFReplaceTextRegularExpression:  Regular Expression. When enabled, Find Text is treated as a regular expression..\n    WFInput:  Text.\nReturn Value:\n    Updated Text: \nDescription:\n    Replace Text: Replaces some text passed into the action with other text.\nParameterSummary: Replace ${WFReplaceTextFind} with ${WFReplaceTextReplace} in ${WFInput}\n",
    "is.workflow.actions.setairdropreceiving": "is.workflow.actions.setairdropreceiving(WFAirDropState: WFAirDropVisibilityParameter(Object))\nParameters:\n    WFAirDropState:  State.\nDescription:\n    Set AirDrop Receiving: Replaces some text passed into the action with other text.\nParameterSummary: Set AirDrop Receiving to ${WFAirDropState}\n",
    "is.workflow.actions.handoffplayback": "is.workflow.actions.handoffplayback(WFSourceMediaRoute: WFMediaRoutePickerParameter(Object), WFDestinationMediaRoute: WFMediaRoutePickerParameter(Object))\nParameters:\n    WFSourceMediaRoute:  Source. The device to hand off playback from..\n    WFDestinationMediaRoute:  Destination. The device to hand off playback to..\nDescription:\n    Hand Off Playback: Hands off Music or Podcasts playback between two devices.\nParameterSummary: Hand off playback from ${WFSourceMediaRoute} to ${WFDestinationMediaRoute}\n",
    "is.workflow.actions.dnd.set": "is.workflow.actions.dnd.set(Operation: Enum = \"Turn\", Enabled: Bool, AssertionType: Enum = \"Turned Off\", Event: WFVariablePickerParameter(Object), Time: String, FocusModes: WFFocusModesPickerParameter(Object))\nParameters:\n    Operation:  Operation. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Turn\", \"Toggle\".\n    Enabled:  State. This value depends on the value of Operation. This parameter is only valid when the value of \"Operation\" is \"Turn\".\n    AssertionType:  Until. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Turned Off\", \"Time\", \"I Leave\", \"Event Ends\". This value depends on the value of Operation. This parameter is only valid when the value of \"Operation\" is \"Turn\". This value depends on the value of Enabled. This parameter is only valid when the value of \"Enabled\" is True.\n    Event:  Event. The event after which to turn off the Focus. This value depends on the value of Enabled. This parameter is only valid when the value of \"Enabled\" is True. This value depends on the value of AssertionType. This parameter is only valid when the value of \"AssertionType\" is \"Event Ends\".\n    Time:  Time. 7 PM. The time after which to turn off the Focus. This value depends on the value of Enabled. This parameter is only valid when the value of \"Enabled\" is True. This value depends on the value of AssertionType. This parameter is only valid when the value of \"AssertionType\" is \"Time\".\n    FocusModes:  Focus.\nDescription:\n    Set Focus: Sets the specified Focus on or off.\nParameterSummary: (Operation,FocusModes) ${Operation} ${FocusModes}; (Operation,FocusModes,Enabled) ${Operation} ${FocusModes} ${Enabled}; (Operation,FocusModes,Enabled,AssertionType,Event) ${Operation} ${FocusModes} ${Enabled} until ${AssertionType} ${Event}; (Operation,FocusModes,Enabled,AssertionType,Time) ${Operation} ${FocusModes} ${Enabled} until ${AssertionType} ${Time}; (Operation,FocusModes,Enabled,AssertionType) ${Operation} ${FocusModes} ${Enabled} until ${AssertionType}\n",
    "is.workflow.actions.getdirections": "is.workflow.actions.getdirections(WFLocation: WFLocationParameter(Object), WFDestination: WFLocationParameter(Object), WFGetDirectionsActionApp: WFMapsAppPickerParameter(Object) = \"Maps\", WFGetDirectionsActionMode: WFDynamicEnumerationParameter(Object) = \"Driving\")\nParameters:\n    WFLocation:  Location. This value depends on the value of WFGetDirectionsActionApp. This parameter is only valid when the value of \"WFGetDirectionsActionApp\" is \"Waze\".\n    WFDestination:  Destination. The destination address.\n    WFGetDirectionsActionApp:  App.\n    WFGetDirectionsActionMode:  Mode. This value depends on the value of WFGetDirectionsActionApp. This parameter is only valid when the value of \"WFGetDirectionsActionApp\" is \"Maps\", \"Google Maps\", \"Baidu Maps\".\nDescription:\n    Open Directions: Opens directions to the location passed into this action in your choice of Maps, Google Maps, Citymapper, Transit, or Waze. For example, you can use this action to get directions to an upcoming event on your calendar.\nParameterSummary: (WFDestination,WFGetDirectionsActionApp) Open directions to ${WFDestination} using ${WFGetDirectionsActionApp}; (WFLocation,WFDestination,WFGetDirectionsActionApp) Open directions from ${WFLocation} to ${WFDestination} using ${WFGetDirectionsActionApp}; (WFLocation,WFDestination) Open directions from ${WFLocation} to ${WFDestination}; (WFLocation,WFDestination,WFGetDirectionsActionMode) Open ${WFGetDirectionsActionMode} directions from ${WFLocation} to ${WFDestination}; (WFLocation,WFDestination,WFGetDirectionsActionMode,WFGetDirectionsActionApp) Open ${WFGetDirectionsActionMode} directions from ${WFLocation} to ${WFDestination} using ${WFGetDirectionsActionApp}\n",
    "is.workflow.actions.imgur.upload": "is.workflow.actions.imgur.upload(WFInput: WFVariablePickerParameter(Object), WFImgurAnonymous: Bool = True, WFImgurDirectLink: Bool, WFImgurAlbum: Bool, WFImgurAlbumLayout: Enum = \"Blog\", WFImgurAlbumPrivacy: Enum = \"Hidden\", WFImgurTitle: String, WFImgurDescription: String) -> Imgur URLs: NSURL(Object)\nParameters:\n    WFInput:  Images.\n    WFImgurAnonymous:  Upload Anonymously.\n    WFImgurDirectLink:  Direct Link. If enabled, the action will return a link to the image, and not its Imgur page.. This value depends on the value of WFImgurAlbum. This parameter is only valid when the value of \"WFImgurAlbum\" is False.\n    WFImgurAlbum:  Create Album. If enabled, the input images will be grouped into an album. Otherwise, the individual links will be returned..\n    WFImgurAlbumLayout:  Album Layout. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Blog\", \"Grid\", \"Horizontal\", \"Vertical\". This value depends on the value of WFImgurAlbum. This parameter is only valid when the value of \"WFImgurAlbum\" is True.\n    WFImgurAlbumPrivacy:  Album Privacy. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Public\", \"Hidden\", \"Secret\". This value depends on the value of WFImgurAlbum. This parameter is only valid when the value of \"WFImgurAlbum\" is True.\n    WFImgurTitle:  Title. optional.\n    WFImgurDescription:  Description.\nReturn Value:\n    Imgur URLs: \nDescription:\n    Upload to Imgur: Uploads the input to Imgur.. Powered by Imgur (imgur.com)\nParameterSummary: Upload ${WFInput}\n",
    "is.workflow.actions.number.random": "is.workflow.actions.number.random(WFRandomNumberMinimum: Integer, WFRandomNumberMaximum: Integer) -> Random Number: NSDecimalNumber(Object)\nParameters:\n    WFRandomNumberMinimum:  Minimum.\n    WFRandomNumberMaximum:  Maximum.\nReturn Value:\n    Random Number: \nDescription:\n    Random Number: Passes a random number between the given minimum and maximum to the next action. The minimum and maximum numbers are included as possible results.\nParameterSummary: Random number between ${WFRandomNumberMinimum} and ${WFRandomNumberMaximum}\n",
    "is.workflow.actions.nightshift.set": "is.workflow.actions.nightshift.set(operation: Enum = \"set\", OnValue: Bool = True)\nParameters:\n    operation:  The value of this Enum must be one of the following values (The text in parentheses describes the value): \"set\", \"toggle\".\n    OnValue: \nDescription:\n    Set nightshift: Passes a random number between the given minimum and maximum to the next action. The minimum and maximum numbers are included as possible results.\nParameterSummary: (operation,OnValue) ${operation} night shift ${OnValue}; (operation) ${operation} night shift\n",
    "is.workflow.actions.makepdf": "is.workflow.actions.makepdf(WFPDFIncludeMargin: Bool, WFPDFIncludedPages: Enum = \"All Pages\", WFPDFSinglePage: Integer, WFPDFPageRangeStart: Integer, WFPDFPageRangeEnd: Integer, WFInput: WFVariablePickerParameter(Object), WFPDFDocumentMergeBehavior: Enum = \"Append\") -> PDF: WFPDFContentItem(Object)\nParameters:\n    WFPDFIncludeMargin:  Include Margin.\n    WFPDFIncludedPages:  Include. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"All Pages\", \"Single Page\", \"Page Range\".\n    WFPDFSinglePage:  Page #. 1. This value depends on the value of WFPDFIncludedPages. This parameter is only valid when the value of \"WFPDFIncludedPages\" is \"Single Page\".\n    WFPDFPageRangeStart:  Start Page #. 1. This value depends on the value of WFPDFIncludedPages. This parameter is only valid when the value of \"WFPDFIncludedPages\" is \"Page Range\".\n    WFPDFPageRangeEnd:  End Page #. 3. This value depends on the value of WFPDFIncludedPages. This parameter is only valid when the value of \"WFPDFIncludedPages\" is \"Page Range\".\n    WFInput:  Input.\n    WFPDFDocumentMergeBehavior:  Merge Behavior. Merge documents by appending or shuffling pages. Shuffling will add one page from each of the passed documents to the new document, then proceed to take the next page from each passed document, until all pages in the passed documents have been added to the new document.. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Append\", \"Shuffle\".\nReturn Value:\n    PDF: \nDescription:\n    Make PDF: Makes a PDF out of the input. The resulting PDF can optionally include a quarter-inch margin for better printing.\nParameterSummary: Make PDF from ${WFInput}\n",
    "is.workflow.actions.file.getfoldercontents": "is.workflow.actions.file.getfoldercontents(WFFolder: WFFilePickerParameter(Object), Recursive: Bool) -> Get Contents of Folder: public.data(Object)\nParameters:\n    WFFolder:  Folder.\n    Recursive:  Recursive. If this option is enabled, this action will get all the files inside of a folder, including its subfolders..\nReturn Value:\n    Get Contents of Folder: The folder contents\nDescription:\n    Get Contents of Folder: This action gets the files inside of the specified folder.\nParameterSummary: Get contents of folder ${WFFolder}\n",
    "is.workflow.actions.reminders.showlist": "is.workflow.actions.reminders.showlist(WFList: WFRemindersListPickerParameter(Object))\nParameters:\n    WFList:  List. The list to show.\nDescription:\n    Open Reminders List: Shows the specified list in the Reminders app.\nParameterSummary: Open ${WFList}\n",
    "is.workflow.actions.getarticle": "is.workflow.actions.getarticle(WFWebPage: String) -> Article: WFArticleContentItem(Object)\nParameters:\n    WFWebPage:  URL.\nReturn Value:\n    Article: \nDescription:\n    Get Article using Safari Reader: Gets article details, including body text, author, publish date, and more, from every URL passed into the action.. Use a Get Details of Article action immediately after this action to get specific details about the article. This action only supports getting one article from each URL.\nParameterSummary: Get article from ${WFWebPage}\n",
    "is.workflow.actions.savetocameraroll": "is.workflow.actions.savetocameraroll(WFCameraRollSelectedGroup: WFPhotoAlbumPickerParameter(Object), WFInput: WFVariablePickerParameter(Object)) -> Saved Photo Media: PHAsset(Object)\nParameters:\n    WFCameraRollSelectedGroup:  Album. Photo Album.\n    WFInput:  Input. Photos, videos, or audio to save.\nReturn Value:\n    Saved Photo Media: The saved items\nDescription:\n    Save to Photo Album: Adds the photos and videos passed as input to the specified photo album.. If a photo passed as input is already in the specified album, the photo will be duplicated.\nParameterSummary: Save ${WFInput} to ${WFCameraRollSelectedGroup}\n",
    "is.workflow.actions.detect.address": "is.workflow.actions.detect.address(WFInput: WFVariablePickerParameter(Object)) -> Addresses: WFLocationContentItem(Object)\nParameters:\n    WFInput:  Input.\nReturn Value:\n    Addresses: \nDescription:\n    Get Addresses from Input: Returns any street addresses found in the output from the previous action.\nParameterSummary: Get addresses from ${WFInput}\n",
    "is.workflow.actions.silenceunknowncallers.set": "is.workflow.actions.silenceunknowncallers.set(operation: Enum = \"set\", OnValue: Bool = True)\nParameters:\n    operation:  The value of this Enum must be one of the following values (The text in parentheses describes the value): \"set\", \"toggle\".\n    OnValue: \nDescription:\n    Set silence unknown callers: Returns any street addresses found in the output from the previous action.\nParameterSummary: (operation,OnValue) ${operation} silence unknown callers ${OnValue}; (operation) ${operation} silence unknown callers\n",
    "is.workflow.actions.weather.forecast": "is.workflow.actions.weather.forecast(WFWeatherCustomLocation: WFLocationParameter(Object), WFWeatherForecastType: Enum = \"Daily\") -> Weather Conditions: WFWeatherData(Object)\nParameters:\n    WFWeatherCustomLocation:  Location.\n    WFWeatherForecastType:  Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Hourly\", \"Daily\".\nReturn Value:\n    Weather Conditions: \nDescription:\n    Get Weather Forecast: Gets an hourly or daily weather forecast at the specified location.\nParameterSummary: Get ${WFWeatherForecastType} forecast at ${WFWeatherCustomLocation}\n",
    "is.workflow.actions.searchlocalbusinesses": "is.workflow.actions.searchlocalbusinesses(WFInput: WFLocationParameter(Object), WFSearchQuery: String, WFSearchRadius: WFSearchLocalBusinessesRadiusParameter(Object)) -> Local Businesses: MKMapItem(Object)\nParameters:\n    WFInput:  Location. A location to search near..\n    WFSearchQuery:  Search. Places. Keywords used to search for places..\n    WFSearchRadius:  Radius.\nReturn Value:\n    Local Businesses: \nDescription:\n    Find Places: Finds nearby places using Maps, and returns the results.\nParameterSummary: Find ${WFSearchQuery} near ${WFInput}\n",
    "is.workflow.actions.trimvideo": "is.workflow.actions.trimvideo(WFInputMedia: WFVariablePickerParameter(Object)) -> Trimmed Media: com.apple.quicktime-movie(Object)\nParameters:\n    WFInputMedia:  Media. The audio or video file to edit..\nReturn Value:\n    Trimmed Media: The trimmed media.\nDescription:\n    Trim Media: Presents a view allowing you to trim the media passed into the action.\nParameterSummary: Trim ${WFInputMedia}\n",
    "is.workflow.actions.measurement.convert": "is.workflow.actions.measurement.convert(WFMeasurementUnitType: WFUnitTypePickerParameter(Object) = \"Length\", WFMeasurementUnit: WFMeasurementUnitPickerParameter(Object), WFInput: WFVariablePickerParameter(Object)) -> Converted Measurement: NSMeasurement(Object)\nParameters:\n    WFMeasurementUnitType:  Type.\n    WFMeasurementUnit:  Unit.\n    WFInput:  Measurement.\nReturn Value:\n    Converted Measurement: \nDescription:\n    Convert Measurement: Converts the measurements passed into the action to the specified unit.\nParameterSummary: (WFInput,WFMeasurementUnitType,WFMeasurementUnit) Convert ${WFInput} into ${WFMeasurementUnitType} in ${WFMeasurementUnit}; (WFInput,WFMeasurementUnitType) Convert ${WFInput} into ${WFMeasurementUnitType}\n",
    "is.workflow.actions.display.always-on.set": "is.workflow.actions.display.always-on.set(operation: Enum = \"set\", OnValue: Bool = True)\nParameters:\n    operation:  The value of this Enum must be one of the following values (The text in parentheses describes the value): \"set\", \"toggle\".\n    OnValue: \nDescription:\n    Set display always-on: Sets the Always On Display setting of your iPhone to on or off.\nParameterSummary: (operation,OnValue) ${operation} display always-on ${OnValue}; (operation) ${operation}display always-on\n",
    "is.workflow.actions.filter.music": "is.workflow.actions.filter.music(WFContentItemFilter: WFContentPredicateOperatorParameter, WFContentItemInputParameter: WFVariablePickerParameter(Object), WFContentItemSortEnabled: Bool, WFContentItemSortProperty: WFDynamicEnumerationParameter(Object), WFContentItemSortOrder: WFDynamicEnumerationParameter(Object), WFContentItemLimitEnabled: Bool = True, WFContentItemLimitNumber: Integer = 1)\nParameters:\n    WFContentItemFilter: \n    WFContentItemInputParameter: \n    WFContentItemSortEnabled: \n    WFContentItemSortProperty: \n    WFContentItemSortOrder: \n    WFContentItemLimitEnabled: \n    WFContentItemLimitNumber: \nDescription:\n    Find Music: Sets the Always On Display setting of your iPhone to on or off.\nParameterSummary: Find Music that meed the need of the user\n",
    "is.workflow.actions.gethalfwaypoint": "is.workflow.actions.gethalfwaypoint(WFGetHalfwayPointFirstLocation: WFLocationParameter(Object), WFGetHalfwayPointSecondLocation: WFLocationParameter(Object)) -> Halfway Point: CLLocation(Object)\nParameters:\n    WFGetHalfwayPointFirstLocation:  First Location.\n    WFGetHalfwayPointSecondLocation:  Second Location.\nReturn Value:\n    Halfway Point: \nDescription:\n    Get Halfway Point: Gets the halfway point between two locations.\nParameterSummary: Get halfway point between ${WFGetHalfwayPointFirstLocation} and ${WFGetHalfwayPointSecondLocation}\n",
    "is.workflow.actions.appearance": "is.workflow.actions.appearance(operation: Enum = \"set\", style: Enum = \"dark\")\nParameters:\n    operation:  The value of this Enum must be one of the following values (The text in parentheses describes the value): \"set\", \"toggle\".\n    style:  The value of this Enum must be one of the following values (The text in parentheses describes the value): \"dark\", \"light\".\nDescription:\n    Set appearance: Gets the halfway point between two locations.\nParameterSummary: (operation,style) ${operation} appearance ${style}; (operation) ${operation} appearance\n",
    "is.workflow.actions.intercom": "is.workflow.actions.intercom(WFHome: WFHomeAreaPickerParameter(Object), WFInput: String)\nParameters:\n    WFHome:  Home.\n    WFInput:  Message. Dinner is ready!. The message to announce using Intercom. Any input exceeding 60 seconds in duration will be trimmed..\nDescription:\n    Intercom: Announces a message passed as input using Intercom.. This action accepts both text and media files as input. Media files will be broadcast as they are. When text is provided, it will be first converted to audio using the current Siri language and voice. You can also use the Make Spoken Audio From Text action to customize the voice parameters.\nParameterSummary: Intercom ${WFInput} to ${WFHome}\n",
    "is.workflow.actions.getepisodesforpodcast": "is.workflow.actions.getepisodesforpodcast(WFInput: WFPodcastPickerParameter(Object)) -> Episodes: WFPodcastEpisodeContentItem(Object)\nParameters:\n    WFInput:  Podcast.\nReturn Value:\n    Episodes: \nDescription:\n    Get Episodes of Podcast: Returns a list of episodes from a podcast show.\nParameterSummary: Get episodes of ${WFInput}\n",
    "is.workflow.actions.exit": "is.workflow.actions.exit()\nDescription:\n    Stop This Shortcut: Stops execution of the current shortcut and dismisses the shortcut on screen. No more actions will be run after this action.\nParameterSummary: Stop this shortcut\n",
    "is.workflow.actions.format.number": "is.workflow.actions.format.number(WFNumber: Integer, WFNumberFormatDecimalPlaces: Integer = 2) -> Formatted Number: NSString(Object)\nParameters:\n    WFNumber:  Number.\n    WFNumberFormatDecimalPlaces: \nReturn Value:\n    Formatted Number: \nDescription:\n    Format Number: Formats a number into text.\nParameterSummary: Format ${WFNumber} to ${WFNumberFormatDecimalPlaces}\n",
    "is.workflow.actions.adjustdate": "is.workflow.actions.adjustdate(WFDate: String, WFAdjustOperation: Enum = \"Add\", WFDuration: Enum) -> Adjusted Date: NSDate(Object)\nParameters:\n    WFDate:  Date.\n    WFAdjustOperation:  Operation. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Add\", \"Subtract\", \"Get Start of Minute\", \"Get Start of Hour\", \"Get Start of Day\", \"Get Start of Week\", \"Get Start of Month\", \"Get Start of Year\".\n    WFDuration:  Duration. 0. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"sec\", \"min\", \"hr\", \"days\", \"weeks\", \"months\", \"years\". This value depends on the value of WFAdjustOperation. This parameter is only valid when the value of \"WFAdjustOperation\" is \"Add\", \"Subtract\".\nReturn Value:\n    Adjusted Date: \nDescription:\n    Adjust Date: Adds or subtracts an amount of time from the date passed into the action.. This action supports decimal numbers when adding or subtracting seconds, minutes, hours, or days. Otherwise only integers are supported.\nParameterSummary: (WFAdjustOperation,WFDate) ${WFAdjustOperation} from ${WFDate}; (WFAdjustOperation,WFDuration,WFDate) ${WFAdjustOperation} ${WFDuration} to ${WFDate}\n",
    "is.workflow.actions.filter.health.quantity": "is.workflow.actions.filter.health.quantity(WFContentItemFilter: WFContentPredicateOperatorParameter, WFContentItemInputParameter: WFVariablePickerParameter(Object), WFContentItemSortProperty: WFDynamicEnumerationParameter(Object), WFContentItemSortOrder: WFDynamicEnumerationParameter(Object), WFContentItemLimitEnabled: Bool = True, WFContentItemLimitNumber: Integer = 1, WFHKSampleFilteringUnit: String, WFHKSampleFilteringGroupBy: WFDynamicEnumerationParameter(Object), WFHKSampleFilteringFillMissing: Bool = True)\nParameters:\n    WFContentItemFilter: \n    WFContentItemInputParameter: \n    WFContentItemSortProperty: \n    WFContentItemSortOrder: \n    WFContentItemLimitEnabled: \n    WFContentItemLimitNumber: \n    WFHKSampleFilteringUnit: \n    WFHKSampleFilteringGroupBy: \n    WFHKSampleFilteringFillMissing: \nDescription:\n    Find Health Samples: Adds or subtracts an amount of time from the date passed into the action.. This action supports decimal numbers when adding or subtracting seconds, minutes, hours, or days. Otherwise only integers are supported.. If you only see some but not all of your data in the results, make sure that “Allow Shortcuts to read data” is set to on in the Health app.\nParameterSummary: Find Quantity of Health that meed the need of the user\n",
    "is.workflow.actions.filter.windows": "is.workflow.actions.filter.windows(WFContentItemFilter: WFContentPredicateOperatorParameter, WFContentItemInputParameter: WFVariablePickerParameter(Object), WFContentItemSortProperty: WFDynamicEnumerationParameter(Object), WFContentItemSortOrder: WFDynamicEnumerationParameter(Object), WFContentItemLimitEnabled: Bool = True, WFContentItemLimitNumber: Integer = 1)\nParameters:\n    WFContentItemFilter: \n    WFContentItemInputParameter: \n    WFContentItemSortProperty: \n    WFContentItemSortOrder: \n    WFContentItemLimitEnabled: \n    WFContentItemLimitNumber: \nDescription:\n    Find Windows: Adds or subtracts an amount of time from the date passed into the action.. This action supports decimal numbers when adding or subtracting seconds, minutes, hours, or days. Otherwise only integers are supported.. If you only see some but not all of your data in the results, make sure that “Allow Shortcuts to read data” is set to on in the Health app.\nParameterSummary: Find Windows that meed the need of the user\n",
    "is.workflow.actions.importaudiofiles": "is.workflow.actions.importaudiofiles(WFInput: WFFilePickerParameter(Object), WFImportAudioFilesReencode: Bool, WFImportAudioFilesEncoder: Enum = \"Default\") -> Imported Items: MPMediaItem(Object)\nParameters:\n    WFInput:  Audio Files.\n    WFImportAudioFilesReencode:  Re-encode.\n    WFImportAudioFilesEncoder:  Encoder. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Default\", \"AAC\", \"AIFF\", \"Lossless\", \"MP3\", \"WAV\". This value depends on the value of WFImportAudioFilesReencode. This parameter is only valid when the value of \"WFImportAudioFilesReencode\" is True.\nReturn Value:\n    Imported Items: \nDescription:\n    Import Audio Files into Music: Imports audio files into Music and compresses them with the chosen encoder.\nParameterSummary: Import ${WFInput} into Music\n",
    "is.workflow.actions.file.select": "is.workflow.actions.file.select(WFPickingMode: Enum = \"Files\", SelectMultiple: Bool) -> File: (public.data(Object) or public.folder(Object))\nParameters:\n    WFPickingMode:  Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Files\", \"Folders\".\n    SelectMultiple:  Select Multiple.\nReturn Value:\n    File: \nDescription:\n    Select File: Prompts to select files or folders.\nParameterSummary: Select ${WFPickingMode}\n",
    "is.workflow.actions.text.match": "is.workflow.actions.text.match(text: String, WFMatchTextPattern: String = \"[0-9a-zA-Z]\", WFMatchTextCaseSensitive: Bool = True)\nParameters:\n    text: \n    WFMatchTextPattern: \n    WFMatchTextCaseSensitive: \nDescription:\n    Match Text: Prompts to select files or folders.\nParameterSummary: Match ${WFMatchTextPattern} in ${text}\n",
    "is.workflow.actions.get.playlist": "is.workflow.actions.get.playlist(WFPlaylistName: WFPlaylistPickerParameter(Object)) -> Playlist: MPMediaItem(Object)\nParameters:\n    WFPlaylistName:  Playlist.\nReturn Value:\n    Playlist: \nDescription:\n    Get Playlist: Gets every song in the specified playlist.\nParameterSummary: Get songs in ${WFPlaylistName}\n",
    "is.workflow.actions.gettypeaction": "is.workflow.actions.gettypeaction(WFFileType: String = \"public.rtf\", WFInput: WFVariablePickerParameter(Object)) -> File of Type: public.data(Object)\nParameters:\n    WFFileType:  Type. UTI.\n    WFInput:  Input.\nReturn Value:\n    File of Type: \nDescription:\n    Get File of Type: Returns a particular file type from the input.\nParameterSummary: Get file of type ${WFFileType} from ${WFInput}\n",
    "is.workflow.actions.searchitunes": "is.workflow.actions.searchitunes(WFSearchTerm: String, WFMediaType: WFDynamicEnumerationParameter(Object), WFAttribute: WFDynamicEnumerationParameter(Object), WFEntity: WFDynamicEnumerationParameter(Object), WFCountry: WFiTunesStoreCountryPickerParameter(Object), WFItemLimit: Integer = 25) -> iTunes Products: WFiTunesProductContentItem(Object)\nParameters:\n    WFSearchTerm:  Search. Media.\n    WFMediaType:  Category.\n    WFAttribute:  Search By.\n    WFEntity:  Results.\n    WFCountry:  Region.\n    WFItemLimit: \nReturn Value:\n    iTunes Products: \nDescription:\n    Find iTunes Store Items: Searches the iTunes Store, returning the items that match the specified search terms. You can get more details about the results using the Get Details of iTunes Product action.\nParameterSummary: Find ${WFSearchTerm} on the iTunes Store\n",
    "is.workflow.actions.hide.app": "is.workflow.actions.hide.app(WFHideAppMode: Enum = \"App\", WFApp: WFAppPickerParameter(Object), WFAppsExcept: WFAppPickerParameter(Object))\nParameters:\n    WFHideAppMode:  Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"App\", \"All Apps\".\n    WFApp:  App. Choose. This value depends on the value of WFHideAppMode. This parameter is only valid when the value of \"WFHideAppMode\" is \"App\".\n    WFAppsExcept:  Apps. Choose. This value depends on the value of WFHideAppMode. This parameter is only valid when the value of \"WFHideAppMode\" is \"All Apps\".\nDescription:\n    Hide App: Hides one or all open applications. You can choose a list of apps to keep open.\nParameterSummary: (WFHideAppMode,WFApp) Hide ${WFHideAppMode} ${WFApp}; (WFHideAppMode,WFAppsExcept) Hide ${WFHideAppMode} except ${WFAppsExcept}\n",
    "is.workflow.actions.splitpdf": "is.workflow.actions.splitpdf(WFInput: WFFilePickerParameter(Object)) -> PDF Pages: WFPDFContentItem(Object)\nParameters:\n    WFInput:  PDF. Document.\nReturn Value:\n    PDF Pages: \nDescription:\n    Split PDF Into Pages: Splits the input document by creating a PDF for each page.\nParameterSummary: Split PDF ${WFInput} into pages\n",
    "is.workflow.actions.file.createfolder": "is.workflow.actions.file.createfolder(WFFilePath: String, WFFolder: WFFilePickerParameter(Object)) -> Created Folder: public.data(Object)\nParameters:\n    WFFilePath:  Path. The path of the new folder. For example, if you want to create “Adventure” in an existing folder titled “Photos”, put “/Photos/Adventure/”.\n    WFFolder:  Folder.\nReturn Value:\n    Created Folder: \nDescription:\n    Create Folder: Makes a new folder.\nParameterSummary: Create folder in ${WFFolder} at ${WFFilePath}\n",
    "is.workflow.actions.bluetooth.set": "is.workflow.actions.bluetooth.set(operation: Enum = \"set\", OnValue: Bool = True)\nParameters:\n    operation:  The value of this Enum must be one of the following values (The text in parentheses describes the value): \"set\", \"toggle\".\n    OnValue: \nDescription:\n    Set bluetooth: Makes a new folder.\nParameterSummary: (operation,OnValue) ${operation} bluetooth ${OnValue}; (operation) ${operation} bluetooth\n",
    "is.workflow.actions.getvariable": "is.workflow.actions.getvariable(WFVariable: WFVariablePickerParameter(Object)) -> Variable: WFContentItem(Object)\nParameters:\n    WFVariable:  Variable.\nReturn Value:\n    Variable: \nDescription:\n    Get Variable: Gets the value of the specified variable and passes it to the next action.\nParameterSummary: Get ${WFVariable}\n",
    "is.workflow.actions.filter.calendarevents": "is.workflow.actions.filter.calendarevents(WFContentItemFilter: WFContentPredicateOperatorParameter, WFContentItemInputParameter: WFVariablePickerParameter(Object), WFContentItemSortEnabled: Bool, WFContentItemSortProperty: WFDynamicEnumerationParameter(Object), WFContentItemSortOrder: WFDynamicEnumerationParameter(Object), WFContentItemLimitEnabled: Bool = True, WFContentItemLimitNumber: Integer = 1)\nParameters:\n    WFContentItemFilter: \n    WFContentItemInputParameter: \n    WFContentItemSortEnabled: \n    WFContentItemSortProperty: \n    WFContentItemSortOrder: \n    WFContentItemLimitEnabled: \n    WFContentItemLimitNumber: \nDescription:\n    Find Calendar Events: Gets the value of the specified variable and passes it to the next action.\nParameterSummary: Find Calenders that meed the need of the user\n",
    "is.workflow.actions.format.filesize": "is.workflow.actions.format.filesize(WFFileSizeFormat: Enum = \"Automatic\", WFFileSizeIncludeUnits: Bool = True, WFFileSize: Integer) -> Formatted File Size: NSString(Object)\nParameters:\n    WFFileSizeFormat:  Format. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Automatic\", \"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB or Higher\".\n    WFFileSizeIncludeUnits:  Include Units. This value depends on the value of WFFileSizeFormat. This parameter is only valid when the value of \"WFFileSizeFormat\" is \"Automatic\".\n    WFFileSize:  File Size. A file size from another action, or a number of bytes.\nReturn Value:\n    Formatted File Size: \nDescription:\n    Format File Size: Formats a file size into text.. 1000 bytes are shown as 1 KB.\nParameterSummary: Format ${WFFileSize} into ${WFFileSizeFormat}\n",
    "is.workflow.actions.lockscreen": "is.workflow.actions.lockscreen()\nDescription:\n    Lock Screen: Locks the screen of this device.\nParameterSummary: Lock the screen\n",
    "is.workflow.actions.hash": "is.workflow.actions.hash(WFHashType: Enum = \"MD5\", WFInput: WFVariablePickerParameter(Object)) -> Hash: NSString(Object)\nParameters:\n    WFHashType:  Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"MD5\", \"SHA1\", \"SHA256\", \"SHA512\".\n    WFInput:  Input.\nReturn Value:\n    Hash: \nDescription:\n    Generate Hash: Generates a MD5/SHA1 hash from the input.\nParameterSummary: Generate ${WFHashType} hash of ${WFInput}\n",
    "is.workflow.actions.dictionary": "is.workflow.actions.dictionary(WFItems: WFDictionaryParameter(Object)) -> Dictionary: NSDictionary(Object)\nParameters:\n    WFItems:  Items.\nReturn Value:\n    Dictionary: \nDescription:\n    Dictionary: Passes the specified list of key-value pairs to the next action as a dictionary.. When coerced to text, the dictionary is represented as JSON.\nParameterSummary: (operation) ${operation} bluetooth\n",
    "com.apple.mobilephone.call": "com.apple.mobilephone.call(IntentAppDefinition: WFIntentAppPickerParameter(Object) = {'BundleIdentifier': 'com.apple.TelephonyUtilities.PhoneIntentHandler'}, WFCallContact: WFPhoneNumberFieldParameter(Object))\nParameters:\n    IntentAppDefinition:  App.\n    WFCallContact:  Contact.\nDescription:\n    Call: Calls the phone number passed in as input.\nParameterSummary: Call ${WFCallContact}\n",
    "is.workflow.actions.gettext": "is.workflow.actions.gettext(WFTextActionText: String) -> Text: NSString(Object)\nParameters:\n    WFTextActionText:  Text.\nReturn Value:\n    Text: \nDescription:\n    Text: Passes the specified text to the next action.\nParameterSummary: (operation) ${operation} bluetooth\n",
    "is.workflow.actions.properties.files": "is.workflow.actions.properties.files(WFContentItemPropertyName: Enum, WFInput: WFVariablePickerParameter(Object))\nParameters:\n    WFContentItemPropertyName:  The value of this Enum must be one of the following values (The text in parentheses describes the value): \"File Size\", \"File Extension\", \"Creation Date\", \"File Path\", \"Last Modified Date\", \"Name\".\n    WFInput: \nDescription:\n    Get Details of Files: Passes the specified text to the next action.\nParameterSummary: Get ${WFContentItemPropertyName} from ${WFInput}\n",
    "is.workflow.actions.geturlcomponent": "is.workflow.actions.geturlcomponent(WFURL: String, WFURLComponent: Enum = \"Scheme\") -> Component of URL: NSString(Object)\nParameters:\n    WFURL:  URL.\n    WFURLComponent:  Component. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Scheme\", \"User\", \"Password\", \"Host\", \"Port\", \"Path\", \"Query\", \"Fragment\".\nReturn Value:\n    Component of URL: \nDescription:\n    Get Component of URL: Gets the specified part of the URL passed into the action.. URLs are structured as follows: scheme://user:password@host:port/path?query#fragment\nParameterSummary: Get ${WFURLComponent} from ${WFURL}\n",
    "is.workflow.actions.wifi.set": "is.workflow.actions.wifi.set(operation: Enum = \"set\", OnValue: Bool = True)\nParameters:\n    operation:  The value of this Enum must be one of the following values (The text in parentheses describes the value): \"set\", \"toggle\".\n    OnValue: \nDescription:\n    Set Wi-Fi: Gets the specified part of the URL passed into the action.. URLs are structured as follows: scheme://user:password@host:port/path?query#fragment\nParameterSummary: (operation,OnValue) ${operation} wifi ${OnValue}; (operation) ${operation} wifi\n",
    "is.workflow.actions.evernote.new": "is.workflow.actions.evernote.new(WFEvernoteNoteTitle: String, WFEvernoteNotebook: WFEvernoteNotebookPickerParameter(Object), WFEvernoteTags: WFEvernoteTagsTagFieldParameter(Object), WFInput: WFVariablePickerParameter(Object)) -> New Note: ENNoteRef(Object)\nParameters:\n    WFEvernoteNoteTitle:  Note Title. optional.\n    WFEvernoteNotebook:  Notebook. The notebook in which to save your new note (optional).\n    WFEvernoteTags:  Tags. optional. A list of tags to apply to the new note (optional).\n    WFInput:  Content. The content to include in your new note.\nReturn Value:\n    New Note: \nDescription:\n    Create New Note: Saves the input as a note in Evernote.\nParameterSummary: Create note with ${WFInput} named ${WFEvernoteNoteTitle}\n",
    "is.workflow.actions.returntohomescreen": "is.workflow.actions.returntohomescreen()\nDescription:\n    Go to Home Screen: Navigates to the Home Screen.\nParameterSummary: Go to Home Screen\n",
    "is.workflow.actions.properties.music": "is.workflow.actions.properties.music(WFContentItemPropertyName: Enum = \"Artist\", WFInput: WFVariablePickerParameter(Object))\nParameters:\n    WFContentItemPropertyName:  The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Title\", \"Album\", \"Artist\", \"Album Artist\", \"Genre\", \"Composer\", \"Date Added\", \"Media Kind\", \"Duration\", \"Play Count\", \"Track Number\", \"Disc Number\", \"Alblum Artwork\", \"Is Explicit\", \"Lyrics\", \"Release Date\", \"Comments\", \"Is Cloud Item\", \"Skip Count\", \"Last Played Date\", \"Rating\", \"File Path\", \"Name\".\n    WFInput: \nDescription:\n    Get Details of Music: Navigates to the Home Screen.\nParameterSummary: Get ${WFContentItemPropertyName} from ${WFInput}\n",
    "is.workflow.actions.sleep": "is.workflow.actions.sleep()\nDescription:\n    Sleep: Put this Mac to sleep.\nParameterSummary: Put this Mac to sleep\n",
    "is.workflow.actions.image.combine": "is.workflow.actions.image.combine(WFImageCombineMode: Enum = \"Horizontally\", WFImageCombineSpacing: Integer, WFInput: WFVariablePickerParameter(Object)) -> Combined Image: WFImage(Object)\nParameters:\n    WFImageCombineMode:  Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Horizontally\", \"Vertically\", \"In a Grid\".\n    WFImageCombineSpacing:  Spacing. 0. The number of pixels of transparent space to place between consecutive images..\n    WFInput:  Images.\nReturn Value:\n    Combined Image: \nDescription:\n    Combine Images: Combines the images passed into the action horizontally, vertically, or in a grid.\nParameterSummary: Combine ${WFInput} ${WFImageCombineMode}\n",
    "is.workflow.actions.url": "is.workflow.actions.url(WFURLActionURL: String) -> URL: NSURL(Object)\nParameters:\n    WFURLActionURL:  URL. apple.com.\nReturn Value:\n    URL: \nDescription:\n    URL: Passes the specified URL to the next action.\nParameterSummary: ${WFURLActionURL}\n",
    "is.workflow.actions.truetone.set": "is.workflow.actions.truetone.set(operation: Enum = \"set\", OnValue: Bool = True)\nParameters:\n    operation:  The value of this Enum must be one of the following values (The text in parentheses describes the value): \"set\", \"toggle\".\n    OnValue: \nDescription:\n    Set truetone: Passes the specified URL to the next action.\nParameterSummary: (operation,OnValue) ${operation} truetone ${OnValue}; (operation) ${operation} truetone\n",
    "is.workflow.actions.getwebpagecontents": "is.workflow.actions.getwebpagecontents(WFInput: String) -> Contents of Web Page: NSAttributedString(Object)\nParameters:\n    WFInput:  URL.\nReturn Value:\n    Contents of Web Page: \nDescription:\n    Get Contents of Web Page: Extracts the contents of the web pages passed into the action.\nParameterSummary: Get contents of web page at ${WFInput}\n",
    "is.workflow.actions.file.label": "is.workflow.actions.file.label(WFInput: WFFilePickerParameter(Object), WFLabelColorNumber: WFFileLabelColorPickerParameter(Object))\nParameters:\n    WFInput:  Files.\n    WFLabelColorNumber:  Label Color. Color.\nDescription:\n    Label Files: Applies a label to the specified files.\nParameterSummary: Label ${WFInput} with ${WFLabelColorNumber}\n",
    "is.workflow.actions.compresspdf": "is.workflow.actions.compresspdf(WFInput: WFFilePickerParameter(Object)) -> Optimized PDF: com.adobe.pdf(Object)\nParameters:\n    WFInput:  PDF. Document.\nReturn Value:\n    Optimized PDF: \nDescription:\n    Optimize File Size of PDF: Optimizes the file size of the provided PDF file by compressing its images.\n\nIf the images contained in the PDF are already compressed, this action might not have a measurable effect on file size.\nParameterSummary: Optimize file size of ${WFInput}\n",
    "is.workflow.actions.number": "is.workflow.actions.number(WFNumberActionNumber: Integer) -> Number: NSDecimalNumber(Object)\nParameters:\n    WFNumberActionNumber:  Number. 42.\nReturn Value:\n    Number: \nDescription:\n    Number: Passes a number to the next action.\nParameterSummary: ${WFNumberActionNumber}\n",
    "com.panic.iOS.Transmit.Share": "com.panic.iOS.Transmit.Share(TransmitSaveTo: Enum = \"Remote\", TransmitFavoriteName: String, TransmitPath: String)\nParameters:\n    TransmitSaveTo:  Save To. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Local\", \"Remote\".\n    TransmitFavoriteName:  Favorite Name. optional. This value depends on the value of TransmitSaveTo. This parameter is only valid when the value of \"TransmitSaveTo\" is \"Remote\".\n    TransmitPath:  Path. optional.\nDescription:\n    Save with Transmit: Passes a number to the next action.\nParameterSummary: (operation) ${operation} truetone\n",
    "is.workflow.actions.conditional": "is.workflow.actions.conditional(WFInput: WFConditionalSubjectParameter, WFCondition: WFConditionalOperatorParameter, WFConditionalActionString: String, WFNumberValue: Integer, WFAnotherNumber: Integer, WFBoundedNumber: Float, WFAnotherBoundedNumber: Float, WFDate: WFDatePickerParameter, WFAnotherDate: WFDatePickerParameter, WFMeasurement: WFUnitQuantityFieldParameter(Object), WFAnotherMeasurement: WFUnitQuantityFieldParameter(Object), WFDuration: WFDurationQuantityFieldParameter, WFAnotherDuration: WFDurationQuantityFieldParameter, WFEnumeration: WFDynamicEnumerationParameter(Object), WFNumericEnumeration: WFNumericDynamicEnumerationParameter, WFLinkEnumeration: WFLinkDynamicEnumerationParameter)\nParameters:\n    WFInput:  Input.\n    WFCondition:  Condition.\n    WFConditionalActionString:  Text.\n    WFNumberValue:  Number.\n    WFAnotherNumber:  Number.\n    WFBoundedNumber:  Number.\n    WFAnotherBoundedNumber:  Number.\n    WFDate:  Date.\n    WFAnotherDate:  Date.\n    WFMeasurement:  Number.\n    WFAnotherMeasurement:  Number.\n    WFDuration:  Number.\n    WFAnotherDuration:  Number.\n    WFEnumeration:  Value. Choose.\n    WFNumericEnumeration:  Number. Choose.\n    WFLinkEnumeration:  Value. Choose.\nDescription:\n    If: Tests if a condition is true, and if so, runs the actions inside. Otherwise, the actions under “Otherwise” are run.\nParameterSummary: (WFInput,WFCondition,WFNumberValue,WFAnotherNumber) If ${WFInput} ${WFCondition} ${WFNumberValue} and ${WFAnotherNumber}; (WFInput,WFCondition,WFBoundedNumber) If ${WFInput} ${WFCondition} ${WFBoundedNumber}; (WFInput,WFCondition,WFLinkEnumeration) If ${WFInput} ${WFCondition} ${WFLinkEnumeration}; (WFInput,WFCondition,WFConditionalActionString) If ${WFInput} ${WFCondition} ${WFConditionalActionString}; (WFInput,WFCondition,WFMeasurement) If ${WFInput} ${WFCondition} ${WFMeasurement}; (WFInput,WFCondition,WFBoundedNumber,WFAnotherBoundedNumber) If ${WFInput} ${WFCondition} ${WFBoundedNumber} and ${WFAnotherBoundedNumber}; (WFInput,WFCondition,WFDate,WFAnotherDate) If ${WFInput} ${WFCondition} ${WFDate} and ${WFAnotherDate}; (WFInput,WFCondition,WFDuration,WFAnotherDuration) If ${WFInput} ${WFCondition} ${WFDuration} and ${WFAnotherDuration}; (WFInput,WFCondition,WFDuration) If ${WFInput} ${WFCondition} ${WFDuration}; (WFInput,WFCondition,WFMeasurement,WFAnotherMeasurement) If ${WFInput} ${WFCondition} ${WFMeasurement} and ${WFAnotherMeasurement}; (WFInput,WFCondition,WFEnumeration) If ${WFInput} ${WFCondition} ${WFEnumeration}; (WFInput) If ${WFInput}; (WFInput,WFCondition,WFNumberValue) If ${WFInput} ${WFCondition} ${WFNumberValue}; (WFInput,WFCondition,WFNumericEnumeration) If ${WFInput} ${WFCondition} ${WFNumericEnumeration}; (WFInput,WFCondition,WFDate) If ${WFInput} ${WFCondition} ${WFDate}; (WFInput,WFCondition) If ${WFInput} ${WFCondition}\n",
    "is.workflow.actions.file.append": "is.workflow.actions.file.append(WFFile: WFFilePickerParameter(Object), WFFilePath: String, WFAppendFileWriteMode: Enum = \"Append\", WFAppendOnNewLine: Bool = True, WFInput: String) -> Appended File: public.data(Object)\nParameters:\n    WFFile:  Folder.\n    WFFilePath:  File Path. example.txt. The name or path of the file to retrieve. For example, if you are appending a file called “notes.txt” in a folder called “Public”, use “/Public/notes.txt”..\n    WFAppendFileWriteMode:  Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Append\", \"Prepend\".\n    WFAppendOnNewLine:  Make New Line.\n    WFInput:  Text.\nReturn Value:\n    Appended File: The file that was appended to\nDescription:\n    Append to Text File: Adds the text passed as input to the end of the specified text file.. If no file exists yet at the specified path, a new file will be created. Make sure to include a file extension (usually .txt) at the end of your path.\nParameterSummary: ${WFAppendFileWriteMode} ${WFInput} to ${WFFile}\n",
    "is.workflow.actions.filter.eventattendees": "is.workflow.actions.filter.eventattendees(WFContentItemFilter: WFContentPredicateOperatorParameter, WFContentItemInputParameter: WFVariablePickerParameter(Object), WFContentItemSortProperty: WFDynamicEnumerationParameter(Object), WFContentItemSortOrder: WFDynamicEnumerationParameter(Object))\nParameters:\n    WFContentItemFilter: \n    WFContentItemInputParameter: \n    WFContentItemSortProperty: \n    WFContentItemSortOrder: \nDescription:\n    Filter Event Attendees: Adds the text passed as input to the end of the specified text file.. If no file exists yet at the specified path, a new file will be created. Make sure to include a file extension (usually .txt) at the end of your path.\nParameterSummary: Find Events that meed the need of the user\n",
    "is.workflow.actions.filter.apps": "is.workflow.actions.filter.apps(WFContentItemFilter: WFContentPredicateOperatorParameter, WFContentItemInputParameter: WFVariablePickerParameter(Object), WFContentItemSortProperty: WFDynamicEnumerationParameter(Object), WFContentItemSortOrder: WFDynamicEnumerationParameter(Object))\nParameters:\n    WFContentItemFilter: \n    WFContentItemInputParameter: \n    WFContentItemSortProperty: \n    WFContentItemSortOrder: \nDescription:\n    Find Apps: Adds the text passed as input to the end of the specified text file.. If no file exists yet at the specified path, a new file will be created. Make sure to include a file extension (usually .txt) at the end of your path.\nParameterSummary: Find Apps that meed the need of the user\n",
    "is.workflow.actions.image.removebackground": "is.workflow.actions.image.removebackground(WFCropToBounds: Bool, WFInput: WFVariablePickerParameter(Object)) -> Image Without Background: WFImage(Object)\nParameters:\n    WFCropToBounds:  Crop. If turned on, the resulting image will be cropped to its bounds. If turned off, the original bounds will be kept..\n    WFInput:  Image.\nReturn Value:\n    Image Without Background: \nDescription:\n    Remove Image Background: Removes the background from an image, keeping the subjects.\nParameterSummary: Remove background from ${WFInput}\n",
    "is.workflow.actions.dnd.getfocus": "is.workflow.actions.dnd.getfocus() -> Current Focus: WFFocusModeContentItem\nReturn Value:\n    Current Focus: \nDescription:\n    Get Current Focus: Returns the currently active Focus.. This action returns nothing if no Focus is active.\nParameterSummary: (WFInput,WFCondition) If ${WFInput} ${WFCondition}\n",
    "is.workflow.actions.facebook.messenger.send": "is.workflow.actions.facebook.messenger.send()\nDescription:\n    Send via Messenger: Sends the input via Facebook Messenger\nParameterSummary: (WFInput,WFCondition) If ${WFInput} ${WFCondition}\n",
    "is.workflow.actions.makeimagefrompdfpage": "is.workflow.actions.makeimagefrompdfpage(WFInput: WFVariablePickerParameter(Object), WFMakeImageFromPDFPageImageFormat: WFMakeImageFromPDFPageImageFormatParameter(Object), WFMakeImageFromPDFPageColorspace: WFMakeImageFromPDFPageColorspaceParameter(Object), WFMakeImageFromPDFPageResolution: Integer = \"300\") -> Image: public.image(Object)\nParameters:\n    WFInput:  PDF.\n    WFMakeImageFromPDFPageImageFormat:  Image Format.\n    WFMakeImageFromPDFPageColorspace:  Color.\n    WFMakeImageFromPDFPageResolution:  Resolution (dots per inch). 300.\nReturn Value:\n    Image: \nDescription:\n    Make Image from PDF Page: Creates images from the pages in the PDF passed into the action.\nParameterSummary: Make ${WFMakeImageFromPDFPageImageFormat} image from ${WFInput}\n",
    "is.workflow.actions.finder.getselectedfiles": "is.workflow.actions.finder.getselectedfiles() -> File: public.data(Object)\nReturn Value:\n    File: \nDescription:\n    Get Selected Files in Finder: Gets the files that are currently selected in Finder.\nParameterSummary: (WFInput,WFCondition) If ${WFInput} ${WFCondition}\n",
    "is.workflow.actions.health.workout.log": "is.workflow.actions.health.workout.log(WFWorkoutReadableActivityType: WFWorkoutTypePickerParameter(Object), WFWorkoutDate: String, WFWorkoutDuration: Enum, WFWorkoutCaloriesQuantity: WFHealthQuantityFieldParameter(Object), WFWorkoutDistanceQuantity: WFHealthQuantityFieldParameter(Object)) -> Workout: WFHKWorkoutContentItem(Object)\nParameters:\n    WFWorkoutReadableActivityType:  Type.\n    WFWorkoutDate:  Date. optional. The date and time of the start of the workout.\n    WFWorkoutDuration:  Duration. 30. The duration of the workout (optional). The value of this Enum must be one of the following values (The text in parentheses describes the value): \"sec\", \"min\", \"hr\".\n    WFWorkoutCaloriesQuantity:  Calories. 400. The calories burned during the activity (optional).\n    WFWorkoutDistanceQuantity:  Distance. 10. The distance covered during the activity. Only provide this if it makes sense for the activity. (optional).\nReturn Value:\n    Workout: \nDescription:\n    Log Workout: Adds a workout into the Health app. You can log all kinds of activities, from running and cycling to playing a sport.\nParameterSummary: Log ${WFWorkoutReadableActivityType} workout\n",
    "is.workflow.actions.getonscreencontent": "is.workflow.actions.getonscreencontent() -> Get What’s On Screen: public.data(Object)\nReturn Value:\n    Get What’s On Screen: \nDescription:\n    Get What’s On Screen: Gets the current content on screen, if available.\nParameterSummary: Get what’s on screen\n",
    "is.workflow.actions.properties.health.quantity": "is.workflow.actions.properties.health.quantity(WFContentItemPropertyName: Enum, WFInput: WFVariablePickerParameter(Object))\nParameters:\n    WFContentItemPropertyName:  The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Type\", \"Value\", \"Unit\", \"Start Date\", \"End Date\", \"Duration\", \"Source\", \"Name\".\n    WFInput: \nDescription:\n    Get Details of Health Sample: Gets the current content on screen, if available.\nParameterSummary: Get ${WFContentItemPropertyName} from ${WFInput}\n",
    "is.workflow.actions.image.crop": "is.workflow.actions.image.crop(WFInput: WFVariablePickerParameter(Object), WFImageCropPosition: Enum = \"Center\", WFImageCropX: Integer, WFImageCropY: Integer, WFImageCropWidth: Integer = 100, WFImageCropHeight: Integer = 100) -> Cropped Image: WFImage(Object)\nParameters:\n    WFInput:  Image.\n    WFImageCropPosition:  Position. Where on the original image the crop should occur.. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Center\", \"Top Left\", \"Top Right\", \"Bottom Left\", \"Bottom Right\", \"Custom\".\n    WFImageCropX:  X Coordinate. 0. This value depends on the value of WFImageCropPosition. This parameter is only valid when the value of \"WFImageCropPosition\" is \"Custom\".\n    WFImageCropY:  Y Coordinate. 0. This value depends on the value of WFImageCropPosition. This parameter is only valid when the value of \"WFImageCropPosition\" is \"Custom\".\n    WFImageCropWidth:  Width. 100.\n    WFImageCropHeight:  Height. 100.\nReturn Value:\n    Cropped Image: \nDescription:\n    Crop Image: Crops images to a smaller rectangle.\nParameterSummary: Crop ${WFInput}\n",
    "is.workflow.actions.runshellscript": "is.workflow.actions.runshellscript(Script: String = \"echo \"Hello World\"\", Shell: WFDynamicEnumerationParameter(Object), Input: WFVariablePickerParameter(Object), InputMode: Enum = \"to stdin\", RunAsRoot: Bool) -> Shell Script Result: (public.data(Object) or public.plain-text(Object))\nParameters:\n    Script:  Shell Script).\n    Shell:  Shell. The shell to use for interpreting and running the script..\n    Input:  Input. Item(s) to be passed either as stdin or as arguments to the script..\n    InputMode:  Pass Input. to stdin: The input will be converted to a file and directed to the stdin pipe of the script.\nas arguments: The input will be converted to a list of strings and passed as arguments to the script.. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"to stdin\", \"as arguments\".\n    RunAsRoot:  Run as Administrator. When enabled, Shortcuts will ask for an administrator’s password and run the script as the root user. This is similar to using sudo on the command line..\nReturn Value:\n    Shell Script Result: The output from the script\nDescription:\n    Run Shell Script: This action executes a UNIX shell script. The script will execute starting in your user’s home directory.\nParameterSummary: Run Shell Script\n",
    "is.workflow.actions.filter.articles": "is.workflow.actions.filter.articles(WFContentItemFilter: WFContentPredicateOperatorParameter, WFContentItemInputParameter: WFVariablePickerParameter(Object), WFContentItemSortProperty: WFDynamicEnumerationParameter(Object), WFContentItemSortOrder: WFDynamicEnumerationParameter(Object), WFContentItemLimitEnabled: Bool = True, WFContentItemLimitNumber: Integer = 1)\nParameters:\n    WFContentItemFilter: \n    WFContentItemInputParameter: \n    WFContentItemSortProperty: \n    WFContentItemSortOrder: \n    WFContentItemLimitEnabled: \n    WFContentItemLimitNumber: \nDescription:\n    Filter Articles: This action executes a UNIX shell script. The script will execute starting in your user’s home directory.\nParameterSummary: Find Articles that meed the need of the user\n",
    "is.workflow.actions.makevideofromgif": "is.workflow.actions.makevideofromgif(WFMakeVideoFromGIFActionLoopCount: Integer = 1, WFInputGIF: WFVariablePickerParameter(Object)) -> Video: public.mpeg-4(Object)\nParameters:\n    WFMakeVideoFromGIFActionLoopCount: \n    WFInputGIF:  Image. An animated GIF.\nReturn Value:\n    Video: A video\nDescription:\n    Make Video from GIF: Converts an animated GIF into a video.\nParameterSummary: Make video from GIF ${WFInputGIF}\n",
    "is.workflow.actions.dropbox.savefile": "is.workflow.actions.dropbox.savefile(WFAskWhereToSave: Bool = True, WFFileDestinationPath: String, WFSaveFileOverwrite: Bool, WFInput: WFVariablePickerParameter(Object)) -> Saved File: public.data(Object)\nParameters:\n    WFAskWhereToSave:  Ask Where to Save.\n    WFFileDestinationPath:  Destination Path. The path to save to, such as \"/folder/file.txt\". This value depends on the value of WFAskWhereToSave. This parameter is only valid when the value of \"WFAskWhereToSave\" is False.\n    WFSaveFileOverwrite:  Replace Existing Files. This value depends on the value of WFAskWhereToSave. This parameter is only valid when the value of \"WFAskWhereToSave\" is False.\n    WFInput:  File.\nReturn Value:\n    Saved File: The saved files\nDescription:\n    Save Dropbox File: Save files to Dropbox. Turn off “Ask Where to Save” in order to specify a destination path.\nParameterSummary: Save ${WFInput}\n",
    "is.workflow.actions.addnewcalendar": "is.workflow.actions.addnewcalendar(CalendarName: String) -> New Calendar: NSString(Object)\nParameters:\n    CalendarName:  Calendar Name.\nReturn Value:\n    New Calendar: The name of the new calendar\nDescription:\n    Add New Calendar: Creates a new calendar.\nParameterSummary: Add new calendar ${CalendarName}\n",
    "is.workflow.actions.getmyworkflows": "is.workflow.actions.getmyworkflows(Folder: WFWorkflowFolderPickerParameter(Object)) -> My Shortcuts: WFWorkflowReference(Object)\nParameters:\n    Folder:  Folder.\nReturn Value:\n    My Shortcuts: When saved as a file, shortcuts will be exported using the “For People Who Know Me” setting.\nDescription:\n    Get My Shortcuts: Gets the shortcuts stored on this device.\nParameterSummary: Get shortcuts from ${Folder}\n",
    "is.workflow.actions.documentpicker.save": "is.workflow.actions.documentpicker.save(WFInput: WFFilePickerParameter(Object), WFFolder: WFFilePickerParameter(Object), WFAskWhereToSave: Bool = True, WFFileDestinationPath: String, WFSaveFileOverwrite: Bool) -> Saved File: public.data(Object)\nParameters:\n    WFInput:  File.\n    WFFolder:  Folder. This value depends on the value of WFAskWhereToSave. This parameter is only valid when the value of \"WFAskWhereToSave\" is False.\n    WFAskWhereToSave:  Ask Where To Save.\n    WFFileDestinationPath:  Subpath. /Folder/File.txt. The path to save to, such as \"/folder/file.txt\". This value depends on the value of WFAskWhereToSave. This parameter is only valid when the value of \"WFAskWhereToSave\" is False.\n    WFSaveFileOverwrite:  Overwrite If File Exists.\nReturn Value:\n    Saved File: The saved files\nDescription:\n    Save File: Saves files to a specified folder. You can also use this action to copy a file.\nParameterSummary: (WFInput,WFSaveFileOverwrite,WFAskWhereToSave) Save ${WFInput}; (WFInput,WFFolder,WFSaveFileOverwrite,WFAskWhereToSave,WFFileDestinationPath) Save ${WFInput} to ${WFFolder}\n",
    "is.workflow.actions.base64encode": "is.workflow.actions.base64encode(WFEncodeMode: Enum = \"Encode\", WFBase64LineBreakMode: Enum = \"Every 76 Characters\", WFInput: WFVariablePickerParameter(Object)) -> Base64 Encoded: (WFStringContentItem(Object) or public.data(Object))\nParameters:\n    WFEncodeMode:  Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Encode\", \"Decode\".\n    WFBase64LineBreakMode:  Line Breaks. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"None\", \"Every 64 Characters\", \"Every 76 Characters\". This value depends on the value of WFEncodeMode. This parameter is only valid when the value of \"WFEncodeMode\" is \"Encode\".\n    WFInput:  Input.\nReturn Value:\n    Base64 Encoded: \nDescription:\n    Base64 Encode: Encodes or decodes text or files using Base64 encoding.\nParameterSummary: ${WFEncodeMode} ${WFInput} with base64\n",
    "is.workflow.actions.orientationlock.set": "is.workflow.actions.orientationlock.set(operation: Enum = \"toggle\", OnValue: Bool = True)\nParameters:\n    operation:  The value of this Enum must be one of the following values (The text in parentheses describes the value): \"set\", \"toggle\".\n    OnValue: \nDescription:\n    Set Orientation Lock: Encodes or decodes text or files using Base64 encoding.\nParameterSummary: (operation,OnValue) ${operation} orientation lock ${OnValue}; (operation) ${operation} orientation lock\n",
    "is.workflow.actions.getmapslink": "is.workflow.actions.getmapslink(WFInput: WFVariablePickerParameter(Object)) -> Maps URL: NSURL(Object)\nParameters:\n    WFInput:  Location.\nReturn Value:\n    Maps URL: \nDescription:\n    Get Maps URL: Creates a URL to search for the location, place, or text that was passed into the action in a separate maps app.\nParameterSummary: Get maps URL from ${WFInput}\n",
    "is.workflow.actions.selectcontacts": "is.workflow.actions.selectcontacts(WFSelectMultiple: Bool) -> Contacts: WFContact(Object)\nParameters:\n    WFSelectMultiple:  Select Multiple.\nReturn Value:\n    Contacts: \nDescription:\n    Select Contact: Prompts to pick a person from your contacts and passes the selection to the next action.\nParameterSummary: Select contact\n",
    "is.workflow.actions.setitemname": "is.workflow.actions.setitemname(WFName: String, WFDontIncludeFileExtension: Bool, WFInput: WFVariablePickerParameter(Object)) -> Renamed Item: WFContentItem(Object)\nParameters:\n    WFName:  Name.\n    WFDontIncludeFileExtension:  Don't Include File Extension. By default, Shortcuts will automatically include a file extension if one isn't specified. Turn this on if you want to create a file with no extension..\n    WFInput:  Input.\nReturn Value:\n    Renamed Item: \nDescription:\n    Set Name: Sets the name of the item passed as input.\nParameterSummary: Set name of ${WFInput} to ${WFName}\n",
    "is.workflow.actions.skipback": "is.workflow.actions.skipback(WFSkipBackBehavior: Enum = \"Beginning\", WFMediaRoute: WFMediaRoutePickerParameter(Object) = \"Local\")\nParameters:\n    WFSkipBackBehavior:  Skip To. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Beginning\", \"Previous Song\".\n    WFMediaRoute:  Device.\nDescription:\n    Skip Back: Skips to the previous song in the current music queue.\nParameterSummary: Skip back to the ${WFSkipBackBehavior} on ${WFMediaRoute}\n",
    "is.workflow.actions.text.changecase": "is.workflow.actions.text.changecase(text: String, WFCaseType: Enum)\nParameters:\n    text: \n    WFCaseType:  The value of this Enum must be one of the following values (The text in parentheses describes the value): \"UPPERCASE\", \"lowercase\", \"Capitalize Every Word\", \"Capitalize with Title Case\", \"Capitalize with sentence case\", \"cApItAlIzE wItH aLtErNaTiNg cAsE\".\nDescription:\n    Change Text Case: Skips to the previous song in the current music queue.\nParameterSummary: Change ${text} in ${WFCaseType}\n",
    "com.apple.mobileslideshow.StreamShareService": "com.apple.mobileslideshow.StreamShareService(ImageInput: WFVariablePickerParameter(Object))\nParameters:\n    ImageInput:  Images.\nDescription:\n    Post to Shared Album: Skips to the previous song in the current music queue.\nParameterSummary: Post ${ImageInput} to Shared Album\n",
    "is.workflow.actions.timer.start": "is.workflow.actions.timer.start(IntentAppDefinition: WFIntentAppPickerParameter(Object) = {'BundleIdentifier': 'com.apple.mobiletimer-framework.MobileTimerIntents'}, WFDuration: Enum)\nParameters:\n    IntentAppDefinition:  App.\n    WFDuration:  Duration. 5. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"sec\", \"min\", \"hr\".\nDescription:\n    Start Timer: Starts a timer in the Clock app for the specified amount of time.\nParameterSummary: Start timer for ${WFDuration}\n",
    "is.workflow.actions.getipaddress": "is.workflow.actions.getipaddress(WFIPAddressSourceOption: Enum = \"External\", WFIPAddressTypeOption: Enum = \"IPv4\") -> Current IP Address: NSString(Object)\nParameters:\n    WFIPAddressSourceOption:  Address. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"External\", \"Local\".\n    WFIPAddressTypeOption:  Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"IPv4\", \"IPv6\".\nReturn Value:\n    Current IP Address: \nDescription:\n    Get Current IP Address: Returns the local or external IP address of the device.\nParameterSummary: Get current IP address\n",
    "is.workflow.actions.getcurrentsong": "is.workflow.actions.getcurrentsong(Subject: Enum = \"Current Song\") -> Current Song: (MPMediaItem(Object) or WFTimeInterval(Object))\nParameters:\n    Subject:  Get. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Current Song\", \"Current Playback Time\".\nReturn Value:\n    Current Song: \nDescription:\n    Get Current Song: Returns the song that is currently playing in the Music app, if any.\nParameterSummary: Get ${Subject}\n",
    "is.workflow.actions.giphy": "is.workflow.actions.giphy(WFGiphyQuery: String, WFGiphyShowPicker: Bool = True, WFGiphyLimit: Integer = 1, WFGiphySelectMultiple: Bool) -> GIFs: WFGiphyObject(Object)\nParameters:\n    WFGiphyQuery:  Search. Trending.\n    WFGiphyShowPicker:  Show GIF Picker.\n    WFGiphyLimit:  This value depends on the value of WFGiphyShowPicker. This parameter is only valid when the value of \"WFGiphyShowPicker\" is False.\n    WFGiphySelectMultiple:  Select Multiple. This value depends on the value of WFGiphyShowPicker. This parameter is only valid when the value of \"WFGiphyShowPicker\" is True.\nReturn Value:\n    GIFs: \nDescription:\n    Find Giphy GIFs: Finds GIFs representing the provided text, using Giphy.. Powered by Giphy (giphy.com)\nParameterSummary: Find ${WFGiphyQuery} GIFs on Giphy\n",
    "is.workflow.actions.getlastvideo": "is.workflow.actions.getlastvideo(WFGetLatestPhotoCount: Integer = 1) -> Latest Videos: PHAsset(Object)\nParameters:\n    WFGetLatestPhotoCount: \nReturn Value:\n    Latest Videos: \nDescription:\n    Get Latest Videos: Gets the most recent videos from the photo library.\nParameterSummary: Get the latest ${WFGetLatestPhotoCount}\n",
    "is.workflow.actions.evernote.getlink": "is.workflow.actions.evernote.getlink(WFEvernoteShareInAppLink: Bool, WFInput: WFVariablePickerParameter(Object)) -> Note Link: NSURL(Object)\nParameters:\n    WFEvernoteShareInAppLink:  In-App Link. When enabled, an evernote:// URL will be generated, suitable for opening the note in the Evernote app..\n    WFInput:  Note.\nReturn Value:\n    Note Link: \nDescription:\n    Get Note Link: Gets a link to the Evernote note passed into the action, which can be shared.\nParameterSummary: Get link for ${WFInput}\n",
    "is.workflow.actions.reboot": "is.workflow.actions.reboot(WFShutdownMode: Enum = \"Shut Down\")\nParameters:\n    WFShutdownMode:  Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Shut Down\", \"Restart\".\nDescription:\n    Shut Down: Shuts down or restarts your device.\nParameterSummary: (WFShutdownMode) ${WFShutdownMode} this device\n",
    "is.workflow.actions.connecttoservers": "is.workflow.actions.connecttoservers(WFInput: String) -> Connected Server: public.folder(Object)\nParameters:\n    WFInput:  smb://computer.local.\nReturn Value:\n    Connected Server: Mounted volume\nDescription:\n    Connect to Servers: Connects your computer to the specified file servers on the network. For example, you can connect to SMB/CIFS, NFS, FTP (read-only), or WebDAV servers.\nParameterSummary: (WFShutdownMode) ${WFShutdownMode} this device\n",
    "is.workflow.actions.addnewreminder": "is.workflow.actions.addnewreminder(WFCalendarItemTitle: String, WFCalendarDescriptor: WFRemindersListPickerParameter(Object), WFAlertEnabled: Enum = \"No Alert\", WFAlertCondition: Enum = \"At Time\", WFAlertLocation: WFLocationParameter(Object), WFAlertPerson: WFContactFieldParameter(Object), WFAlertLocationRadius: WFUnitQuantityFieldParameter(Object) = 1000, WFAlertCustomTime: WFDetectedDate, WFPriority: Enum = \"None\", WFFlag: Bool, WFURL: String, WFImages: WFVariablePickerParameter(Object), WFParentTask: WFVariablePickerParameter(Object), WFTags: WFTagFieldParameter(Object), WFCalendarItemNotes: String) -> New Reminder: REMReminder(Object)\nParameters:\n    WFCalendarItemTitle:  Reminder. The title of this reminder..\n    WFCalendarDescriptor:  List. The list of reminders to add this reminder to..\n    WFAlertEnabled:  Alert. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"No Alert\", \"Alert\".\n    WFAlertCondition:  Trigger. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"At Time\", \"When I Arrive\", \"When I Leave\", \"When Messaging\". This value depends on the value of WFAlertEnabled. This parameter is only valid when the value of \"WFAlertEnabled\" is \"Alert\".\n    WFAlertLocation:  Location. The location that triggers the alert.. This value depends on the value of WFAlertEnabled. This parameter is only valid when the value of \"WFAlertEnabled\" is \"Alert\". This value depends on the value of WFAlertCondition. This parameter is only valid when the value of \"WFAlertCondition\" is \"When I Arrive\", \"When I Leave\".\n    WFAlertPerson:  Person. The reminder notification will be shown when chatting with this person in Messages.. This value depends on the value of WFAlertEnabled. This parameter is only valid when the value of \"WFAlertEnabled\" is \"Alert\". This value depends on the value of WFAlertCondition. This parameter is only valid when the value of \"WFAlertCondition\" is \"When Messaging\".\n    WFAlertLocationRadius:  Radius. The distance from the provided location to consider \"arriving\" or \"leaving\" the location. This value depends on the value of WFAlertEnabled. This parameter is only valid when the value of \"WFAlertEnabled\" is \"Alert\". This value depends on the value of WFAlertCondition. This parameter is only valid when the value of \"WFAlertCondition\" is \"When I Arrive\", \"When I Leave\".\n    WFAlertCustomTime:  2:00 PM. Text representing the date or date and time when the alert should occur. Examples: “tonight at 7”, “March 7”. This value depends on the value of WFAlertEnabled. This parameter is only valid when the value of \"WFAlertEnabled\" is \"Alert\". This value depends on the value of WFAlertCondition. This parameter is only valid when the value of \"WFAlertCondition\" is \"At Time\".\n    WFPriority:  Priority. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"None\", \"Low\", \"Medium\", \"High\".\n    WFFlag:  Flag.\n    WFURL:  URL. optional. Optionally, a URL to attach to this reminder..\n    WFImages:  Images. An optional set of images to attach to this reminder. Use a variable to get the images..\n    WFParentTask:  Parent Reminder. Optionally, a parent reminder to add this reminder to..\n    WFTags:  Tags. Optionally, tags to add to this reminder..\n    WFCalendarItemNotes:  Notes. Optionally, a description for this reminder..\nReturn Value:\n    New Reminder: The new reminder\nDescription:\n    Add New Reminder: Creates a new reminder and adds it to the selected list of reminders.\nParameterSummary: (WFCalendarItemTitle,WFCalendarDescriptor,WFAlertEnabled,WFAlertCondition,WFAlertPerson,WFCalendarItemNotes,WFURL,WFImages,WFFlag,WFPriority,WFParentTask,WFTags) Add ${WFCalendarItemTitle} to ${WFCalendarDescriptor} with ${WFAlertEnabled} ${WFAlertCondition} ${WFAlertPerson}; (WFCalendarItemTitle,WFAlertEnabled,WFAlertCondition,WFAlertLocation,WFCalendarItemNotes,WFAlertLocationRadius,WFURL,WFImages,WFFlag,WFPriority,WFParentTask,WFTags) Add ${WFCalendarItemTitle} with ${WFAlertEnabled} ${WFAlertCondition} from ${WFAlertLocation}; (WFCalendarItemTitle,WFAlertEnabled,WFAlertCondition,WFAlertPerson,WFCalendarItemNotes,WFURL,WFImages,WFFlag,WFPriority,WFParentTask,WFTags) Add ${WFCalendarItemTitle} with ${WFAlertEnabled} ${WFAlertCondition} ${WFAlertPerson}; (WFCalendarItemTitle,WFCalendarDescriptor,WFAlertEnabled,WFAlertCondition,WFAlertLocation,WFCalendarItemNotes,WFAlertLocationRadius,WFURL,WFImages,WFFlag,WFPriority,WFParentTask,WFTags) Add ${WFCalendarItemTitle} to ${WFCalendarDescriptor} with ${WFAlertEnabled} ${WFAlertCondition} from ${WFAlertLocation}; (WFCalendarItemTitle,WFCalendarDescriptor,WFAlertEnabled,WFAlertCondition,WFAlertCustomTime,WFCalendarItemNotes,WFURL,WFImages,WFFlag,WFPriority,WFParentTask,WFTags) Add ${WFCalendarItemTitle} to ${WFCalendarDescriptor} with ${WFAlertEnabled} ${WFAlertCondition} ${WFAlertCustomTime}; (WFCalendarItemTitle,WFAlertEnabled,WFAlertCondition,WFAlertCustomTime,WFCalendarItemNotes,WFURL,WFImages,WFFlag,WFPriority,WFParentTask,WFTags) Add ${WFCalendarItemTitle} with ${WFAlertEnabled} ${WFAlertCondition} ${WFAlertCustomTime}; (WFCalendarItemTitle,WFAlertEnabled,WFCalendarItemNotes,WFURL,WFImages,WFFlag,WFPriority,WFParentTask,WFTags) Add ${WFCalendarItemTitle} with ${WFAlertEnabled}; (WFCalendarItemTitle,WFCalendarDescriptor,WFAlertEnabled,WFCalendarItemNotes,WFURL,WFImages,WFFlag,WFPriority,WFParentTask,WFTags) Add ${WFCalendarItemTitle} to ${WFCalendarDescriptor} with ${WFAlertEnabled}\n",
    "is.workflow.actions.avairyeditphoto": "is.workflow.actions.avairyeditphoto(WFDocument: WFVariablePickerParameter(Object)) -> Markup Result: (WFImageContentItem(Object) or WFPDFContentItem(Object))\nParameters:\n    WFDocument:  Document.\nReturn Value:\n    Markup Result: The edited content\nDescription:\n    Markup: Edits an image or PDF with Markup.\nParameterSummary: Mark up ${WFDocument}\n",
    "is.workflow.actions.showincalendar": "is.workflow.actions.showincalendar(WFEvent: WFVariablePickerParameter(Object))\nParameters:\n    WFEvent:  Event.\nDescription:\n    Open in Calendar: Shows the date or calendar event passed as input in the Calendar app.\nParameterSummary: Open ${WFEvent} in Calendar\n",
    "is.workflow.actions.correctspelling": "is.workflow.actions.correctspelling(text: String, Show-text: Bool)\nParameters:\n    text: \n    Show-text: \nDescription:\n    Correct Spelling: Shows the date or calendar event passed as input in the Calendar app.\nParameterSummary: Correct spelling of ${texttext}\n",
    "is.workflow.actions.setters.calendarevents": "is.workflow.actions.setters.calendarevents(WFInput: String, WFCalendarEventContentItemEndDate: String, WFContentItemPropertyName: Enum, Mode: Enum, ValueLabel: NSNumber, WFCalendarEventContentItemAttendees: WFContact, WFCalendarEventContentItemURL: String)\nParameters:\n    WFInput: \n    WFCalendarEventContentItemEndDate: \n    WFContentItemPropertyName:  The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Start Date\", \"End Date\", \"All-Day\", \"Location\", \"Notes\", \"URL\", \"Availability\", \"Status\", \"Show As\", \"Calendar\", \"Attendees\", \"Recurrence\", \"Travel Time\", \"Alerts\".\n    Mode:  The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Set\", \"Add\", \"Remove\".\n    ValueLabel: \n    WFCalendarEventContentItemAttendees: \n    WFCalendarEventContentItemURL: \nDescription:\n    Edit Calendar Event: Shows the date or calendar event passed as input in the Calendar app.\nParameterSummary: Edit calendar event\n",
    "is.workflow.actions.detectlanguage": "is.workflow.actions.detectlanguage(WFInput: String) -> Language: NSString(Object)\nParameters:\n    WFInput:  Text.\nReturn Value:\n    Language: \nDescription:\n    Detect Language: Detects the language of the text provided as input.\nParameterSummary: Detect language of ${WFInput}\n",
    "is.workflow.actions.splitscreen": "is.workflow.actions.splitscreen(WFPrimaryAppIdentifier: WFAppPickerParameter(Object), WFSecondaryAppIdentifier: WFAppPickerParameter(Object), WFAppRatio: Enum = \"½ + ½\")\nParameters:\n    WFPrimaryAppIdentifier:  App.\n    WFSecondaryAppIdentifier:  App.\n    WFAppRatio:  Ratio. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"½ + ½\", \"⅔ + ⅓\".\nDescription:\n    Split Screen Apps: Open the specified apps in split screen mode.\nParameterSummary: Split screen between ${WFPrimaryAppIdentifier} and ${WFSecondaryAppIdentifier}\n",
    "is.workflow.actions.startscreensaver": "is.workflow.actions.startscreensaver()\nDescription:\n    Start Screen Saver: Starts the screen saver selected in the Desktop & Screen Saver preference pane.\nParameterSummary: Start screen saver\n",
    "is.workflow.actions.overlaytext": "is.workflow.actions.overlaytext(WFText: String, WFImage: WFVariablePickerParameter(Object), WFTextPosition: Enum = \"Center\", WFTextX: Integer, WFPercentageTextX: Float, WFTextY: Integer, WFPercentageTextY: Float, WFTextOffset: Integer, WFPercentageTextOffset: Float, WFFont: WFFontPickerParameter(Object), WFFontSize: Integer = 36, WFPercentageFontSize: Float = 0.1, WFTextAlignment: Enum, WFTextColor: WFColorPickerParameter(Object), WFTextRotation: Integer = \"0\", WFTextOutlineEnabled: Bool, WFTextStrokeWidth: Integer, WFPercentageTextStrokeWidth: Float = 0.1, WFTextStrokeColor: WFColorPickerParameter(Object), WFTextBoxWidth: Integer, WFPercentageTextBoxWidth: Float = 0.8, WFSizingMethod: Enum = \"Proportional\") -> Image with Text: WFImageContentItem(Object)\nParameters:\n    WFText:  Text.\n    WFImage:  Image. An image.\n    WFTextPosition:  Position. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Top Left\", \"Top Center\", \"Top Right\", \"Middle Left\", \"Center\", \"Middle Right\", \"Bottom Left\", \"Bottom Center\", \"Bottom Right\", \"Custom Position\".\n    WFTextX:  X Coordinate. 0. The X Coordinate to start the text at, in points. 0 starts at the left of the image.. This value depends on the value of WFSizingMethod. This parameter is only valid when the value of \"WFSizingMethod\" is \"Absolute\". This value depends on the value of WFTextPosition. This parameter is only valid when the value of \"WFTextPosition\" is \"Custom Position\".\n    WFPercentageTextX:  X Coordinate. 0. The X Coordinate to start the text at, as a decimal proportion of the image size between 0 and 1. 0 starts at the left of the image.. This value depends on the value of WFSizingMethod. This parameter is only valid when the value of \"WFSizingMethod\" is \"Proportional\". This value depends on the value of WFTextPosition. This parameter is only valid when the value of \"WFTextPosition\" is \"Custom Position\".\n    WFTextY:  Y Coordinate. 0. The Y Coordinate to start the text at, in points. 0 starts at the top of the image.. This value depends on the value of WFSizingMethod. This parameter is only valid when the value of \"WFSizingMethod\" is \"Absolute\". This value depends on the value of WFTextPosition. This parameter is only valid when the value of \"WFTextPosition\" is \"Custom Position\".\n    WFPercentageTextY:  Y Coordinate. 0. The Y Coordinate to start the text at, as a decimal proportion of the image size between 0 and 1. 0 starts at the top of the image.. This value depends on the value of WFSizingMethod. This parameter is only valid when the value of \"WFSizingMethod\" is \"Proportional\". This value depends on the value of WFTextPosition. This parameter is only valid when the value of \"WFTextPosition\" is \"Custom Position\".\n    WFTextOffset:  Offset. The amount of additional space between the text box and the nearest edges of the image, in points. For example, the nearest edges are the Left for Middle Left alignment, the Bottom and Right for Bottom Right alignment, and the Top for Top alignment.. This value depends on the value of WFSizingMethod. This parameter is only valid when the value of \"WFSizingMethod\" is \"Absolute\". This value depends on the value of WFTextPosition. This parameter is only valid when the value of \"WFTextPosition\" is \"Center\". This value depends on the value of WFTextPosition. This parameter is only valid when the value of \"WFTextPosition\" is \"Custom Position\".\n    WFPercentageTextOffset:  Offset. The amount of additional space between the text box and the nearest edges of the image, as a decimal proportion of the image size between 0 and 1. For example, the nearest edges are the Left for Middle Left alignment, the Bottom and Right for Bottom Right alignment, and the Top for Top alignment.. This value depends on the value of WFSizingMethod. This parameter is only valid when the value of \"WFSizingMethod\" is \"Proportional\". This value depends on the value of WFTextPosition. This parameter is only valid when the value of \"WFTextPosition\" is \"Center\". This value depends on the value of WFTextPosition. This parameter is only valid when the value of \"WFTextPosition\" is \"Custom Position\".\n    WFFont:  Font.\n    WFFontSize:  Font Size. The size of the font, in points, to apply to the text.. This value depends on the value of WFSizingMethod. This parameter is only valid when the value of \"WFSizingMethod\" is \"Absolute\".\n    WFPercentageFontSize:  Font Size. The size of the font, as a decimal proportion of the image size between 0 and 1, to apply to the text.. This value depends on the value of WFSizingMethod. This parameter is only valid when the value of \"WFSizingMethod\" is \"Proportional\".\n    WFTextAlignment:  Text Alignment. The alignment to apply to the text. This will align to the edge of the bounding box created by the Maximum Width, if any.. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Left\", \"Center\", \"Right\".\n    WFTextColor:  Font Color.\n    WFTextRotation:  Rotation. The amount of rotation, in degrees, to apply to the text. Starts from the center of the text bounds. Optional..\n    WFTextOutlineEnabled:  Outline Text.\n    WFTextStrokeWidth:  Stroke Width. The stroke width, in points, to apply to the text. Optional.. This value depends on the value of WFSizingMethod. This parameter is only valid when the value of \"WFSizingMethod\" is \"Absolute\". This value depends on the value of WFTextOutlineEnabled. This parameter is only valid when the value of \"WFTextOutlineEnabled\" is True.\n    WFPercentageTextStrokeWidth:  Stroke Width. The stroke width, as a decimal proportion of the font size between 0 and 1, to apply to the text. Optional.. This value depends on the value of WFSizingMethod. This parameter is only valid when the value of \"WFSizingMethod\" is \"Proportional\". This value depends on the value of WFTextOutlineEnabled. This parameter is only valid when the value of \"WFTextOutlineEnabled\" is True.\n    WFTextStrokeColor:  Stroke Color. This value depends on the value of WFTextOutlineEnabled. This parameter is only valid when the value of \"WFTextOutlineEnabled\" is True.\n    WFTextBoxWidth:  Maximum Width. The maximum width of the text, in points. If 0, the text will have a bounding box that is as wide as necessary, and may run off the edge of the image. Otherwise, the text will wrap within the bounds of the width. Optional.. This value depends on the value of WFSizingMethod. This parameter is only valid when the value of \"WFSizingMethod\" is \"Absolute\".\n    WFPercentageTextBoxWidth:  Maximum Width. The maximum width of the text, as a decimal proportion of the image size between 0 and 1. If 0, the text will have a bounding box that is as wide as necessary, and may run off the edge of the image. Otherwise, the text will wrap within the bounds of the width. Optional.. This value depends on the value of WFSizingMethod. This parameter is only valid when the value of \"WFSizingMethod\" is \"Proportional\".\n    WFSizingMethod:  Sizing. The sizing method to use. Proportional sizing will cause all parameters to use a decimal proportion between 0 and 1. Absolute sizing will cause all parameters to use points.. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Proportional\", \"Absolute\".\nReturn Value:\n    Image with Text: An image with text\nDescription:\n    Overlay Text: Overlays text onto the image passed as input.\nParameterSummary: (WFText,WFImage,WFTextPosition,WFPercentageTextOffset) Overlay ${WFText} on ${WFImage} at ${WFTextPosition} offset by ${WFPercentageTextOffset}; (WFText,WFImage,WFTextPosition,WFTextOffset) Overlay ${WFText} on ${WFImage} at ${WFTextPosition} offset by ${WFTextOffset} points; (WFText,WFImage,WFTextPosition,WFTextX,WFTextY) Overlay ${WFText} on ${WFImage} at ${WFTextPosition} ${WFTextX}, ${WFTextY}; (WFText,WFImage,WFTextPosition) Overlay ${WFText} on ${WFImage} at ${WFTextPosition}; (WFText,WFImage,WFTextPosition,WFPercentageTextX,WFPercentageTextY) Overlay ${WFText} on ${WFImage} at ${WFTextPosition} ${WFPercentageTextX}, ${WFPercentageTextY}\n",
    "is.workflow.actions.comment": "is.workflow.actions.comment(WFCommentActionText: String)\nParameters:\n    WFCommentActionText:  Comment. Enter comment….\nDescription:\n    Comment: This action lets you explain how part of a shortcut works. When run, this action does nothing.\nParameterSummary: Comment from the user is (${WFCommentActionText})\n",
    "is.workflow.actions.logout": "is.workflow.actions.logout()\nDescription:\n    Log Out User: Logs out the current user.\nParameterSummary: Log out the current user\n",
    "is.workflow.actions.makeimagefromrichtext": "is.workflow.actions.makeimagefromrichtext(WFInput: WFVariablePickerParameter(Object), WFWidth: Integer = 1024, WFHeight: Integer = 768) -> Image: public.image(Object)\nParameters:\n    WFInput:  Rich Text.\n    WFWidth:  Width.\n    WFHeight:  Height.\nReturn Value:\n    Image: \nDescription:\n    Make Image from Rich Text: Creates an image from the rich text, web content, or URL passed in as input.\nParameterSummary: Make image from ${WFInput}\n",
    "is.workflow.actions.text.translate": "is.workflow.actions.text.translate(WFSelectedFromLanguage: WFTranslateTextLanguagePickerParameter(Object), WFSelectedLanguage: WFTranslateTextLanguagePickerParameter(Object), WFInputText: String) -> Translated Text: NSString(Object)\nParameters:\n    WFSelectedFromLanguage:  Language.\n    WFSelectedLanguage:  To.\n    WFInputText:  Text.\nReturn Value:\n    Translated Text: \nDescription:\n    Translate Text: Translates the text passed into the action into another language.\nParameterSummary: Translate ${WFInputText} from ${WFSelectedFromLanguage} to ${WFSelectedLanguage}\n",
    "is.workflow.actions.getclipboard": "is.workflow.actions.getclipboard() -> Clipboard: WFContentItem(Object)\nReturn Value:\n    Clipboard: \nDescription:\n    Get Clipboard: Passes the contents of the clipboard to the next action.\nParameterSummary: Get clipboard\n",
    "is.workflow.actions.properties.calendarevents": "is.workflow.actions.properties.calendarevents(WFContentItemPropertyName: Enum, WFInput: WFVariablePickerParameter(Object))\nParameters:\n    WFContentItemPropertyName:  The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Start Date\", \"End Date\", \"Is All Day\", \"Calender\", \"Location\", \"Has Alarms\", \"Duration\", \"Is Canceled\", \"My Status\", \"Organizer\", \"Oragnizer Is Me\", \"Attendees\", \"Number of Attendees\", \"URL\", \"Title\", \"Notes\", \"Attachments\", \"File Size\", \"File Extension\", \"Creation Date\", \"File Path\", \"Last Modified Date\", \"Name\".\n    WFInput: \nDescription:\n    Get Details of Calendar Events: Passes the contents of the clipboard to the next action.\nParameterSummary: Get ${WFContentItemPropertyName} from ${WFInput}\n",
    "com.apple.TVRemoteUIService.ToggleCaptionsIntent": "com.apple.TVRemoteUIService.ToggleCaptionsIntent(toggle: Enum = \"Enable\", device: WFMediaRoutePickerParameter(Object))\nParameters:\n    toggle:  The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Enable\", \"Disable\".\n    device: \nDescription:\n    Toggle Captions: Passes the contents of the clipboard to the next action.\nParameterSummary: Toggle Captions ${toggle} on ${device}\n",
    "is.workflow.actions.getlatestbursts": "is.workflow.actions.getlatestbursts(WFGetLatestPhotoCount: Integer = 1) -> Latest Bursts: PHAsset(Object)\nParameters:\n    WFGetLatestPhotoCount: \nReturn Value:\n    Latest Bursts: \nDescription:\n    Get Latest Bursts: Gets the most recent burst photos from the photo library.\nParameterSummary: Get the latest ${WFGetLatestPhotoCount}\n",
    "is.workflow.actions.runextension": "is.workflow.actions.runextension(WFInput: WFVariablePickerParameter(Object), WFApp: WFAppPickerParameter(Object))\nParameters:\n    WFInput:  Input.\n    WFApp:  App.\nDescription:\n    Share with Apps: Prompts to share the input using action extensions and sharing extensions provided by other apps.\nParameterSummary: Share ${WFInput} with ${WFApp}\n",
    "is.workflow.actions.pocket.get": "is.workflow.actions.pocket.get(WFPocketItemCount: Integer, WFPocketItemState: Enum = \"All\", WFPocketItemSearchTerm: String, WFPocketItemSearchTags: String) -> Items from Pocket: NSURL(Object)\nParameters:\n    WFPocketItemCount: \n    WFPocketItemState:  Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Unread\", \"Archived\", \"All\".\n    WFPocketItemSearchTerm:  Search. optional. If specified, only items with titles or URLs matching this search will be returned..\n    WFPocketItemSearchTags:  Tag. optional. If specified, only items matching this tag will be returned..\nReturn Value:\n    Items from Pocket: \nDescription:\n    Get Items from Pocket: Returns items in your Pocket account.\nParameterSummary: Get ${WFPocketItemCount}\n",
    "is.workflow.actions.sendmessage": "is.workflow.actions.sendmessage(IntentAppDefinition: WFIntentAppPickerParameter(Object) = {'BundleIdentifier': 'com.apple.MobileSMS'}, ShowWhenRun: Bool = True, WFSendMessageActionRecipients: WFContactHandleFieldParameter(Object), WFSendMessageContent: String, WFSendMessagePrefix: String)\nParameters:\n    IntentAppDefinition:  App.\n    ShowWhenRun:  Show When Run.\n    WFSendMessageActionRecipients:  Recipients.\n    WFSendMessageContent:  Message.\n    WFSendMessagePrefix:  Prefix.\nDescription:\n    Send Message: Sends a message. Pass images, videos, or other files as input to include attachments.\nParameterSummary: Send “${WFSendMessageContent}” to ${WFSendMessageActionRecipients}\n",
    "is.workflow.actions.getcurrentlocation": "is.workflow.actions.getcurrentlocation(Accuracy: WFLocationAccuracyParameter(Object)) -> Current Location: CLLocation(Object)\nParameters:\n    Accuracy:  Precision.\nReturn Value:\n    Current Location: \nDescription:\n    Get Current Location: Gets the current location of the device.\nParameterSummary: Get current location\n",
    "is.workflow.actions.getlastphoto": "is.workflow.actions.getlastphoto(WFGetLatestPhotoCount: Integer = 1, WFGetLatestPhotosActionIncludeScreenshots: Bool = True) -> Latest Photos: PHAsset(Object)\nParameters:\n    WFGetLatestPhotoCount: \n    WFGetLatestPhotosActionIncludeScreenshots:  Include Screenshots.\nReturn Value:\n    Latest Photos: \nDescription:\n    Get Latest Photos: Gets the most recent photos from the photo library.\nParameterSummary: Get the latest ${WFGetLatestPhotoCount}\n",
    "is.workflow.actions.openxcallbackurl": "is.workflow.actions.openxcallbackurl(WFXCallbackCustomCallbackEnabled: Bool, WFXCallbackCustomSuccessKey: String = \"x-success\", WFXCallbackCustomCancelKey: String, WFXCallbackCustomErrorKey: String, WFXCallbackCustomSuccessURLEnabled: Bool, WFXCallbackCustomSuccessURL: String = \"shortcuts://callback\", WFXCallbackURL: String) -> X-Callback Result: (NSString(Object) or NSDictionary(Object))\nParameters:\n    WFXCallbackCustomCallbackEnabled:  Custom Callback. Turn this on if you want to open a callback URL that is not x-callback-url compliant and uses keys other than “x-success”, “x-error”, and “x-cancel”..\n    WFXCallbackCustomSuccessKey:  Success Key. This value depends on the value of WFXCallbackCustomCallbackEnabled. This parameter is only valid when the value of \"WFXCallbackCustomCallbackEnabled\" is True.\n    WFXCallbackCustomCancelKey:  Cancel Key. optional. This value depends on the value of WFXCallbackCustomCallbackEnabled. This parameter is only valid when the value of \"WFXCallbackCustomCallbackEnabled\" is True.\n    WFXCallbackCustomErrorKey:  Error Key. optional. This value depends on the value of WFXCallbackCustomCallbackEnabled. This parameter is only valid when the value of \"WFXCallbackCustomCallbackEnabled\" is True.\n    WFXCallbackCustomSuccessURLEnabled:  Custom X-Success URL. If enabled, Shortcuts will use a custom success callback URL. This is useful if the app you are calling uses placeholders in the x-success URL to pass output..\n    WFXCallbackCustomSuccessURL:  X-Success URL. For example, you might use shortcuts://callback?result=[[output]]. This value depends on the value of WFXCallbackCustomSuccessURLEnabled. This parameter is only valid when the value of \"WFXCallbackCustomSuccessURLEnabled\" is True.\n    WFXCallbackURL:  X-Callback URL.\nReturn Value:\n    X-Callback Result: When the app that's opened calls back to Shortcuts using x-success, it may include parameters in the URL. These will be passed as output to the next action, as text if there is just one parameter, or as a dictionary if there are multiple (use Get Dictionary Value to access it).\nDescription:\n    Open X-Callback URL: Performs the specified x-callback-url action. The x-success, x-cancel, and x-error parameters will be added automatically.\nParameterSummary: Open ${WFXCallbackURL} with x-callback\n",
    "is.workflow.actions.addnewevent": "is.workflow.actions.addnewevent(WFCalendarItemTitle: String, WFCalendarItemLocation: String, WFCalendarDescriptor: WFCalendarPickerParameter(Object), WFCalendarItemStartDate: WFDetectedDate, WFCalendarItemEndDate: WFDetectedDate, WFCalendarItemAllDay: Bool, WFAlertTime: Enum, WFAlertCustomTime: String, WFCalendarItemNotes: String, ShowWhenRun: Bool = True) -> New Event: EKEvent(Object)\nParameters:\n    WFCalendarItemTitle:  Title. The title of this event..\n    WFCalendarItemLocation:  Location. optional.\n    WFCalendarDescriptor:  Calendar. The calendar to add this event to..\n    WFCalendarItemStartDate:  Start Date. Tomorrow at noon. Text representing the date this event begins. Examples: “tomorrow at 2”, “January 3”, “8:00pm”.\n    WFCalendarItemEndDate:  End Date. Tomorrow at 1pm. Text representing the date this event finishes..\n    WFCalendarItemAllDay:  All Day. When enabled, the event takes place over an entire day and time is ignored..\n    WFAlertTime:  Alert. Optionally, when to show an alert to notify me of this event.. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"None\", \"At time of event\", \"5 minutes before\", \"15 minutes before\", \"30 minutes before\", \"1 hour before\", \"2 hours before\", \"1 day before\", \"2 days before\", \"1 week before\", \"Custom\".\n    WFAlertCustomTime:  Alert Time. Tomorrow at 4pm. Text representing the date when the alert should occur. Examples: “tonight at 7”, “March 7”. This value depends on the value of WFAlertTime. This parameter is only valid when the value of \"WFAlertTime\" is \"Custom\".\n    WFCalendarItemNotes:  Notes. Optionally, a description for this event..\n    ShowWhenRun:  Show Compose Sheet.\nReturn Value:\n    New Event: The new event\nDescription:\n    Add New Event: Creates a new event and adds it to the selected calendar.\nParameterSummary: Add ${WFCalendarItemTitle} from ${WFCalendarItemStartDate} to ${WFCalendarItemEndDate}\n",
    "is.workflow.actions.file.getlink": "is.workflow.actions.file.getlink(WFFile: WFVariablePickerParameter(Object)) -> Get Link to File: NSURL(Object)\nParameters:\n    WFFile:  File.\nReturn Value:\n    Get Link to File: \nDescription:\n    Get Link to File: Gets a public link to the file passed into the action.\nParameterSummary: Get link to ${WFFile}\n",
    "is.workflow.actions.setplaybackdestination": "is.workflow.actions.setplaybackdestination(WFMediaRouteOperation: Enum = \"Set\", WFMediaRoute: WFMediaRoutePickerParameter(Object) = \"Local\")\nParameters:\n    WFMediaRouteOperation:  Operation. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Set\", \"Add\", \"Remove\".\n    WFMediaRoute:  Device. The device that is set, added, or removed as playback destination..\nDescription:\n    Change Playback Destination: Changes the current playback destination. Use this action to route audio to AirPods, Bluetooth speakers, HomePod, or other AirPlay devices. Optionally, this action can add or remove devices from a group, so you can route audio to multiple devices at once.. When attempting to add a device that does not support groups, all other devices are removed as playback destinations first.\nParameterSummary: (WFMediaRouteOperation,WFMediaRoute) ${WFMediaRouteOperation} ${WFMediaRoute} to playback destinations\n",
    "is.workflow.actions.instapaper.add": "is.workflow.actions.instapaper.add(WFInstapaperFolder: WFDynamicEnumerationParameter(Object), WFInputURL: String)\nParameters:\n    WFInstapaperFolder:  Folder. This action will save your input to the specified folder. Leaving this empty will save the input to Instapaper's Home folder..\n    WFInputURL:  URL.\nDescription:\n    Add to Instapaper: Adds the input to Instapaper.\nParameterSummary: Add ${WFInputURL}\n",
    "is.workflow.actions.filter.contacts": "is.workflow.actions.filter.contacts(WFContentItemFilter: WFContentPredicateOperatorParameter, WFContentItemInputParameter: WFVariablePickerParameter(Object), WFContentItemSortProperty: WFDynamicEnumerationParameter(Object), WFContentItemSortOrder: WFDynamicEnumerationParameter(Object), WFContentItemLimitEnabled: Bool = True, WFContentItemLimitNumber: Integer = 1)\nParameters:\n    WFContentItemFilter: \n    WFContentItemInputParameter: \n    WFContentItemSortProperty: \n    WFContentItemSortOrder: \n    WFContentItemLimitEnabled: \n    WFContentItemLimitNumber: \nDescription:\n    Find Contacts: Adds the input to Instapaper.\nParameterSummary: Find Contacts that meed the need of the user\n",
    "is.workflow.actions.gethomeaccessorystate": "is.workflow.actions.gethomeaccessorystate(WFHMService: WFHomeServicePickerParameter(Object), WFHMCharacteristic: WFHomeCharacteristicPickerParameter(Object))\nParameters:\n    WFHMService:  Accessory State.\n    WFHMCharacteristic:  Characteristic.\nDescription:\n    Home: Gets the state of a Home accessory.\nParameterSummary: (WFHMService) Get ${WFHMService}; (WFHMService,WFHMCharacteristic) Get ${WFHMService} ${WFHMCharacteristic}\n",
    "is.workflow.actions.detect.images": "is.workflow.actions.detect.images(WFInput: WFVariablePickerParameter(Object)) -> Images: WFImageContentItem(Object)\nParameters:\n    WFInput:  Input.\nReturn Value:\n    Images: \nDescription:\n    Get Images from Input: Gets images from the result of the previous action.\n\nFor example, this action can get the album art of a song, or all the images on a web page.\nParameterSummary: Get images from ${WFInput}\n",
    "is.workflow.actions.url.expand": "is.workflow.actions.url.expand(URL: String) -> Expanded URL: WFURLContentItem(Object)\nParameters:\n    URL:  URL.\nReturn Value:\n    Expanded URL: The full, expanded URL, or the original URL if the URL was not shortened\nDescription:\n    Expand URL: This action expands and cleans up URLs which have been shortened using a URL shortening service like TinyURL or Bit.ly.. The expanded URL is cleaned, removing unnecessary parameters such as \"utm_source\".\nParameterSummary: Expand ${URL}\n",
    "is.workflow.actions.weather.currentconditions": "is.workflow.actions.weather.currentconditions(WFWeatherCustomLocation: WFLocationParameter(Object)) -> Weather Conditions: WFWeatherData(Object)\nParameters:\n    WFWeatherCustomLocation:  Location.\nReturn Value:\n    Weather Conditions: \nDescription:\n    Get Current Weather: Gets the current weather conditions at the specified location.\nParameterSummary: Get current weather at ${WFWeatherCustomLocation}\n",
    "is.workflow.actions.email": "is.workflow.actions.email(WFEmailAddress: WFEmailAddressFieldParameter(Object)) -> Email Address: WFEmailAddress(Object)\nParameters:\n    WFEmailAddress:  Email Address. Type in an email address.\nReturn Value:\n    Email Address: \nDescription:\n    Email Address: Passes the specified email addresses to the next action.\nParameterSummary: (WFHMService,WFHMCharacteristic) Get ${WFHMService} ${WFHMCharacteristic}\n",
    "com.apple.TVRemoteUIService.SwitchUserAccountIntent": "com.apple.TVRemoteUIService.SwitchUserAccountIntent(account: WFAccountPickerParameter(Object), device: WFMediaRoutePickerParameter(Object))\nParameters:\n    account: \n    device: \nDescription:\n    Switch User Account: Passes the specified email addresses to the next action.\nParameterSummary: Switch to ${account} on ${device}\n",
    "is.workflow.actions.movewindow": "is.workflow.actions.movewindow(WFPosition: Enum = \"Center\", WFXCoordinate: Integer, WFYCoordinate: Integer, WFWindow: WFVariablePickerParameter(Object), WFBringToFront: Bool = True, Display: WFDisplayPickerParameter(Object))\nParameters:\n    WFPosition:  Position. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Top Left\", \"Top Center\", \"Top Right\", \"Middle Left\", \"Center\", \"Middle Right\", \"Bottom Left\", \"Bottom Center\", \"Bottom Right\", \"Coordinates\".\n    WFXCoordinate:  X. This value depends on the value of WFPosition. This parameter is only valid when the value of \"WFPosition\" is \"Coordinates\".\n    WFYCoordinate:  Y. This value depends on the value of WFPosition. This parameter is only valid when the value of \"WFPosition\" is \"Coordinates\".\n    WFWindow:  Window. The window(s) to move.\n    WFBringToFront:  Bring to Front.\n    Display:  Display. Current Display. The display to move the window to..\nDescription:\n    Move Window: Moves one or more windows to the specified location.\nParameterSummary: (WFWindow,WFBringToFront,WFPosition,WFXCoordinate,WFYCoordinate) Move ${WFWindow} to ${WFPosition} ${WFXCoordinate}, ${WFYCoordinate}; (WFWindow,WFBringToFront,WFPosition) Move ${WFWindow} to ${WFPosition}\n",
    "is.workflow.actions.deletephotos": "is.workflow.actions.deletephotos()\nDescription:\n    Delete Photos: Deletes the photos passed as input from the device's photo library. This action asks for confirmation before performing the deletion.\nParameterSummary: (WFWindow,WFBringToFront,WFPosition) Move ${WFWindow} to ${WFPosition}\n",
    "is.workflow.actions.goodreader.open": "is.workflow.actions.goodreader.open(WFInput: WFVariablePickerParameter(Object))\nParameters:\n    WFInput:  File.\nDescription:\n    Open in GoodReader: Opens a file in GoodReader.\nParameterSummary: Open ${WFInput}\n",
    "is.workflow.actions.file.delete": "is.workflow.actions.file.delete(WFInput: WFFilePickerParameter(Object), WFDeleteImmediatelyDelete: Bool)\nParameters:\n    WFInput:  Files.\n    WFDeleteImmediatelyDelete:  Delete Immediately. When enabled, this action will delete files immediately, instead of moving to the Trash or Recently Deleted folder..\nDescription:\n    Delete Files: Deletes the files passed in as input.\nParameterSummary: Delete ${WFInput}\n",
    "is.workflow.actions.runworkflow": "is.workflow.actions.runworkflow(WFWorkflow: WFWorkflowPickerParameter(Object), WFInput: WFVariablePickerParameter(Object)) -> Shortcut Result: WFContentItem(Object)\nParameters:\n    WFWorkflow:  Shortcut.\n    WFInput:  Input. Choose Variable. The input to pass to the shortcut..\nReturn Value:\n    Shortcut Result: The shortcut's result\nDescription:\n    Run Shortcut: Runs a shortcut from your shortcut.\nParameterSummary: Run ${WFWorkflow}\n",
    "is.workflow.actions.searchpodcasts": "is.workflow.actions.searchpodcasts(WFSearchTerm: String, WFAttribute: WFDynamicEnumerationParameter(Object), WFEntity: WFDynamicEnumerationParameter(Object), WFCountry: WFiTunesStoreCountryPickerParameter(Object), WFItemLimit: Integer = 25) -> Podcasts: WFPodcastShowContentItem(Object)\nParameters:\n    WFSearchTerm:  Search. Podcasts.\n    WFAttribute:  Search By.\n    WFEntity:  Results.\n    WFCountry:  Country.\n    WFItemLimit: \nReturn Value:\n    Podcasts: \nDescription:\n    Find Podcasts: Finds podcasts in the Apple Podcasts catalog, returning the items that match the specified search terms.\nParameterSummary: Find ${WFSearchTerm} on Apple Podcasts\n",
    "is.workflow.actions.speaktext": "is.workflow.actions.speaktext(WFSpeakTextWait: Bool = True, WFSpeakTextRate: Float = 0.5, WFSpeakTextPitch: Float = 1.0, WFSpeakTextLanguage: WFSpeakTextLanguagePickerParameter(Object) = \"Default\", WFSpeakTextVoice: WFSpeakTextVoicePickerParameter(Object) = \"Default\", WFText: String)\nParameters:\n    WFSpeakTextWait:  Wait Until Finished.\n    WFSpeakTextRate:  Rate.\n    WFSpeakTextPitch:  Pitch.\n    WFSpeakTextLanguage:  Language.\n    WFSpeakTextVoice:  Voice.\n    WFText:  Text.\nDescription:\n    Speak Text: Speaks the inputted text aloud.\nParameterSummary: Speak ${WFText}\n",
    "is.workflow.actions.filter.files": "is.workflow.actions.filter.files(WFContentItemFilter: WFContentPredicateOperatorParameter, WFContentItemInputParameter: WFVariablePickerParameter(Object), WFContentItemSortProperty: Enum, WFContentItemSortOrder: WFDynamicEnumerationParameter(Object), WFContentItemLimitEnabled: Bool = True, WFContentItemLimitNumber: Integer = 1)\nParameters:\n    WFContentItemFilter: \n    WFContentItemInputParameter: \n    WFContentItemSortProperty:  The value of this Enum must be one of the following values (The text in parentheses describes the value): \"File Size\", \"File Extension\", \"Creation Date\", \"File Path\", \"Last Modified Date\", \"Name\", \"Random\".\n    WFContentItemSortOrder: \n    WFContentItemLimitEnabled: \n    WFContentItemLimitNumber: \nDescription:\n    Filter Files: Speaks the inputted text aloud.\nParameterSummary: Find Files that meed the need of the user\n",
    "is.workflow.actions.stagemanager.set": "is.workflow.actions.stagemanager.set(operation: Enum = \"set\", state: Bool = True, showDock: Bool, showRecentApps: Bool)\nParameters:\n    operation:  The value of this Enum must be one of the following values (The text in parentheses describes the value): \"set\", \"toggle\".\n    state: \n    showDock: \n    showRecentApps: \nDescription:\n    SetStage Manager: Speaks the inputted text aloud.\nParameterSummary: (operation,state) ${operation} stagemanager ${state}; (operation) ${operation} stagemanager\n",
    "is.workflow.actions.takephoto": "is.workflow.actions.takephoto(WFCameraCaptureShowPreview: Bool = True, WFPhotoCount: Integer = 1, WFCameraCaptureDevice: Enum = \"Back\") -> Photo: WFImage(Object)\nParameters:\n    WFCameraCaptureShowPreview:  Show Camera Preview.\n    WFPhotoCount:  This value depends on the value of WFCameraCaptureShowPreview. This parameter is only valid when the value of \"WFCameraCaptureShowPreview\" is True.\n    WFCameraCaptureDevice:  Camera. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Front\", \"Back\".\nReturn Value:\n    Photo: Photo from the camera.\nDescription:\n    Take Photo: Uses the camera to take photos.\nParameterSummary: (WFCameraCaptureShowPreview,WFPhotoCount,WFCameraCaptureDevice) Take ${WFPhotoCount} with ${WFCameraCaptureDevice} camera; (WFCameraCaptureShowPreview,WFPhotoCount) Take ${WFPhotoCount}; (WFCameraCaptureShowPreview,WFCameraCaptureDevice) Take photo with ${WFCameraCaptureDevice} camera; (WFCameraCaptureShowPreview) Take photo\n",
    "ai.perplexity.app.OpenVoiceInAppIntent": "ai.perplexity.app.OpenVoiceInAppIntent()\nDescription:\n    Start voice search\nParameterSummary: () Start voice search\n",
    "ai.perplexity.app.QueryPerplexity": "ai.perplexity.app.QueryPerplexity(query: String) -> Ask Perplexity\n                            : String\nParameters:\n    query: Perplexity Query.\nReturn Value:\n    Ask Perplexity: \nDescription:\n    Ask Perplexity\nParameterSummary: (query) Search for ${query}\n",
    "app.cyan.taio.ActionsSelectionIntent": "app.cyan.taio.ActionsSelectionIntent(actions: Actions(Object), inputValue: String)\nParameters:\n    actions:  Actions. Actions.\n    inputValue:  Input Value.\nDescription:\n    Actions Selection: Select actions\nParameterSummary: () Actions Selection\n",
    "app.cyan.taio.SaveClippingIntent": "app.cyan.taio.SaveClippingIntent(text: String, shouldPin: Bool) -> Saved Clipping\n                            : String\nParameters:\n    text:  Text.\n    shouldPin:  Pin.\nReturn Value:\n    Saved Clipping: Saved Clipping.\nDescription:\n    Clips - Save Clipping: Save text content as clipping to Taio\nParameterSummary: (Save ${text} as clipping) Save ${text} as clipping\n",
    "app.cyan.taio.GetClippingIntent": "app.cyan.taio.GetClippingIntent(type: ClippingType(Enum) = \"all\") -> Clipping Results\n                            : String\nParameters:\n    type:  Type. Clipping Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"all\"(All), \"pinned\"(Pinned), \"unpinned\"(Unpinned).\nReturn Value:\n    Clipping Results: Clipping Results.\nDescription:\n    Clips - Get Clippings: Get clippings in Taio\nParameterSummary: (Get clippings) Get clippings\n",
    "app.cyan.taio.DeleteClippingIntent": "app.cyan.taio.DeleteClippingIntent(text: String) -> Deleted Clipping\n                            : String\nParameters:\n    text:  Text.\nReturn Value:\n    Deleted Clipping: Deleted Clipping.\nDescription:\n    Clips - Delete Clipping: Delete clippings in Taio\nParameterSummary: (Delete ${text} from clippings) Delete ${text} from clippings\n",
    "app.cyan.taio.PinClippingIntent": "app.cyan.taio.PinClippingIntent(text: String, type: PinActionType(Enum) = \"pin\") -> Operated Clipping\n                            : String\nParameters:\n    text:  Text.\n    type:  Type. Action Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"pin\"(Pin), \"unpin\"(Unpin), \"toggle\"(Toggle).\nReturn Value:\n    Operated Clipping: Operated Clipping.\nDescription:\n    Clips - Pin Clipping: Pin or unpin clippings in Taio\nParameterSummary: (Pin ${text} in clippings) Pin ${text} in clippings\n",
    "app.cyan.taio.UpdateClippingIntent": "app.cyan.taio.UpdateClippingIntent(text: String, replacement: String) -> Updated Clipping\n                            : String\nParameters:\n    text:  Text.\n    replacement:  Replacement.\nReturn Value:\n    Updated Clipping: Updated Clipping.\nDescription:\n    Clips - Update Clipping: Update clippings in Taio\nParameterSummary: (Replace ${text} with ${replacement}) Replace ${text} with ${replacement}\n",
    "app.cyan.taio.CreateDocumentIntent": "app.cyan.taio.CreateDocumentIntent(content: String, filePath: String, location: DocumentLocation(Enum) = \"device\", overwriteIfExists: Bool = True) -> Created File\n                            : File(Object)\nParameters:\n    content:  Content.\n    filePath:  File Path.\n    location:  Location. Document Location. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"device\"(Device), \"iCloudDrive\"(iCloud Drive), \"AddedLocation\"(Added Location).\n    overwriteIfExists:  Overwrite If Exists.\nReturn Value:\n    Created File: Created File.\nDescription:\n    Docs - Create Document: Create document with text in Taio\nParameterSummary: (Create document at ${filePath} with ${content}) Create document at ${filePath} with ${content}\n",
    "app.cyan.taio.GetDocumentIntent": "app.cyan.taio.GetDocumentIntent(filePath: String, location: DocumentLocation(Enum) = \"device\") -> Result File\n                            : File(Object)\nParameters:\n    filePath:  File Path.\n    location:  Location. Document Location. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"device\"(Device), \"iCloudDrive\"(iCloud Drive), \"AddedLocation\"(Added Location).\nReturn Value:\n    Result File: Result File.\nDescription:\n    Docs - Get Document: Get document content in Taio\nParameterSummary: (Get document at ${filePath}) Get document at ${filePath}\n",
    "app.cyan.taio.DeleteDocumentIntent": "app.cyan.taio.DeleteDocumentIntent(filePath: String, location: DocumentLocation(Enum) = \"device\") -> Deleted File\n                            : File(Object)\nParameters:\n    filePath:  File Path.\n    location:  Location. Document Location. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"device\"(Device), \"iCloudDrive\"(iCloud Drive), \"AddedLocation\"(Added Location).\nReturn Value:\n    Deleted File: Deleted File.\nDescription:\n    Docs - Delete Document: Delete document in Taio\nParameterSummary: (Delete document at ${filePath}) Delete document at ${filePath}\n",
    "app.cyan.taio.ListFolderIntent": "app.cyan.taio.ListFolderIntent(folderPath: String, location: DocumentLocation(Enum) = \"device\", type: ListFolderType(Enum) = \"filesAndFolders\") -> fileNames\n                            : String\nParameters:\n    folderPath:  Folder Path.\n    location:  Location. Document Location. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"device\"(Device), \"iCloudDrive\"(iCloud Drive), \"AddedLocation\"(Added Location).\n    type:  Type. List Folder Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"filesAndFolders\"(Files and folders), \"filesOnly\"(Files only), \"foldersOnly\"(Folders only).\nReturn Value:\n    fileNames: fileNames.\nDescription:\n    Docs - List Folder: List folder contents in Taio\nParameterSummary: (List folder at ${folderPath}) List folder at ${folderPath}\n",
    "app.cyan.taio.ImportDocumentIntent": "app.cyan.taio.ImportDocumentIntent(fileObject: File(Object), targetPath: String, location: DocumentLocation(Enum) = \"device\", overwriteIfExists: Bool = True) -> Imported File\n                            : File(Object)\nParameters:\n    fileObject:  File.\n    targetPath:  Target Path.\n    location:  Location. Document Location. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"device\"(Device), \"iCloudDrive\"(iCloud Drive), \"AddedLocation\"(Added Location).\n    overwriteIfExists:  Overwrite If Exists.\nReturn Value:\n    Imported File: Imported File.\nDescription:\n    Docs - Import File: Import file as document to Taio\nParameterSummary: (Import ${fileObject} to ${targetPath}) Import ${fileObject} to ${targetPath}\n",
    "app.cyan.taio.RunActionsIntent": "app.cyan.taio.RunActionsIntent(actions: Actions(Object), inputValue: String)\nParameters:\n    actions:  Actions. Actions.\n    inputValue:  Input Value.\nDescription:\n    Actions - Run Actions: Run Taio actions\nParameterSummary: (Run ${actions}) Run ${actions}\n",
    "app.surfed.app.GetTodayCounterIntent": "app.surfed.app.GetTodayCounterIntent() -> Counter\n                            : Integer\nReturn Value:\n    Counter: Counter.\nDescription:\n    Get Today Counter: Get the number of visited URLs today.\nParameterSummary: (Get number of all visited pages today) Get number of all visited pages today\n",
    "app.surfed.app.SearchPageIntent": "app.surfed.app.SearchPageIntent(filter: String, type: FilterType(Enum), condition: FilterCondition(Enum), startDate: String, endDate: String, sorttype: IntentSortingType(Enum), sortdirection: IntentSortingDirection(Enum)) -> URL\n                            : RichURL(Object)\nParameters:\n    filter:  filter.\n    type:  Type. Filter Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"all\"(All), \"url\"(URL), \"title\"(Title), \"meta\"(Metadata), \"article\"(Article), \"note\"(Note), \"author\"(Author), \"language\"(Language).\n    condition:  Condition. Filter Condition. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"contains\"(contains), \"containsNot\"(contains not), \"iscondition\"(is), \"isnot\"(is not), \"begins\"(begins), \"ends\"(ends).\n    startDate:  Start Date.\n    endDate:  End Date.\n    sorttype:  Sort Type. Intent Sorting Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"date\"(Date), \"title\"(Title), \"url\"(URL), \"frequency\"(Frequency).\n    sortdirection:  Sort Direction. Intent Sorting Direction. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"asc\"(Asc), \"desc\"(Desc).\nReturn Value:\n    URL: URL. Rich URL.\nDescription:\n    Search History: Search URLs in the browsing history, optionally using filter, conditions, dates and sorting\nParameterSummary: (Search History) Search History\n",
    "app.surfed.app.GetTagURLsIntent": "app.surfed.app.GetTagURLsIntent(tag: String, filter: String, sorttype: IntentSortingType(Enum), sortdirection: IntentSortingDirection(Enum)) -> URLs\n                            : RichURL(Object)\nParameters:\n    tag:  Tag.\n    filter:  Filter.\n    sorttype:  Sort Type. Intent Sorting Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"date\"(Date), \"title\"(Title), \"url\"(URL), \"frequency\"(Frequency).\n    sortdirection:  Sort Direction. Intent Sorting Direction. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"asc\"(Asc), \"desc\"(Desc).\nReturn Value:\n    URLs: URLs. Rich URL.\nDescription:\n    Get URLs for Tag: Get all URLs for a tag\nParameterSummary: (Get URLs for tag ${tag}) Get URLs for tag ${tag}\n",
    "app.surfed.app.GetTagGroupURLsIntent": "app.surfed.app.GetTagGroupURLsIntent(group: String, filter: String, sorttype: IntentSortingType(Enum), sortdirection: IntentSortingDirection(Enum)) -> URLs\n                            : RichURL(Object)\nParameters:\n    group:  Group.\n    filter:  Filter.\n    sorttype:  Sort Type. Intent Sorting Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"date\"(Date), \"title\"(Title), \"url\"(URL), \"frequency\"(Frequency).\n    sortdirection:  Sort Direction. Intent Sorting Direction. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"asc\"(Asc), \"desc\"(Desc).\nReturn Value:\n    URLs: URLs. Rich URL.\nDescription:\n    Get URLs for Tag Group: Get all URLs for a tag group\nParameterSummary: (Get URLs for tag group ${group}) Get URLs for tag group ${group}\n",
    "app.surfed.app.GetTodayBrowsingTimeIntent": "app.surfed.app.GetTodayBrowsingTimeIntent() -> Timeinterval in Seconds\n                            : Float\nReturn Value:\n    Timeinterval in Seconds: Timeinterval in Seconds.\nDescription:\n    Get Today Browsing Time: Get total browsing time of today\nParameterSummary: (Get the time of total browsing time today.) Get the time of total browsing time today.\n",
    "app.surfed.app.ExportHistoryIntent": "app.surfed.app.ExportHistoryIntent(filter: String, type: FilterType(Enum), condition: FilterCondition(Enum), startDate: String, endDate: String, sorttype: IntentSortingType(Enum), sortdirection: IntentSortingDirection(Enum)) -> History Items\n                            : History(Object)\nParameters:\n    filter:  Filter.\n    type:  Type. Filter Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"all\"(All), \"url\"(URL), \"title\"(Title), \"meta\"(Metadata), \"article\"(Article), \"note\"(Note), \"author\"(Author), \"language\"(Language).\n    condition:  Condition. Filter Condition. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"contains\"(contains), \"containsNot\"(contains not), \"iscondition\"(is), \"isnot\"(is not), \"begins\"(begins), \"ends\"(ends).\n    startDate:  Start Date.\n    endDate:  End Date.\n    sorttype:  Sort Type. Intent Sorting Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"date\"(Date), \"title\"(Title), \"url\"(URL), \"frequency\"(Frequency).\n    sortdirection:  Sort Direction. Intent Sorting Direction. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"asc\"(Asc), \"desc\"(Desc).\nReturn Value:\n    History Items: History Items. History.\nDescription:\n    Export History: Export browsing history, optionally using filter, conditions, dates and sorting\nParameterSummary: (Export History) Export History\n",
    "app.surfed.app.CreateTagIntent": "app.surfed.app.CreateTagIntent(tag: String, group: TagGroup(Object))\nParameters:\n    tag:  Tag.\n    group:  Group. Tag Group.\nDescription:\n    Create Tag: Creates a new tag\nParameterSummary: (Create new tag ${tag}) Create new tag ${tag}\n",
    "app.surfed.app.AddURLIntent": "app.surfed.app.AddURLIntent(url: String, tags: Tag(Object))\nParameters:\n    url:  Url.\n    tags:  Tags. Tag.\nDescription:\n    Add Tags to URL: Assign tags to a URL\nParameterSummary: (Add tags ${tags} to ${url}) Add tags ${tags} to ${url}\n",
    "app.surfed.app.AddBlacklistIntent": "app.surfed.app.AddBlacklistIntent(url: String, apply: Bool)\nParameters:\n    url:  Url.\n    apply:  Apply on History.\nDescription:\n    Blacklist URL: Adds the given url string (which could contain regular expression) to the blacklist\nParameterSummary: (Add ${url} to Blacklist) Add ${url} to Blacklist\n",
    "app.surfed.app.ExportAllIntent": "app.surfed.app.ExportAllIntent() -> Plist File\n                            : File(Object)\nReturn Value:\n    Plist File: Plist File.\nDescription:\n    Export All Tags and Favorites: Export all Tags and Favorites\nParameterSummary: (Export All Tags and Favorites) Export All Tags and Favorites\n",
    "app.surfed.app.ImportIntent": "app.surfed.app.ImportIntent(file: File(Object))\nParameters:\n    file:  file.\nDescription:\n    Import: Import items from a export file\nParameterSummary: (Import ${file}) Import ${file}\n",
    "app.surfed.app.GetCollectionURLsIntent": "app.surfed.app.GetCollectionURLsIntent(collection: String, filter: String, sorttype: IntentSortingType(Enum) = \"date\", sortdirection: IntentSortingDirection(Enum) = \"desc\") -> URLs\n                            : RichURL(Object)\nParameters:\n    collection:  Collection.\n    filter:  Filter.\n    sorttype:  Sort Type. Intent Sorting Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"date\"(Date), \"title\"(Title), \"url\"(URL), \"frequency\"(Frequency).\n    sortdirection:  Sort Direction. Intent Sorting Direction. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"asc\"(Asc), \"desc\"(Desc).\nReturn Value:\n    URLs: URLs. Rich URL.\nDescription:\n    Get URLs for Collection: Get all URLs for a collection\nParameterSummary: (Get URLs for collection ${collection}) Get URLs for collection ${collection}\n",
    "app.surfed.app.OpenURLIntent": "app.surfed.app.OpenURLIntent(url: String)\nParameters:\n    url:  URL.\nDescription:\n    Open URL: Opens the given URL (without opening privacy alert)\nParameterSummary: (Open URL ${url}) Open URL ${url}\n",
    "app.surfed.app.GetURLMetadataIntent": "app.surfed.app.GetURLMetadataIntent(url: String) -> Metadata\n                            : Metadata(Object)\nParameters:\n    url:  Url.\nReturn Value:\n    Metadata: Metadata. Metadata.\nDescription:\n    Get URL Metadata: Get Metadata for given URL\nParameterSummary: (Get Metadata for ${url}) Get Metadata for ${url}\n",
    "app.surfed.app.BackupDatabaseIntent": "app.surfed.app.BackupDatabaseIntent() -> Database File\n                            : File(Object)\nReturn Value:\n    Database File: Database File.\nDescription:\n    Backup Database: Get the Surfed database\nParameterSummary: (Backup Database) Backup Database\n",
    "app.surfed.app.ExportTagsIntent": "app.surfed.app.ExportTagsIntent(tags: Tag(Object)) -> Plist File\n                            : File(Object)\nParameters:\n    tags:  Tags. Tag.\nReturn Value:\n    Plist File: Plist File.\nDescription:\n    Export Tags: Export Tags to File\nParameterSummary: (Export Tags to File) Export Tags to File\n",
    "app.surfed.app.GetArticleIntent": "app.surfed.app.GetArticleIntent(url: String) -> Article\n                            : String\nParameters:\n    url:  Url.\nReturn Value:\n    Article: Article.\nDescription:\n    Get Article: Get the article for the given URL\nParameterSummary: (Get Article for ${url}) Get Article for ${url}\n",
    "app.surfed.app.GetNoteIntent": "app.surfed.app.GetNoteIntent(url: String) -> Note\n                            : String\nParameters:\n    url:  Url.\nReturn Value:\n    Note: Note.\nDescription:\n    Get Note: Get the note for the given URL\nParameterSummary: (Get Note for ${url}) Get Note for ${url}\n",
    "app.surfed.app.SetNoteIntent": "app.surfed.app.SetNoteIntent(url: String, note: String)\nParameters:\n    url:  Url.\n    note:  Note.\nDescription:\n    Set Note: Set a not to the given URL\nParameterSummary: (Set Note to ${url}) Set Note to ${url}\n",
    "app.surfed.app.RemoveTagURLIntent": "app.surfed.app.RemoveTagURLIntent(tags: Tag(Object), url: String)\nParameters:\n    tags:  Tags. Tag.\n    url:  Url.\nDescription:\n    Remove Tags from URL: Unassign tags from a URL\nParameterSummary: (Remove tags ${tags}from ${url}) Remove tags ${tags}from ${url}\n",
    "app.surfed.app.SwitchProfileIntent": "app.surfed.app.SwitchProfileIntent(profile: Profile(Object))\nParameters:\n    profile:  Profile. Profile.\nDescription:\n    Switch Profile: Switch to the selected profile\nParameterSummary: (Switch to ${profile}) Switch to ${profile}\n",
    "app.surfed.app.ListenCollectionIntent": "app.surfed.app.ListenCollectionIntent(collection: CollectionEntity(Object), sortDirection: PlaybackSortDirectionEnum(Enum), state: PlaybackStateDirectionEnum(Enum))\nParameters:\n    collection: Tag or Collection. Tag or Collection.\n    sortDirection: Playback Sort Direction. Playback Sort Direction. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"oldest\"(oldest), \"newest\"(latest).\n    state: Playback State. Playback State. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"all\"(all), \"listened\"(listened), \"unlistened\"(unlistened).\nDescription:\n    Listen article: Listen all articles of selected tag or collection\nParameterSummary: (state,collection,sortDirection) Listen to ${state} ${collection} articles, start with ${sortDirection}\n",
    "app.surfed.app.ListenURLsIntent": "app.surfed.app.ListenURLsIntent(urls: array(String))\nParameters:\n    urls: URLs.\nDescription:\n    Listen URL article: Listen all URL articles\nParameterSummary: () Listen URL articles\n",
    "app.surfed.app.SwitchProfileFocusFilter": "app.surfed.app.SwitchProfileFocusFilter(profile: ProfileEntity(Object), runWebTrigger: Bool)\nParameters:\n    profile: Space. Space.\n    runWebTrigger: Run Web Trigger.\nDescription:\n    Set Space and Web Trigger behaviour: Switch to the selected space and show only items, which are assigned to this space.\nParameterSummary: () Set Space and Web Trigger behaviour\n",
    "ch.marcela.ada.LibTerm.RunCommandIntent": "ch.marcela.ada.LibTerm.RunCommandIntent(command: String, input: String, cwd: String) -> Output\n                            : String\nParameters:\n    command:  Command.\n    input:  Input.\n    cwd:  Current directory .\nReturn Value:\n    Output: Output.\nDescription:\n    Run Command: Runs a command\nParameterSummary: (Run ${command}) Run ${command}\n",
    "com.6X.LockLauncher.ActivateActivityIntent": "com.6X.LockLauncher.ActivateActivityIntent()\nDescription:\n    Activate Dynamic Island\nParameterSummary: () Activate Dynamic Island\n",
    "com.6X.LockLauncher.ChangePrivacyModeIntent": "com.6X.LockLauncher.ChangePrivacyModeIntent()\nDescription:\n    Toggle Dock / Memo: Toggle Dock / Memo\nParameterSummary: () Toggle Dock / Memo\n",
    "com.6X.LockLauncher.ChooseGroupIntent": "com.6X.LockLauncher.ChooseGroupIntent(groupId: GroupIdEnum(Enum))\nParameters:\n    groupId: Choose Group. Choose Group. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"0\"(Group 1), \"1\"(Group 2), \"2\"(Group 3), \"3\"(Group 4), \"4\"(Group 5), \"5\"(Group 6), \"6\"(Group 7), \"7\"(Group 8).\nDescription:\n    Switch Dock Group: Switching to a specified group of favorites.\nParameterSummary: (groupId) Choose Group ${groupId}\n",
    "com.6X.LockLauncher.EndActivityIntent": "com.6X.LockLauncher.EndActivityIntent()\nDescription:\n    Stop Live Activity(Dock): Stop Live Activity and Dynamic Island.\nParameterSummary: () Stop Live Activity(Dock)\n",
    "com.6X.LockLauncher.GetDeviceOrientationIntent": "com.6X.LockLauncher.GetDeviceOrientationIntent() -> Get Device Orientation\n                            : DeviceOrientation(Enum)\nReturn Value:\n    Get Device Orientation: Device Orientation Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"portrait\"(portrait), \"portraitUpsideDown\"(portraitUpsideDown), \"landscapeLeft\"(landscapeLeft), \"landscapeRight\"(landscapeRight), \"faceUp\"(faceUp), \"faceDown\"(faceDown), \"unknown\"(unknown).\nDescription:\n    Get Device Orientation: Get Device Orientation Description\nParameterSummary: () Get Device Orientation\n",
    "com.6X.LockLauncher.RefreshActivityIntent": "com.6X.LockLauncher.RefreshActivityIntent()\nDescription:\n    Refresh Live Activity(Dock): Refresh Live Activity and Dynamic Island +8 hours. Island data requires manual access to the app to activate the backend.\nParameterSummary: () Refresh Live Activity(Dock)\n",
    "com.6X.LockLauncher.StartActivityIntent": "com.6X.LockLauncher.StartActivityIntent()\nDescription:\n    Start Live Activity(Dock): Start Live Activity and Dynamic Island.\nParameterSummary: () Start Live Activity(Dock)\n",
    "com.6X.LockLauncher.TogglePiPIntent": "com.6X.LockLauncher.TogglePiPIntent()\nDescription:\n    Toggle PiP: Toggle PiP\nParameterSummary: () Toggle PiP\n",
    "com.6X.LockLauncher.UpdateMemoIntent": "com.6X.LockLauncher.UpdateMemoIntent(text: 12(Object))\nParameters:\n    text: Text.\nDescription:\n    Change Memo Text: Change Memo Text\nParameterSummary: (text) Change Memo Text ${text}\n",
    "com.Christopher-Hannah.Text-Case.TextCaseIntent": "com.Christopher-Hannah.Text-Case.TextCaseIntent(format: TextCaseFormat(Enum) = \"apTitleCase\", text: String) -> Formatted Text\n                            : String\nParameters:\n    format:  Format. Format. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"apTitleCase\"(Title Case (AP)), \"urlEncoded\"(URL Encoded), \"urlDecoded\"(URL Decoded), \"uppercase\"(Uppercase), \"lowercase\"(Lowercase), \"capitalise\"(Capitalise), \"capitaliseWords\"(Capitalise Words), \"reversed\"(Reversed), \"camelCase\"(Camel Case), \"snakeCase\"(Snake Case), \"pascalCase\"(Pascal Case), \"hashtags\"(Hashtags), \"mockingSpongebob\"(Mocking Spongebob), \"sentenceCase\"(Sentence Case), \"kebabCase\"(Kebab Case), \"stripHTML\"(Strip HTML), \"base64Encode\"(Base64 Encoded), \"base64Decode\"(Base64 Decoded), \"rot13\"(ROT13), \"textToEmoji\"(Emoji), \"clapCase\"(Clap Case), \"stripWhitespace\"(Strip Whitespace), \"trimWhitespace\"(Trim Whitespace), \"shuffled\"(Shuffled), \"markdownBlockquote\"(Markdown Blockquote), \"markdownOrderedList\"(Markdown Ordered List), \"markdownUnorderedList\"(Markdown Unordered List), \"markdownCodeBlock\"(Markdown Code Block), \"markdownToHTML\"(HTML from Markdown), \"smallCaps\"(Small Caps), \"upsideDown\"(Upside Down), \"smartQuotes\"(Smart Quotes), \"straightQuotes\"(Straight Quotes), \"slug\"(Slug), \"apaTitleCase\"(Title Case (APA)), \"cmosTitleCase\"(Title Case (CMOS)), \"mlaTitleCase\"(Title Case (MLA)), \"guardianTitleCase\"(Title Case (Guardian)), \"boldSerif\"(Bold (Serif)), \"boldSans\"(Bold (Sans-serif)), \"italicBoldSerif\"(Italic Bold (Serif)), \"italicBoldSans\"(Italic Bold (Sans-serif)), \"script\"(Script), \"gothic\"(Gothic), \"squaresFilled\"(Letters in Squares (Filled)), \"squaresOutline\"(Letters in Squares (Outline)), \"circlesFilled\"(Letters in Circles (Filled)), \"circlesOutline\"(Letters in Circles (Outline)), \"italic\"(Italic), \"amaTitleCase\"(Title Case (AMA)), \"wikipediaTitleCase\"(Title Case (Wikipedia)), \"nytTitleCase\"(Title Case (New York Times)), \"bluebookTitleCase\"(Title Case (Bluebook)), \"countChars\"(Count Characters), \"countCharsExcWhitespace\"(Count Characters (Excl. Whitespace)), \"countWords\"(Count Words), \"countLines\"(Count Lines), \"countLinesExclBlanks\"(Count Lines (Excl. Blanks)), \"removeLineBreaks\"(Remove Line Breaks), \"md2\"(MD2), \"md4\"(MD4), \"md5\"(MD5), \"sha1\"(SHA1), \"sha224\"(SHA224), \"sha256\"(SHA256), \"sha384\"(SHA384), \"sha512\"(SHA512), \"formatJSON\"(Format JSON), \"minifyJSON\"(Minify JSON), \"strikethrough\"(Strikethrough).\n    text:  Text.\nReturn Value:\n    Formatted Text: Formatted Text.\nDescription:\n    Format Text: Format text using a specific format.\nParameterSummary: (Format ${text} using ${format} ) Format ${text} using ${format} \n",
    "com.Christopher-Hannah.Text-Case.FormatWithFlowIntent": "com.Christopher-Hannah.Text-Case.FormatWithFlowIntent(text: String, flow: IntentFlow(Object)) -> Formatted Text\n                            : String\nParameters:\n    text:  Text.\n    flow:  Flow. Flow.\nReturn Value:\n    Formatted Text: Formatted Text.\nDescription:\n    Format Text with Flow: Format text using a custom Flow.\nParameterSummary: (Format ${text} using ${flow}) Format ${text} using ${flow}\n",
    "com.Christopher-Hannah.Text-Case.ReplaceIntent": "com.Christopher-Hannah.Text-Case.ReplaceIntent(mode: Mode(Enum) = \"all\", match: String, replacement: String, text: String) -> Formatted Text\n                            : String\nParameters:\n    mode:  Mode. Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"all\"(All), \"first\"(First), \"last\"(Last).\n    match:  Text.\n    replacement:  Text.\n    text:  Text.\nReturn Value:\n    Formatted Text: Formatted Text.\nDescription:\n    Replace: Replace occurrences of a string in a piece of text.\nParameterSummary: (Replace ${mode} occurrence of ${match}with ${replacement} in ${text}) Replace ${mode} occurrence(s) of ${match}with ${replacement} in ${text}\n",
    "com.Christopher-Hannah.Text-Case.RemoveIntent": "com.Christopher-Hannah.Text-Case.RemoveIntent(mode: Mode(Enum) = \"all\", match: String, text: String) -> Formatted Text\n                            : String\nParameters:\n    mode:  Mode. Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"all\"(All), \"first\"(First), \"last\"(Last).\n    match:  Text.\n    text:  Text.\nReturn Value:\n    Formatted Text: Formatted Text.\nDescription:\n    Remove: Remove occurrences of a string in a piece of text.\nParameterSummary: (Remove ${mode} occurrence of ${match} in ${text}) Remove ${mode} occurrence(s) of ${match} in ${text}\n",
    "com.Christopher-Hannah.Text-Case.AddPrefixIntent": "com.Christopher-Hannah.Text-Case.AddPrefixIntent(prefix: String, text: String) -> Formatted Text\n                            : String\nParameters:\n    prefix:  Prefix.\n    text:  Text.\nReturn Value:\n    Formatted Text: Formatted Text.\nDescription:\n    Add Prefix: Add a string of text to the beginning of another string of text.\nParameterSummary: (Add prefix ${prefix}to ${text}) Add prefix ${prefix}to ${text}\n",
    "com.Christopher-Hannah.Text-Case.AddSuffixIntent": "com.Christopher-Hannah.Text-Case.AddSuffixIntent(suffix: String, text: String) -> Formatted Text\n                            : String\nParameters:\n    suffix:  Suffix.\n    text:  Text.\nReturn Value:\n    Formatted Text: Formatted Text.\nDescription:\n    Add Suffix: Add a string of text to the end of another string of text.\nParameterSummary: (Add suffix ${suffix}to ${text}) Add suffix ${suffix}to ${text}\n",
    "com.Christopher-Hannah.Text-Case.ReplaceWithLineBreaksIntent": "com.Christopher-Hannah.Text-Case.ReplaceWithLineBreaksIntent(match: String, text: String) -> Formatted Text\n                            : String\nParameters:\n    match:  Replace.\n    text:  Text.\nReturn Value:\n    Formatted Text: Formatted Text.\nDescription:\n    Replace With Line Breaks: Replace occurrences of a string in a piece of text with line breaks.\nParameterSummary: (Replace all ${match} in ${text} with a line break) Replace all ${match} in ${text} with a line break\n",
    "com.Christopher-Hannah.Text-Case.ReplaceLineBreaksWithIntent": "com.Christopher-Hannah.Text-Case.ReplaceLineBreaksWithIntent(with: String, text: String) -> Formatted Text\n                            : String\nParameters:\n    with:  With.\n    text:  Text.\nReturn Value:\n    Formatted Text: Formatted Text.\nDescription:\n    Replace Line Breaks With: Replace Line Breaks with a specific string of text.\nParameterSummary: (Replace all line breaks in ${text} with ${with}) Replace all line breaks in ${text} with ${with}\n",
    "com.Matter.MatterApp.SaveToMatterIntent": "com.Matter.MatterApp.SaveToMatterIntent(articleURL: String)\nParameters:\n    articleURL:  Article URL.\nDescription:\n    Save To Matter: Save the current Safari page to Matter\nParameterSummary: (Save to Matter) Save to Matter\n",
    "com.ZoZoApp.ZoZoApp.AddNewGroup": "com.ZoZoApp.ZoZoApp.AddNewGroup(folderTitle: String, icon: String, color: String, shortcuts: array(ShortcutEntity(Object))) -> Add New Folder\n                            : FolderEntity(Object)\nParameters:\n    folderTitle: Title. Set a title for the folder..\n    icon: Icon. Set an SF Symbol as the icon for the Folder. Choose from the provided list, or pass your own text with a valid SF Symbol..\n    color: Color. Set a color for the Folder. Choose from the provided list only..\n    shortcuts: Shortcuts (Optional). Add a selection of Shortcuts to the Folder upon creation..\nReturn Value:\n    Add New Folder: Folder.\nDescription:\n    Add New Folder: Create a new OneTap Shortcuts Folder\nParameterSummary: (folderTitle,icon,color,shortcuts) Add New Folder ${folderTitle}\n",
    "com.ZoZoApp.ZoZoApp.AddNewShortcut": "com.ZoZoApp.ZoZoApp.AddNewShortcut(shortcutTitle: String, type: ShortcutEntityType(Enum), contents: 12(Object), folder: FolderEntity(Object)) -> Add New Shortcut\n                            : ShortcutEntity(Object)\nParameters:\n    shortcutTitle: Title. The name of the shortcut..\n    type: Type (Optional). Optional parameter to define the type of shortcut to be created. This will be automatically detected if no value is passed. Document shortcuts cannot be created without explicitly selecting the document type.. Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Text\"(Text), \"URL\"(URL), \"Photo\"(Photo), \"Document\"(Document).\n    contents: Contents. Parameter to set the contents of the Shortcut. This can be Text, Photos, URLs or URLs to documents. You cannot select documents directly..\n    folder: Folder (Optional). Optional parameter to set the folder in which the Shortcut will be created.. Folder.\nReturn Value:\n    Add New Shortcut: Shortcut.\nDescription:\n    Add New Shortcut: Create a new OneTap Shortcut to be used in the keyboard.\nParameterSummary: (shortcutTitle,contents,type,folder) Add new Shortcut ${shortcutTitle} with ${contents}\n",
    "com.ZoZoApp.ZoZoApp.AddNewTextShortcut": "com.ZoZoApp.ZoZoApp.AddNewTextShortcut(shortcutTitle: String, contents: String, folder: FolderEntity(Object)) -> Add a text-based Shortcut\n                            : ShortcutEntity(Object)\nParameters:\n    shortcutTitle: Title. The name of the shortcut..\n    contents: Contents. Parameter to set the contents of the Shortcut. This can be Text, or URLs. Use the other Add Shortcuts action to add a photo or document shortcut..\n    folder: Folder (Optional). Optional parameter to set the folder in which the Shortcut will be created.. Folder.\nReturn Value:\n    Add a text-based Shortcut: Shortcut.\nDescription:\n    Add a text-based Shortcut: Create a new text-only OneTap Shortcut to be used in the keyboard.\nParameterSummary: (shortcutTitle,contents,folder) Add new Shortcut ${shortcutTitle} with ${contents}\n",
    "com.ZoZoApp.ZoZoApp.CopyContentsToClipboard": "com.ZoZoApp.ZoZoApp.CopyContentsToClipboard(shortcut: ShortcutEntity(Object)) -> Copy Contents of Shortcut to Clipboard\n                            : 12(Object)\nParameters:\n    shortcut: Shortcut. Shortcut.\nReturn Value:\n    Copy Contents of Shortcut to Clipboard: \nDescription:\n    Copy Contents of Shortcut to Clipboard: Copies the contents of the shortcut to the clipboard.\nParameterSummary: (shortcut) Copy contents ${shortcut} to clipboard\n",
    "com.ZoZoApp.ZoZoApp.DeleteGroup": "com.ZoZoApp.ZoZoApp.DeleteGroup(folders: array(FolderEntity(Object)), confirmBeforeDeleting: Bool = \"1\", keepShortcuts: Bool = \"0\")\nParameters:\n    folders: Folders.\n    confirmBeforeDeleting: Confirm Before Deleting. If toggled, you will need to confirm before the folder is deleted.\n    keepShortcuts: Keep Shortcuts inside Folder. If toggled, the shortcuts inside the folder will not be deleted..\nDescription:\n    Delete Folder: Permanently deletes the Folder.\nParameterSummary: (folders,keepShortcuts,confirmBeforeDeleting) Delete ${folders}\n",
    "com.ZoZoApp.ZoZoApp.DeleteShortcut": "com.ZoZoApp.ZoZoApp.DeleteShortcut(shortcuts: array(ShortcutEntity(Object)), confirmBeforeDeleting: Bool = \"1\")\nParameters:\n    shortcuts: Shortcuts.\n    confirmBeforeDeleting: Confirm Before Deleting. If toggled, you will need to confirm before the shortcut is deleted.\nDescription:\n    Delete Shortcut: Permanently deletes the Shortcut.\nParameterSummary: (shortcuts,confirmBeforeDeleting) Delete ${shortcuts}\n",
    "com.ZoZoApp.ZoZoApp.EditShortcut": "com.ZoZoApp.ZoZoApp.EditShortcut(shortcut: ShortcutEntity(Object), shortcutTitle: String, contents: 12(Object), folder: FolderEntity(Object), removeFromFolder: Bool) -> Edit Shortcut\n                            : ShortcutEntity(Object)\nParameters:\n    shortcut: Shortcut. Shortcut.\n    shortcutTitle: Title (Optional). Optionally change the title for the given Shortcut..\n    contents: Contents (Optional). Optionally change the folder in which the given shortcut is present..\n    folder: Folder (Optional). Optionally change the folder in which the Shortcut is present.. Folder.\n    removeFromFolder: Remove from Folder.\nReturn Value:\n    Edit Shortcut: Shortcut.\nDescription:\n    Edit Shortcut: Edit details of Shortcut.\nParameterSummary: (shortcut,shortcutTitle,contents,removeFromFolder) Edit ${shortcut}; (shortcut,shortcutTitle,contents,folder,removeFromFolder) Edit ${shortcut}\n",
    "com.ZoZoApp.ZoZoApp.GetAllGroups": "com.ZoZoApp.ZoZoApp.GetAllGroups() -> Get All Folders\n                            : array(FolderEntity(Object))\nReturn Value:\n    Get All Folders: \nDescription:\n    Get All Folders: Gets all the OneTap folders created by the user on this device.\nParameterSummary: () Get All Folders\n",
    "com.ZoZoApp.ZoZoApp.GetAllShortcuts": "com.ZoZoApp.ZoZoApp.GetAllShortcuts(excludeGrouped: Bool) -> Get All Shortcuts\n                            : array(ShortcutEntity(Object))\nParameters:\n    excludeGrouped: Exclude Grouped Shortcuts. Excludes any Shortcuts that are placed inside a folder..\nReturn Value:\n    Get All Shortcuts: \nDescription:\n    Get All Shortcuts: Gets all the OneTap shortcuts created by the user on this device.\nParameterSummary: () Get All Shortcuts\n",
    "com.ZoZoApp.ZoZoApp.GetContentsOfShortcut": "com.ZoZoApp.ZoZoApp.GetContentsOfShortcut(shortcut: ShortcutEntity(Object)) -> Get Contents of Shortcut\n                            : 12(Object)\nParameters:\n    shortcut: Shortcut. Shortcut.\nReturn Value:\n    Get Contents of Shortcut: \nDescription:\n    Get Contents of Shortcut: Returns the contents of the Shortcut.\n\nFor the best results, use a Get Text from Input, or Get Images from Input action after this, according to the type of the shortcut.\nParameterSummary: (shortcut) Get contents of ${shortcut}\n",
    "com.ZoZoApp.ZoZoApp.GetGPTResponse": "com.ZoZoApp.ZoZoApp.GetGPTResponse(prompt: String, gptModel: GPTModelAppEnum(Enum) = \"gpt3\") -> Generate OneTap AI Response\n                            : String\nParameters:\n    prompt: Prompt.\n    gptModel: GPT Model. GPT Model. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"gpt3\"(GPT 3.5), \"gpt4\"(GPT 4 (Pro)).\nReturn Value:\n    Generate OneTap AI Response: \nDescription:\n    Generate OneTap AI Response: Uses OpenAI's ChatGPT API to fetch results for the given prompt.\nParameterSummary: (prompt,gptModel) Generate OneTap AI response for ${prompt}\n",
    "com.ZoZoApp.ZoZoApp.GetShortcutsFromGroup": "com.ZoZoApp.ZoZoApp.GetShortcutsFromGroup(folder: FolderEntity(Object)) -> Get Shortcuts from Folder\n                            : array(ShortcutEntity(Object))\nParameters:\n    folder: Folder. Folder.\nReturn Value:\n    Get Shortcuts from Folder: \nDescription:\n    Get Shortcuts from Folder: Get all shortcuts present inside the Folder.\nParameterSummary: (folder) Get shortcuts from ${folder}\n",
    "com.ZoZoApp.ZoZoApp.MoveShortcut": "com.ZoZoApp.ZoZoApp.MoveShortcut(shortcut: ShortcutEntity(Object), folder: FolderEntity(Object)) -> Move Shortcut\n                            : ShortcutEntity(Object)\nParameters:\n    shortcut: Shortcut. Shortcut.\n    folder: Folder. Folder.\nReturn Value:\n    Move Shortcut: Shortcut.\nDescription:\n    Move Shortcut: Move shortcut into another Folder.\nParameterSummary: (shortcut,folder) Move ${shortcut} to ${folder}\n",
    "com.adguard.ios.AdGuardVPN.VpnStateIntent": "com.adguard.ios.AdGuardVPN.VpnStateIntent(operation: Operation(Enum) = \"turn\", state: State(Enum) = \"on\")\nParameters:\n    operation:  Operation. Operation. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"turn\"(Turn), \"toggle\"(Toggle).\n    state:  State. State. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"on\"(On), \"off\"(Off). This value depends on the value of \"operation\". This parameter is only valid when the value of \"operation\" is \"turn\".\nDescription:\n    Set VPN connection: With this shortcut, you can connect to or disconnect from AdGuard VPN\nParameterSummary: (${operation}VPN connection) ${operation}VPN connection; (${operation}VPN connection ${state}) ${operation}VPN connection ${state}\n",
    "com.agiletortoise.Drafts5.CreateAndEditIntent": "com.agiletortoise.Drafts5.CreateAndEditIntent(tags: String)\nParameters:\n    tags:  Tags.\nDescription:\n    Create And Edit Draft: Create and edit a draft in app\nParameterSummary: () New Draft; (tags) New Draft with ${tags}\n",
    "com.agiletortoise.Drafts5.RunActionIntent": "com.agiletortoise.Drafts5.RunActionIntent(action: ShortcutAction(Object), content: String = \"Text to use as content for the action.\")\nParameters:\n    action: Action. Action.\n    content: Input.\nDescription:\n    Run Action with Text: Run action in Drafts using provided text.\nParameterSummary: (action,content) Run Action ${action} with ${content}\n",
    "com.agiletortoise.Drafts5.ViewDraftIntent": "com.agiletortoise.Drafts5.ViewDraftIntent(draft: ShortcutDraft(Object)) -> View Draft\n                            : ShortcutDraft(Object)\nParameters:\n    draft: Draft. Draft to display. Draft.\nReturn Value:\n    View Draft: Draft.\nDescription:\n    View Draft: View content of a draft.\nParameterSummary: (draft) View Draft ${draft}\n",
    "com.agiletortoise.Drafts5.CaptureIntent": "com.agiletortoise.Drafts5.CaptureIntent(content: String, tags: array(String), folder: DraftUpdateFolder(Enum), isFlagged: DraftUpdateFlaggedStatus(Enum), grammarType: ShortcutGrammarType(Object)) -> Create Draft\n                            : ShortcutDraft(Object)\nParameters:\n    content: Content. The content of the draft..\n    tags: Tags. Tags to assign..\n    folder: Folder. Folder location.. Folder. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"unknown\"(Unknown), \"inbox\"(Inbox), \"archive\"(Archive), \"trash\"(Trash), \"noChange\"(No Change).\n    isFlagged: Flagged. Flagged status.. Flag Status. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"unknown\"(unknown), \"flagged\"(Flagged), \"unflagged\"(Unflagged), \"noChange\"(No Change).\n    grammarType: Syntax Definition. Syntax highlighting definition to assign.. Syntax.\nReturn Value:\n    Create Draft: Draft.\nDescription:\n    Create Draft: Create new draft with options.\nParameterSummary: (content,folder,tags,isFlagged,grammarType) Create Draft with ${content}\n",
    "com.agiletortoise.Drafts5.GetDraftIntent": "com.agiletortoise.Drafts5.GetDraftIntent(draft: ShortcutDraft(Object)) -> Get Draft\n                            : ShortcutDraft(Object)\nParameters:\n    draft: Draft. Draft.\nReturn Value:\n    Get Draft: Draft.\nDescription:\n    Get Draft: Retrieve an existing draft.\nParameterSummary: (draft) Get Draft ${draft}\n",
    "com.agiletortoise.Drafts5.SetDraftIntent": "com.agiletortoise.Drafts5.SetDraftIntent(draft: ShortcutDraft(Object), content: String, writeType: DraftWriteType(Enum), tags: array(String), folder: DraftUpdateFolder(Enum), isFlagged: DraftUpdateFlaggedStatus(Enum), grammarType: ShortcutGrammarType(Object)) -> Update Draft\n                            : ShortcutDraft(Object)\nParameters:\n    draft: Draft. Draft.\n    content: Content. The text to use in the operation.\n    writeType: Update Type. The type of update to apply.. Content Update Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"unknown\"(No Change), \"replace\"(Replace), \"prepend\"(Prepend), \"append\"(Append).\n    tags: Tags. Tags to assign..\n    folder: Folder. Optionally, move the draft to a folder.. Folder. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"unknown\"(Unknown), \"inbox\"(Inbox), \"archive\"(Archive), \"trash\"(Trash), \"noChange\"(No Change).\n    isFlagged: Flagged. Update flagged status.. Flag Status. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"unknown\"(unknown), \"flagged\"(Flagged), \"unflagged\"(Unflagged), \"noChange\"(No Change).\n    grammarType: Syntax Definition. Assign a syntax definition.. Syntax.\nReturn Value:\n    Update Draft: Draft.\nDescription:\n    Update Draft: Update content and other properties of an existing draft.\nParameterSummary: (draft,content,writeType,tags,folder,isFlagged,grammarType) Update Draft ${draft}\n",
    "com.agiletortoise.Drafts5.QueryDraftsIntent": "com.agiletortoise.Drafts5.QueryDraftsIntent(queryString: String, folder: DraftResponseFolder(Enum) = \"all\", tagFilter: String, flaggedStatus: DraftQueryFlaggedStatus(Enum) = \"any\", sortOrder: DraftQuerySort(Enum) = \"modified\", sortDescending: Bool = \"1\", sortFlaggedToTop: Bool = \"0\", limit: Integer) -> Search Drafts\n                            : array(ShortcutDraft(Object))\nParameters:\n    queryString: Search. Query string..\n    folder: Folder. Limit search to a specific folder.. Folder. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"unknown\"(Unknown), \"inbox\"(Inbox), \"archive\"(Archive), \"trash\"(Trash), \"all\"(All).\n    tagFilter: Tag filter. Comma-separated list of tags to include. Supports using “!” to omit a tag..\n    flaggedStatus: Flag status. Limit results by flagged status.. Flag Status. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"unknown\"(Unknown), \"flagged\"(Flagged), \"unflagged\"(Unflagged), \"any\"(Any).\n    sortOrder: Sort order. Sort Order. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"unknown\"(Default), \"created\"(Created), \"modified\"(Modified), \"accessed\"(Accessed), \"text\"(Text).\n    sortDescending: Sort descending.\n    sortFlaggedToTop: Sort flagged to top.\n    limit: Limit. Maximum number of results to return..\nReturn Value:\n    Search Drafts: \nDescription:\n    Search Drafts: Run a search and return matching drafts.\nParameterSummary: (queryString,folder,tagFilter,flaggedStatus,sortOrder,sortDescending,sortFlaggedToTop,limit) Search Drafts for ${queryString}\n",
    "com.agiletortoise.Drafts5.QueryWorkspaceIntent": "com.agiletortoise.Drafts5.QueryWorkspaceIntent(workspace: ShortcutWorkspace(Object), folder: DraftResponseFolder(Enum) = \"inbox\") -> Get Drafts from Workspace\n                            : array(ShortcutDraft(Object))\nParameters:\n    workspace: Workspace. Workspace.\n    folder: Folder. Limit results to only drafts in a specific folder.. Folder. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"unknown\"(Unknown), \"inbox\"(Inbox), \"archive\"(Archive), \"trash\"(Trash), \"all\"(All).\nReturn Value:\n    Get Drafts from Workspace: \nDescription:\n    Get Drafts from Workspace: Retrieve drafts matching the filters of a workspace.\nParameterSummary: (workspace,folder) Get Drafts from Workspace ${workspace}\n",
    "com.agiletortoise.Drafts5.LoadWorkspaceIntent": "com.agiletortoise.Drafts5.LoadWorkspaceIntent(workspace: ShortcutWorkspace(Object))\nParameters:\n    workspace: Workspace. Workspace to apply to draft list.. Workspace.\nDescription:\n    Open Workspace: Open Drafts and apply workspace.\nParameterSummary: (workspace) Open Workspace ${workspace}\n",
    "com.agiletortoise.Drafts5.DictateDraftIntent": "com.agiletortoise.Drafts5.DictateDraftIntent(locale: ShortcutLocale(Object))\nParameters:\n    locale: Locale. Initial locale/language for dictation.. Locale.\nDescription:\n    Create Draft with Dictation: Open directly to dictation of a new draft.\nParameterSummary: (locale) Create Draft with Dictation\n",
    "com.agiletortoise.Drafts5.OpenDraftIntent": "com.agiletortoise.Drafts5.OpenDraftIntent(draft: ShortcutDraft(Object), draftList: ShowHideStatus(Enum) = \"noChange\", actionList: ShowHideStatus(Enum) = \"noChange\", loadWorkspace: ShortcutWorkspace(Object), loadActionGroup: ShortcutActionGroup(Object), loadActionBarGroup: ShortcutActionGroup(Object))\nParameters:\n    draft: Draft. Draft.\n    draftList: Draft List. Visibility of draft list.. Show/Hide. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"unknown\"(unknown), \"show\"(Show), \"hide\"(Hide), \"noChange\"(No Change).\n    actionList: Action List. Visibility of action list.. Show/Hide. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"unknown\"(unknown), \"show\"(Show), \"hide\"(Hide), \"noChange\"(No Change).\n    loadWorkspace: Load Workspace. Workspace to apply to draft list.. Workspace.\n    loadActionGroup: Load Action Group. Load an action group in the action list.. Action Group.\n    loadActionBarGroup: Load Action Bar Group. Load an action group in the action bar.. Action Group.\nDescription:\n    Open Draft: Open a draft in Drafts.\nParameterSummary: (draft,draftList,actionList,loadWorkspace,loadActionGroup,loadActionBarGroup) Open Draft ${draft}\n",
    "com.agiletortoise.Drafts5.RunActionOnDraftIntent": "com.agiletortoise.Drafts5.RunActionOnDraftIntent(action: ShortcutAction(Object), draft: ShortcutDraft(Object))\nParameters:\n    action: Action. Action.\n    draft: Draft. Draft.\nDescription:\n    Run Action on Draft: Run action in Drafts using specified draft.\nParameterSummary: (action,draft) Run Action ${action} on Draft ${draft}\n",
    "com.agiletortoise.Drafts5.FileDraftIntent": "com.agiletortoise.Drafts5.FileDraftIntent(draft: ShortcutDraft(Object), folder: DraftUpdateFolder(Enum) = \"noChange\", isFlagged: DraftUpdateFlaggedStatus(Enum) = \"noChange\", tags: array(String) = \"array()\") -> File Draft\n                            : ShortcutDraft(Object)\nParameters:\n    draft: Draft. Draft to file.. Draft.\n    folder: Folder. Folder to assign the draft.. Folder. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"unknown\"(Unknown), \"inbox\"(Inbox), \"archive\"(Archive), \"trash\"(Trash), \"noChange\"(No Change).\n    isFlagged: Is Flagged. Update flagged status.. Flag Status. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"unknown\"(unknown), \"flagged\"(Flagged), \"unflagged\"(Unflagged), \"noChange\"(No Change).\n    tags: Tags. Tags to apply to the draft..\nReturn Value:\n    File Draft: Draft.\nDescription:\n    File Draft: Update draft folder and other properties without updating content.\nParameterSummary: (draft,folder,isFlagged,tags) File Draft ${draft} in ${folder}\n",
    "com.agiletortoise.Drafts5.GetDraftByUUIDIntent": "com.agiletortoise.Drafts5.GetDraftByUUIDIntent(uuid: String) -> Get Draft by UUID\n                            : ShortcutDraft(Object)\nParameters:\n    uuid: UUID. Unique identifier of the draft..\nReturn Value:\n    Get Draft by UUID: Draft.\nDescription:\n    Get Draft by UUID: Retreive an existing draft using its unique identifier.\nParameterSummary: (uuid) Get Draft with UUID ${uuid}\n",
    "com.agiletortoise.Drafts5.MarkdownToHTMLIntent": "com.agiletortoise.Drafts5.MarkdownToHTMLIntent(markdownParser: DraftMarkdownParser(Enum), content: String) -> Markdown to HTML\n                            : String\nParameters:\n    markdownParser: Markdown Parser. Markdown parser to utilize for the conversion.. Markdown Parser. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"unknown\"(unknown), \"multimarkdown\"(MultiMarkdown), \"githubmarkdown\"(GitHub Markdown).\n    content: Content. Input Markdown text to process..\nReturn Value:\n    Markdown to HTML: \nDescription:\n    Markdown to HTML: Convert Markdown text to HTML.\nParameterSummary: (content,markdownParser) Markdown ${content} to HTML\n",
    "com.agiletortoise.Drafts5.GetCurrentDraftIntent": "com.agiletortoise.Drafts5.GetCurrentDraftIntent() -> Get Current Draft\n                            : ShortcutDraft(Object)\nReturn Value:\n    Get Current Draft: Draft.\nDescription:\n    Get Current Draft: Retrieve active draft from editor.\nParameterSummary: () Get Current Draft\n",
    "com.agiletortoise.Drafts5.ShowCaptureIntent": "com.agiletortoise.Drafts5.ShowCaptureIntent(content: String, tags: String)\nParameters:\n    content:  Content.\n    tags:  Tags.\nDescription:\n    Show Capture: Show draft capture window\nParameterSummary: () Show Capture\n",
    "com.agiletortoise.Drafts5.ProcessTemplateIntent": "com.agiletortoise.Drafts5.ProcessTemplateIntent(template: String, draft: ShortcutDraft(Object)) -> Process Template\n                            : String\nParameters:\n    template: Template. The input template to process, expanding template tags..\n    draft: Draft. The draft to have in context when evaluting template tag values.. Draft.\nReturn Value:\n    Process Template: \nDescription:\n    Process Template: Pass text through the Drafts template engine.\nParameterSummary: (template,draft) Process Template ${template} with Draft ${draft}\n",
    "com.agiletortoise.Drafts5.ArrangeIntent": "com.agiletortoise.Drafts5.ArrangeIntent(text: String) -> Arrange Text\n                            : String\nParameters:\n    text: Text.\nReturn Value:\n    Arrange Text: \nDescription:\n    Arrange Text: Arrange text using arrange mode.\nParameterSummary: (text) Arrange Text ${text}\n",
    "com.agiletortoise.Drafts5.CaptureAppIntent": "com.agiletortoise.Drafts5.CaptureAppIntent(content: String) -> Capture Text\n                            : ShortcutDraft(Object)\nParameters:\n    content: Content. The content of the draft..\nReturn Value:\n    Capture Text: Draft.\nDescription:\n    Capture Text: Capture text as new draft.\nParameterSummary: (content) Capture ${content}\n",
    "com.agiletortoise.Drafts5.DictateIntent": "com.agiletortoise.Drafts5.DictateIntent(locale: ShortcutLocale(Object)) -> Dictate Text\n                            : String\nParameters:\n    locale: Locale. Initial locale/language for dictation.. Locale.\nReturn Value:\n    Dictate Text: \nDescription:\n    Dictate Text: Dictate text using Drafts dictation interface.\nParameterSummary: (locale) Dictate Text\n",
    "com.agiletortoise.Drafts5.DraftsFocusFilterIntent": "com.agiletortoise.Drafts5.DraftsFocusFilterIntent(workspaceEntity: ShortcutWorkspace(Object), draftEntity: ShortcutDraft(Object), pinning: PinningStatusAppEnum(Enum) = \"noChange\", actionListGroupEntity: ShortcutActionGroup(Object), actionBarGroupEntity: ShortcutActionGroup(Object))\nParameters:\n    workspaceEntity: Load Workpace. Workspace to apply to the draft list.. Workspace.\n    draftEntity: Open Draft. Open a draft in the editor.. Draft.\n    pinning: Pin Current Draft. Toggle status of pinning mode in the editor.. Pin Current Draft. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"enable\"(Enable), \"disable\"(Disable), \"noChange\"(No Change).\n    actionListGroupEntity: Set Action List Group. Set active action group in action list.. Action Group.\n    actionBarGroupEntity: Set Action Bar Group. Set active action group in Action Bar.. Action Group.\nDescription:\n    Configure Drafts: Apply options to your active workspace.\nParameterSummary: (workspaceEntity,draftEntity,pinning,actionListGroupEntity,actionBarGroupEntity) Configure Drafts\n",
    "com.agiletortoise.Drafts5.HTMLToMarkdownIntent": "com.agiletortoise.Drafts5.HTMLToMarkdownIntent(content: String) -> HTML to Markdown\n                            : String\nParameters:\n    content: HTML. Input HTML text to process..\nReturn Value:\n    HTML to Markdown: \nDescription:\n    HTML to Markdown: Convert HTML text to Markdown.\nParameterSummary: (content) HTML ${content} to Markdown\n",
    "com.agiletortoise.Drafts5.LiveActivityDraftIntent": "com.agiletortoise.Drafts5.LiveActivityDraftIntent(draftEntity: ShortcutDraft(Object), status: IntentStartEnd(Enum) = \"start\")\nParameters:\n    draftEntity: Draft. The draft to act on.. Draft.\n    status: Status. Start/End. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"start\"(Start), \"end\"(End).\nDescription:\n    Draft Live Activity: Start/end Live Activity for draft in Drafts.\nParameterSummary: (status,draftEntity) ${status} Live Activity for ${draftEntity}\n",
    "com.agiletortoise.Drafts5.QuickSearchAppIntent": "com.agiletortoise.Drafts5.QuickSearchAppIntent(queryString: String)\nParameters:\n    queryString: Search. Initial search query string..\nDescription:\n    Quick Search in Drafts: Open Drafts to Quick Search.\nParameterSummary: (queryString) Quick Search ${queryString}\n",
    "com.agiletortoise.Drafts5.SetThemeAppIntent": "com.agiletortoise.Drafts5.SetThemeAppIntent(themeMode: ThemeModeAppEnum(Enum) = \"noChange\", lightTheme: ThemeTypeAppEntity(Object), darkTheme: ThemeTypeAppEntity(Object))\nParameters:\n    themeMode: Theme Mode. Active theme mode. Show/Hide. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"system\"(System), \"light\"(Light), \"dark\"(Dark), \"noChange\"(No Change).\n    lightTheme: Light. Theme to use in light mode. Theme.\n    darkTheme: Dark. Theme to use in dark mode. Theme.\nDescription:\n    Set Theme: Change current theme and theme mode.\nParameterSummary: (themeMode,lightTheme,darkTheme) Set Theme Mode ${themeMode}\n",
    "com.agiletortoise.Drafts5.ShowCaptureAppIntent": "com.agiletortoise.Drafts5.ShowCaptureAppIntent(content: String, tags: array(String) = \"array()\")\nParameters:\n    content: Content. Initial content for capture..\n    tags: Tags. Initial tags for capture..\nDescription:\n    Show Capture: Show draft capture window.\nParameterSummary: (content,tags) Show Capture with ${content}\n",
    "com.amazon.Lassen.BookOpenSiriDonationIntent": "com.amazon.Lassen.BookOpenSiriDonationIntent()\nDescription:\n    Open my book: Open my book\nParameterSummary: () Open my book\n",
    "com.apple.Keynote.KNiOSCreateNewDocumentIntent": "com.apple.Keynote.KNiOSCreateNewDocumentIntent(templateIdentifier: (Object))\nParameters:\n    templateIdentifier: \nDescription:\n    Create Presentation: Create a new presentation from a theme.\nParameterSummary: (templateIdentifier) Create ${templateIdentifier} Presentation\n",
    "com.apple.Keynote.OpenAnyDocumentIntent": "com.apple.Keynote.OpenAnyDocumentIntent(file: File(Object))\nParameters:\n    file:  Keynote Presentation.\nDescription:\n    Open Presentation: Open the specified presentation in Keynote.\nParameterSummary: (Open ${file}) Open ${file}\n",
    "com.apple.Keynote.TSADocumentCreateIntent": "com.apple.Keynote.TSADocumentCreateIntent(templateItem: INTemplate(Object))\nParameters:\n    templateItem:  Theme. Theme.\nDescription:\n    Create Presentation from Theme: Create a new presentation from a theme.\nParameterSummary: (Create ${templateItem} Presentation) Create ${templateItem} Presentation\n",
    "com.apple.Keynote.TSADocumentOpenIntent": "com.apple.Keynote.TSADocumentOpenIntent(file: File(Object), password: String)\nParameters:\n    file:  Keynote Presentation.\n    password:  Presentation Password.\nDescription:\n    Open Presentation: Open the specified presentation in Keynote.\nParameterSummary: (Open ${file}) Open ${file}\n",
    "com.apple.Keynote.KNDocumentPlayIntent": "com.apple.Keynote.KNDocumentPlayIntent(file: File(Object))\nParameters:\n    file:  Keynote Presentation.\nDescription:\n    Play Presentation in Show Mode: Open the presentation in show mode.\nParameterSummary: (Open ${file} in Show Mode) Open ${file} in Show Mode\n",
    "com.apple.Keynote.KNDocumentRehearseIntent": "com.apple.Keynote.KNDocumentRehearseIntent(file: File(Object))\nParameters:\n    file:  Keynote Presentation.\nDescription:\n    Open Presentation in Rehearsal Mode: Open the presentation in slideshow rehearsal mode.\nParameterSummary: (Open ${file} in Rehearsal Mode) Open ${file} in Rehearsal Mode\n",
    "com.apple.Keynote.KNNewDocumentIntent": "com.apple.Keynote.KNNewDocumentIntent()\nDescription:\n    Create New Presentation: Create a new presentation from the theme chooser in Keynote.\nParameterSummary: () Create New Presentation\n",
    "com.apple.Numbers.TNiOSAddValuesToFormIntent": "com.apple.Numbers.TNiOSAddValuesToFormIntent(spreadsheet: File(Object), values: String, formName: String)\nParameters:\n    spreadsheet:  Numbers Spreadsheet.\n    values:  Values.\n    formName:  Form Name.\nDescription:\n    Add Record to Form: Add a record to the end of a form in an existing spreadsheet.\nParameterSummary: (Add ${values} to ${formName} in ${spreadsheet}) Add ${values} to ${formName} in ${spreadsheet}\n",
    "com.apple.Numbers.TNiOSAddBodyRowAtBottomIntent": "com.apple.Numbers.TNiOSAddBodyRowAtBottomIntent(document: (Object), documentURL: String, documentName: String, sheetUUID: String, tableUUID: String, tableName: String, ignoresTableName: Integer)\nParameters:\n    document: \n    documentURL: \n    documentName: \n    sheetUUID: \n    tableUUID: \n    tableName:  Table name.\n    ignoresTableName: \nDescription:\n    Add Row to Spreadsheet: Add an empty body row to the bottom of a table in a spreadsheet.\nParameterSummary: (documentName,documentURL,tableName,document,sheetUUID,tableUUID) Add Row to ${tableName} in ${documentName}; (documentName,sheetUUID,tableUUID,document,documentURL,ignoresTableName) Add Row to ${documentName}\n",
    "com.apple.Numbers.TNiOSAddFormRecordIntent": "com.apple.Numbers.TNiOSAddFormRecordIntent(document: (Object), documentURL: String, documentName: String, formSheetUUID: String, formName: String)\nParameters:\n    document: \n    documentURL: \n    documentName: \n    formSheetUUID: \n    formName: \nDescription:\n    Add Record to Form: Add an empty record to the end of a form in an existing spreadsheet.\nParameterSummary: (document,documentURL,formName,documentName,formSheetUUID) Add Record to ${formName} in ${documentName}\n",
    "com.apple.Numbers.OpenDocumentIntent": "com.apple.Numbers.OpenDocumentIntent(document: (Object), documentURL: String)\nParameters:\n    document: \n    documentURL:  Document URL.\nDescription:\n    Open Spreadsheet: Open the specified spreadsheet in Numbers.\nParameterSummary: (document,documentURL) Open ${document}\n",
    "com.apple.Numbers.TNiOSCreateNewSpreadsheetIntent": "com.apple.Numbers.TNiOSCreateNewSpreadsheetIntent(templateIdentifier: (Object))\nParameters:\n    templateIdentifier: \nDescription:\n    Create Spreadsheet: Create a new spreadsheet from a template.\nParameterSummary: (templateIdentifier) Create ${templateIdentifier} Spreadsheet\n",
    "com.apple.Numbers.TNiOSAddValuesToSpreadsheetIntent": "com.apple.Numbers.TNiOSAddValuesToSpreadsheetIntent(spreadsheet: File(Object), values: String, position: INAddValuesPosition(Enum) = \"bottom\", sheetName: String, tableName: String)\nParameters:\n    spreadsheet:  Numbers Spreadsheet.\n    values:  Values.\n    position:  Top/Bottom. Add Values Position. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"top\"(Top), \"bottom\"(Bottom).\n    sheetName:  Sheet Name.\n    tableName:  Table Name.\nDescription:\n    Add Row to Top or Bottom of Table: Add a populated body row to the top or bottom of a table in a spreadsheet.\nParameterSummary: (Add ${values} to the ${position} of ${tableName} in ${sheetName} in ${spreadsheet}) Add ${values} to the ${position} of ${tableName} in ${sheetName} in ${spreadsheet}\n",
    "com.apple.Numbers.OpenAnyDocumentIntent": "com.apple.Numbers.OpenAnyDocumentIntent(file: File(Object))\nParameters:\n    file:  Numbers Spreadsheet.\nDescription:\n    Open Spreadsheet: Open the specified spreadsheet in Numbers.\nParameterSummary: (Open ${file}) Open ${file}\n",
    "com.apple.Numbers.TSADocumentCreateIntent": "com.apple.Numbers.TSADocumentCreateIntent(templateItem: INTemplate(Object))\nParameters:\n    templateItem:  Template. Template.\nDescription:\n    Create Spreadsheet from Template: Create a new spreadsheet from a template.\nParameterSummary: (Create ${templateItem} Spreadsheet) Create ${templateItem} Spreadsheet\n",
    "com.apple.Numbers.TSADocumentOpenIntent": "com.apple.Numbers.TSADocumentOpenIntent(file: File(Object), password: String)\nParameters:\n    file:  Numbers Spreadsheet.\n    password:  Spreadsheet Password.\nDescription:\n    Open Spreadsheet: Open the specified spreadsheet in Numbers.\nParameterSummary: (Open ${file}) Open ${file}\n",
    "com.apple.Numbers.TNNewDocumentIntent": "com.apple.Numbers.TNNewDocumentIntent()\nDescription:\n    Create New Spreadsheet: Create a new spreadsheet from the template chooser in Numbers.\nParameterSummary: () Create New Spreadsheet\n",
    "com.apple.Pages.TPiOSCreateNewDocumentIntent": "com.apple.Pages.TPiOSCreateNewDocumentIntent(templateIdentifier: (Object))\nParameters:\n    templateIdentifier: \nDescription:\n    Create Document: Create a new document from a template.\nParameterSummary: (templateIdentifier) Create ${templateIdentifier} Document\n",
    "com.apple.Pages.OpenAnyDocumentIntent": "com.apple.Pages.OpenAnyDocumentIntent(file: File(Object))\nParameters:\n    file:  Pages Document.\nDescription:\n    Open Pages Document: Open an existing document.\nParameterSummary: (Open ${file}) Open ${file}\n",
    "com.apple.Pages.TSADocumentCreateIntent": "com.apple.Pages.TSADocumentCreateIntent(templateItem: INTemplate(Object))\nParameters:\n    templateItem:  Template. Template.\nDescription:\n    Create Document from Template: Create a new document from a Pages template.\nParameterSummary: (Create ${templateItem} Document) Create ${templateItem} Document\n",
    "com.apple.Pages.TSADocumentOpenIntent": "com.apple.Pages.TSADocumentOpenIntent(file: File(Object), password: String)\nParameters:\n    file:  Pages Document.\n    password:  Document Password.\nDescription:\n    Open Document: Open the specified document in Pages.\nParameterSummary: (Open ${file}) Open ${file}\n",
    "com.apple.Pages.TPNewDocumentIntent": "com.apple.Pages.TPNewDocumentIntent()\nDescription:\n    Create New Document: Create a new document from the template chooser in Pages.\nParameterSummary: () Create New Document\n",
    "com.apple.VoiceMemos.RecordVoiceMemoIntent": "com.apple.VoiceMemos.RecordVoiceMemoIntent(name: String)\nParameters:\n    name: CREATE_RECORDING_INTENT_NAME_PARAMETER.\nDescription:\n    CREATE_RECORDING_INTENT_TITLE\nParameterSummary: () CREATE_RECORDING_INTENT_TITLE\n",
    "com.apple.VoiceMemos.PlaybackVoiceMemoIntent": "com.apple.VoiceMemos.PlaybackVoiceMemoIntent(playbackType: PlaybackType(Enum) = \"mostRecent\", entity: RCRecordingEntity(Object))\nParameters:\n    playbackType: PLAY_RECORDING_INTENT_PLAYBACK_TYPE_PARAMETER. PLAYBACK_TYPE_NAME. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"mostRecent\"(PLAYBACK_TYPE_CASE_MOST_RECENT), \"specific\"(PLAYBACK_TYPE_CASE_SPECIFIC).\n    entity: PLAY_RECORDING_INTENT_ENTITY_PARAMETER. RECORDING_ENTITY_NAME.\nDescription:\n    PLAY_RECORDING_INTENT_TITLE: PLAY_RECORDING_INTENT_DESCRIPTION\nParameterSummary: (playbackType) PLAY_RECORDING_INTENT_MOST_RECENT_PARAMETER_SUMMARY ${playbackType}; (playbackType,entity) PLAY_RECORDING_INTENT_SPECIFIC_PARAMETER_SUMMARY ${playbackType} ${entity}\n",
    "com.apple.VoiceMemos.ChangeRecordingPlaybackSetting": "com.apple.VoiceMemos.ChangeRecordingPlaybackSetting(changeOperation: ChangeOperation(Enum), setting: RecordingSettingType(Enum))\nParameters:\n    changeOperation: ChangeOperation. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"disable\"(Disable), \"enable\"(Enable), \"toggle\"(Toggle).\n    setting: CHANGE_RECORDING_PLAYBACK_SETTING_INTENT_SETTING_PARAMETER. RECORDING_SETTING_TYPE_NAME. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"enhanceRecording\"(ENHANCE_RECORDING_SETTING), \"skipSilence\"(SKIP_SILENCE_SETTING).\nDescription:\n    CHANGE_RECORDING_PLAYBACK_SETTING_INTENT_TITLE\nParameterSummary: () CHANGE_RECORDING_PLAYBACK_SETTING_INTENT_TITLE\n",
    "com.apple.VoiceMemos.CloseUIElement": "com.apple.VoiceMemos.CloseUIElement(target: RCUIElementEntity(Object))\nParameters:\n    target: CLOSE_UIELEMENT_INTENT_TARGET_PARAMETER. UIELEMENT_ENTITY_NAME.\nDescription:\n    CLOSE_UIELEMENT_INTENT_TITLE\nParameterSummary: () CLOSE_UIELEMENT_INTENT_TITLE\n",
    "com.apple.VoiceMemos.CreateFolder": "com.apple.VoiceMemos.CreateFolder(name: String) -> CREATE_FOLDER_INTENT_TITLE\n                            : RCFolderEntity(Object)\nParameters:\n    name: CREATE_FOLDER_INTENT_NAME_PARAMETER.\nReturn Value:\n    CREATE_FOLDER_INTENT_TITLE: FOLDER_ENTITY_NAME.\nDescription:\n    CREATE_FOLDER_INTENT_TITLE\nParameterSummary: () CREATE_FOLDER_INTENT_TITLE\n",
    "com.apple.VoiceMemos.DeleteFolder": "com.apple.VoiceMemos.DeleteFolder(entities: array(RCFolderEntity(Object)))\nParameters:\n    entities: DELETE_FOLDER_INTENT_ENTITIES_PARAMETER.\nDescription:\n    DELETE_FOLDER_INTENT_TITLE\nParameterSummary: () DELETE_FOLDER_INTENT_TITLE\n",
    "com.apple.VoiceMemos.DeleteRecording": "com.apple.VoiceMemos.DeleteRecording(entities: array(RCRecordingEntity(Object)))\nParameters:\n    entities: DELETE_RECORDING_INTENT_ENTITIES_PARAMETER.\nDescription:\n    DELETE_RECORDING_INTENT_TITLE\nParameterSummary: () DELETE_RECORDING_INTENT_TITLE\n",
    "com.apple.VoiceMemos.NavigateRecordingsList": "com.apple.VoiceMemos.NavigateRecordingsList(direction: NavigateSequentiallyDirection(Enum))\nParameters:\n    direction: NavigateSequentiallyDirection. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"next\"(Next), \"previous\"(Previous).\nDescription:\n    NAVIGATE_RECORDINGS_LIST_INTENT_DIRECTION_PARAMETER\nParameterSummary: () NAVIGATE_RECORDINGS_LIST_INTENT_DIRECTION_PARAMETER\n",
    "com.apple.VoiceMemos.OpenFolder": "com.apple.VoiceMemos.OpenFolder(target: RCFolderEntity(Object))\nParameters:\n    target: OPEN_FOLDER_INTENT_TARGET_PARAMETER. FOLDER_ENTITY_NAME.\nDescription:\n    OPEN_FOLDER_INTENT_TITLE\nParameterSummary: () OPEN_FOLDER_INTENT_TITLE\n",
    "com.apple.VoiceMemos.OpenUIElement": "com.apple.VoiceMemos.OpenUIElement(target: RCUIElementEntity(Object))\nParameters:\n    target: OPEN_UIELEMENT_INTENT_TARGET_PARAMETER. UIELEMENT_ENTITY_NAME.\nDescription:\n    OPEN_UIELEMENT_INTENT_TITLE\nParameterSummary: () OPEN_UIELEMENT_INTENT_TITLE\n",
    "com.apple.VoiceMemos.SearchRecordings": "com.apple.VoiceMemos.SearchRecordings(searchPhrase: String)\nParameters:\n    searchPhrase: SEARCH_RECORDINGS_INTENT_SEARCH_PHRASE_PARAMETER.\nDescription:\n    SEARCH_RECORDINGS_INTENT_TITLE\nParameterSummary: () SEARCH_RECORDINGS_INTENT_TITLE\n",
    "com.apple.VoiceMemos.SelectRecording": "com.apple.VoiceMemos.SelectRecording(target: RCRecordingEntity(Object))\nParameters:\n    target: SELECT_RECORDING_INTENT_TARGET_PARAMETER. RECORDING_ENTITY_NAME.\nDescription:\n    SELECT_RECORDING_INTENT_TITLE\nParameterSummary: () SELECT_RECORDING_INTENT_TITLE\n",
    "com.apple.iWork.Keynote.KNiOSCreateNewDocumentIntent": "com.apple.iWork.Keynote.KNiOSCreateNewDocumentIntent(templateIdentifier: (Object))\nParameters:\n    templateIdentifier: \nDescription:\n    Create Presentation: Create a new presentation from a theme.\nParameterSummary: (templateIdentifier) Create ${templateIdentifier} Presentation\n",
    "com.apple.iWork.Keynote.OpenAnyDocumentIntent": "com.apple.iWork.Keynote.OpenAnyDocumentIntent(file: File(Object))\nParameters:\n    file:  Keynote Presentation.\nDescription:\n    Open Presentation: Open the specified presentation in Keynote.\nParameterSummary: (Open ${file}) Open ${file}\n",
    "com.apple.iWork.Keynote.TSADocumentCreateIntent": "com.apple.iWork.Keynote.TSADocumentCreateIntent(templateItem: INTemplate(Object))\nParameters:\n    templateItem:  Theme. Theme.\nDescription:\n    Create Presentation from Theme: Create a new presentation from a theme.\nParameterSummary: (Create ${templateItem} Presentation) Create ${templateItem} Presentation\n",
    "com.apple.iWork.Keynote.TSADocumentOpenIntent": "com.apple.iWork.Keynote.TSADocumentOpenIntent(file: File(Object), password: String)\nParameters:\n    file:  Keynote Presentation.\n    password:  Presentation Password.\nDescription:\n    Open Presentation: Open the specified presentation in Keynote.\nParameterSummary: (Open ${file}) Open ${file}\n",
    "com.apple.iWork.Keynote.KNDocumentPlayIntent": "com.apple.iWork.Keynote.KNDocumentPlayIntent(file: File(Object))\nParameters:\n    file:  Keynote Presentation.\nDescription:\n    Play Presentation in Show Mode: Open the presentation in show mode.\nParameterSummary: (Open ${file} in Show Mode) Open ${file} in Show Mode\n",
    "com.apple.iWork.Keynote.KNDocumentRehearseIntent": "com.apple.iWork.Keynote.KNDocumentRehearseIntent(file: File(Object))\nParameters:\n    file:  Keynote Presentation.\nDescription:\n    Open Presentation in Rehearsal Mode: Open the presentation in slideshow rehearsal mode.\nParameterSummary: (Open ${file} in Rehearsal Mode) Open ${file} in Rehearsal Mode\n",
    "com.apple.iWork.Keynote.KNNewDocumentIntent": "com.apple.iWork.Keynote.KNNewDocumentIntent()\nDescription:\n    Create New Presentation: Create a new presentation from the theme chooser in Keynote.\nParameterSummary: () Create New Presentation\n",
    "com.apple.iWork.Numbers.TNiOSCreateNewSpreadsheetIntent": "com.apple.iWork.Numbers.TNiOSCreateNewSpreadsheetIntent(templateIdentifier: (Object))\nParameters:\n    templateIdentifier: \nDescription:\n    Create Spreadsheet: Create a new spreadsheet from a template.\nParameterSummary: (templateIdentifier) Create ${templateIdentifier} Spreadsheet\n",
    "com.apple.iWork.Numbers.TNiOSAddValuesToSpreadsheetIntent": "com.apple.iWork.Numbers.TNiOSAddValuesToSpreadsheetIntent(spreadsheet: File(Object), values: String, position: INAddValuesPosition(Enum) = \"bottom\", sheetName: String, tableName: String)\nParameters:\n    spreadsheet:  Numbers Spreadsheet.\n    values:  Values.\n    position:  Top/Bottom. Add Values Position. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"top\"(Top), \"bottom\"(Bottom).\n    sheetName:  Sheet Name.\n    tableName:  Table Name.\nDescription:\n    Add Row to Top or Bottom of Table: Add a populated body row to the top or bottom of a table in a spreadsheet.\nParameterSummary: (Add ${values} to the ${position} of ${tableName} in ${sheetName} in ${spreadsheet}) Add ${values} to the ${position} of ${tableName} in ${sheetName} in ${spreadsheet}\n",
    "com.apple.iWork.Numbers.OpenAnyDocumentIntent": "com.apple.iWork.Numbers.OpenAnyDocumentIntent(file: File(Object))\nParameters:\n    file:  Numbers Spreadsheet.\nDescription:\n    Open Spreadsheet: Open the specified spreadsheet in Numbers.\nParameterSummary: (Open ${file}) Open ${file}\n",
    "com.apple.iWork.Numbers.TSADocumentCreateIntent": "com.apple.iWork.Numbers.TSADocumentCreateIntent(templateItem: INTemplate(Object))\nParameters:\n    templateItem:  Template. Template.\nDescription:\n    Create Spreadsheet from Template: Create a new spreadsheet from a template.\nParameterSummary: (Create ${templateItem} Spreadsheet) Create ${templateItem} Spreadsheet\n",
    "com.apple.iWork.Numbers.TSADocumentOpenIntent": "com.apple.iWork.Numbers.TSADocumentOpenIntent(file: File(Object), password: String)\nParameters:\n    file:  Numbers Spreadsheet.\n    password:  Spreadsheet Password.\nDescription:\n    Open Spreadsheet: Open the specified spreadsheet in Numbers.\nParameterSummary: (Open ${file}) Open ${file}\n",
    "com.apple.iWork.Numbers.TNNewDocumentIntent": "com.apple.iWork.Numbers.TNNewDocumentIntent()\nDescription:\n    Create New Spreadsheet: Create a new spreadsheet from the template chooser in Numbers.\nParameterSummary: () Create New Spreadsheet\n",
    "com.apple.iWork.Pages.TPiOSCreateNewDocumentIntent": "com.apple.iWork.Pages.TPiOSCreateNewDocumentIntent(templateIdentifier: (Object))\nParameters:\n    templateIdentifier: \nDescription:\n    Create Document: Create a new document from a template.\nParameterSummary: (templateIdentifier) Create ${templateIdentifier} Document\n",
    "com.apple.iWork.Pages.OpenAnyDocumentIntent": "com.apple.iWork.Pages.OpenAnyDocumentIntent(file: File(Object))\nParameters:\n    file:  Pages Document.\nDescription:\n    Open Pages Document: Open an existing document.\nParameterSummary: (Open ${file}) Open ${file}\n",
    "com.apple.iWork.Pages.TSADocumentCreateIntent": "com.apple.iWork.Pages.TSADocumentCreateIntent(templateItem: INTemplate(Object))\nParameters:\n    templateItem:  Template. Template.\nDescription:\n    Create Document from Template: Create a new document from a Pages template.\nParameterSummary: (Create ${templateItem} Document) Create ${templateItem} Document\n",
    "com.apple.iWork.Pages.TSADocumentOpenIntent": "com.apple.iWork.Pages.TSADocumentOpenIntent(file: File(Object), password: String)\nParameters:\n    file:  Pages Document.\n    password:  Document Password.\nDescription:\n    Open Document: Open the specified document in Pages.\nParameterSummary: (Open ${file}) Open ${file}\n",
    "com.apple.iWork.Pages.TPNewDocumentIntent": "com.apple.iWork.Pages.TPNewDocumentIntent()\nDescription:\n    Create New Document: Create a new document from the template chooser in Pages.\nParameterSummary: () Create New Document\n",
    "com.apple.news.INPlayMediaIntent": "com.apple.news.INPlayMediaIntent(mediaItems: MediaItem(Object), mediaContainer: MediaItem(Object), playShuffled: Bool, playbackRepeatMode: PlaybackRepeatMode(Enum), resumePlayback: Bool, playbackQueueLocation: PlaybackQueueLocation(Enum), playbackSpeed: Float, mediaSearch: MediaSearch(Object))\nParameters:\n    mediaItems:  Items.\n    mediaContainer:  Container.\n    playShuffled:  Shuffled.\n    playbackRepeatMode:  Repeat Mode.\n    resumePlayback:  Resume.\n    playbackQueueLocation:  Queue Location.\n    playbackSpeed:  Playback Speed.\n    mediaSearch:  Media Search.\nDescription:\n    Play Media: A request to play media.\nParameterSummary: (mediaItems) Play ${mediaItems}; (mediaItems,mediaContainer) Play ${mediaItems}\n",
    "com.apple.news.FRTagIntent": "com.apple.news.FRTagIntent(tag: Tag(Object))\nParameters:\n    tag:  Topic. Topic.\nDescription:\n    Show Topic: Shows stories about the topic you choose.\nParameterSummary: (See stories about ${tag}) See stories about ${tag}\n",
    "com.apple.news.FRTodayIntent": "com.apple.news.FRTodayIntent()\nDescription:\n    Show Today Feed: Shows stories from the Today feed in Apple News.\nParameterSummary: (Show stories from Today) Show stories from Today\n",
    "com.apple.reminders.TTRCreateListAppIntent": "com.apple.reminders.TTRCreateListAppIntent(name: String) -> Create List\n                            : TTRListEntity(Object)\nParameters:\n    name: Name.\nReturn Value:\n    Create List: TTRListEntity.\nDescription:\n    Create List\nParameterSummary: () Create List\n",
    "com.apple.reminders.TTRCreateReminderAppIntent": "com.apple.reminders.TTRCreateReminderAppIntent(name: String, notes: String, dueDate: String, flagged: Bool, priority: Integer) -> Create Reminder\n                            : TTRReminderEntity(Object)\nParameters:\n    name: Title.\n    notes: Notes.\n    dueDate: Due Date.\n    flagged: Flagged.\n    priority: Priority.\nReturn Value:\n    Create Reminder: TTRReminderEntity.\nDescription:\n    Create Reminder\nParameterSummary: () Create Reminder\n",
    "com.apple.reminders.TTROpenListAppIntent": "com.apple.reminders.TTROpenListAppIntent(target: TTRListEntity(Object))\nParameters:\n    target: List. TTRListEntity.\nDescription:\n    Open List\nParameterSummary: () Open List\n",
    "com.apple.reminders.TTROpenSmartListAppIntent": "com.apple.reminders.TTROpenSmartListAppIntent(target: TTRSmartListEntity(Enum))\nParameters:\n    target: Smart List. TTRSmartListEntity. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"all\"(All List), \"today\"(Today List), \"scheduled\"(Scheduled List), \"flagged\"(Flagged List), \"assigned\"(Assigned List), \"completed\"(Completed List).\nDescription:\n    Open Smart List\nParameterSummary: () Open Smart List\n",
    "com.apple.reminders.TTRSearchRemindersAppIntent": "com.apple.reminders.TTRSearchRemindersAppIntent(searchPhrase: String)\nParameters:\n    searchPhrase: Phrase.\nDescription:\n    Search Reminders\nParameterSummary: () Search Reminders\n",
    "com.apple.shortcuts.CreateWorkflowAction": "com.apple.shortcuts.CreateWorkflowAction(name: String) -> Create Shortcut\n                            : WFWorkflowReference(Object)\nParameters:\n    name: Name.\nReturn Value:\n    Create Shortcut: Shortcut.\nDescription:\n    Create Shortcut\nParameterSummary: () Create Shortcut\n",
    "com.apple.shortcuts.DeleteWorkflowAction": "com.apple.shortcuts.DeleteWorkflowAction(entities: array(WFWorkflowReference(Object)))\nParameters:\n    entities: Shortcuts.\nDescription:\n    Delete Shortcuts\nParameterSummary: () Delete Shortcuts\n",
    "com.apple.shortcuts.OpenNavigationDestinationAction": "com.apple.shortcuts.OpenNavigationDestinationAction(target: RootNavigationDestination(Object))\nParameters:\n    target: Folder. Folder.\nDescription:\n    Open Folder\nParameterSummary: () Open Folder\n",
    "com.apple.shortcuts.OpenWorkflowAction": "com.apple.shortcuts.OpenWorkflowAction(target: WFWorkflowReference(Object))\nParameters:\n    target: Shortcut. Shortcut.\nDescription:\n    Open Shortcut\nParameterSummary: () Open Shortcut\n",
    "com.apple.shortcuts.SearchShortcutsAction": "com.apple.shortcuts.SearchShortcutsAction(searchPhrase: String)\nParameters:\n    searchPhrase: Search for.\nDescription:\n    Search Shortcuts\nParameterSummary: () Search Shortcuts\n",
    "com.apple.weather.WeatherIntent": "com.apple.weather.WeatherIntent(location: WeatherLocation(Object)) -> Location Name\n                            : String\nParameters:\n    location:  Location. Weather Location.\nReturn Value:\n    Location Name: Location Name.\nDescription:\n    Show Weather: Shows and gets the current weather for the specified location.\nParameterSummary: (Show weather in ${location}) Show weather in ${location}\n",
    "com.apple.weather.CancelAction": "com.apple.weather.CancelAction()\nParameterSummary: () \n",
    "com.apple.weather.CloseLocationL2ViewAction": "com.apple.weather.CloseLocationL2ViewAction(entity: LocationL2ViewEntity(Enum))\nParameters:\n    entity: Close Details. LocationL2ViewEntity. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"severeAlert\"(severeAlert), \"hourlyForecast\"(hourlyForecast), \"dailyForecast\"(dailyForecast), \"airQuality\"(airQuality), \"temperature\"(temperature), \"feelsLike\"(feelsLike), \"nextHourPrecipitation\"(nextHourPrecipitation), \"precipitationTotal\"(precipitationTotal), \"pressure\"(pressure), \"humidity\"(humidity), \"map\"(map), \"airQualityMap\"(airQualityMap), \"precipitationMap\"(precipitationMap), \"temperatureMap\"(temperatureMap), \"uvIndex\"(uvIndex), \"visibility\"(visibility), \"sunriseSunset\"(sunriseSunset), \"wind\"(wind).\nParameterSummary: () \n",
    "com.apple.weather.CloseSidebarAction": "com.apple.weather.CloseSidebarAction(entity: SidebarEntity(Enum))\nParameters:\n    entity: Close Sidebar. SidebarEntity. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"sidebar\"(sidebar).\nParameterSummary: () \n",
    "com.apple.weather.NavigateLocationsAction": "com.apple.weather.NavigateLocationsAction(direction: NavigateSequentiallyDirection(Enum))\nParameters:\n    direction: Navigation direction. NavigateSequentiallyDirection. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"next\"(Next), \"previous\"(Previous).\nParameterSummary: () \n",
    "com.apple.weather.OpenListAction": "com.apple.weather.OpenListAction(entity: ListEntity(Enum))\nParameters:\n    entity: Open List. ListEntity. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"list\"(list).\nParameterSummary: () \n",
    "com.apple.weather.OpenLocationAction": "com.apple.weather.OpenLocationAction(entity: LocationEntity(Object))\nParameters:\n    entity: Open Location. LocationEntity.\nParameterSummary: () \n",
    "com.apple.weather.OpenLocationL2ViewAction": "com.apple.weather.OpenLocationL2ViewAction(entity: LocationL2ViewEntity(Enum))\nParameters:\n    entity: Open Details. LocationL2ViewEntity. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"severeAlert\"(severeAlert), \"hourlyForecast\"(hourlyForecast), \"dailyForecast\"(dailyForecast), \"airQuality\"(airQuality), \"temperature\"(temperature), \"feelsLike\"(feelsLike), \"nextHourPrecipitation\"(nextHourPrecipitation), \"precipitationTotal\"(precipitationTotal), \"pressure\"(pressure), \"humidity\"(humidity), \"map\"(map), \"airQualityMap\"(airQualityMap), \"precipitationMap\"(precipitationMap), \"temperatureMap\"(temperatureMap), \"uvIndex\"(uvIndex), \"visibility\"(visibility), \"sunriseSunset\"(sunriseSunset), \"wind\"(wind).\nParameterSummary: () \n",
    "com.apple.weather.OpenMyLocationAction": "com.apple.weather.OpenMyLocationAction(entity: MyLocationEntity(Enum))\nParameters:\n    entity: Open My Location. MyLocationEntity. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"myLocation\"(myLocation).\nParameterSummary: () \n",
    "com.apple.weather.OpenSearchResultAction": "com.apple.weather.OpenSearchResultAction(entity: SearchResultEntity(Enum))\nParameters:\n    entity: Open Search Result. SearchResultEntity. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"first\"(first), \"second\"(second), \"third\"(third), \"fourth\"(fourth), \"fifth\"(fifth), \"sixth\"(sixth), \"seventh\"(seventh), \"eighth\"(eighth), \"ninth\"(ninth), \"tenth\"(tenth), \"eleventh\"(eleventh), \"twelfth\"(twelfth), \"thirteenth\"(thirteenth), \"fourteenth\"(fourteenth), \"fifteenth\"(fifteenth), \"sixteenth\"(sixteenth), \"seventeenth\"(seventeenth), \"eighteenth\"(eighteenth), \"nineteenth\"(nineteenth), \"twentieth\"(twentieth).\nParameterSummary: () \n",
    "com.apple.weather.OpenSidebarAction": "com.apple.weather.OpenSidebarAction(entity: SidebarEntity(Enum))\nParameters:\n    entity: Open Sidebar. SidebarEntity. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"sidebar\"(sidebar).\nParameterSummary: () \n",
    "com.apple.weather.SearchLocationAction": "com.apple.weather.SearchLocationAction(searchPhrase: String)\nParameters:\n    searchPhrase: Search phrase.\nParameterSummary: () \n",
    "com.appliedphasor.working-copy.GitActionIntent": "com.appliedphasor.working-copy.GitActionIntent(action: String, information: String, url: String)\nParameters:\n    action: \n    information: \n    url: \nDescription:\n    Git Shortcut: Control your Git repositories using voice\nParameterSummary: (url,action,information) ￼${action}\n",
    "com.appliedphasor.working-copy.GetFilesIntent": "com.appliedphasor.working-copy.GetFilesIntent(repo: String, path: String, status: Status(Enum) = \"any\", archive: Bool, flatten: ArchiveFlatten(Enum) = \"none\") -> Files\n                            : File(Object)\nParameters:\n    repo:  Repository.\n    path:  Path.\n    status:  Include. Status. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"any\"(any), \"current\"(current), \"ignored\"(ignored), \"modified\"(modified), \"staged\"(staged).\n    archive:  Output Zip archive.\n    flatten:  Flatten. Archive Flatten. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"none\"(none), \"partial\"(partial), \"total\"(total). This value depends on the value of \"archive\". This parameter is only valid when the value of \"archive\" is True.\nReturn Value:\n    Files: Files.\nDescription:\n    Get Repository Files: Files in repository matching Path such as filename, directory name, pathspec patterns like *.md\n\nUse Path=/ to include the entire repository which can be especially useful when setting Include=modified.\nParameterSummary: (Files in ${repo} at ${path}) Files in ${repo} at ${path}; (Archive of ${repo} at ${path}) Archive of ${repo} at ${path}\n",
    "com.appliedphasor.working-copy.WriteFileIntent": "com.appliedphasor.working-copy.WriteFileIntent(repo: String, path: String, content: File(Object), overwrite: Bool, createMissing: Bool, mode: WriteMode(Enum), stage: Bool = True) -> Error\n                            : String\nParameters:\n    repo:  Repository.\n    path:  Path.\n    content:  Content.\n    overwrite:  Allow Overwrite.\n    createMissing:  Create Missing Directories.\n    mode:  When File Exists. Existing file. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"create\"(Refuse and fail), \"prepend\"(Insert at start), \"append\"(Append at end), \"overwrite\"(Overwrite existing).\n    stage:  Stage written Files for Commit.\nReturn Value:\n    Error: Error.\nDescription:\n    Write Repository File: Write file or directory to Path in repository. \n\nWhen Path points to an existing directory a file will be written inside the directory.\n\nWriting fails when something already exists at the given location unless you enable 'Allow Overwrite'.\n\nFiles you write are staged to be included in next Commit. Adjust options if you want to stage manually.\nParameterSummary: (Write ${content}to ${path} in ${repo}) Write ${content}to ${path} in ${repo}\n",
    "com.appliedphasor.working-copy.CommitRepositoryIntent": "com.appliedphasor.working-copy.CommitRepositoryIntent(repo: String, message: String, target: CommitTarget(Enum) = \"staged\", failNothing: Bool = True, sign: Bool) -> Error\n                            : String\nParameters:\n    repo:  Repository.\n    message:  Message.\n    target:  What to Commit. Commit options. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"modified\"(modified), \"staged\"(staged).\n    failNothing:  Fail when nothing to Commit.\n    sign:  Sign.\nReturn Value:\n    Error: Error.\nDescription:\n    Commit Repository: Commit repository. \n\nDefault behaviour is to only commit files that have been staged inside Working Copy or when using the 'Write Repository File' action. \nParameterSummary: (Commit ${repo} with ${message}) Commit ${repo} with ${message}\n",
    "com.appliedphasor.working-copy.PullRepositoryIntent": "com.appliedphasor.working-copy.PullRepositoryIntent(repo: String, remote: String) -> Error\n                            : String\nParameters:\n    repo:  Repository.\n    remote:  Remote.\nReturn Value:\n    Error: Error.\nDescription:\n    Pull Repository: Fetch commits from repository remote and merge with current branch.\nParameterSummary: (Pull from ${repo} remote) Pull from ${repo} remote\n",
    "com.appliedphasor.working-copy.PushRepositoryIntent": "com.appliedphasor.working-copy.PushRepositoryIntent(repo: String, remote: String) -> Error Message\n                            : String\nParameters:\n    repo:  Repository.\n    remote:  Remote.\nReturn Value:\n    Error Message: Error Message.\nDescription:\n    Push Repository: Push commits from local repository to remote.\n\nActions need to provide a result to the Shortcuts app within a few seconds and if push takes too long an empty result is returned while push continues in the background.\n\nThis action requires the pro unlock.\nParameterSummary: (Push ${repo} to remote) Push ${repo} to remote\n",
    "com.appliedphasor.working-copy.StageFilesIntent": "com.appliedphasor.working-copy.StageFilesIntent(repo: String, path: String, operation: StageOperation(Enum) = \"stage\") -> Error\n                            : String\nParameters:\n    repo:  Repository.\n    path:  Path.\n    operation:  Operation. Stage Operation. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"stage\"(stage), \"unstage\"(unstage).\nReturn Value:\n    Error: Error.\nDescription:\n    Stage for Commit: Control what to include in next Commit by staging or unstaging files.\n\nPath will match wildcards and / means the entire repository with all files.\n\nAction returns the list of filenames that had their staging status changed.\nParameterSummary: (Stage ${path} in ${repo} for Commit) Stage ${path} in ${repo} for Commit\n",
    "com.appliedphasor.working-copy.FileRepositoryIntent": "com.appliedphasor.working-copy.FileRepositoryIntent(file: File(Object)) -> Error\n                            : String\nParameters:\n    file:  File.\nReturn Value:\n    Error: Error.\nDescription:\n    Repository for File: Repository name for file or directory inside Working Copy.\n\nThis can be used for shortcuts acting on files that could be in any repository.\nParameterSummary: () Repository for File\n",
    "com.appliedphasor.working-copy.CheckoutBranchIntent": "com.appliedphasor.working-copy.CheckoutBranchIntent(repo: String, branch: String)\nParameters:\n    repo:  Repository.\n    branch:  Branch.\nDescription:\n    Checkout Branch: Switch to another branch in Repository.\n\nThis requires that all files are current.\nParameterSummary: (Checkout ${branch} in ${repo}) Checkout ${branch} in ${repo}\n",
    "com.appliedphasor.working-copy.CommitLogIntent": "com.appliedphasor.working-copy.CommitLogIntent(repo: String, limit: Integer = 10, branch: String, pattern: String) -> Error\n                            : String\nParameters:\n    repo:  Repository.\n    limit:  History Limit.\n    branch:  Branch.\n    pattern:  Relevant filenames.\nReturn Value:\n    Error: Error.\nDescription:\n    Repository History: Latest commits in Repository.\n\nIf 'Relevant filenames' is set only commits changing filenames matching this git-ignore style glob pattern are included in result. \nParameterSummary: (Commit History for ${repo}) Commit History for ${repo}\n",
    "com.appliedphasor.working-copy.OpenIntent": "com.appliedphasor.working-copy.OpenIntent(repo: String, path: String, mode: OpenMode(Enum), clone: Bool)\nParameters:\n    repo:  Repository.\n    path:  Path.\n    mode:  Mode. Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"change\"(Changes), \"content\"(Content), \"edit\"(Edit), \"preview\"(Preview), \"status\"(Status).\n    clone:  Clone if needed.\nDescription:\n    Open in Working Copy: Open a file or directory in Working Copy.\n\nUse / in Path and enable 'Clone if needed' to clone a repository.\n\nChange, Edit & Preview modes only makes sense for files and will be ignored for directories.\nParameterSummary: (Open ${path} in ${repo}) Open ${path} in ${repo}\n",
    "com.appliedphasor.working-copy.MergeBranchIntent": "com.appliedphasor.working-copy.MergeBranchIntent(repo: String, branch: String, method: MergeMethod(Enum) = \"auto\") -> Error\n                            : String\nParameters:\n    repo:  Repository.\n    branch:  Branch.\n    method:  Method. Merge Method. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"auto\"(Default), \"fastforward\"(Fast Forward), \"fullmerge\"(Merge), \"rebase\"(Rebase), \"simulate\"(Simulate).\nReturn Value:\n    Error: Error.\nDescription:\n    Merge Branch: Merge branch into the currently checkout out branch in Repository.\n\nSimulate method will attempt a full merge without changing your repository making it clear if merge can be fast-forwarded.\n\nThis requires that all files are current.\nParameterSummary: (Merge ${branch} into current branch of ${repo}) Merge ${branch} into current branch of ${repo}\n",
    "com.appliedphasor.working-copy.CreateBranchIntent": "com.appliedphasor.working-copy.CreateBranchIntent(repo: String, branch: String, checkout: Bool = True, allowExisting: Bool)\nParameters:\n    repo:  Repository.\n    branch:  Branch.\n    checkout:  Checkout Branch.\n    allowExisting:  Allow Existing.\nDescription:\n    Create Branch: Create new branch with the given name.\n\nDefault behaviour is to switch to switch to the new branch which brings along modified files.\nParameterSummary: (Create branch ${branch} in ${repo}) Create branch ${branch} in ${repo}\n",
    "com.appliedphasor.working-copy.DeleteBranchIntent": "com.appliedphasor.working-copy.DeleteBranchIntent(repo: String, branch: String)\nParameters:\n    repo:  Repository.\n    branch:  Branch.\nDescription:\n    Delete Branch: Delete local or remote branch.\n\nDeletion is refused if there are commits not merged into other branches.\nParameterSummary: (Delete ${branch} in ${repo}) Delete ${branch} in ${repo}\n",
    "com.appliedphasor.working-copy.ListRepositoriesIntent": "com.appliedphasor.working-copy.ListRepositoriesIntent(pattern: String, include: RepoListInclude(Enum) = \"all\") -> Error\n                            : String\nParameters:\n    pattern:  Pattern.\n    include:  Include. Include. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"all\"(All), \"current\"(Current), \"shown\"(Shown).\nReturn Value:\n    Error: Error.\nDescription:\n    List Repositories: List all repositories.\n\nThis is useful when making shortcuts to work on several repositories.\n\nYou can exclude repositories by entering text in Pattern. Only repositories containing this pattern in name or remote are listed.\nParameterSummary: (List repositories) List repositories\n",
    "com.appliedphasor.working-copy.CloneRepositoryIntent": "com.appliedphasor.working-copy.CloneRepositoryIntent(url: String, name: String, folder: String, callback: String = \"shortcuts://\")\nParameters:\n    url:  URL.\n    name:  Repository Name.\n    folder:  Folder.\n    callback:  Open URL when done.\nDescription:\n    Clone Repository: Clone repository in Working Copy.\n\nThe name of the repository is derived from the URL and adjusted to be unique. You can override this with the Repository Name parameter.\n\nUsers with the pro unlock can specify which Folder the repository should be cloned to.\n\nCloning is resource intensive and needs to happen in the main app. When cloning has succeeded it will launch Shortcuts. You can use the 'Wait to return' action to make the shortcut wait for this.\nParameterSummary: (Clone repository from ${url}) Clone repository from ${url}\n",
    "com.appliedphasor.working-copy.ListReferencesIntent": "com.appliedphasor.working-copy.ListReferencesIntent(repo: String, pattern: String) -> Error\n                            : String\nParameters:\n    repo:  Repository.\n    pattern:  Pattern.\nReturn Value:\n    Error: Error.\nDescription:\n    Repository References: Lists references in repository.\n\nDefault is to list branches but changing Pattern to refs/tags/* or * will return tags or even all reference names.\n\nYou can use result references in the Branch parameter for Repository History even when reference isn't a branch.\nParameterSummary: (References in ${repo}) References in ${repo}\n",
    "com.appliedphasor.working-copy.FetchRepositoryIntent": "com.appliedphasor.working-copy.FetchRepositoryIntent(repo: String, remote: String) -> Error Message\n                            : String\nParameters:\n    repo:  Repository.\n    remote:  Remote.\nReturn Value:\n    Error Message: Error Message.\nDescription:\n    Fetch Repository: Fetch commits from remote without merging with local branches.\nParameterSummary: (Fetch from ${repo} remote) Fetch from ${repo} remote\n",
    "com.appliedphasor.working-copy.OpenPullRequestIntent": "com.appliedphasor.working-copy.OpenPullRequestIntent(repo: String, base: String, head: String, title: String, comment: String) -> Error\n                            : String\nParameters:\n    repo:  Repository.\n    base:  base branch. This value depends on the value of \"repo\". This parameter is only valid when \"repo has any value.\n    head:  head branch. This value depends on the value of \"repo\". This parameter is only valid when \"repo has any value.\n    title:  Title. This value depends on the value of \"repo\". This parameter is only valid when \"repo has any value.\n    comment:  Pull Request Description.\nReturn Value:\n    Error: Error.\nDescription:\n    Create Pull Request: Open new Pull Request asking for changes on head branch to be merged into base branch.\n\nBranches can be picked from the repository or can be fully qualified URLs to a branch on the hosting provider.\nParameterSummary: (Request Pull from ${head} to ${base} in ${repo} with ${title}) Request Pull from ${head} to ${base} in ${repo} with ${title}; (Open Pull Request in ${repo}) Open Pull Request in ${repo}\n",
    "com.appliedphasor.working-copy.WebDAVIntent": "com.appliedphasor.working-copy.WebDAVIntent(start: Bool = True) -> Error\n                            : String\nParameters:\n    start:  Start.\nReturn Value:\n    Error: Error.\nDescription:\n    Toggle WebDAV server: Start or Stop the WebDAV server giving access to repository files.\n\nMake sure you use a hard to guess password.\nParameterSummary: (${start} WebDAV server) ${start} WebDAV server\n",
    "com.appliedphasor.working-copy.FileDetailsIntent": "com.appliedphasor.working-copy.FileDetailsIntent(files: File(Object)) -> Error\n                            : String\nParameters:\n    files:  Files.\nReturn Value:\n    Error: Error.\nDescription:\n    Details of Repository Files: Return information such as repository, directory, status and more from the files passed into the action.\nParameterSummary: (Get details from ${files}) Get details from ${files}\n",
    "com.appliedphasor.working-copy.ManageRemotesIntent": "com.appliedphasor.working-copy.ManageRemotesIntent(kind: RemoteUpdateKind(Enum) = \"list\", renameRemote: String, targetName: String, addName: String, addUrl: String, removeRemote: String, editTargetUrl: String, editRemote: String, repo: String) -> Error\n                            : String\nParameters:\n    kind:  Action. Remote Update Kind. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"list\"(List), \"rename\"(Rename), \"add\"(Add), \"remove\"(Remove), \"edit\"(Change).\n    renameRemote:  Remote to Rename. This value depends on the value of \"kind\". This parameter is only valid when the value of \"kind\" is \"rename\".\n    targetName:  New Name. This value depends on the value of \"kind\". This parameter is only valid when the value of \"kind\" is \"rename\".\n    addName:  New Name. This value depends on the value of \"kind\". This parameter is only valid when the value of \"kind\" is \"add\".\n    addUrl:  Remote URL. This value depends on the value of \"kind\". This parameter is only valid when the value of \"kind\" is \"add\".\n    removeRemote:  Remote to Remove. This value depends on the value of \"kind\". This parameter is only valid when the value of \"kind\" is \"remove\".\n    editTargetUrl:  New URL. This value depends on the value of \"kind\". This parameter is only valid when the value of \"kind\" is \"edit\".\n    editRemote:  Remote to Change. This value depends on the value of \"kind\". This parameter is only valid when the value of \"kind\" is \"edit\".\n    repo:  Repository.\nReturn Value:\n    Error: Error.\nDescription:\n    Manage Remotes: List, rename, add and remove remotes\n\nYou can reference remotes using either their name or the URL.\nParameterSummary: () Manage Remotes\n",
    "com.atlassian.jira.app.CreateIssueIntent": "com.atlassian.jira.app.CreateIssueIntent(account: String, site: String, project: Project(Object), issueType: IssueType(Object), summary: String) -> Issue\n                            : Issue(Object)\nParameters:\n    account:  Account.\n    site:  Site. This value depends on the value of \"account\". This parameter is only valid when \"account has any value.\n    project:  Project. Project.\n    issueType:  Issue Type. Issue Type.\n    summary:  Summary.\nReturn Value:\n    Issue: Issue. Issue.\nDescription:\n    Create Issue: Create a new Jira issue\nParameterSummary: (Create new issue in ${project} with ${issueType} titled ${summary}) Create new issue in ${project} with ${issueType} titled ${summary}; (In ${project}, create new ${issueType} with ${summary}) In ${project}, create new ${issueType} with ${summary}\n",
    "com.atlassian.jira.app.PostCommentIntent": "com.atlassian.jira.app.PostCommentIntent(issue: Issue(Object), comment: String) -> Comment\n                            : String\nParameters:\n    issue:  Issue. Issue.\n    comment:  Comment.\nReturn Value:\n    Comment: Comment.\nDescription:\n    Post Comment: Post a comment to a Jira issue\nParameterSummary: (Post ${comment} on ${issue} ) Post ${comment} on ${issue} \n",
    "com.atlassian.jira.app.GetIssueIntent": "com.atlassian.jira.app.GetIssueIntent(issueKey: String, account: String, site: String) -> Issue\n                            : Issue(Object)\nParameters:\n    issueKey:  Issue Key.\n    account:  Account.\n    site:  Site. This value depends on the value of \"account\". This parameter is only valid when \"account has any value.\nReturn Value:\n    Issue: Issue. Issue.\nDescription:\n    Choose Issue: Choose an existing Jira issue\nParameterSummary: (Choose ${issueKey}) Choose ${issueKey}; (Choose ${issueKey}) Choose ${issueKey}\n",
    "com.atlassian.jira.app.GetIssueFieldIntent": "com.atlassian.jira.app.GetIssueFieldIntent(issue: Issue(Object), fieldName: String) -> Field Value\n                            : String\nParameters:\n    issue:  Issue. Issue.\n    fieldName:  Field Name.\nReturn Value:\n    Field Value: Field Value.\nDescription:\n    Get Issue Field Value: Retrieve the field value of an issue\nParameterSummary: (Retrieve value of ${fieldName} from ${issue}) Retrieve value of ${fieldName} from ${issue}\n",
    "com.atlassian.jira.app.SetIssueFieldIntent": "com.atlassian.jira.app.SetIssueFieldIntent(issue: Issue(Object), operation: Operation(Enum) = \"set\", setFieldName: String, setFieldValue: String, addFieldName: String, addFieldValue: String, removeFieldName: String, removeFieldValue: String, clearFieldName: String) -> Issue\n                            : Issue(Object)\nParameters:\n    issue:  Issue. Issue.\n    operation:  Operation. Operation. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"set\"(Set), \"add\"(Add), \"remove\"(Remove), \"clear\"(Clear).\n    setFieldName:  Field Name. This value depends on the value of \"operation\". This parameter is only valid when the value of \"operation\" is \"set\".\n    setFieldValue:  Field Value. This value depends on the value of \"operation\". This parameter is only valid when the value of \"operation\" is \"set\".\n    addFieldName:  Field Name. This value depends on the value of \"operation\". This parameter is only valid when the value of \"operation\" is \"add\".\n    addFieldValue:  Field Value. This value depends on the value of \"operation\". This parameter is only valid when the value of \"operation\" is \"add\".\n    removeFieldName:  Field Name. This value depends on the value of \"operation\". This parameter is only valid when the value of \"operation\" is \"remove\".\n    removeFieldValue:  Field Value. This value depends on the value of \"operation\". This parameter is only valid when the value of \"operation\" is \"remove\".\n    clearFieldName:  Clear Field Name. This value depends on the value of \"operation\". This parameter is only valid when the value of \"operation\" is \"clear\".\nReturn Value:\n    Issue: Issue. Issue.\nDescription:\n    Set Issue Field Value: Update the field value of an issue\nParameterSummary: (On ${issue}, ${operation} ${addFieldValue} to ${addFieldName}) On ${issue}, ${operation} ${addFieldValue} to ${addFieldName}; (On ${issue}, ${operation} ${clearFieldName}) On ${issue}, ${operation} ${clearFieldName}; (On ${issue}, ${operation} ${removeFieldValue}from ${removeFieldName}) On ${issue}, ${operation} ${removeFieldValue}from ${removeFieldName}; (On ${issue}, ${operation} ${setFieldName} to ${setFieldValue}) On ${issue}, ${operation} ${setFieldName} to ${setFieldValue}\n",
    "com.atlassian.jira.app.RunJQLIntent": "com.atlassian.jira.app.RunJQLIntent(pageIndex: Integer, account: String, site: String, jqlQuery: String = \"assignee = currentUser() AND resolution = Unresolved order by updated DESC\") -> Issues\n                            : Issue(Object)\nParameters:\n    pageIndex:  Page index (max 50 issues per page).\n    account:  Account.\n    site:  Site. This value depends on the value of \"account\". This parameter is only valid when \"account has any value.\n    jqlQuery:  JQL query.\nReturn Value:\n    Issues: Issues. Issue.\nDescription:\n    Run JQL: Run a JQL query\nParameterSummary: (Execute ${jqlQuery}) Execute ${jqlQuery}; (Run ${jqlQuery}) Run ${jqlQuery}\n",
    "com.atlassian.jira.app.AddAttachmentIntent": "com.atlassian.jira.app.AddAttachmentIntent(issue: Issue(Object), file: File(Object)) -> Issue\n                            : Issue(Object)\nParameters:\n    issue:  Issue. Issue.\n    file:  File.\nReturn Value:\n    Issue: Issue. Issue.\nDescription:\n    Add Attachment: Add an attachment to an issue\nParameterSummary: (Attach ${file} to ${issue}) Attach ${file} to ${issue}\n",
    "com.atlassian.jira.app.OpenIssueIntent": "com.atlassian.jira.app.OpenIssueIntent(issue: Issue(Object))\nParameters:\n    issue:  Issue. Issue.\nDescription:\n    View Issue in Jira: Open issue in the JIRA app\nParameterSummary: (View ${issue} in the Jira app) View ${issue} in the Jira app\n",
    "com.atlassian.jira.app.LogWorkIntent": "com.atlassian.jira.app.LogWorkIntent(issue: Issue(Object), startedAt: String, timeSpent: TimeInterval(Object) = 4.0, comment: String) -> Issue\n                            : Issue(Object)\nParameters:\n    issue:  Issue. Issue.\n    startedAt:  Started At.\n    timeSpent:  Time Spent.\n    comment:  Comment.\nReturn Value:\n    Issue: Issue. Issue.\nDescription:\n    Log Work: Log work on an issue\nParameterSummary: (On ${issue}, log ${timeSpent} of work started at ${startedAt} with comment ${comment}) On ${issue}, log ${timeSpent} of work started at ${startedAt} with comment ${comment}\n",
    "com.atlassian.jira.app.ExtractIssueKeyIntent": "com.atlassian.jira.app.ExtractIssueKeyIntent(url: String = \"https://instance.atlassian.net/browse/ABC-123\") -> Issue Key\n                            : String\nParameters:\n    url:  URL.\nReturn Value:\n    Issue Key: Issue Key.\nDescription:\n    Extract Issue Key: Extract an issue key from a URL\nParameterSummary: (Extract issue key from ${url}) Extract issue key from ${url}\n",
    "com.bloombuilt.dayone-ios.CreateEntryIntent": "com.bloombuilt.dayone-ios.CreateEntryIntent(journal: Journal(Object), content: String, images: None, tags: array(String), date: String) -> Create Entry\n                            : Entry(Object)\nParameters:\n    journal: Journal. Day One Journal.\n    content: Text.\n    images: Media.\n    tags: Tags.\n    date: Date.\nReturn Value:\n    Create Entry: Day One Entry.\nDescription:\n    Create Entry: Create a new entry in Day One\nParameterSummary: () Create Entry\n",
    "com.bloombuilt.dayone-ios.FindEntriesIntent": "com.bloombuilt.dayone-ios.FindEntriesIntent(journal: Journal(Object), date: String, tags: array(String), entryLimit: Integer) -> Find Entries\n                            : array(Entry(Object))\nParameters:\n    journal: Journal. Day One Journal.\n    date: Date.\n    tags: Tags.\n    entryLimit: Number of Results.\nReturn Value:\n    Find Entries: \nDescription:\n    Find Entries: Find Day One entries matching the specified criteria\nParameterSummary: () Find Entries\n",
    "com.bloombuilt.dayone-ios.AppendToEntryIntent": "com.bloombuilt.dayone-ios.AppendToEntryIntent(entries: array(Entry(Object)), content: String, images: None, startNewParagraph: Bool) -> Append to Entry\n                            : array(Entry(Object))\nParameters:\n    entries: Entry.\n    content: Text.\n    images: Media.\n    startNewParagraph: Start New Paragraph.\nReturn Value:\n    Append to Entry: \nDescription:\n    Append to Entry: Add content to an existing Day One entry\nParameterSummary: () Append to Entry\n",
    "com.bloombuilt.dayone-ios.ShowEntriesIntent": "com.bloombuilt.dayone-ios.ShowEntriesIntent(entries: array(Entry(Object)))\nParameters:\n    entries: Entries.\nDescription:\n    Show Entries: Opens Day One, showing the received entries\nParameterSummary: () Show Entries\n",
    "com.bloombuilt.dayone-ios.OpenDayOneToNewEntryIntent": "com.bloombuilt.dayone-ios.OpenDayOneToNewEntryIntent(journal: Journal(Object), entryInitialContent: EntryInitialContent(Enum))\nParameters:\n    journal:  Journal. Day One Journal.\n    entryInitialContent:  Initial Content. Entry Initial Content. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"text\"(Text), \"camera\"(Camera), \"audio\"(Audio), \"video\"(Video).\nDescription:\n    Open New Entry: Creates a new journal entry in Day One\nParameterSummary: (entryInitialContent,journal) Open new ${entryInitialContent} entry in ${journal}\n",
    "com.bloombuilt.dayone-ios.GetDailyPromptIntent": "com.bloombuilt.dayone-ios.GetDailyPromptIntent() -> Get Daily Prompt\n                            : String\nReturn Value:\n    Get Daily Prompt: \nDescription:\n    Get Daily Prompt: Fetches daily prompt\nParameterSummary: () Get Daily Prompt\n",
    "com.bloombuilt.dayone-ios.ShowTodayIntent": "com.bloombuilt.dayone-ios.ShowTodayIntent(date: String)\nParameters:\n    date: Today.\nDescription:\n    Show Day Summary: Opens Day One to Today\nParameterSummary: () Show Day Summary\n",
    "com.bloombuilt.dayone-ios.AnswerDailyPromptIntent": "com.bloombuilt.dayone-ios.AnswerDailyPromptIntent()\nDescription:\n    Answer Daily Prompt: Creates new entry from Daily Prompt\nParameterSummary: () Answer Daily Prompt\n",
    "com.bloombuilt.dayone-ios.EditEntryIntent": "com.bloombuilt.dayone-ios.EditEntryIntent(entry: Entry(Object))\nParameters:\n    entry: Entry. Day One Entry.\nDescription:\n    Edit Entry: Opens Day One to the selected entry\nParameterSummary: (entry) Edit ${entry}\n",
    "com.bloombuilt.dayone-ios.CreateTemplateEntryIntent": "com.bloombuilt.dayone-ios.CreateTemplateEntryIntent(journal: Journal(Object), template: Template(Object))\nParameters:\n    journal: Journal. Day One Journal.\n    template: Template. Day One Template.\nDescription:\n    Create Template Entry: Create a new template entry in Day One\nParameterSummary: (journal,template) Create entry in ${journal} with ${template}\n",
    "com.bloombuilt.dayone-ios.ShowDayIntent": "com.bloombuilt.dayone-ios.ShowDayIntent(date: String)\nParameters:\n    date: Date.\nDescription:\n    Show On This Day: Opens Day One to On This Day\nParameterSummary: () Show On This Day\n",
    "com.bloombuilt.dayone-ios.RecordIntent": "com.bloombuilt.dayone-ios.RecordIntent(media: MediaType(Enum), journal: Journal(Object), tags: array(String))\nParameters:\n    media: Media. Media Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"unknown\"(Unknown), \"audio\"(Audio), \"audioTranscribed\"(Audio (transcribed)), \"video\"(Video), \"photo\"(Photo).\n    journal: Journal. Day One Journal.\n    tags: Tags.\nDescription:\n    Record: Open Day One and record new media\nParameterSummary: () Record\n",
    "com.bloombuilt.dayone-ios.TodayDisplayIntent": "com.bloombuilt.dayone-ios.TodayDisplayIntent(display: TodayDisplayContent(Enum) = \"summary\")\nParameters:\n    display:  Display. Today Display Content. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"summary\"(Summary), \"locations\"(Locations), \"noText\"(No Text).\nDescription:\n    Today Display: Select the info to display\nParameterSummary: () Today Display\n",
    "com.bloombuilt.dayone-ios.INCreateNoteIntent": "com.bloombuilt.dayone-ios.INCreateNoteIntent(title: String, content: NoteContent(Object), groupName: String)\nParameters:\n    title:  Title.\n    content:  Content.\n    groupName:  Group Name.\nDescription:\n    Create Entry: Create a new entry in Day One\nParameterSummary: () Create a new entry in Day One\n",
    "com.bloombuilt.dayone-ios.OpenEntryAppIntent": "com.bloombuilt.dayone-ios.OpenEntryAppIntent(entry: Entry(Object))\nParameters:\n    entry: Entry. Day One Entry.\nDescription:\n    Open Entry\nParameterSummary: () Open Entry\n",
    "com.bloombuilt.dayone-mac.CreateEntryIntent": "com.bloombuilt.dayone-mac.CreateEntryIntent(journal: Journal(Object), content: String, images: File(Object), tags: String, date: String, location: Placemark(Object), showInApp: Bool) -> Day One Entry\n                            : Entry(Object)\nParameters:\n    journal:  Journal. Day One Journal.\n    content:  Text.\n    images:  Media.\n    tags:  Tags.\n    date:  Date.\n    location:  Location.\n    showInApp:  Show In App.\nReturn Value:\n    Day One Entry: Day One Entry. Day One Entry.\nDescription:\n    Create Entry: Create a new entry in Day One\nParameterSummary: (Create entry with ${content}) Create entry with ${content}\n",
    "com.bloombuilt.dayone-mac.FindEntriesIntent": "com.bloombuilt.dayone-mac.FindEntriesIntent(journal: Journal(Object), date: String, tags: String, entryLimit: Integer = 1) -> Entries\n                            : Entry(Object)\nParameters:\n    journal:  Journal. Day One Journal.\n    date:  Date.\n    tags:  Tags.\n    entryLimit:  Number of Results.\nReturn Value:\n    Entries: Entries. Day One Entry.\nDescription:\n    Find Entries: Find Day One entries matching the specified criteria\nParameterSummary: (Find entries) Find entries\n",
    "com.bloombuilt.dayone-mac.AppendToEntryIntent": "com.bloombuilt.dayone-mac.AppendToEntryIntent(entries: Entry(Object), content: String, images: File(Object), newParagraph: Bool) -> Day One Entry\n                            : Entry(Object)\nParameters:\n    entries:  Entry. Day One Entry.\n    content:  Text.\n    images:  Media.\n    newParagraph:  Start New Paragraph.\nReturn Value:\n    Day One Entry: Day One Entry. Day One Entry.\nDescription:\n    Append to Entry: Add content to an existing Day One entry\nParameterSummary: (Append ${content} to ${entries}) Append ${content} to ${entries}\n",
    "com.bloombuilt.dayone-mac.ShowEntriesIntent": "com.bloombuilt.dayone-mac.ShowEntriesIntent(entries: Entry(Object))\nParameters:\n    entries:  Entries. Day One Entry.\nDescription:\n    Show Entries: Opens Day One, showing the received entries\nParameterSummary: (Show ${entries}) Show ${entries}\n",
    "com.bloombuilt.dayone-mac.OpenDayOneToNewEntryIntent": "com.bloombuilt.dayone-mac.OpenDayOneToNewEntryIntent(journal: Journal(Object), entryInitialContent: EntryInitialContent(Enum))\nParameters:\n    journal:  Journal. Day One Journal.\n    entryInitialContent:  Initial Content. Entry Initial Content. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"text\"(Text), \"camera\"(Camera), \"audio\"(Audio), \"video\"(Video).\nDescription:\n    Open New Entry: Creates a new journal entry in Day One\nParameterSummary: (entryInitialContent,journal) Open new ${entryInitialContent} entry in ${journal}\n",
    "com.bloombuilt.dayone-mac.GetDailyPromptIntent": "com.bloombuilt.dayone-mac.GetDailyPromptIntent() -> Daily Prompt\n                            : String\nReturn Value:\n    Daily Prompt: Daily Prompt.\nDescription:\n    Get Daily Prompt: Fetches daily prompt\nParameterSummary: () Get Daily Prompt\n",
    "com.bloombuilt.dayone-mac.ShowTodayIntent": "com.bloombuilt.dayone-mac.ShowTodayIntent(date: String)\nParameters:\n    date:  Today.\nDescription:\n    Show Day Summary: Opens Day One to Today\nParameterSummary: (Show Day Summary for ${date}) Show Day Summary for ${date}\n",
    "com.bloombuilt.dayone-mac.AnswerDailyPromptIntent": "com.bloombuilt.dayone-mac.AnswerDailyPromptIntent()\nDescription:\n    Answer Daily Prompt: Creates new entry from Daily Prompt\nParameterSummary: (Answer Daily Prompt) Answer Daily Prompt\n",
    "com.bloombuilt.dayone-mac.EditEntryIntent": "com.bloombuilt.dayone-mac.EditEntryIntent(entry: Entry(Object))\nParameters:\n    entry:  Entry. Day One Entry.\nDescription:\n    Edit Entry: Opens Day One to the selected entry\nParameterSummary: (Edit ${entry}) Edit ${entry}\n",
    "com.bloombuilt.dayone-mac.CreateTemplateEntryIntent": "com.bloombuilt.dayone-mac.CreateTemplateEntryIntent(journal: Journal(Object), template: Template(Object))\nParameters:\n    journal:  Journal. Day One Journal.\n    template:  Template. Day One Template.\nDescription:\n    Create Template Entry: Create a new template entry in Day One\nParameterSummary: (Create ${template} Entry) Create ${template} Entry\n",
    "com.bloombuilt.dayone-mac.ShowDayIntent": "com.bloombuilt.dayone-mac.ShowDayIntent(date: String)\nParameters:\n    date:  Date.\nDescription:\n    Show On This Day: Opens Day One to On This Day\nParameterSummary: (Show On This Day for ${date}) Show On This Day for ${date}\n",
    "com.bloombuilt.dayone-mac.RecordIntent": "com.bloombuilt.dayone-mac.RecordIntent(media: MediaType(Enum) = \"audio\", journal: Journal(Object), tags: String)\nParameters:\n    media:  Media. Media Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"audio\"(Audio), \"audioTranscribed\"(Audio (transcribed)), \"video\"(Video), \"photo\"(Photo).\n    journal:  Journal. Day One Journal.\n    tags:  Tags.\nDescription:\n    Record: Open Day One and record new media\nParameterSummary: (Record ${media}) Record ${media}\n",
    "com.bloombuilt.dayone-mac.TodayDisplayIntent": "com.bloombuilt.dayone-mac.TodayDisplayIntent(display: TodayDisplayContent(Enum) = \"summary\")\nParameters:\n    display:  Display. Today Display Content. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"summary\"(Summary), \"locations\"(Locations), \"noText\"(No Text).\nDescription:\n    Today Display: Select the info to display\nParameterSummary: () Today Display\n",
    "com.bloombuilt.dayone-mac.INCreateNoteIntent": "com.bloombuilt.dayone-mac.INCreateNoteIntent(title: String, content: NoteContent(Object), groupName: String)\nParameters:\n    title:  Title.\n    content:  Content.\n    groupName:  Group Name.\nDescription:\n    Create Entry: Create a new entry in Day One\nParameterSummary: () Create a new entry in Day One\n",
    "com.brogrammers.charty.NewChartIntent": "com.brogrammers.charty.NewChartIntent(title: String, automaticId: Bool = True, id: String, replaceOthers: Bool) -> Chart Id\n                            : String\nParameters:\n    title:  Title.\n    automaticId:  Automatic ID.\n    id:  ID. This value depends on the value of \"automaticId\". This parameter is only valid when the value of \"automaticId\" is False.\n    replaceOthers:  Replace if needed. This value depends on the value of \"automaticId\". This parameter is only valid when the value of \"automaticId\" is False.\nReturn Value:\n    Chart Id: Chart Id.\nDescription:\n    New Chart: Creates a new chart with the given chart title.\n\nParameters\n\n    - Title\n    A text that'll be used as the new chart's title.\n    If left empty, the chart will be titled \"Untitled Chart\".\n\n    - Automatic ID\n    Defines wether the new chart's ID should be automatically assigned or not.\n    If disabled, two new parameters are added: ID and Replace if needed.\n\n    - ID\n    An unique ID to assign to the new chart. If this parameter is visible, it must be filled.\n\n    - Replace if needed\n    A toggle that defines wether Charty should replace another Chart with the same ID if one is found.\n\nResult\n    This action outputs the chart id of the newly created chart.\nParameterSummary: (Create chart ${title}) Create chart ${title}; (Create chart ${title}) Create chart ${title}\n",
    "com.brogrammers.charty.CopyChartToClipboardIntent": "com.brogrammers.charty.CopyChartToClipboardIntent(chartId: String, exportProfile: String, name: String, appearance: Appearance(Enum) = \"system\", transparent: Bool, width: Integer, height: Integer, titleFontSize: Integer, chartFontSize: Integer, thickenLines: Integer, enlargeMarkers: Integer)\nParameters:\n    chartId:  Chart ID.\n    exportProfile:  Export profile.\n    name:  Profile name.\n    appearance:  Appearance. Appearance. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"system\"(System), \"light\"(Light), \"dark\"(Dark).\n    transparent:  Transparent background.\n    width:  Width.\n    height:  Height.\n    titleFontSize:  Title font size.\n    chartFontSize:  Chart font size.\n    thickenLines:  Thicken lines by.\n    enlargeMarkers:  Enlarge markers by.\nDescription:\n    Copy Chart To Clipboard: Exports the chart with the given ID as an image using the provided export profile, and passes the resulting image to the clipboard.\n\nParameters\n\n    - Chart ID\n    The ID of the chart to export.\n    \n    - Export profile\n    The name of the export profile that'll be used to export the chart as an image.\n    If the \"Create new export profile\" option is chosen, the following parameters will be used to create a new profile and it'll be used to export the chart as an image.\n    \n    - Profile name\n    Only used if the \"Create new export profile\" export profile is chosen.\n    The desired name for the new export profile\n    \n    - Appearance\n    Only used if the \"Create new export profile\" export profile is chosen.\n    Wether the image should respect the system appearance, or if should be overriden.\n    Available options: System, Light and Dark.\n    \n    - Transparent background\n    Only used if the \"Create new export profile\" export profile is chosen.\n    Wether the background for the exported image should be transparent or not.\n    \n    - Width\n    Only used if the \"Create new export profile\" export profile is chosen.\n    The desired width in pixels for the exported image.\n    \n    - Height\n    Only used if the \"Create new export profile\" export profile is chosen.\n    The desired height in pixels for the exported image.\n    \n    - Title font size\n    Only used if the \"Create new export profile\" export profile is chosen.\n    The desired font size in points for the chart's title.\n    \n    - Chart font size\n    Only used if the \"Create new export profile\" export profile is chosen.\n    The desired font size in points for the chart's text.\n    \n    - Thicken lines by\n    Only used if the \"Create new export profile\" export profile is chosen.\n    Additional line thickness to be added to line series so they look better in the exported image.\n    \n    - Enlarge markers by\n    Only used if the \"Create new export profile\" export profile is chosen.\n    Additional size to be added to line and scatter series' markers so they look better in the exported image.\n\nResult\n    The image exported by this action isn't available as a shortcut output, but can be easily accessed using a \"Get Clipboard\" action.\n\nMiscellanea\n    While this action is running, Charty is going to be opened because the shortcut can't render the image itself. After rendering, Charty copies the image to the clipboard and returns control to the Shortcuts app.\n    The best way to use this action is to add a \"Wait to Return\" action after it, so your shortcut will wait for Charty to export the image and will resume it's execution when it gets back control.\nParameterSummary: (Export ${chartId} as an image using ${exportProfile} and copy it to the clipboard) Export ${chartId} as an image using ${exportProfile} and copy it to the clipboard\n",
    "com.brogrammers.charty.GetInfoAllChartsIntent": "com.brogrammers.charty.GetInfoAllChartsIntent() -> Charts data\n                            : String\nReturn Value:\n    Charts data: Charts data.\nDescription:\n    Get Information From All Charts: Gets a dictionary of all charts, indexed by the charts' ids and containing all of the information available for each chart, except series points (for that, use the action Get Series Data).\n\nBelow you can see the result of this action when only one chart has been added to the app.\n\n{\n  \"chartId\": {\n    \"Title\": \"The Hero of Ages\",\n    \"Grid\": {\n      \"Grid color\": \"E6E6E6\",\n      \"Shows grid\": true\n    },\n    \"Border\": {\n      \"Border color\": \"cccccc\",\n      \"Shows border\": true\n    },\n    \"Axes\": {\n      \"X Axis\": {\n        \"Title\": \"Untitled axis\",\n        \"Min\": \"Default minimum\",\n        \"Max\": \"Default maximum\"\n      },\n      \"Left Axis\": {\n        \"Title\": \"Untitled axis\",\n        \"Min\": \"Default minimum\",\n        \"Max\": \"Default maximum\"\n      },\n      \"Right Axis\": {\n        \"Title\": \"Untitled axis\",\n        \"Min\": \"Default minimum\",\n        \"Max\": \"Default maximum\"\n      }\n    },\n    \"Theme\": \"Pastel\",\n    \"Series\": [\n      {\n        \"Label\": \"Actual pace\",\n        \"Type\": \"Line\",\n        \"Uses secondary axis\": false,\n        \"Line width\": \"1\",\n        \"Line style\": \"Solid\",\n        \"Shows markers\": true,\n        \"Marker size\": \"4\"\n      },\n      {\n        \"Label\": \"Expected pace\",\n        \"Type\": \"Line\",\n        \"Uses secondary axis\": false,\n        \"Line width\": \"2\",\n        \"Line style\": \"Dashed\",\n        \"Shows markers\": false,\n        \"Marker size\": \"1\"\n      }\n    ]\n  }\n}\nParameterSummary: (Get info from all charts) Get info from all charts\n",
    "com.brogrammers.charty.DeleteChartIntent": "com.brogrammers.charty.DeleteChartIntent(id: String) -> Result\n                            : String\nParameters:\n    id:  Chart ID.\nReturn Value:\n    Result: Result.\nDescription:\n    Delete Chart: Deletes the chart with the given ID.\n\nParameter\n\n    - Chart ID\n    The ID of the chart to delete.\nParameterSummary: (Delete chart ${id}) Delete chart ${id}\n",
    "com.brogrammers.charty.StyleLineSeriesIntent": "com.brogrammers.charty.StyleLineSeriesIntent(chartId: String, label: String, color: String, fillBelow: Bool, fillColor: String, verticalAxis: Bool, lineWidth: Float = 1.0, lineStyle: LineStyle(Enum) = \"Solid\", showMarkers: Bool = True, markerSize: Float = 4.0, smoothLine: Bool) -> Series Label\n                            : String\nParameters:\n    chartId:  Chart ID.\n    label:  Label.\n    color:  Color (hex code).\n    fillBelow:  Fill below.\n    fillColor:  Fill color (hex code). This value depends on the value of \"fillBelow\". This parameter is only valid when the value of \"fillBelow\" is True.\n    verticalAxis:  Secondary axis.\n    lineWidth:  Line width.\n    lineStyle:  Line style. Line Style. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Solid\"(solid), \"Dashed\"(dashed), \"Dotted\"(dotted).\n    showMarkers:  Show markers.\n    markerSize:  Marker size. This value depends on the value of \"showMarkers\". This parameter is only valid when the value of \"showMarkers\" is True.\n    smoothLine:  Smooth line.\nReturn Value:\n    Series Label: Series Label.\nDescription:\n    Style Line Series: Modifies the attributes of a given line series.\n\nParameters\n\n    - Series Label\n    A text representing the line series that should be modified by this action.\n\n    - Chart ID\n    The ID of the chart into which to look for the desired line series.\n\n    - Color (hex code)\n    A hex code representing a color on the formats ARGB or RGB.\n    Accepted examples: F00 (red), FF0000 (red), 77FF0000 (47% transparent red).\n\n    - Secondary axis\n    A toggle defining wether this series should be plotted against the primary (left) axis or the secondary (right) axis.\n\n    - Line width\n    A number representing the width this line will be drawn.\n\n    - Line style\n    The style to draw this line with: Solid, Dashed or Dotted.\n\n    - Show markers\n    A toggle representing wether Charty should draw markers on each point of this series.\n\n    - Marker size\n    Only available when showing markers\n    A number representing the size with which to draw this series markers.\n\n    - Smooth line\n    A toggle representing wether or not Charty should try to smooth this line series.\n\nResult\n    This action passes through the label of the modified series.\nParameterSummary: (Style series ${label} of chart ${chartId}) Style series ${label} of chart ${chartId}; (Style series ${label} of chart ${chartId}) Style series ${label} of chart ${chartId}; (Style series ${label} of chart ${chartId}) Style series ${label} of chart ${chartId}; (Style series ${label} of chart ${chartId}) Style series ${label} of chart ${chartId}\n",
    "com.brogrammers.charty.StyleScatterSeriesIntent": "com.brogrammers.charty.StyleScatterSeriesIntent(chartId: String, label: String, color: String, verticalAxis: Bool, markerStyle: MarkerStyle(Enum), markerSize: Float = 4.0) -> Series Label\n                            : String\nParameters:\n    chartId:  Chart ID.\n    label:  Label.\n    color:  Color (hex code).\n    verticalAxis:  Secondary axis.\n    markerStyle:  Marker style. Marker Style. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"ChevronDown\"(chevron down), \"ChevronUp\"(chevron up), \"Circle\"(circle), \"Cross\"(cross), \"Square\"(square), \"Triangle\"(triangle), \"X\"(x).\n    markerSize:  Marker size.\nReturn Value:\n    Series Label: Series Label.\nDescription:\n    Style Scatter Series: Modifies the attributes of a given scatter series.\n\nParameters\n\n    - Series Label\n    A text representing the scatter series that should be modified by this action.\n\n    - Chart ID\n    The ID of the chart into which to look for the desired scatter series.\n\n    - Color (hex code)\n    A hex code representing a color on the formats ARGB or RGB.\n    Accepted examples: F00 (red), FF0000 (red), 77FF0000 (47% transparent red).\n\n    - Secondary axis\n    A toggle defining wether this series should be plotted against the primary (left) axis or the secondary (right) axis.\n\n    - Marker style\n    The style with which to draw this series' scatter markers.\n\n    - Marker size\n    A number representing the size with which to draw this series markers\n\nResult\n    This action passes through the label of the modified series.\nParameterSummary: (Style series ${label} of chart ${chartId}) Style series ${label} of chart ${chartId}\n",
    "com.brogrammers.charty.AddSeriesFromCSVIntent": "com.brogrammers.charty.AddSeriesFromCSVIntent(separator: String = \",\", decimalSymbol: String = \".\", seriesType: SeriesType(Enum) = \"line\", barXColumns: String, lineXColumns: String, scatterXColumns: String, donutLabelsColumn: String, pieLabelsColumn: String, barYColumns: String, lineYColumns: String, scatterYColumns: String, donutValuesColumn: String, pieValuesColumn: String, csv: String, chartId: String)\nParameters:\n    separator:  Separator.\n    decimalSymbol:  Decimal symbol.\n    seriesType:  Series type. Series Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"bar\"(Bar), \"line\"(Line), \"scatter\"(Scatter), \"pie\"(Pie), \"donut\"(Donut).\n    barXColumns:  X Columns. This value depends on the value of \"seriesType\". This parameter is only valid when the value of \"seriesType\" is \"bar\".\n    lineXColumns:  X Columns. This value depends on the value of \"seriesType\". This parameter is only valid when the value of \"seriesType\" is \"line\".\n    scatterXColumns:  X Columns. This value depends on the value of \"seriesType\". This parameter is only valid when the value of \"seriesType\" is \"scatter\".\n    donutLabelsColumn:  Labels column. This value depends on the value of \"seriesType\". This parameter is only valid when the value of \"seriesType\" is \"donut\".\n    pieLabelsColumn:  Labels column. This value depends on the value of \"seriesType\". This parameter is only valid when the value of \"seriesType\" is \"pie\".\n    barYColumns:  Y Columns. This value depends on the value of \"seriesType\". This parameter is only valid when the value of \"seriesType\" is \"bar\".\n    lineYColumns:  Y Columns. This value depends on the value of \"seriesType\". This parameter is only valid when the value of \"seriesType\" is \"line\".\n    scatterYColumns:  Y Columns. This value depends on the value of \"seriesType\". This parameter is only valid when the value of \"seriesType\" is \"scatter\".\n    donutValuesColumn:  Values column. This value depends on the value of \"seriesType\". This parameter is only valid when the value of \"seriesType\" is \"donut\".\n    pieValuesColumn:  Values column. This value depends on the value of \"seriesType\". This parameter is only valid when the value of \"seriesType\" is \"pie\".\n    csv:  CSV.\n    chartId:  Chart ID.\nDescription:\n    Add Series from CSV: Adds new series from a CSV file.\n\nParameters\n\n    - CSV\n    A Shortcuts' file object representing a CSV file obtained, for example, with the Get File action.\n    \n    - Chart ID\n    The ID of the chart into which the series should be added.\n    \n    - X Columns\n    Only available for numeric series (Bar, List and Scatter).\n    A list of column names to use as x values for the series.\n    • If X Columns is left empty, the index of each row will be used as the x values;\n    • If X Columns only contains one value, the same column will be used as the x values for all series.\n    \n    - Y Columns\n    Only available for numeric series (Bar, List and Scatter).\n    A list of column names to use as y values for the series.\n    \n    - Labels column\n    Only available for circular series (Donut and Pie).\n    A column name to use as labels for the series.\n    If left empty, the index of each row will be used as the label.\n    \n    - Values column\n    Only available for circular series (Donut and Pie).\n    A column name to use as values for the series.\n    \n    - Separator\n    Defines the CSV column separator.\n    Default value: , (comma).\n    \n    - Decimal\n    Defines the floating point separator.\n    Default value: . (dot).\n    \n    - Series type\n    Defines the type of series that'll be added to the chart.\n    All series added from one given action will have the same type.\n    If you're trying to add multiple series from the same CSV file with different types, you'll have to add an action for each series type.\n\nMiscellanea\n    Expected CSV file format\n    Column 1,Column 2,Column 3\n    0.0, 2.5, 2.0\n    1, 2.9, 5.0\n    ...\n    \n    Series labels are infered from the header on the CSV data for series types Bar, Line and Scatter.\nParameterSummary: (Add series from ${csv} as ${seriesType} to ${chartId} using ${barXColumns} for x values and ${barYColumns} for y values) Add series from ${csv} as ${seriesType} to ${chartId} using ${barXColumns} for x values and ${barYColumns} for y values; (Add series from ${csv} as ${seriesType} to ${chartId}) Add series from ${csv} as ${seriesType} to ${chartId}; (Add series from ${csv} as ${seriesType} to ${chartId} using ${donutLabelsColumn} for labels and ${donutValuesColumn} for values) Add series from ${csv} as ${seriesType} to ${chartId} using ${donutLabelsColumn} for labels and ${donutValuesColumn} for values; (Add series from ${csv} as ${seriesType} to ${chartId} using ${lineXColumns} for x values and ${lineYColumns} for y values) Add series from ${csv} as ${seriesType} to ${chartId} using ${lineXColumns} for x values and ${lineYColumns} for y values; (Add series from ${csv} as ${seriesType} to ${chartId} using ${pieLabelsColumn} for labels and ${pieValuesColumn} for values) Add series from ${csv} as ${seriesType} to ${chartId} using ${pieLabelsColumn} for labels and ${pieValuesColumn} for values; (Add series from ${csv} as ${seriesType} to ${chartId} using ${scatterXColumns} for x values and ${scatterYColumns} for y values) Add series from ${csv} as ${seriesType} to ${chartId} using ${scatterXColumns} for x values and ${scatterYColumns} for y values\n",
    "com.brogrammers.charty.StyleBarSeriesIntent": "com.brogrammers.charty.StyleBarSeriesIntent(chartId: String, label: String, color: String, verticalAxis: Bool, barStack: String, cornerRadius: Float, roundBottomLeft: Bool, roundBottomRight: Bool, roundTopLeft: Bool, roundTopRight: Bool) -> Series Label\n                            : String\nParameters:\n    chartId:  Chart ID.\n    label:  Label.\n    color:  Color (hex code).\n    verticalAxis:  Secondary axis.\n    barStack:  Bar stack.\n    cornerRadius:  Corner Radius.\n    roundBottomLeft:  Round Bottom Left.\n    roundBottomRight:  Round Bottom Right.\n    roundTopLeft:  Round Top Left.\n    roundTopRight:  Round Top Right.\nReturn Value:\n    Series Label: Series Label.\nDescription:\n    Style Bar Series: Modifies the attributes of a given bar series.\n\nParameters\n\n    - Series Label\n    A text representing the bar series that should be modified by this action.\n    \n    - Chart ID\n    The ID of the chart into which to look for the desired bar series.\n    \n    - Color (hex code)\n    A hex code representing a color on the formats ARGB or RGB.\n    Accepted examples: F00 (red), FF0000 (red), 77FF0000 (47% transparent red).\n    \n    - Secondary axis\n    A toggle defining wether this series should be plotted against the primary (left) axis or the secondary (right) axis.\n    \n    - Bar stack\n    A text representing the bar stack that this series should be a part of.\n\nResult\n    This action passes through the label of the modified series.\nParameterSummary: (Style series ${label} of chart ${chartId}) Style series ${label} of chart ${chartId}\n",
    "com.brogrammers.charty.StyleAxisIntent": "com.brogrammers.charty.StyleAxisIntent(chartId: String, axis: AxisType(Enum) = \"xAxis\", labelRotation: String = \"0\", title: String, minimum: Float, maximum: Float, granularity: Float, valueFormatter: ValueFormat(Enum), granularityUnit: GranularityUnit(Enum) = \"days\", precision: String = \"1\", dateFormat: DateFormat(Enum), timeFormat: TimeFormat(Enum), customDateTimeFormat: String = \"dd MMM yyyy HH:mm:ss\", labels: String, correspValues: String) -> Chart Id\n                            : String\nParameters:\n    chartId:  Chart ID.\n    axis:  Axis. Axis Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"xAxis\"(X Axis), \"leftAxis\"(Left Axis), \"rightAxis\"(Right Axis).\n    labelRotation:  Label rotation. This value depends on the value of \"axis\". This parameter is only valid when the value of \"axis\" is \"xAxis\".\n    title:  Title.\n    minimum:  Minimum value.\n    maximum:  Maximum value.\n    granularity:  Granularity.\n    valueFormatter:  Value formatter. Value Format. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"date\"(Date), \"integer\"(Integer), \"float\"(Decimal), \"custom\"(Custom).\n    granularityUnit:  Granularity unit. Granularity Unit. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"days\"(Days), \"hours\"(Hours), \"minutes\"(Minutes), \"seconds\"(Seconds). This value depends on the value of \"valueFormatter\". This parameter is only valid when the value of \"valueFormatter\" is \"date\".\n    precision:  Precision. This value depends on the value of \"valueFormatter\". This parameter is only valid when the value of \"valueFormatter\" is \"float\".\n    dateFormat:  Date format. Date Format. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"none\"(None), \"short\"(Short), \"medium\"(Medium), \"long\"(Long), \"custom\"(Custom). This value depends on the value of \"valueFormatter\". This parameter is only valid when the value of \"valueFormatter\" is \"date\".\n    timeFormat:  Time format. Time Format. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"none\"(None), \"short\"(Short), \"medium\"(Medium), \"long\"(Long). This value depends on the value of \"valueFormatter\". This parameter is only valid when the value of \"valueFormatter\" is \"date\".\n    customDateTimeFormat:  Custom date time format. This value depends on the value of \"valueFormatter\". This parameter is only valid when the value of \"valueFormatter\" is \"date\".\n    labels:  Custom labels. This value depends on the value of \"valueFormatter\". This parameter is only valid when the value of \"valueFormatter\" is \"custom\".\n    correspValues:  Corresponding values. This value depends on the value of \"valueFormatter\". This parameter is only valid when the value of \"valueFormatter\" is \"custom\".\nReturn Value:\n    Chart Id: Chart Id.\nDescription:\n    Style Axis: Use this action to style any of the parameters for a given axis.\n\nParameters\n\n    - Axis\n    The axis that'll be updated: X Axis, Left Axis or Right Axis.\n\n    - Chart ID\n    The ID of the chart whose axis should be modified.\n\n    - Title\n    The desired title for the current axis.\n\n    - Value formatter\n    The value formatter that'll be used to format values on this Axis: Date, Integer, Decimal or Custom.\n\n    - Minimum value\n    The minimum value for this axis' scale.\n\n    - Maximum value\n    The maximum value for this axis' scale.\n\n    - Granularity\n    The desired separation for this axis' ticks.\n\n    - Granularity unit\n    Only available for date formatter.\n    The unit to be used while setting the granularity value: Days, Hours, Minutes or Seconds.\n\n    - Date format\n    Only available for date formatter.\n    The date format to be used while formatting this axis' values.\n    Options: None, Short (01/01/20), Medium (01 Jan 2020), Long (01 January 2020), Custom.\n\n    - Time format\n    Only available for date formatter.\n    The time format to be used while formatting this axis' values.\n    Options: None, Short (10:00), Medium (10:00:00), Long (10:00:00 GMT-3).\n\n    - Custom date time format\n    Only available when custom date format is selected.\n    A text representing a custom format for date time values.\n\n    - Precision\n    Only available for decimal formatter.\n    The precision with which to display decimal values on this axis.\n\n    - Custom labels\n    Only available for custom formatter.\n    A list of labels to be used as labels for this axis.\n\n    - Corresponding values\n    Only available for custom formatter.\n    A list of values for this axis that will be converted on the custom labels provided on the Custom labels parameter.\nParameterSummary: (Style ${axis} of ${chartId} with title ${title} and format values as ${valueFormatter}) Style ${axis} of ${chartId} with title ${title} and format values as ${valueFormatter}; (Style ${axis} of ${chartId} with title ${title} and format values as ${valueFormatter}) Style ${axis} of ${chartId} with title ${title} and format values as ${valueFormatter}; (Style ${axis} of ${chartId} with title ${title} and format values as ${valueFormatter}) Style ${axis} of ${chartId} with title ${title} and format values as ${valueFormatter}; (Style ${axis} of ${chartId} with title ${title} and format values as ${valueFormatter}) Style ${axis} of ${chartId} with title ${title} and format values as ${valueFormatter}; (Style ${axis} of ${chartId} with title ${title} and format values as ${valueFormatter}) Style ${axis} of ${chartId} with title ${title} and format values as ${valueFormatter}; (Style ${axis} of ${chartId} with title ${title} and format values as ${valueFormatter}) Style ${axis} of ${chartId} with title ${title} and format values as ${valueFormatter}; (Style ${axis} of ${chartId} with title ${title} and format values as ${valueFormatter}) Style ${axis} of ${chartId} with title ${title} and format values as ${valueFormatter}; (Style ${axis} of ${chartId} with title ${title} and format values as ${valueFormatter}) Style ${axis} of ${chartId} with title ${title} and format values as ${valueFormatter}\n",
    "com.brogrammers.charty.AddCustomThemeIntent": "com.brogrammers.charty.AddCustomThemeIntent(colors: String, name: String, selectionStrategy: SelectionStrategy(Enum)) -> Theme name\n                            : String\nParameters:\n    colors:  Colors.\n    name:  Name.\n    selectionStrategy:  Selection strategy. Selection Strategy. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"none\"(None), \"twoColors\"(2 colors gradient), \"threeColors\"(3 colors gradient), \"fourColors\"(4 colors gradient).\nReturn Value:\n    Theme name: Theme name.\nDescription:\n    Add Custom Theme: Adds the passed colors as a new theme.\n\nParameters\n\n    - Name\n    The name for the new theme that'll be added. Charty doesn't allow multiple themes with the same name.\n    \n    - Colors\n    A text containing a list of colors separated by new lines. Each color must be a 3, 6 or 8 charactes hex code.\n    \n    - Selection strategy\n    If you're creating a theme with 10 colors using gradients, you can take advantage of Charty's color selection heuristics.\n    Just pick one of the options and Charty will optimize color selection to provide maximum differentiation.\n\nResult\n    This action outputs the name of the created theme.\nParameterSummary: (Add theme ${name} with colors ${colors}) Add theme ${name} with colors ${colors}\n",
    "com.brogrammers.charty.ApplyQuickStyleIntent": "com.brogrammers.charty.ApplyQuickStyleIntent(chartId: String, quickStyle: QuickStyles(Enum), highlightSeries: String, highlightColor: String = \"FF3A30\", otherColor: String = \"BBBBBB\", otherAlpha: Integer = 30, stackName: String, includeChevronDown: Bool = True, includeChevronUp: Bool = True, includeCircle: Bool = True, includeCross: Bool = True, includeSquare: Bool = True, includeTriangle: Bool = True, includeX: Bool = True, markersSize: Float = 4.0) -> Chart Id\n                            : String\nParameters:\n    chartId:  Chart ID.\n    quickStyle:  Quick style. Quick Styles. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"highlightSeries\"(Highlight series), \"stackAllBars\"(Stack all bars), \"modifyMarkers\"(Modify markers).\n    highlightSeries:  Series to highlight. This value depends on the value of \"quickStyle\". This parameter is only valid when the value of \"quickStyle\" is \"highlightSeries\".\n    highlightColor:  Highlight color(s). This value depends on the value of \"quickStyle\". This parameter is only valid when the value of \"quickStyle\" is \"highlightSeries\".\n    otherColor:  Secondary color. This value depends on the value of \"quickStyle\". This parameter is only valid when the value of \"quickStyle\" is \"highlightSeries\".\n    otherAlpha:  Secondary alpha. This value depends on the value of \"quickStyle\". This parameter is only valid when the value of \"quickStyle\" is \"highlightSeries\".\n    stackName:  Stack name. This value depends on the value of \"quickStyle\". This parameter is only valid when the value of \"quickStyle\" is \"stackAllBars\".\n    includeChevronDown:  Include chevron down. This value depends on the value of \"quickStyle\". This parameter is only valid when the value of \"quickStyle\" is \"modifyMarkers\".\n    includeChevronUp:  Include chevron up. This value depends on the value of \"quickStyle\". This parameter is only valid when the value of \"quickStyle\" is \"modifyMarkers\".\n    includeCircle:  Include circle. This value depends on the value of \"quickStyle\". This parameter is only valid when the value of \"quickStyle\" is \"modifyMarkers\".\n    includeCross:  Include cross. This value depends on the value of \"quickStyle\". This parameter is only valid when the value of \"quickStyle\" is \"modifyMarkers\".\n    includeSquare:  Include square. This value depends on the value of \"quickStyle\". This parameter is only valid when the value of \"quickStyle\" is \"modifyMarkers\".\n    includeTriangle:  Include triangle. This value depends on the value of \"quickStyle\". This parameter is only valid when the value of \"quickStyle\" is \"modifyMarkers\".\n    includeX:  Include x. This value depends on the value of \"quickStyle\". This parameter is only valid when the value of \"quickStyle\" is \"modifyMarkers\".\n    markersSize:  Markers' size. This value depends on the value of \"quickStyle\". This parameter is only valid when the value of \"quickStyle\" is \"modifyMarkers\".\nReturn Value:\n    Chart Id: Chart Id.\nDescription:\n    Apply Quick Style: Applies a quick style to the selected chart and series.\n\nParameters\n\n    - Chart ID\n    The ID of the chart to export.\n\n    - Quick style\n    The desired style to be applied: Highlight series, Stack all bars, Modify markers.\n    Highlight series: modifies all series in a chart to highlight one or more series, either by changing the alpha channel or the colors of series;\n    Stack all bars: modifies all bar series in a chart to make them be stacked;\n    Modify markers: updates all scatter series in a chart to use the selected markers and given size.\n\n    - Series to highlight\n    Only available for highlight series.\n    A list of texts, defining all series that should be highlighted.\n\n    - Highlight color(s)\n    Only available for highlight series.\n    A list of hex codes representing the colors to use for the highlighted series.\n    If left empty, theme colors will be used; if only one color is passed, all highlighted series will use the same color.\n    Accepted examples: F00 (red), FF0000 (red), 77FF0000 (47% transparent red)., defining all series that should be highlighted.\n\n    - Secondary color\n    Only available for highlight series.\n    A hex code representing the color to use for non-highlighted series.\n    If left empty, theme colors will be used.\n    Accepted examples: F00 (red), FF0000 (red), 77FF0000 (47% transparent red)., defining all series that should be highlighted.\n\n    - Secondary alpha\n    Only available for highlight series.\n    A number from 0 to 100 representing the alpha value to use for non-highlighted series.\n    If left empty, no changes will be made to the alpha channel.\n\n    - Stack name\n    Only available for stack all bars.\n    A text representing the bar stack that the series should be a part of.\n\n    - Include chevron down\n    Only available for modify markers.\n    A toggle that defines wether chevron down markers should be used.\n\n    - Include chevron up\n    Only available for modify markers.\n    A toggle that defines wether chevron up markers should be used.\n\n    - Include circle\n    Only available for modify markers.\n    A toggle that defines wether circle markers should be used.\n\n    - Include cross\n    Only available for modify markers.\n    A toggle that defines wether cross markers should be used.\n\n    - Include square\n    Only available for modify markers.\n    A toggle that defines wether square markers should be used.\n\n    - Include triangle\n    Only available for modify markers.\n    A toggle that defines wether triangle markers should be used.\n\n    - Include x\n    Only available for modify markers.\n    A toggle that defines wether x markers should be used.\n\n    - Markers' size\n    Only available for modify markers.\n    A number representing the size with which to draw all scatter series markers.\n\nResult\n    This action passes through the chart id parameter.\nParameterSummary: (Apply ${quickStyle} to ${chartId}) Apply ${quickStyle} to ${chartId}; (Apply ${quickStyle} to ${chartId}) Apply ${quickStyle} to ${chartId}; (Apply ${quickStyle} to ${chartId}) Apply ${quickStyle} to ${chartId}; (Apply ${quickStyle} to ${chartId}) Apply ${quickStyle} to ${chartId}\n",
    "com.brogrammers.charty.AddMovingAverageIntent": "com.brogrammers.charty.AddMovingAverageIntent(movingAverageType: MovingAverageType(Enum), windowSize: Integer = 5, centering: MovingAverageCentering(Enum) = \"center\", chartId: String, series: String, seriesLabels: String, seriesType: NumericSeriesType(Enum) = \"line\", lineWidth: Float = 1.0, lineStyle: LineStyle(Enum) = \"Dashed\", smoothLine: Bool = True, showLineMarkers: Bool, lineMarkerSize: Float = 4.0, scatterMarkerSize: Float = 4.0) -> Chart Id\n                            : String\nParameters:\n    movingAverageType:  Moving average. MovingAverageType. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"simple\"(Simple moving average), \"cumulative\"(Cumulative moving average).\n    windowSize:  Window size. This value depends on the value of \"movingAverageType\". This parameter is only valid when the value of \"movingAverageType\" is \"simple\".\n    centering:  Centering. Moving Average Centering. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"left\"(Left), \"center\"(Center), \"right\"(Right). This value depends on the value of \"movingAverageType\". This parameter is only valid when the value of \"movingAverageType\" is \"simple\".\n    chartId:  Chart ID.\n    series:  Series.\n    seriesLabels:  New series labels.\n    seriesType:  Series Type. Numeric Series Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"bar\"(Bar), \"line\"(Line), \"scatter\"(Scatter).\n    lineWidth:  Line width. This value depends on the value of \"seriesType\". This parameter is only valid when the value of \"seriesType\" is \"line\".\n    lineStyle:  Line style. Line Style. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Solid\"(solid), \"Dashed\"(dashed), \"Dotted\"(dotted). This value depends on the value of \"seriesType\". This parameter is only valid when the value of \"seriesType\" is \"line\".\n    smoothLine:  Smooth Line. This value depends on the value of \"seriesType\". This parameter is only valid when the value of \"seriesType\" is \"line\".\n    showLineMarkers:  Show markers. This value depends on the value of \"seriesType\". This parameter is only valid when the value of \"seriesType\" is \"line\".\n    lineMarkerSize:  Marker size. This value depends on the value of \"seriesType\". This parameter is only valid when the value of \"seriesType\" is \"line\".\n    scatterMarkerSize:  Marker size. This value depends on the value of \"seriesType\". This parameter is only valid when the value of \"seriesType\" is \"scatter\".\nReturn Value:\n    Chart Id: Chart Id.\nDescription:\n    Add Moving Average: Adds a moving average series based on the selected series values.\n\nParameters\n\n    - Chart ID\n    The ID of the chart to export.\n\n    - Moving average\n    The desired moving average to be used: Simple or Cumulative.\n    Simple moving average: calculates the average of the last N elements;\n    Cumulative moving average: calculates the average of all elements up to the current point.\n\n    - Series\n    A list of texts, defining all series that should receive moving averages.\n\n    - Window size\n    Only available for simple moving average.\n    A number defining how many past elements should be used for the average.\n\n    - Centering\n    Only available for simple moving average.\n    This parameter defines how the averaging window should be centered.\n    • Center (default): averages N points around the current point;\n    • Left: averages N points from the current point onward;\n    • Right: averages N points leading to the current point.\n    N is the number of points defined in the window size parameter.\n\n    - New series labels\n    A list of texts to label the new moving average series that'll be created. If left empty or if there are less names than series to create, Charty will append (SMA) or (CMA) to the original series label dependending on the moving average type selected.\n\n    - Series type\n    The desired series type of the moving average to be added: Bar, Line or Scatter.\n\n    - Line width\n    Only available for Line series.\n    A number representing the width with which this line will be drawn.\n\n    - Line style\n    Only available for Line series.\n    The style to draw the line with: Solid, Dashed or Dotted.\n\n    - Show markers\n    Only available for Line series.\n    A toggle representing wether Charty should draw markers on each point of this series.\n\n    - Smooth line\n    Only available for Line series.\n    A toggle representing wether or not Charty should try to smooth this line series.\n\n    - Marker size\n    Only available for Line and Scatter series.\n    A number representing the size with which to draw this series markers.\n\nResult\n    This action passes through the chart id parameter.\nParameterSummary: (Add ${movingAverageType} to ${chartId} for ${series} as ${seriesType}) Add ${movingAverageType} to ${chartId} for ${series} as ${seriesType}; (Add ${movingAverageType} to ${chartId} for ${series} as ${seriesType}) Add ${movingAverageType} to ${chartId} for ${series} as ${seriesType}; (Add ${movingAverageType} to ${chartId} for ${series} as ${seriesType}) Add ${movingAverageType} to ${chartId} for ${series} as ${seriesType}; (Add ${movingAverageType} to ${chartId} for ${series} using last ${windowSize} elements as ${seriesType}) Add ${movingAverageType} to ${chartId} for ${series} using last ${windowSize} elements as ${seriesType}; (Add ${movingAverageType} to ${chartId} for ${series} using last ${windowSize} elements as ${seriesType}) Add ${movingAverageType} to ${chartId} for ${series} using last ${windowSize} elements as ${seriesType}; (Add ${movingAverageType} to ${chartId} for ${series} using last ${windowSize} elements as ${seriesType}) Add ${movingAverageType} to ${chartId} for ${series} using last ${windowSize} elements as ${seriesType}\n",
    "com.brogrammers.charty.AddAverageIntent": "com.brogrammers.charty.AddAverageIntent(chartId: String, series: String, seriesLabels: String, seriesType: NumericSeriesType(Enum) = \"line\", lineWidth: Float = 1.0, lineStyle: LineStyle(Enum) = \"Dashed\", showLineMarkers: Bool, lineMarkerSize: Float = 4.0, scatterMarkerSize: Float = 4.0, input: AverageOptions(Enum) = \"allPoints\", startIndex: Integer, endIndex: Integer) -> Chart Id\n                            : String\nParameters:\n    chartId:  Chart ID.\n    series:  Series.\n    seriesLabels:  New series labels.\n    seriesType:  Series Type. Numeric Series Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"bar\"(Bar), \"line\"(Line), \"scatter\"(Scatter).\n    lineWidth:  Line width. This value depends on the value of \"seriesType\". This parameter is only valid when the value of \"seriesType\" is \"line\".\n    lineStyle:  Line style. Line Style. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Solid\"(solid), \"Dashed\"(dashed), \"Dotted\"(dotted). This value depends on the value of \"seriesType\". This parameter is only valid when the value of \"seriesType\" is \"line\".\n    showLineMarkers:  Show markers. This value depends on the value of \"seriesType\". This parameter is only valid when the value of \"seriesType\" is \"line\".\n    lineMarkerSize:  Marker size. This value depends on the value of \"seriesType\". This parameter is only valid when the value of \"seriesType\" is \"line\".\n    scatterMarkerSize:  Marker size. This value depends on the value of \"seriesType\". This parameter is only valid when the value of \"seriesType\" is \"scatter\".\n    input:  Input. Average Options. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"allPoints\"(All points), \"pointsInRange\"(Points in range).\n    startIndex:  Start index. This value depends on the value of \"input\". This parameter is only valid when the value of \"input\" is \"pointsInRange\".\n    endIndex:  End index. This value depends on the value of \"input\". This parameter is only valid when the value of \"input\" is \"pointsInRange\".\nReturn Value:\n    Chart Id: Chart Id.\nDescription:\n    Add Average: Adds a new series based on the average of other selected series.\n\nParameters\n\n    - Chart ID\n    The ID of the chart to export.\n\n    - Series\n    A list of texts, defining all series that should receive moving averages.\n\n    - Series type\n    The desired series type of the moving average to be added: Bar, Line or Scatter.\n\n    - Input\n    The points to be used: All points or Points in range.\n    All points: calculates the average of all points on that series;\n    Points in Range: calculates the average of points between start and end indexes (inclusively).\n\n    - Start index\n    Only available for Points in range\n    The index of the first point to be considered in the average. If left empty, Charty will start at the first element of the series.\n\n    - End index\n    Only available for Points in range\n    The index of the last point to be considered in the average. If left empty, Charty will end at the last element of the series.\n\n    - New series labels\n    A list of texts to label the new average series that'll be created. If left empty or if there are less names than series to create, Charty will append (Avg.) or (Avg. A to B) to the original series label dependending on the input selected.\"),\n\n    - Line width\n    Only available for Line series.\n    A number representing the width with which this line will be drawn.\n\n    - Line style\n    Only available for Line series.\n    The style to draw the line with: Solid, Dashed or Dotted.\n\n    - Smooth line\n    Only available for Line series.\n    A toggle representing whether or not Charty should try to smooth this line series.\n\n    - Show markers\n    Only available for Line series.\n    A toggle representing whether Charty should draw markers on each point of this series.\n\n    - Marker size\n    Only available for Line and Scatter series.\n    A number representing the size with which to draw this series markers.\n\nResult\n    This action passes through the chart id parameter.\nParameterSummary: (Add average to ${chartId} for ${series} as ${seriesType} using ${input}) Add average to ${chartId} for ${series} as ${seriesType} using ${input}; (Add average to ${chartId} for ${series} as ${seriesType} using ${input} ${startIndex} to ${endIndex}) Add average to ${chartId} for ${series} as ${seriesType} using ${input} ${startIndex} to ${endIndex}; (Add average to ${chartId} for ${series} as ${seriesType} using ${input} ${startIndex} to ${endIndex}) Add average to ${chartId} for ${series} as ${seriesType} using ${input} ${startIndex} to ${endIndex}; (Add average to ${chartId} for ${series} as ${seriesType} using ${input}) Add average to ${chartId} for ${series} as ${seriesType} using ${input}; (Add average to ${chartId} for ${series} as ${seriesType} using ${input}) Add average to ${chartId} for ${series} as ${seriesType} using ${input}; (Add average to ${chartId} for ${series} as ${seriesType} using ${input} ${startIndex} to ${endIndex}) Add average to ${chartId} for ${series} as ${seriesType} using ${input} ${startIndex} to ${endIndex}\n",
    "com.brogrammers.charty.StyleDonutPieSeriesIntent": "com.brogrammers.charty.StyleDonutPieSeriesIntent(chartId: String, seriesLabel: String, labels: String, colors: String) -> Chart Id\n                            : String\nParameters:\n    chartId:  Chart ID.\n    seriesLabel:  Series label.\n    labels:  Labels.\n    colors:  Colors (hex codes).\nReturn Value:\n    Chart Id: Chart Id.\nDescription:\n    Style Donut/Pie Series: Modifies the colors of the values of a given donut or pie series.\n\nParameters\n\n    - Series Label\n    A text representing the scatter series that should be modified by this action.\n\n    - Chart ID\n    The ID of the chart into which to look for the desired scatter series.\n\n    - Colors (hex codes)\n    A list of hex codes representing the colors on the formats ARGB or RGB.\n    If there's less colors than values on the series, only the first values' colors will be changed.\n    Accepted examples: F00 (red), FF0000 (red), 77FF0000 (47% transparent red).\n\n    - Labels\n    A list of labels for the values whose colors should be changed.\n    If it's left empty, the colors will be applied in a reverse value order.\n\nResult\n    This action passes through the Id of the chart.\nParameterSummary: (Style series ${seriesLabel} of chart ${chartId} setting ${colors} to ${labels}) Style series ${seriesLabel} of chart ${chartId} setting ${colors} to ${labels}\n",
    "com.charliemchapman.dark-noise.StartNoiseIntent": "com.charliemchapman.dark-noise.StartNoiseIntent(noise: NoiseIntentItem(Object))\nParameters:\n    noise:  Noise. Noise Intent Item.\nDescription:\n    Start Noise: Start a noise\nParameterSummary: (Start ${noise}) Start ${noise}\n",
    "com.charliemchapman.dark-noise.StartNoiseWithDurationIntent": "com.charliemchapman.dark-noise.StartNoiseWithDurationIntent(noise: NoiseIntentItem(Object), duration: TimeInterval(Object) = 1.0)\nParameters:\n    noise:  Noise. Noise Intent Item.\n    duration:  Duration.\nDescription:\n    Start Noise With Duration: Start a noise that will stop after the specified duration\nParameterSummary: (Start ${noise} for ${duration}) Start ${noise} for ${duration}\n",
    "com.charliemchapman.dark-noise.StartNoiseWithStopTimeIntent": "com.charliemchapman.dark-noise.StartNoiseWithStopTimeIntent(noise: NoiseIntentItem(Object), stopTime: String)\nParameters:\n    noise:  Noise. Noise Intent Item.\n    stopTime:  Stop Time.\nDescription:\n    Start Noise With Stop Time: Start a noise that will stop at the specified time\nParameterSummary: (Start ${noise} and stop at ${stopTime}) Start ${noise} and stop at ${stopTime}\n",
    "com.charliemchapman.dark-noise.SetMixAudioIntent": "com.charliemchapman.dark-noise.SetMixAudioIntent(setMixAudioMode: SetMixAudioMode(Enum) = \"turn\", isOn: Bool = True)\nParameters:\n    setMixAudioMode:  Operation. SetMixAudioMode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"turn\"(Turn), \"toggle\"(Toggle).\n    isOn:  On. This value depends on the value of \"setMixAudioMode\". This parameter is only valid when the value of \"setMixAudioMode\" is \"turn\".\nDescription:\n    Set Mix Audio: Set Mix Audio on or off\nParameterSummary: (${setMixAudioMode} Mix Audio ${isOn}) ${setMixAudioMode} Mix Audio ${isOn}; (${setMixAudioMode}Mix Audio) ${setMixAudioMode}Mix Audio\n",
    "com.charliemchapman.dark-noise.RunNoiseIntent": "com.charliemchapman.dark-noise.RunNoiseIntent(noise: RunNoiseIntentItem(Object), timerType: TimerType(Enum) = \"none\", timer: String, duration: TimeInterval(Object) = 5.0, fadeDurationForDuration: TimeInterval(Object), fadeDurationForTime: TimeInterval(Object))\nParameters:\n    noise:  Noise. Run Noise Intent Item.\n    timerType:  Timer Type. Timer Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"time\"(Time), \"duration\"(Duration), \"none\"(None).\n    timer:  Timer. This value depends on the value of \"timerType\". This parameter is only valid when the value of \"timerType\" is \"time\".\n    duration:  Duration. This value depends on the value of \"timerType\". This parameter is only valid when the value of \"timerType\" is \"duration\".\n    fadeDurationForDuration:  Fade Duration. This value depends on the value of \"timerType\". This parameter is only valid when the value of \"timerType\" is \"duration\".\n    fadeDurationForTime:  Fade Duration. This value depends on the value of \"timerType\". This parameter is only valid when the value of \"timerType\" is \"time\".\nDescription:\n    Play Noise: Play a noise\nParameterSummary: (Play ${noise}) Play ${noise}; (Play ${noise}) Play ${noise}\n",
    "com.charliemchapman.dark-noise.FindNoiseIntent": "com.charliemchapman.dark-noise.FindNoiseIntent(noiseName: String) -> Noise\n                            : RunNoiseIntentItem(Object)\nParameters:\n    noiseName:  Noise Name.\nReturn Value:\n    Noise: Noise. Run Noise Intent Item.\nDescription:\n    Find Noise: Find a noise by it's name\nParameterSummary: (Find ${noiseName}) Find ${noiseName}\n",
    "com.charliemchapman.dark-noise.PlayPauseNoiseIntent": "com.charliemchapman.dark-noise.PlayPauseNoiseIntent(noiseId: String, timer: TimerTypeIntent(Enum), time: String, duration: Float, fadeDuration: Float, logFrom: String, playType: PlayType(Enum))\nParameters:\n    noiseId: Selected noise.\n    timer: Timer. Timer Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"time\"(Time), \"duration\"(Duration), \"none\"(None).\n    time: Time.\n    duration: Duration.\n    fadeDuration: Fade duration.\n    logFrom: Log From.\n    playType: playType. Play Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"play\"(Play), \"pause\"(Pause), \"next\"(Next), \"previous\"(Previous).\nDescription:\n    Play Pause Noise: Toggles playback on a specific noise.\nParameterSummary: () Play Pause Noise\n",
    "com.christianselig.Apollo.OpenSubredditIntent": "com.christianselig.Apollo.OpenSubredditIntent(subreddit: String)\nParameters:\n    subreddit:  Subreddit.\nDescription:\n    Open Subreddit: Open a subreddit in Apollo\nParameterSummary: (Open r/${subreddit}) Open r/${subreddit}\n",
    "com.christianselig.Apollo.OpenUserIntent": "com.christianselig.Apollo.OpenUserIntent(username: String)\nParameters:\n    username:  Username.\nDescription:\n    Open User: Open a user in Apollo\nParameterSummary: (Open user ${username}) Open user ${username}\n",
    "com.christianselig.Apollo.OpenHomeIntent": "com.christianselig.Apollo.OpenHomeIntent()\nDescription:\n    Open Home feed: Opens Home feed in Apollo\nParameterSummary: () Open Home feed\n",
    "com.christianselig.Apollo.OpenMultiredditIntent": "com.christianselig.Apollo.OpenMultiredditIntent(multiredditName: String)\nParameters:\n    multiredditName:  Multireddit Name.\nDescription:\n    Open Multireddit: Open a multireddit in Apollo\nParameterSummary: (Open multireddit ${multiredditName}) Open multireddit ${multiredditName}\n",
    "com.fandango.fandango.UpcomingOrderIntent": "com.fandango.fandango.UpcomingOrderIntent()\nDescription:\n    See My Ticket: See recent movie tickets\nParameterSummary: (See recent movie tickets) See recent movie tickets\n",
    "com.fifteenjugglers.solarwatch.ComputeSolarEventTimeIntent": "com.fifteenjugglers.solarwatch.ComputeSolarEventTimeIntent(location: Placemark(Object), date: String, solarEvent: SolarEvent(Enum)) -> Solar Event Date\n                            : String\nParameters:\n    location:  Location.\n    date:  Date.\n    solarEvent:  Solar Event. Solar Event. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"sunrise\"(Sunrise), \"sunset\"(Sunset), \"goldenHourEnd\"(Golden Hour End), \"goldenHourBegin\"(Golden Hour Begin), \"civilTwilightBegin\"(Civil Twilight Begin), \"civilTwilightEnd\"(Civil Twilight End), \"nauticalTwilightBegin\"(Nautical Twilight Begin), \"nauticalTwilightEnd\"(Nautical Twilight End), \"astronomicalTwilightBegin\"(Astronomical Twilight Begin), \"astronomicalTwilightEnd\"(Astronomical Twilight End), \"solarNoon\"(Solar Noon), \"solarMidnight\"(Solar Midnight), \"dayDuration\"(Day Duration), \"nightDuration\"(Night Duration).\nReturn Value:\n    Solar Event Date: Solar Event Date.\nDescription:\n    Compute Time for single solar event: Get the time for a specific solar event at a location on a specific date\nParameterSummary: (Exact time for a ${solarEvent} at ${location} on ${date}) Exact time for a ${solarEvent} at ${location} on ${date}\n",
    "com.fifteenjugglers.solarwatch.ComputeAllEventTimesIntent": "com.fifteenjugglers.solarwatch.ComputeAllEventTimesIntent(location: Placemark(Object), date: String) -> Solar Event Times\n                            : IntentEventTuple(Object)\nParameters:\n    location:  Location.\n    date:  Date.\nReturn Value:\n    Solar Event Times: Solar Event Times. Solar Event Tuple.\nDescription:\n    Compute All Solar Event Times: Get the times for all solars event at a location on a specific date\nParameterSummary: (Times for all solar events at ${location} on ${date}) Times for all solar events at ${location} on ${date}\n",
    "com.getcardpointers.app.FindBestCardIntent": "com.getcardpointers.app.FindBestCardIntent(richCategory: RichCategory(Object), orderBy: CPCategoryOrder(Enum) = \"alphabetical\") -> Best Category Card\n                            : BestCardDetails(Object)\nParameters:\n    richCategory:  Purchase Type. Category.\n    orderBy:  Pointer Order. Pointer Order. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"alphabetical\"(Alphabetical), \"lastViewed\"(Last Viewed), \"mirrorApp\"(Mirror App).\nReturn Value:\n    Best Category Card: Best Category Card. Best Category Card Details.\nDescription:\n    Show the Best Card To Use: Show the best credit card to use for each type of purchase to help maximize the points you earn every day. The output will contain a number of different fields.\nParameterSummary: (Best ${richCategory} Card) Best ${richCategory} Card\n",
    "com.getcardpointers.app.GetAllCardsIntent": "com.getcardpointers.app.GetAllCardsIntent() -> Card\n                            : CardDetails(Object)\nReturn Value:\n    Card: Card. Card Details.\nDescription:\n    Get All Cards: Get all cards in account. The output will contain a number of different fields for each card.\nParameterSummary: (Get all cards in account) Get all cards in account\n",
    "com.getcardpointers.app.CardFocusFilter": "com.getcardpointers.app.CardFocusFilter(showCardType: CardType(Enum) = \"both\", showForeignFeeCards: Bool = \"1\")\nParameters:\n    showCardType: Cards. Card Types. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"personal\"(Personal), \"business\"(Business), \"both\"(Both).\n    showForeignFeeCards: Include Cards w/Foreign Fees.\nDescription:\n    Filter Visible Cards: See only the cards you want to. For example, only see business cards when you're working, or hide cards with foreign transaction fees when traveling.\nParameterSummary: () Filter Visible Cards\n",
    "com.getcardpointers.app.ChaseStatusIntent": "com.getcardpointers.app.ChaseStatusIntent()\nDescription:\n    Show 5/24 Status: Show your Chase 5/24 status.\nParameterSummary: () Show 5/24 Status\n",
    "com.getcardpointers.app.InteractivePointersConfigurationAppIntent": "com.getcardpointers.app.InteractivePointersConfigurationAppIntent(sortOrder: InteractivePointersSortOrderEnum(Enum) = \"1\")\nParameters:\n    sortOrder: Sort Order. Sort Order. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"1\"(Recently Viewed), \"2\"(Favorites).\nDescription:\n    Configure Pointers: This is an example widget.\nParameterSummary: () Configure Pointers\n",
    "com.getcardpointers.app.OpenCardIntent": "com.getcardpointers.app.OpenCardIntent(card: CardEntity(Object))\nParameters:\n    card: Card. Card to open in-app. Best Card Details.\nDescription:\n    Open Card: Open the selected card in the CardPointers app.\nParameterSummary: (card) Open ${card} in CardPointers\n",
    "com.getcardpointers.app.OpenOfferIntent": "com.getcardpointers.app.OpenOfferIntent(card: CardEntity(Object))\nParameters:\n    card: Best Card. Offer to open in-app. Best Card Details.\nDescription:\n    Open Offer: Open the selected offer category in the CardPointers app.\nParameterSummary: (card) Open ${card} offer in CardPointers\n",
    "com.getcardpointers.app.OpenPointerIntent": "com.getcardpointers.app.OpenPointerIntent(card: CardEntity(Object))\nParameters:\n    card: Best Card. Pointer to open in-app. Best Card Details.\nDescription:\n    Open Pointer: Open the selected pointer category in the CardPointers app.\nParameterSummary: (card) Open ${card} pointer category in CardPointers\n",
    "com.getcardpointers.app.OpenRealityIntent": "com.getcardpointers.app.OpenRealityIntent()\nDescription:\n    Open in AR: Open CardPointers in AR mode.\nParameterSummary: () Open CardPointers in AR\n",
    "com.getcardpointers.app.OpenSearchIntent": "com.getcardpointers.app.OpenSearchIntent(searchQuery: String)\nParameters:\n    searchQuery: Text. Text to search for in-app.\nDescription:\n    Open Search: Perform a search for the input string in the CardPointers app.\nParameterSummary: (searchQuery) Search for ${searchQuery} in CardPointers\n",
    "com.getcardpointers.app.ShowCurrentLocationIntent": "com.getcardpointers.app.ShowCurrentLocationIntent() -> Best Card for Nearest Store\n                            : CardEntity(Object)\nReturn Value:\n    Best Card for Nearest Store: Best Card Details.\nDescription:\n    Best Card for Nearest Store: Show which card to use for the store nearest to you.\nParameterSummary: () Best Card for Nearest Store\n",
    "com.getcardpointers.app.ShowNearbyLocationsIntent": "com.getcardpointers.app.ShowNearbyLocationsIntent(whichNearbyLocation: WhichNearbyLocation(Object)) -> Best Card for Stores Nearby\n                            : CardEntity(Object)\nParameters:\n    whichNearbyLocation: Nearby Location. Nearby Store.\nReturn Value:\n    Best Card for Stores Nearby: Best Card Details.\nDescription:\n    Best Card for Stores Nearby: Show a list of nearby stores and which card to use at each one.\nParameterSummary: (whichNearbyLocation) Show the best card to use for ${whichNearbyLocation} purchases\n",
    "com.getcardpointers.app.StartShoppingIntent": "com.getcardpointers.app.StartShoppingIntent()\nDescription:\n    Start AutoPilot: Start AutoPilot to know which card to use at each store, right on your lock screen.\nParameterSummary: () Start AutoPilot\n",
    "com.getcardpointers.app.StopShoppingIntent": "com.getcardpointers.app.StopShoppingIntent()\nDescription:\n    Stop AutoPilot: Stop AutoPilot live activity.\nParameterSummary: () Stop AutoPilot\n",
    "com.getcardpointers.app.SummaryOverviewIntent": "com.getcardpointers.app.SummaryOverviewIntent()\nDescription:\n    Show Account Summary: Show a summary of your CardPointers account.\nParameterSummary: () Show Account Summary\n",
    "com.getcardpointers.app.UpdateNearbyLocationsIntent": "com.getcardpointers.app.UpdateNearbyLocationsIntent()\nDescription:\n    Update Nearby Locations: Update nearby locations for widget.\nParameterSummary: () Update Nearby Locations\n",
    "com.getcardpointers.app.WhichCardIntent": "com.getcardpointers.app.WhichCardIntent(whichCardType: WhichCardType(Object), purchaseName: String) -> Best Card Wizard\n                            : CardEntity(Object)\nParameters:\n    whichCardType: Store/Category. Type of Purchase.\n    purchaseName: Search Query.\nReturn Value:\n    Best Card Wizard: Best Card Details.\nDescription:\n    Best Card Wizard: Know which of your cards to use for every purchase to earn more points and save money.\nParameterSummary: (whichCardType,purchaseName) Show the best card to use for ${whichCardType} purchases\n",
    "com.google.OPA.OPAAskGoogleIntent": "com.google.OPA.OPAAskGoogleIntent(question: String = \"question\")\nParameters:\n    question:  question.\nDescription:\n    Ask Google: Ask Google a question about something\nParameterSummary: () Hey Google; (question) Hey Google, ${question}\n",
    "com.google.chrome.ios.OpenInChromeIntent": "com.google.chrome.ios.OpenInChromeIntent(url: String)\nParameters:\n    url:  URL.\nDescription:\n    Open URLs in Chrome\nParameterSummary: (Open ${url}) Open ${url}\n",
    "com.google.chrome.ios.SearchInChromeIntent": "com.google.chrome.ios.SearchInChromeIntent(searchPhrase: String)\nParameters:\n    searchPhrase:  Search phrase.\nDescription:\n    Search in Chrome\nParameterSummary: (Search ${searchPhrase} in Chrome) Search ${searchPhrase} in Chrome\n",
    "com.google.chrome.ios.OpenInChromeIncognitoIntent": "com.google.chrome.ios.OpenInChromeIncognitoIntent(url: String)\nParameters:\n    url:  URL.\nDescription:\n    Open URLs In Chrome Incognito\nParameterSummary: (Open ${url} in Incognito) Open ${url} in Incognito\n",
    "com.google.chrome.ios.AddReadingListItemToChromeIntent": "com.google.chrome.ios.AddReadingListItemToChromeIntent(url: String)\nParameters:\n    url:  URL.\nDescription:\n    Add Reading List Item to Chrome\nParameterSummary: (Add ${url} to reading list) Add ${url} to reading list\n",
    "com.google.chrome.ios.AddBookmarkToChromeIntent": "com.google.chrome.ios.AddBookmarkToChromeIntent(url: String)\nParameters:\n    url:  URL.\nDescription:\n    Add Bookmark to Chrome\nParameterSummary: (Add ${url} to bookmarks) Add ${url} to bookmarks\n",
    "com.google.chrome.ios.OpenReadingListIntent": "com.google.chrome.ios.OpenReadingListIntent()\nDescription:\n    See chrome reading list\nParameterSummary: (See Chrome Reading List) See Chrome Reading List\n",
    "com.google.chrome.ios.OpenBookmarksIntent": "com.google.chrome.ios.OpenBookmarksIntent()\nDescription:\n    See Chrome Bookmarks\nParameterSummary: (See Chrome Bookmarks) See Chrome Bookmarks\n",
    "com.google.chrome.ios.OpenRecentTabsIntent": "com.google.chrome.ios.OpenRecentTabsIntent()\nDescription:\n    See Recent Tabs In Chrome\nParameterSummary: (See Recent Tabs In Chrome) See Recent Tabs In Chrome\n",
    "com.google.chrome.ios.OpenTabGridIntent": "com.google.chrome.ios.OpenTabGridIntent()\nDescription:\n    Visit The Tab Grid In Chrome\nParameterSummary: (Visit The Tab Grid In Chrome) Visit The Tab Grid In Chrome\n",
    "com.google.chrome.ios.SearchWithVoiceIntent": "com.google.chrome.ios.SearchWithVoiceIntent()\nDescription:\n    Search with voice in Chrome\nParameterSummary: (Search with voice in Chrome) Search with voice in Chrome\n",
    "com.google.chrome.ios.OpenNewTabIntent": "com.google.chrome.ios.OpenNewTabIntent()\nDescription:\n    Open new tab in Chrome\nParameterSummary: (Open new tab in Chrome) Open new tab in Chrome\n",
    "com.google.chrome.ios.PlayDinoGameIntent": "com.google.chrome.ios.PlayDinoGameIntent()\nDescription:\n    Play Chrome Dino Game\nParameterSummary: (Play Chrome Dino Game) Play Chrome Dino Game\n",
    "com.google.chrome.ios.SetChromeDefaultBrowserIntent": "com.google.chrome.ios.SetChromeDefaultBrowserIntent()\nDescription:\n    Set Chrome As Default Browser\nParameterSummary: (Set Chrome As Default Browser) Set Chrome As Default Browser\n",
    "com.google.chrome.ios.ViewHistoryIntent": "com.google.chrome.ios.ViewHistoryIntent()\nDescription:\n    View Your Chrome History\nParameterSummary: (View Your Chrome History) View Your Chrome History\n",
    "com.google.chrome.ios.OpenNewIncognitoTabIntent": "com.google.chrome.ios.OpenNewIncognitoTabIntent()\nDescription:\n    Open Chrome Incognito Tab\nParameterSummary: (Open Chrome Incognito Tab) Open Chrome Incognito Tab\n",
    "com.google.chrome.ios.ManagePaymentMethodsIntent": "com.google.chrome.ios.ManagePaymentMethodsIntent()\nDescription:\n    Manage Payment Methods in Chrome\nParameterSummary: (Manage Payment Methods in Chrome) Manage Payment Methods in Chrome\n",
    "com.google.chrome.ios.RunSafetyCheckIntent": "com.google.chrome.ios.RunSafetyCheckIntent()\nDescription:\n    Run Chrome Safety Check\nParameterSummary: (Run Chrome Safety Check) Run Chrome Safety Check\n",
    "com.google.chrome.ios.ManagePasswordsIntent": "com.google.chrome.ios.ManagePasswordsIntent()\nDescription:\n    Manage passwords in Chrome\nParameterSummary: (Manage passwords in Chrome) Manage passwords in Chrome\n",
    "com.google.chrome.ios.ManageSettingsIntent": "com.google.chrome.ios.ManageSettingsIntent()\nDescription:\n    Manage Chrome Settings\nParameterSummary: (Manage Chrome Settings) Manage Chrome Settings\n",
    "com.google.chrome.ios.OpenLatestTabIntent": "com.google.chrome.ios.OpenLatestTabIntent()\nDescription:\n    Open My Latest Tab in Chrome\nParameterSummary: (Open My Latest Tab in Chrome) Open My Latest Tab in Chrome\n",
    "com.google.chrome.ios.OpenLensIntent": "com.google.chrome.ios.OpenLensIntent()\nDescription:\n    Search Visuals in Chrome\nParameterSummary: (Search Visuals in Chrome.) Search Visuals in Chrome.\n",
    "com.google.chrome.ios.ClearBrowsingDataIntent": "com.google.chrome.ios.ClearBrowsingDataIntent()\nDescription:\n    Clear Browsing Data in Chrome\nParameterSummary: (Clear Browsing Data in Chrome.) Clear Browsing Data in Chrome.\n",
    "com.grailr.CARROTweather.CurrentForecastIntent": "com.grailr.CARROTweather.CurrentForecastIntent(location: Placemark(Object), forecastType: ForecastType(Enum) = \"current\", dataType: DataType(Enum) = \"temperature\", timeThreshold: TimeThreshold(Enum)) -> Spoken Text\n                            : String\nParameters:\n    location:  Location.\n    forecastType:  Forecast Type. Forecast. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"current\"(Current Observations), \"hourly\"(Hourly Forecast), \"daily\"(Daily Forecast).\n    dataType:  Data Point. Data. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"temperature\"(Temperature), \"wind\"(Wind Speed), \"uvIndex\"(UV Index), \"precipChance\"(Precipitation Chance), \"humidity\"(Humidity), \"pressure\"(Pressure), \"dewPoint\"(Dew Point), \"visibility\"(Visibility), \"sunriseSunset\"(Sunrise and Sunset), \"moonPhase\"(Moon Phase), \"feelsLike\"(Feels Like), \"hiAndLo\"(High and Low), \"cloudCover\"(Cloud Cover), \"precipAmount\"(Precipitation Amount), \"tempAltUnits\"(Opposite Temperature), \"rainReport\"(Rain Report), \"condition\"(Weather Condition), \"high\"(High Temperature), \"low\"(Low Temperature), \"summary\"(Weather Summary), \"sunrise\"(Sunrise), \"sunset\"(Sunset), \"windDirection\"(Wind Direction), \"airQuality\"(Air Quality), \"pollen\"(Pollen).\n    timeThreshold:  Time. Time. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"now\"(Current), \"today\"(Today's), \"tomorrow\"(Tomorrow's).\nReturn Value:\n    Spoken Text: Spoken Text.\nDescription:\n    Get Weather Report: Get the weather for a specified location.\nParameterSummary: (Get ${forecastType} for ${location}) Get ${forecastType} for ${location}\n",
    "com.grailr.CARROTweather.InteractionIntent": "com.grailr.CARROTweather.InteractionIntent(interactionType: InteractionType(Enum))\nParameters:\n    interactionType:  Interaction. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"task\"(Get a task from CARROT), \"poke\"(\"Interact\" with CARROT), \"copy\"(Copy Weather Data to Clipboard), \"location\"(Get Location from Clipboard).\nDescription:\n    Interaction: Talk with CARROT\nParameterSummary: (interactionType) ${interactionType}\n",
    "com.grailr.CARROTweather.WidgetMapIntent": "com.grailr.CARROTweather.WidgetMapIntent(style: MapStyle(Enum) = \"light\", zoomLevel: ZoomLevel(Enum) = \"county\", locationMarker: Bool = True, layers: MapLayer(Object))\nParameters:\n    style:  Map Style. Map Style. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"system\"(System), \"light\"(Light), \"dark\"(Dark), \"satellite\"(Satellite).\n    zoomLevel:  Zoom Level. Zoom Level. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"city\"(City), \"county\"(County), \"region\"(Region), \"continent\"(Continent).\n    locationMarker:  Show Location Marker.\n    layers:  Layers. Map Layer.\nDescription:\n    Map Configuration: Map widget\nParameterSummary: () Map Configuration\n",
    "com.grailr.CARROTweather.WidgetForecastIntent": "com.grailr.CARROTweather.WidgetForecastIntent(bgColor: BGColor(Enum) = \"conditionGradient\", layout: WidgetLayout(Enum) = \"automatic\", precipitation: Bool = True, alerts: Bool = True, feelsLike: Bool, dataPoints: DataPoint(Object))\nParameters:\n    bgColor:  Background. BG Color. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"conditionGradient\"(Condition), \"conditionGradientAlt\"(Condition (Alt)), \"system\"(System), \"white\"(White), \"black\"(Black), \"blue\"(Blue), \"red\"(Red), \"green\"(Green), \"purple\"(Purple), \"orange\"(Orange), \"gray\"(Gray), \"pureBlack\"(True Black).\n    layout:  Layout. Widget Layout. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"automatic\"(Automatic), \"hourly\"(Always Hourly), \"daily\"(Always Daily).\n    precipitation:  Show Precip Info. This value depends on the value of \"layout\". This parameter is only valid when the value of \"layout\" is \"automatic\".\n    alerts:  Show Weather Alerts.\n    feelsLike:  Show Feels Like.\n    dataPoints:  Data Points. Data Point.\nDescription:\n    Widget Forecast: Forecast widget\nParameterSummary: () Widget Forecast\n",
    "com.grailr.CARROTweather.WidgetHourlyIntent": "com.grailr.CARROTweather.WidgetHourlyIntent(bgColor: BGColor(Enum) = \"conditionGradient\", location: Bool, feelsLike: Bool, biHourly: Bool = True, dataPoints: DataPoint(Object))\nParameters:\n    bgColor:  Background. BG Color. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"conditionGradient\"(Condition), \"conditionGradientAlt\"(Condition (Alt)), \"system\"(System), \"white\"(White), \"black\"(Black), \"blue\"(Blue), \"red\"(Red), \"green\"(Green), \"purple\"(Purple), \"orange\"(Orange), \"gray\"(Gray), \"pureBlack\"(True Black).\n    location:  Show Location.\n    feelsLike:  Show Feels Like.\n    biHourly:  Show Every Other Hour.\n    dataPoints:  Data Points. Data Point.\nDescription:\n    Widget Hourly: Hourly widget\nParameterSummary: () Widget Hourly\n",
    "com.grailr.CARROTweather.WidgetDailyIntent": "com.grailr.CARROTweather.WidgetDailyIntent(bgColor: BGColor(Enum) = \"conditionGradient\", location: Bool, feelsLike: Bool, dataPoints: DataPoint(Object))\nParameters:\n    bgColor:  Background. BG Color. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"conditionGradient\"(Condition), \"conditionGradientAlt\"(Condition (Alt)), \"system\"(System), \"white\"(White), \"black\"(Black), \"blue\"(Blue), \"red\"(Red), \"green\"(Green), \"purple\"(Purple), \"orange\"(Orange), \"gray\"(Gray), \"pureBlack\"(True Black).\n    location:  Show Location.\n    feelsLike:  Show Feels Like.\n    dataPoints:  Data Points. Data Point.\nDescription:\n    Widget Daily: Daily widget\nParameterSummary: () Widget Daily\n",
    "com.grailr.CARROTweather.WidgetSnarkIntent": "com.grailr.CARROTweather.WidgetSnarkIntent(bgColor: BGColor(Enum) = \"conditionGradient\", layout: WidgetLayout(Enum) = \"automatic\", precipitation: Bool = True, alerts: Bool = True, feelsLike: Bool, summary: SummaryType(Enum) = \"snark\", dataPoints: DataPoint(Object))\nParameters:\n    bgColor:  Background. BG Color. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"conditionGradient\"(Condition), \"conditionGradientAlt\"(Condition (Alt)), \"system\"(System), \"white\"(White), \"black\"(Black), \"blue\"(Blue), \"red\"(Red), \"green\"(Green), \"purple\"(Purple), \"orange\"(Orange), \"gray\"(Gray), \"pureBlack\"(True Black).\n    layout:  Layout. Widget Layout. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"automatic\"(Automatic), \"hourly\"(Always Hourly), \"daily\"(Always Daily).\n    precipitation:  Show Precip Info. This value depends on the value of \"layout\". This parameter is only valid when the value of \"layout\" is \"automatic\".\n    alerts:  Show Weather Alerts.\n    feelsLike:  Show Feels Like.\n    summary:  Summary. Summary Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"snark\"(Snark), \"minutely\"(Next Hour), \"hourly\"(Today).\n    dataPoints:  Data Points. Data Point.\nDescription:\n    Widget Snark: Snark widget\nParameterSummary: () Widget Snark\n",
    "com.grailr.CARROTweather.WidgetComboIntent": "com.grailr.CARROTweather.WidgetComboIntent(bgColor: BGColor(Enum) = \"conditionGradient\", location: Bool, alerts: Bool = True, feelsLike: Bool, biHourly: Bool = True, precipitation: Bool, dataPoints: DataPoint(Object))\nParameters:\n    bgColor:  Background. BG Color. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"conditionGradient\"(Condition), \"conditionGradientAlt\"(Condition (Alt)), \"system\"(System), \"white\"(White), \"black\"(Black), \"blue\"(Blue), \"red\"(Red), \"green\"(Green), \"purple\"(Purple), \"orange\"(Orange), \"gray\"(Gray), \"pureBlack\"(True Black).\n    location:  Show Location.\n    alerts:  Show Weather Alerts. This value depends on the value of \"location\". This parameter is only valid when the value of \"location\" is True.\n    feelsLike:  Show Feels Like.\n    biHourly:  Show Every Other Hour.\n    precipitation:  Show Precip Info.\n    dataPoints:  Data Point. Data Point.\nDescription:\n    Widget Combo: Combo widget\nParameterSummary: () Widget Combo\n",
    "com.grailr.CARROTweather.WidgetTemperatureIntent": "com.grailr.CARROTweather.WidgetTemperatureIntent(feelsLike: Bool)\nParameters:\n    feelsLike:  Show Feels Like.\nDescription:\n    Widget Temperature: Temperature widget\nParameterSummary: () Widget Temperature\n",
    "com.grailr.CARROTweather.WidgetConditionsIntent": "com.grailr.CARROTweather.WidgetConditionsIntent(feelsLike: Bool, precipitation: Bool = True, summary: SummaryType(Enum) = \"snark\", dataPoints: DataPoint(Object))\nParameters:\n    feelsLike:  Feels Like.\n    precipitation:  Show Precip Info.\n    summary:  Summary. Summary Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"snark\"(Snark), \"minutely\"(Next Hour), \"hourly\"(Today).\n    dataPoints:  Data Point. Data Point.\nDescription:\n    Widget Conditions: Conditions widget\nParameterSummary: () Widget Conditions\n",
    "com.grailr.CARROTweather.WidgetCustomIntent": "com.grailr.CARROTweather.WidgetCustomIntent(topDataPoint: DataPoint(Object), bottomDataPoint: DataPoint(Object))\nParameters:\n    topDataPoint:  Top Data Point. Data Point.\n    bottomDataPoint:  Bottom Data Point. Data Point.\nDescription:\n    Widget Custom: Custom widget\nParameterSummary: () Widget Custom\n",
    "com.grailr.CARROTweather.WidgetDetailsIntent": "com.grailr.CARROTweather.WidgetDetailsIntent(feelsLike: Bool, precipitation: Bool = True, dataPoints: DataPoint(Object))\nParameters:\n    feelsLike:  Feels Like.\n    precipitation:  Show Precip Info.\n    dataPoints:  Data Points. Data Point.\nDescription:\n    Widget Details: Details widget\nParameterSummary: () Widget Details\n",
    "com.iconfactory.Tot.AddToDotIntent": "com.iconfactory.Tot.AddToDotIntent(text: String, dot: Integer = 1, at: AtEnum(Enum)) -> Text\n                            : String\nParameters:\n    text:  Text.\n    dot:  Dot.\n    at:  At. Location. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"beginning\"(beginning), \"end\"(end).\nReturn Value:\n    Text: Text.\nDescription:\n    Add to Dot: Adds text to a dot by prepending or appending\nParameterSummary: (Add to ${dot} at ${at}) Add to ${dot} at ${at}\n",
    "com.iconfactory.Tot.GetDotIntent": "com.iconfactory.Tot.GetDotIntent(dot: Integer = 1) -> Text\n                            : String\nParameters:\n    dot:  Dot.\nReturn Value:\n    Text: Text.\nDescription:\n    Get Dot: Gets all the text from a dot\nParameterSummary: (Get ${dot}) Get ${dot}\n",
    "com.iconfactory.Tot.ShowDotIntent": "com.iconfactory.Tot.ShowDotIntent(dot: Integer = 1)\nParameters:\n    dot:  Dot.\nDescription:\n    Show Dot: Shows the specified dot\nParameterSummary: (Show ${dot}) Show ${dot}\n",
    "com.iconfactory.Tot.SetDotIntent": "com.iconfactory.Tot.SetDotIntent(text: String, dot: Integer = 1) -> Text\n                            : String\nParameters:\n    text:  Text.\n    dot:  Dot.\nReturn Value:\n    Text: Text.\nDescription:\n    Set Dot: Sets all the text in a dot\nParameterSummary: (Set ${dot}) Set ${dot}\n",
    "com.iconfactory.Tot.QueryDotIntent": "com.iconfactory.Tot.QueryDotIntent(dot: Integer = 1) -> Dot Info\n                            : DotInfo(Object)\nParameters:\n    dot:  Dot.\nReturn Value:\n    Dot Info: Dot Info. Dot Info.\nDescription:\n    Query Dot: Gets text and other information from a dot\nParameterSummary: (Query ${dot}) Query ${dot}\n",
    "com.ideasoncanvas.mindnode.ios.MNCQuickEntryIntent": "com.ideasoncanvas.mindnode.ios.MNCQuickEntryIntent(contentInputSource: ContentInputSource(Enum) = \"string\", text: String)\nParameters:\n    contentInputSource:  Source. Input. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"pasteboard\"(with Contents of Clipboard), \"none\"(without specifying Content), \"string\"(with Text).\n    text:  Text (replaces current Quick Entry draft). This value depends on the value of \"contentInputSource\". This parameter is only valid when the value of \"contentInputSource\" is \"string\".\nDescription:\n    Open Quick Entry: Launch MindNode Quick Entry and optionally provide a text\nParameterSummary: (Launch Quick Entry ${contentInputSource}) Launch Quick Entry ${contentInputSource}; (Launch Quick Entry ${contentInputSource} ${text}) Launch Quick Entry ${contentInputSource} ${text}\n",
    "com.ideasoncanvas.mindnode.ios.MNCNewDocumentIntent": "com.ideasoncanvas.mindnode.ios.MNCNewDocumentIntent(contentInputSource: ContentInputSource(Enum) = \"string\", text: String)\nParameters:\n    contentInputSource:  Source. Input. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"pasteboard\"(with Contents of Clipboard), \"none\"(without specifying Content), \"string\"(with Text).\n    text:  Text. This value depends on the value of \"contentInputSource\". This parameter is only valid when the value of \"contentInputSource\" is \"string\".\nDescription:\n    Create New Document: Create New MindNode Document\nParameterSummary: (New Mind Map ${contentInputSource}) New Mind Map ${contentInputSource}; (New Mind Map ${contentInputSource} ${text}) New Mind Map ${contentInputSource} ${text}\n",
    "com.ideasoncanvas.mindnode.ios.MNCViewDocumentIntent": "com.ideasoncanvas.mindnode.ios.MNCViewDocumentIntent(file: File(Object), bookmarkString: String)\nParameters:\n    file:  File.\n    bookmarkString:  Bookmark String.\nDescription:\n    View Document: Opens document in MindNode\nParameterSummary: (Open ${file}) Open ${file}\n",
    "com.ideasoncanvas.mindnode.ios.MNCExportDocumentIntent": "com.ideasoncanvas.mindnode.ios.MNCExportDocumentIntent(document: File(Object), exportType: ExportType(Enum) = \"image\") -> Exported File\n                            : File(Object)\nParameters:\n    document:  Document.\n    exportType:  Export Type. Export Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"pdf\"(PDF), \"image\"(Image), \"csv\"(CSV), \"opml\"(OPML), \"markdown\"(Markdown), \"freeMind\"(FreeMind), \"rtf\"(Rich Text), \"txt\"(Plain Text), \"taskPaper\"(TaskPaper), \"mindNode\"(MindNode), \"mindNodeLegacy\"(MindNode Legacy), \"textPack\"(TextPack).\nReturn Value:\n    Exported File: Exported File.\nDescription:\n    Export Document: Export a document in a chosen format\nParameterSummary: (Export ${document} as ${exportType}) Export ${document} as ${exportType}\n",
    "com.ideasoncanvas.mindnode.ios.MNCExportTasksIntent": "com.ideasoncanvas.mindnode.ios.MNCExportTasksIntent(document: File(Object))\nParameters:\n    document:  Document.\nDescription:\n    Export to Reminders: Export all tasks in a document\nParameterSummary: (Export ${document} to Reminders) Export ${document} to Reminders\n",
    "com.ideasoncanvas.mindnode.ios.MNCExportToThingsIntent": "com.ideasoncanvas.mindnode.ios.MNCExportToThingsIntent(document: File(Object), revealInThings: Bool) -> Things URL\n                            : String\nParameters:\n    document:  Document.\n    revealInThings:  Reveal in Things.\nReturn Value:\n    Things URL: Things URL.\nDescription:\n    Export to Things: The resulting URL can be used to trigger an import in Things\nParameterSummary: (Export ${document} to Things) Export ${document} to Things\n",
    "com.ideasoncanvas.mindnode.ios.MNCAddToQuickEntryIntent": "com.ideasoncanvas.mindnode.ios.MNCAddToQuickEntryIntent(text: String)\nParameters:\n    text:  Text to add to Quick Entry draft.\nDescription:\n    Add To Quick Entry: Adds the provided text to the current Quick Entry draft\nParameterSummary: (Add to Quick Entry) Add to Quick Entry\n",
    "com.ideasoncanvas.mindnode.macos.MNCQuickEntryIntent": "com.ideasoncanvas.mindnode.macos.MNCQuickEntryIntent(contentInputSource: ContentInputSource(Enum) = \"string\", text: String)\nParameters:\n    contentInputSource:  Source. Input. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"pasteboard\"(with Contents of Clipboard), \"none\"(without specifying Content), \"string\"(with Text).\n    text:  Text (replaces current Quick Entry draft). This value depends on the value of \"contentInputSource\". This parameter is only valid when the value of \"contentInputSource\" is \"string\".\nDescription:\n    Open Quick Entry: Launch MindNode Quick Entry and optionally provide a text\nParameterSummary: (Launch Quick Entry ${contentInputSource}) Launch Quick Entry ${contentInputSource}; (Launch Quick Entry ${contentInputSource} ${text}) Launch Quick Entry ${contentInputSource} ${text}\n",
    "com.ideasoncanvas.mindnode.macos.MNCNewDocumentIntent": "com.ideasoncanvas.mindnode.macos.MNCNewDocumentIntent(contentInputSource: ContentInputSource(Enum) = \"string\", text: String)\nParameters:\n    contentInputSource:  Source. Input. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"pasteboard\"(with Contents of Clipboard), \"none\"(without specifying Content), \"string\"(with Text).\n    text:  Text. This value depends on the value of \"contentInputSource\". This parameter is only valid when the value of \"contentInputSource\" is \"string\".\nDescription:\n    Create New Document: Create New MindNode Document\nParameterSummary: (New Mind Map ${contentInputSource}) New Mind Map ${contentInputSource}; (New Mind Map ${contentInputSource} ${text}) New Mind Map ${contentInputSource} ${text}\n",
    "com.ideasoncanvas.mindnode.macos.MNCViewDocumentIntent": "com.ideasoncanvas.mindnode.macos.MNCViewDocumentIntent(file: File(Object), bookmarkString: String)\nParameters:\n    file:  File.\n    bookmarkString:  Bookmark String.\nDescription:\n    View Document: Opens document in MindNode\nParameterSummary: (Open ${file}) Open ${file}\n",
    "com.ideasoncanvas.mindnode.macos.MNCExportDocumentIntent": "com.ideasoncanvas.mindnode.macos.MNCExportDocumentIntent(document: File(Object), exportType: ExportType(Enum) = \"image\") -> Exported File\n                            : File(Object)\nParameters:\n    document:  Document.\n    exportType:  Export Type. Export Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"pdf\"(PDF), \"image\"(Image), \"csv\"(CSV), \"opml\"(OPML), \"markdown\"(Markdown), \"freeMind\"(FreeMind), \"rtf\"(Rich Text), \"txt\"(Plain Text), \"taskPaper\"(TaskPaper), \"mindNode\"(MindNode), \"mindNodeLegacy\"(MindNode Legacy), \"textPack\"(TextPack).\nReturn Value:\n    Exported File: Exported File.\nDescription:\n    Export Document: Export a document in a chosen format\nParameterSummary: (Export ${document} as ${exportType}) Export ${document} as ${exportType}\n",
    "com.ideasoncanvas.mindnode.macos.MNCExportTasksIntent": "com.ideasoncanvas.mindnode.macos.MNCExportTasksIntent(document: File(Object))\nParameters:\n    document:  Document.\nDescription:\n    Export to Reminders: Export all tasks in a document\nParameterSummary: (Export ${document} to Reminders) Export ${document} to Reminders\n",
    "com.ideasoncanvas.mindnode.macos.MNCExportToThingsIntent": "com.ideasoncanvas.mindnode.macos.MNCExportToThingsIntent(document: File(Object), revealInThings: Bool) -> Things URL\n                            : String\nParameters:\n    document:  Document.\n    revealInThings:  Reveal in Things.\nReturn Value:\n    Things URL: Things URL.\nDescription:\n    Export to Things: The resulting URL can be used to trigger an import in Things\nParameterSummary: (Export ${document} to Things) Export ${document} to Things\n",
    "com.ideasoncanvas.mindnode.macos.MNCAddToQuickEntryIntent": "com.ideasoncanvas.mindnode.macos.MNCAddToQuickEntryIntent(text: String)\nParameters:\n    text:  Text to add to Quick Entry draft.\nDescription:\n    Add To Quick Entry: Adds the provided text to the current Quick Entry draft\nParameterSummary: (Add to Quick Entry) Add to Quick Entry\n",
    "com.joehribar.toggl.StartSavedTimerIntent": "com.joehribar.toggl.StartSavedTimerIntent(savedTimer: (Object))\nParameters:\n    savedTimer: \nDescription:\n    Start Saved Timer: Starts a saved timer.\nParameterSummary: (savedTimer) Start ${savedTimer} timer\n",
    "com.joehribar.toggl.StopTimeEntryIntent": "com.joehribar.toggl.StopTimeEntryIntent(stopTimeMode: StopTimeModeAppEnum(Enum) = \"currentTime\", stop: String, roundingMode: RoundingModeAppEnum(Enum) = \"roundUpTo\", roundingInterval: RoundingIntervalAppEnum(Enum) = \"min1\", durationAdjustMode: DurationAdjustModeAppEnum(Enum) = \"adjustStop\", minutesAgo: Integer) -> Stop Current Time Entry\n                            : TimeEntryAppEntity(Object)\nParameters:\n    stopTimeMode: Stop Time. Stop Time Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"currentTime\"(Current Time), \"specifiedTime\"(Specified Time), \"roundDuration\"(Round Duration), \"minutesAgo\"(Minutes Ago).\n    stop: Specified Time.\n    roundingMode: Rounding Mode. Rounding Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"roundUpTo\"(Round Up To), \"roundToNearest\"(Round to Nearest), \"roundDownTo\"(Round Down To).\n    roundingInterval: Rounding Interval. Rounding Interval. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"min1\"(1 min), \"min5\"(5 min), \"min6\"(6 min), \"min10\"(10 min), \"min12\"(12 min), \"min15\"(15 min), \"min30\"(30 min), \"h1\"(1 h), \"h4\"(4 h).\n    durationAdjustMode: Adjust Mode. Duration Adjust Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"adjustStop\"(Adjust Stop), \"adjustStart\"(Adjust Start).\n    minutesAgo: Minutes Ago.\nReturn Value:\n    Stop Current Time Entry: Time Entries.\nDescription:\n    Stop Current Time Entry: Stops the current time entry.\n\nThe action ends a Live Activity and returns the stopped time entry.\nParameterSummary: (stopTimeMode,stop) Stop the current time entry; (stopTimeMode,roundingMode,roundingInterval,durationAdjustMode) Stop the current time entry; (stopTimeMode,minutesAgo) Stop the current time entry; (stopTimeMode) Stop the current time entry\n",
    "com.joehribar.toggl.CheckTimeEntryIntent": "com.joehribar.toggl.CheckTimeEntryIntent() -> Check Current Time Entry\n                            : TimeEntryAppEntity(Object)\nReturn Value:\n    Check Current Time Entry: Time Entries.\nDescription:\n    Check Current Time Entry: Checks the current time entry.\n\nThe action starts a Live Activity and returns the time entry.\nParameterSummary: () Check the current time entry\n",
    "com.joehribar.toggl.CheckSavedTimerIntent": "com.joehribar.toggl.CheckSavedTimerIntent(savedTimer: (Object))\nParameters:\n    savedTimer: \nDescription:\n    Check Saved Timer: Checks how much time was tracked today for a saved timer.\nParameterSummary: (savedTimer) Check ${savedTimer} time today\n",
    "com.joehribar.toggl.CheckTimeLoggedIntent": "com.joehribar.toggl.CheckTimeLoggedIntent(timePeriod: TimePeriod(Enum) = \"today\", startDate: String, endDate: String, onDate: String, sinceDate: String, lastNumberOfDays: Integer = 7, workspace: WorkspaceDetails(Object), filterClientMode: FilterClientMode(Enum) = \"off\", client: String, filterProjectsMode: FilterProjectsMode(Enum) = \"off\", projectsIncluded: String, projectsExcluded: String, filterTasksMode: FilterTasksMode(Enum) = \"off\", tasksIncluded: String, filterDescriptionMode: FilterDescriptionMode(Enum) = \"off\", timeEntryDescription: String, filterTagsMode: FilterTagsModeReport(Enum) = \"off\", tagsIncluded: String, tagsExcluded: String, filterBillableMode: FilterBillableMode(Enum) = \"off\", groupReportDetailsBy: GroupReportDetailsByType(Enum) = \"descriptions\", groupIntoTasks: Bool, rounding: Bool, roundingMode: RoundingMode(Enum) = \"roundUpTo\", roundingInterval: RoundingInterval(Enum) = \"min1\", includeTeamTime: Bool, sortingMode: SortingMode(Enum) = \"durations\") -> Things URL\n                            : String\nParameters:\n    timePeriod:  Time Period. Time Period. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"today\"(today), \"yesterday\"(yesterday), \"thisWeek\"(this week), \"lastWeek\"(last week), \"thisMonth\"(this month), \"lastMonth\"(last month), \"thisYear\"(this year), \"lastYear\"(last year), \"betweenDates\"(between dates), \"onDate\"(on date), \"sinceDate\"(since date), \"lastNumberOfDays\"(last number of days), \"last7Days\"(last 7 days), \"last30Days\"(last 30 days).\n    startDate:  Start Date. This value depends on the value of \"timePeriod\". This parameter is only valid when the value of \"timePeriod\" is \"betweenDates\".\n    endDate:  End Date. This value depends on the value of \"timePeriod\". This parameter is only valid when the value of \"timePeriod\" is \"betweenDates\".\n    onDate:  Date. This value depends on the value of \"timePeriod\". This parameter is only valid when the value of \"timePeriod\" is \"onDate\".\n    sinceDate:  Date. This value depends on the value of \"timePeriod\". This parameter is only valid when the value of \"timePeriod\" is \"sinceDate\".\n    lastNumberOfDays:  Last Number of Days. This value depends on the value of \"timePeriod\". This parameter is only valid when the value of \"timePeriod\" is \"lastNumberOfDays\".\n    workspace:  Workspace. Workspace Details.\n    filterClientMode:  Filter Client. Filter Client Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"client\"(Client), \"noClient\"(No Client).\n    client:  Client. This value depends on the value of \"filterClientMode\". This parameter is only valid when the value of \"filterClientMode\" is \"client\".\n    filterProjectsMode:  Filter Projects. Filter Projects Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"include\"(Include), \"exclude\"(Exclude), \"noProject\"(No Project).\n    projectsIncluded:  Included Projects. This value depends on the value of \"filterProjectsMode\". This parameter is only valid when the value of \"filterProjectsMode\" is \"include\".\n    projectsExcluded:  Excluded Projects. This value depends on the value of \"filterProjectsMode\". This parameter is only valid when the value of \"filterProjectsMode\" is \"exclude\".\n    filterTasksMode:  Filter Tasks. Filter Tasks Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"include\"(Include), \"noTask\"(No Task).\n    tasksIncluded:  Included Tasks. This value depends on the value of \"filterTasksMode\". This parameter is only valid when the value of \"filterTasksMode\" is \"include\".\n    filterDescriptionMode:  Filter Description. Filter Description Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"description\"(Description), \"noDescription\"(No Description), \"contains\"(Contains).\n    timeEntryDescription:  Description. This value depends on the value of \"filterDescriptionMode\". This parameter is only valid when the value of \"filterDescriptionMode\" is \"description\".\n    filterTagsMode:  Filter Tags. Filter Tags Mode Report. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"include\"(Include), \"exclude\"(Exclude), \"noTags\"(No Tags).\n    tagsIncluded:  Included Tags. This value depends on the value of \"filterTagsMode\". This parameter is only valid when the value of \"filterTagsMode\" is \"include\".\n    tagsExcluded:  Excluded Tags. This value depends on the value of \"filterTagsMode\". This parameter is only valid when the value of \"filterTagsMode\" is \"exclude\".\n    filterBillableMode:  Filter Billable. Filter Billable Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"billable\"(Billable), \"notBillable\"(Not Billable).\n    groupReportDetailsBy:  Grouping. Group Report Details By Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"descriptions\"(Descriptions), \"tags\"(Tags), \"projectsOnly\"(Projects Only), \"tagsSplit\"(Tags (Split)).\n    groupIntoTasks:  Group Into Tasks.\n    rounding:  Round Durations.\n    roundingMode:  Rounding Mode. Rounding Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"roundUpTo\"(Round Up To), \"roundToNearest\"(Round to Nearest), \"roundDownTo\"(Round Down To). This value depends on the value of \"rounding\". This parameter is only valid when the value of \"rounding\" is True.\n    roundingInterval:  Rounding Interval. Rounding Interval. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"min1\"(1 min), \"min5\"(5 min), \"min6\"(6 min), \"min10\"(10 min), \"min12\"(12 min), \"min15\"(15 min), \"min30\"(30 min), \"h1\"(1 h), \"h4\"(4 h). This value depends on the value of \"rounding\". This parameter is only valid when the value of \"rounding\" is True.\n    includeTeamTime:  Include Team Time.\n    sortingMode:  Sorting. Sorting. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"alphabetical\"(Alphabetical), \"durations\"(Durations).\nReturn Value:\n    Things URL: Things URL.\nDescription:\n    Check Total Time Tracked: Checks how much time was tracked in the specified time period with the specified filters.\nParameterSummary: (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${onDate}) Check total time tracked ${timePeriod} ${onDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${sinceDate}) Check total time tracked ${timePeriod} ${sinceDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod} ${startDate} and ${endDate}) Check total time tracked ${timePeriod} ${startDate} and ${endDate}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod} ${lastNumberOfDays}) Check total time tracked ${timePeriod} ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod} ${lastNumberOfDays}) Check total time tracked ${timePeriod} ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod} ${lastNumberOfDays}) Check total time tracked ${timePeriod} ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}; (Check total time tracked ${timePeriod}) Check total time tracked ${timePeriod}; (Check total time tracked ${timePeriod}: ${lastNumberOfDays}) Check total time tracked ${timePeriod}: ${lastNumberOfDays}\n",
    "com.joehribar.toggl.CheckProjectIntent": "com.joehribar.toggl.CheckProjectIntent(project: (Object))\nParameters:\n    project:  Project.\nDescription:\n    Check Project: Checks how much time was tracked today for a project.\nParameterSummary: (project) Check ${project} time today\n",
    "com.joehribar.toggl.StartTimeEntryIntent": "com.joehribar.toggl.StartTimeEntryIntent(project: String, timeEntryDescription: String, tags: String, workspace: WorkspaceDetails(Object), startTimeMode: StartTimeMode(Enum) = \"currentTime\", start: String, minutesAgo: Integer, billable: Bool) -> Message\n                            : String\nParameters:\n    project:  Project.\n    timeEntryDescription:  Description.\n    tags:  Tags.\n    workspace:  Workspace. Workspace Details.\n    startTimeMode:  Start Time. Start Time Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"currentTime\"(Current Time), \"specifiedTime\"(Specified Time), \"lastStopTime\"(Last Stop Time Today), \"minutesAgo\"(Minutes Ago).\n    start:  Specified Time. This value depends on the value of \"startTimeMode\". This parameter is only valid when the value of \"startTimeMode\" is \"specifiedTime\".\n    minutesAgo:  Minutes Ago. This value depends on the value of \"startTimeMode\". This parameter is only valid when the value of \"startTimeMode\" is \"minutesAgo\".\n    billable:  Billable.\nReturn Value:\n    Message: Message.\nDescription:\n    Start Time Entry: Starts a time entry with the specified parameters.\nParameterSummary: (Start ${project} ${timeEntryDescription} time entry tagged ${tags}) Start ${project} ${timeEntryDescription} time entry tagged ${tags}; (Start ${project} ${timeEntryDescription} time entry tagged ${tags}) Start ${project} ${timeEntryDescription} time entry tagged ${tags}; (Start ${project} ${timeEntryDescription} time entry tagged ${tags}) Start ${project} ${timeEntryDescription} time entry tagged ${tags}\n",
    "com.joehribar.toggl.CheckTimerTimeTrackedIntent": "com.joehribar.toggl.CheckTimerTimeTrackedIntent(project: String, timeEntryDescription: String, tags: String, timePeriod: TimePeriod(Enum) = \"today\", startDate: String, endDate: String, onDate: String, sinceDate: String, lastNumberOfDays: Integer = 7, workspace: WorkspaceDetails(Object), rounding: Bool, roundingMode: RoundingMode(Enum) = \"roundUpTo\", roundingInterval: RoundingInterval(Enum) = \"min1\", includeTeamTime: Bool) -> Message\n                            : String\nParameters:\n    project:  Project.\n    timeEntryDescription:  Description.\n    tags:  Tags.\n    timePeriod:  Time Period. Time Period. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"today\"(today), \"yesterday\"(yesterday), \"thisWeek\"(this week), \"lastWeek\"(last week), \"thisMonth\"(this month), \"lastMonth\"(last month), \"thisYear\"(this year), \"lastYear\"(last year), \"betweenDates\"(between dates), \"onDate\"(on date), \"sinceDate\"(since date), \"lastNumberOfDays\"(last number of days), \"last7Days\"(last 7 days), \"last30Days\"(last 30 days).\n    startDate:  Start Date. This value depends on the value of \"timePeriod\". This parameter is only valid when the value of \"timePeriod\" is \"betweenDates\".\n    endDate:  End Date. This value depends on the value of \"timePeriod\". This parameter is only valid when the value of \"timePeriod\" is \"betweenDates\".\n    onDate:  Date. This value depends on the value of \"timePeriod\". This parameter is only valid when the value of \"timePeriod\" is \"onDate\".\n    sinceDate:  Date. This value depends on the value of \"timePeriod\". This parameter is only valid when the value of \"timePeriod\" is \"sinceDate\".\n    lastNumberOfDays:  Last Number of Days. This value depends on the value of \"timePeriod\". This parameter is only valid when the value of \"timePeriod\" is \"lastNumberOfDays\".\n    workspace:  Workspace. Workspace Details.\n    rounding:  Round Durations.\n    roundingMode:  Rounding Mode. Rounding Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"roundUpTo\"(Round Up To), \"roundToNearest\"(Round to Nearest), \"roundDownTo\"(Round Down To). This value depends on the value of \"rounding\". This parameter is only valid when the value of \"rounding\" is True.\n    roundingInterval:  Rounding Interval. Rounding Interval. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"min1\"(1 min), \"min5\"(5 min), \"min6\"(6 min), \"min10\"(10 min), \"min12\"(12 min), \"min15\"(15 min), \"min30\"(30 min), \"h1\"(1 h), \"h4\"(4 h). This value depends on the value of \"rounding\". This parameter is only valid when the value of \"rounding\" is True.\n    includeTeamTime:  Include Team Time.\nReturn Value:\n    Message: Message.\nDescription:\n    Check Timer Time Tracked: Checks how much time was tracked in the specified time period with the specified parameters.\nParameterSummary: (Check ${project} ${timeEntryDescription} tagged ${tags} time ${timePeriod} ${onDate}) Check ${project} ${timeEntryDescription} tagged ${tags} time ${timePeriod} ${onDate}; (Check ${project} ${timeEntryDescription} tagged ${tags} time ${timePeriod} ${onDate}) Check ${project} ${timeEntryDescription} tagged ${tags} time ${timePeriod} ${onDate}; (Check ${project} ${timeEntryDescription} tagged ${tags} time ${timePeriod} ${sinceDate}) Check ${project} ${timeEntryDescription} tagged ${tags} time ${timePeriod} ${sinceDate}; (Check ${project} ${timeEntryDescription} tagged ${tags} time ${timePeriod} ${sinceDate}) Check ${project} ${timeEntryDescription} tagged ${tags} time ${timePeriod} ${sinceDate}; (Check ${project} ${timeEntryDescription} tagged ${tags} time ${timePeriod} ${startDate} and ${endDate}) Check ${project} ${timeEntryDescription} tagged ${tags} time ${timePeriod} ${startDate} and ${endDate}; (Check ${project} ${timeEntryDescription} tagged ${tags} time ${timePeriod} ${startDate} and ${endDate}) Check ${project} ${timeEntryDescription} tagged ${tags} time ${timePeriod} ${startDate} and ${endDate}; (Check ${project} ${timeEntryDescription} tagged ${tags} time ${timePeriod}) Check ${project} ${timeEntryDescription} tagged ${tags} time ${timePeriod}; (Check ${project} ${timeEntryDescription} tagged ${tags} time ${timePeriod}: ${lastNumberOfDays}) Check ${project} ${timeEntryDescription} tagged ${tags} time ${timePeriod}: ${lastNumberOfDays}; (Check ${project} ${timeEntryDescription} tagged ${tags} time ${timePeriod}) Check ${project} ${timeEntryDescription} tagged ${tags} time ${timePeriod}; (Check ${project} ${timeEntryDescription} tagged ${tags} time ${timePeriod}: ${lastNumberOfDays}) Check ${project} ${timeEntryDescription} tagged ${tags} time ${timePeriod}: ${lastNumberOfDays}\n",
    "com.joehribar.toggl.CheckProjectTimeTrackedIntent": "com.joehribar.toggl.CheckProjectTimeTrackedIntent(project: String, timePeriod: TimePeriod(Enum) = \"today\", startDate: String, endDate: String, onDate: String, sinceDate: String, lastNumberOfDays: Integer = 7, workspace: WorkspaceDetails(Object), groupReportDetailsBy: GroupReportDetailsByType(Enum) = \"descriptions\", groupIntoTasks: Bool, rounding: Bool, roundingMode: RoundingMode(Enum) = \"roundUpTo\", roundingInterval: RoundingInterval(Enum) = \"min1\", includeTeamTime: Bool, sortingMode: SortingMode(Enum) = \"durations\") -> Message\n                            : String\nParameters:\n    project:  Project.\n    timePeriod:  Time Period. Time Period. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"today\"(today), \"yesterday\"(yesterday), \"thisWeek\"(this week), \"lastWeek\"(last week), \"thisMonth\"(this month), \"lastMonth\"(last month), \"thisYear\"(this year), \"lastYear\"(last year), \"betweenDates\"(between dates), \"onDate\"(on date), \"sinceDate\"(since date), \"lastNumberOfDays\"(last number of days), \"last7Days\"(last 7 days), \"last30Days\"(last 30 days).\n    startDate:  Start Date. This value depends on the value of \"timePeriod\". This parameter is only valid when the value of \"timePeriod\" is \"betweenDates\".\n    endDate:  End Date. This value depends on the value of \"timePeriod\". This parameter is only valid when the value of \"timePeriod\" is \"betweenDates\".\n    onDate:  Date. This value depends on the value of \"timePeriod\". This parameter is only valid when the value of \"timePeriod\" is \"onDate\".\n    sinceDate:  Date. This value depends on the value of \"timePeriod\". This parameter is only valid when the value of \"timePeriod\" is \"sinceDate\".\n    lastNumberOfDays:  Last Number of Days. This value depends on the value of \"timePeriod\". This parameter is only valid when the value of \"timePeriod\" is \"lastNumberOfDays\".\n    workspace:  Workspace. Workspace Details.\n    groupReportDetailsBy:  Grouping. Group Report Details By Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"descriptions\"(Descriptions), \"tags\"(Tags), \"projectsOnly\"(Projects Only), \"tagsSplit\"(Tags (Split)).\n    groupIntoTasks:  Group Into Tasks.\n    rounding:  Round Durations.\n    roundingMode:  Rounding Mode. Rounding Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"roundUpTo\"(Round Up To), \"roundToNearest\"(Round to Nearest), \"roundDownTo\"(Round Down To). This value depends on the value of \"rounding\". This parameter is only valid when the value of \"rounding\" is True.\n    roundingInterval:  Rounding Interval. Rounding Interval. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"min1\"(1 min), \"min5\"(5 min), \"min6\"(6 min), \"min10\"(10 min), \"min12\"(12 min), \"min15\"(15 min), \"min30\"(30 min), \"h1\"(1 h), \"h4\"(4 h). This value depends on the value of \"rounding\". This parameter is only valid when the value of \"rounding\" is True.\n    includeTeamTime:  Include Team Time.\n    sortingMode:  Sorting. Sorting. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"alphabetical\"(Alphabetical), \"durations\"(Durations).\nReturn Value:\n    Message: Message.\nDescription:\n    Check Project Time Tracked: Checks how much time was tracked in the specified time period for the specified project.\nParameterSummary: (Check ${project} time ${timePeriod} ${onDate}) Check ${project} time ${timePeriod} ${onDate}; (Check ${project} time ${timePeriod} ${onDate}) Check ${project} time ${timePeriod} ${onDate}; (Check ${project} time ${timePeriod} ${sinceDate}) Check ${project} time ${timePeriod} ${sinceDate}; (Check ${project} time ${timePeriod} ${sinceDate}) Check ${project} time ${timePeriod} ${sinceDate}; (Check ${project} time ${timePeriod} ${startDate} and ${endDate}) Check ${project} time ${timePeriod} ${startDate} and ${endDate}; (Check ${project} time ${timePeriod} ${startDate} and ${endDate}) Check ${project} time ${timePeriod} ${startDate} and ${endDate}; (Check ${project} time ${timePeriod}) Check ${project} time ${timePeriod}; (Check ${project} time ${timePeriod}: ${lastNumberOfDays}) Check ${project} time ${timePeriod}: ${lastNumberOfDays}; (Check ${project} time ${timePeriod}) Check ${project} time ${timePeriod}; (Check ${project} time ${timePeriod}: ${lastNumberOfDays}) Check ${project} time ${timePeriod}: ${lastNumberOfDays}\n",
    "com.joehribar.toggl.AddTimeEntryIntent": "com.joehribar.toggl.AddTimeEntryIntent(workspace: WorkspaceDetails(Object), project: String, timeEntryDescription: String, tags: String, startTimeMode: StartTimeModeForAddTimeEntry(Enum) = \"specifiedTime\", start: String, minutesAgo: Integer, endTimeType: EndTimeType(Enum), stop: String, duration: TimeInterval(Object), billable: Bool) -> Message\n                            : String\nParameters:\n    workspace:  Workspace. Workspace Details.\n    project:  Project.\n    timeEntryDescription:  Description.\n    tags:  Tags.\n    startTimeMode:  Start Time. Start Time Mode For Add Time Entry. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"specifiedTime\"(Specified Time), \"lastStopTime\"(Last Stop Time Today), \"minutesAgo\"(Minutes Ago).\n    start:  Start Time. This value depends on the value of \"startTimeMode\". This parameter is only valid when the value of \"startTimeMode\" is \"specifiedTime\".\n    minutesAgo:  Minutes Ago. This value depends on the value of \"startTimeMode\". This parameter is only valid when the value of \"startTimeMode\" is \"minutesAgo\".\n    endTimeType:  End Time Type. End Time Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"stopping\"(stopping), \"lasting\"(lasting).\n    stop:  Stop Time. This value depends on the value of \"endTimeType\". This parameter is only valid when the value of \"endTimeType\" is \"stopping\".\n    duration:  Duration. This value depends on the value of \"endTimeType\". This parameter is only valid when the value of \"endTimeType\" is \"lasting\".\n    billable:  Billable.\nReturn Value:\n    Message: Message.\nDescription:\n    Add Time Entry: Adds a time entry with the specified parameters.\nParameterSummary: (Add ${project} ${timeEntryDescription} time entry tagged ${tags} starting at the last stop time today and ${endTimeType} for ${duration}) Add ${project} ${timeEntryDescription} time entry tagged ${tags} starting at the last stop time today and ${endTimeType} for ${duration}; (Add ${project} ${timeEntryDescription} time entry tagged ${tags} starting ${minutesAgo} minutes ago and ${endTimeType} for ${duration}) Add ${project} ${timeEntryDescription} time entry tagged ${tags} starting ${minutesAgo} minutes ago and ${endTimeType} for ${duration}; (Add ${project} ${timeEntryDescription} time entry tagged ${tags} starting at the last stop time today and ${endTimeType} at ${stop}) Add ${project} ${timeEntryDescription} time entry tagged ${tags} starting at the last stop time today and ${endTimeType} at ${stop}; (Add ${project} ${timeEntryDescription} time entry tagged ${tags} starting ${minutesAgo} minutes ago and ${endTimeType} at ${stop}) Add ${project} ${timeEntryDescription} time entry tagged ${tags} starting ${minutesAgo} minutes ago and ${endTimeType} at ${stop}; (Add ${project} ${timeEntryDescription} time entry tagged ${tags} starting at the last stop time today and ${endTimeType}) Add ${project} ${timeEntryDescription} time entry tagged ${tags} starting at the last stop time today and ${endTimeType}; (Add ${project} ${timeEntryDescription} time entry tagged ${tags} starting ${minutesAgo} minutes ago and ${endTimeType} ) Add ${project} ${timeEntryDescription} time entry tagged ${tags} starting ${minutesAgo} minutes ago and ${endTimeType} ; (Add ${project} ${timeEntryDescription} time entry tagged ${tags} starting at ${start} and ${endTimeType} for ${duration}) Add ${project} ${timeEntryDescription} time entry tagged ${tags} starting at ${start} and ${endTimeType} for ${duration}; (Add ${project} ${timeEntryDescription} time entry tagged ${tags} starting at ${start} and ${endTimeType} at ${stop}) Add ${project} ${timeEntryDescription} time entry tagged ${tags} starting at ${start} and ${endTimeType} at ${stop}; (Add ${project} ${timeEntryDescription} time entry tagged ${tags} starting at ${start} and ${endTimeType}) Add ${project} ${timeEntryDescription} time entry tagged ${tags} starting at ${start} and ${endTimeType}\n",
    "com.joehribar.toggl.GetProjectsIntent": "com.joehribar.toggl.GetProjectsIntent(workspace: WorkspaceDetails(Object), filterClientMode: FilterClientMode(Enum) = \"off\", client: String, filterBillableMode: FilterBillableMode(Enum) = \"off\", includeTasks: Bool) -> Message\n                            : String\nParameters:\n    workspace:  Workspace. Workspace Details.\n    filterClientMode:  Filter Client. Filter Client Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"client\"(Client), \"noClient\"(No Client).\n    client:  Client. This value depends on the value of \"filterClientMode\". This parameter is only valid when the value of \"filterClientMode\" is \"client\".\n    filterBillableMode:  Filter Billable. Filter Billable Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"billable\"(Billable), \"notBillable\"(Not Billable).\n    includeTasks:  Include Tasks.\nReturn Value:\n    Message: Message.\nDescription:\n    Get Projects: Gets the projects in the specified workspace.\nParameterSummary: (Get projects) Get projects; (Get projects) Get projects\n",
    "com.joehribar.toggl.GetTasksIntent": "com.joehribar.toggl.GetTasksIntent(project: String, workspace: WorkspaceDetails(Object)) -> Message\n                            : String\nParameters:\n    project:  Project.\n    workspace:  Workspace. Workspace Details.\nReturn Value:\n    Message: Message.\nDescription:\n    Get Tasks: Gets the tasks for a specified project.\nParameterSummary: (Get tasks for ${project}) Get tasks for ${project}\n",
    "com.joehribar.toggl.GetTagsIntent": "com.joehribar.toggl.GetTagsIntent(workspace: WorkspaceDetails(Object)) -> Message\n                            : String\nParameters:\n    workspace:  Workspace. Workspace Details.\nReturn Value:\n    Message: Message.\nDescription:\n    Get Tags: Gets the tags in the specified workspace.\nParameterSummary: (Get tags) Get tags\n",
    "com.joehribar.toggl.GetClientsIntent": "com.joehribar.toggl.GetClientsIntent(workspace: WorkspaceDetails(Object)) -> Message\n                            : String\nParameters:\n    workspace:  Workspace. Workspace Details.\nReturn Value:\n    Message: Message.\nDescription:\n    Get Clients: Gets the clients in the specified workspace.\nParameterSummary: (Get clients) Get clients\n",
    "com.joehribar.toggl.GetWorkspacesIntent": "com.joehribar.toggl.GetWorkspacesIntent() -> Message\n                            : String\nReturn Value:\n    Message: Message.\nDescription:\n    Get Workspaces: Gets the workspaces for your profile.\nParameterSummary: (Get workspaces) Get workspaces\n",
    "com.joehribar.toggl.FormatDurationIntent": "com.joehribar.toggl.FormatDurationIntent(seconds: Integer, rounding: Bool, roundingMode: RoundingMode(Enum) = \"roundUpTo\", roundingInterval: RoundingInterval(Enum) = \"min1\") -> Message\n                            : String\nParameters:\n    seconds:  Seconds.\n    rounding:  Round Duration.\n    roundingMode:  Rounding Mode. Rounding Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"roundUpTo\"(Round Up To), \"roundToNearest\"(Round to Nearest), \"roundDownTo\"(Round Down To). This value depends on the value of \"rounding\". This parameter is only valid when the value of \"rounding\" is True.\n    roundingInterval:  Rounding Interval. Rounding Interval. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"min1\"(1 min), \"min5\"(5 min), \"min6\"(6 min), \"min10\"(10 min), \"min12\"(12 min), \"min15\"(15 min), \"min30\"(30 min), \"h1\"(1 h), \"h4\"(4 h). This value depends on the value of \"rounding\". This parameter is only valid when the value of \"rounding\" is True.\nReturn Value:\n    Message: Message.\nDescription:\n    Format Duration: Formats specified seconds into a duration string (“4:08:15”) and a written-out string (“4 hours, 8 minutes, and 15 seconds”).\nParameterSummary: (Format duration of ${seconds} seconds) Format duration of ${seconds} seconds; (Format duration of ${seconds} seconds) Format duration of ${seconds} seconds\n",
    "com.joehribar.toggl.ContinueTimeEntryIntent": "com.joehribar.toggl.ContinueTimeEntryIntent(startTimeMode: StartTimeModeAppEnum(Enum) = \"currentTime\", start: String, minutesAgo: Integer) -> Continue Latest Timer\n                            : TimeEntryAppEntity(Object)\nParameters:\n    startTimeMode: Start Time. Start Time Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"currentTime\"(Current Time), \"specifiedTime\"(Specified Time), \"lastStopTime\"(Last Stop Time Today), \"minutesAgo\"(Minutes Ago).\n    start: Specified Time.\n    minutesAgo: Minutes Ago.\nReturn Value:\n    Continue Latest Timer: Time Entries.\nDescription:\n    Continue Latest Timer: Starts a new time entry with the same project, description, and tags as the most-recent entry.\n\nThe action starts a Live Activity and returns the started time entry.\nParameterSummary: (startTimeMode,start) Continue latest timer; (startTimeMode,minutesAgo) Continue latest timer; (startTimeMode) Continue latest timer\n",
    "com.joehribar.toggl.UpdateTimeEntryIntent": "com.joehribar.toggl.UpdateTimeEntryIntent(updateTimeEntryMode: UpdateTimeEntryMode(Enum) = \"currentTimeEntry\", timeEntryId: String, workspace: WorkspaceDetails(Object), updateProjectMode: UpdateProjectMode(Enum) = \"off\", project: String, updateDescriptionMode: UpdateDescriptionMode(Enum) = \"off\", timeEntryDescription: String, updateTagsMode: UpdateTagsMode(Enum) = \"off\", tags: String, updateStartTimeMode: UpdateStartTimeMode(Enum) = \"off\", start: String, startMinutesAgo: Integer, updateStopTimeMode: UpdateStopTimeMode(Enum) = \"off\", stop: String, roundingMode: RoundingMode(Enum) = \"roundUpTo\", roundingInterval: RoundingInterval(Enum) = \"min1\", durationAdjustMode: DurationAdjustMode(Enum) = \"adjustStop\", stopMinutesAgo: Integer, updateBillableMode: UpdateBillableMode(Enum) = \"off\") -> Message\n                            : String\nParameters:\n    updateTimeEntryMode:  Update Time Entry Mode. Update Time Entry Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"currentTimeEntry\"(current time entry), \"timeEntryWithId\"(time entry with ID).\n    timeEntryId:  ID. This value depends on the value of \"updateTimeEntryMode\". This parameter is only valid when the value of \"updateTimeEntryMode\" is \"timeEntryWithId\".\n    workspace:  Workspace. Workspace Details.\n    updateProjectMode:  Update Project. Update Project Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"newProject\"(New Project), \"noProject\"(No Project).\n    project:  Project. This value depends on the value of \"updateProjectMode\". This parameter is only valid when the value of \"updateProjectMode\" is \"newProject\".\n    updateDescriptionMode:  Update Description. Update Description Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"newDescription\"(New Description), \"noDescription\"(No Description).\n    timeEntryDescription:  Description. This value depends on the value of \"updateDescriptionMode\". This parameter is only valid when the value of \"updateDescriptionMode\" is \"newDescription\".\n    updateTagsMode:  Update Tags. Update Tags Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"newTags\"(New Tags), \"noTags\"(No Tags).\n    tags:  Tags. This value depends on the value of \"updateTagsMode\". This parameter is only valid when the value of \"updateTagsMode\" is \"newTags\".\n    updateStartTimeMode:  Update Start Time. Update Start Time Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"currentTime\"(Current Time), \"specifiedTime\"(Specified Time), \"lastStopTime\"(Last Stop Time Today), \"minutesAgo\"(Minutes Ago).\n    start:  Specified Time. This value depends on the value of \"updateStartTimeMode\". This parameter is only valid when the value of \"updateStartTimeMode\" is \"specifiedTime\".\n    startMinutesAgo:  Minutes Ago. This value depends on the value of \"updateStartTimeMode\". This parameter is only valid when the value of \"updateStartTimeMode\" is \"minutesAgo\".\n    updateStopTimeMode:  Update Stop Time. Update Stop Time Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"currentTime\"(Current Time), \"specifiedTime\"(Specified Time), \"roundDuration\"(Round Duration), \"minutesAgo\"(Minutes Ago).\n    stop:  Specified Time. This value depends on the value of \"updateStopTimeMode\". This parameter is only valid when the value of \"updateStopTimeMode\" is \"specifiedTime\".\n    roundingMode:  Rounding Mode. Rounding Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"roundUpTo\"(Round Up To), \"roundToNearest\"(Round to Nearest), \"roundDownTo\"(Round Down To). This value depends on the value of \"updateStopTimeMode\". This parameter is only valid when the value of \"updateStopTimeMode\" is \"roundDuration\".\n    roundingInterval:  Rounding Interval. Rounding Interval. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"min1\"(1 min), \"min5\"(5 min), \"min6\"(6 min), \"min10\"(10 min), \"min12\"(12 min), \"min15\"(15 min), \"min30\"(30 min), \"h1\"(1 h), \"h4\"(4 h). This value depends on the value of \"updateStopTimeMode\". This parameter is only valid when the value of \"updateStopTimeMode\" is \"roundDuration\".\n    durationAdjustMode:  Adjust Mode. Duration Adjust Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"adjustStop\"(Adjust Stop), \"adjustStart\"(Adjust Start). This value depends on the value of \"updateStopTimeMode\". This parameter is only valid when the value of \"updateStopTimeMode\" is \"roundDuration\".\n    stopMinutesAgo:  Stop Minutes Ago. This value depends on the value of \"updateStopTimeMode\". This parameter is only valid when the value of \"updateStopTimeMode\" is \"minutesAgo\".\n    updateBillableMode:  Update Billable. Update Billable Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"billable\"(Billable), \"notBillable\"(Not Billable).\nReturn Value:\n    Message: Message.\nDescription:\n    Update Time Entry: Updates the current time entry or a logged time entry by ID with the specified parameters.\nParameterSummary: (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode} ${timeEntryId}) Update ${updateTimeEntryMode} ${timeEntryId}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}; (Update ${updateTimeEntryMode}) Update ${updateTimeEntryMode}\n",
    "com.joehribar.toggl.GetTimeEntriesIntent": "com.joehribar.toggl.GetTimeEntriesIntent(timePeriod: TimePeriod(Enum) = \"today\", startDate: String, endDate: String, onDate: String, sinceDate: String, lastNumberOfDays: Integer = 7, workspace: WorkspaceDetails(Object), filterClientMode: FilterClientMode(Enum) = \"off\", client: String, filterProjectsMode: FilterProjectsMode(Enum) = \"off\", projectsIncluded: String, projectsExcluded: String, filterTasksMode: FilterTasksMode(Enum) = \"off\", tasksIncluded: String, filterDescriptionMode: FilterDescriptionMode(Enum) = \"off\", timeEntryDescription: String, timeEntryDescriptionContains: String, filterTagsMode: FilterTagsModeReport(Enum) = \"off\", tagsIncluded: String, tagsExcluded: String, filterBillableMode: FilterBillableMode(Enum) = \"off\", rounding: Bool, roundingMode: RoundingMode(Enum) = \"roundUpTo\", roundingInterval: RoundingInterval(Enum) = \"min1\", includeTeamTime: Bool) -> Message\n                            : String\nParameters:\n    timePeriod:  Time Period. Time Period. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"today\"(today), \"yesterday\"(yesterday), \"thisWeek\"(this week), \"lastWeek\"(last week), \"thisMonth\"(this month), \"lastMonth\"(last month), \"thisYear\"(this year), \"lastYear\"(last year), \"betweenDates\"(between dates), \"onDate\"(on date), \"sinceDate\"(since date), \"lastNumberOfDays\"(last number of days), \"last7Days\"(last 7 days), \"last30Days\"(last 30 days).\n    startDate:  Start Date. This value depends on the value of \"timePeriod\". This parameter is only valid when the value of \"timePeriod\" is \"betweenDates\".\n    endDate:  End Date. This value depends on the value of \"timePeriod\". This parameter is only valid when the value of \"timePeriod\" is \"betweenDates\".\n    onDate:  Date. This value depends on the value of \"timePeriod\". This parameter is only valid when the value of \"timePeriod\" is \"onDate\".\n    sinceDate:  Date. This value depends on the value of \"timePeriod\". This parameter is only valid when the value of \"timePeriod\" is \"sinceDate\".\n    lastNumberOfDays:  Last Number of Days. This value depends on the value of \"timePeriod\". This parameter is only valid when the value of \"timePeriod\" is \"lastNumberOfDays\".\n    workspace:  Workspace. Workspace Details.\n    filterClientMode:  Filter Client. Filter Client Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"client\"(Client), \"noClient\"(No Client).\n    client:  Client. This value depends on the value of \"filterClientMode\". This parameter is only valid when the value of \"filterClientMode\" is \"client\".\n    filterProjectsMode:  Filter Projects. Filter Projects Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"include\"(Include), \"exclude\"(Exclude), \"noProject\"(No Project).\n    projectsIncluded:  Projects. This value depends on the value of \"filterProjectsMode\". This parameter is only valid when the value of \"filterProjectsMode\" is \"include\".\n    projectsExcluded:  Projects. This value depends on the value of \"filterProjectsMode\". This parameter is only valid when the value of \"filterProjectsMode\" is \"exclude\".\n    filterTasksMode:  Filter Tasks. Filter Tasks Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"include\"(Include), \"noTask\"(No Task).\n    tasksIncluded:  Included Tasks. This value depends on the value of \"filterTasksMode\". This parameter is only valid when the value of \"filterTasksMode\" is \"include\".\n    filterDescriptionMode:  Filter Description. Filter Description Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"description\"(Description), \"noDescription\"(No Description), \"contains\"(Contains).\n    timeEntryDescription:  Description. This value depends on the value of \"filterDescriptionMode\". This parameter is only valid when the value of \"filterDescriptionMode\" is \"description\".\n    timeEntryDescriptionContains:  Contains. This value depends on the value of \"filterDescriptionMode\". This parameter is only valid when the value of \"filterDescriptionMode\" is \"contains\".\n    filterTagsMode:  Filter Tags. Filter Tags Mode Report. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"include\"(Include), \"exclude\"(Exclude), \"noTags\"(No Tags).\n    tagsIncluded:  Included Tags. This value depends on the value of \"filterTagsMode\". This parameter is only valid when the value of \"filterTagsMode\" is \"include\".\n    tagsExcluded:  Excluded Tags. This value depends on the value of \"filterTagsMode\". This parameter is only valid when the value of \"filterTagsMode\" is \"exclude\".\n    filterBillableMode:  Filter Billable. Filter Billable Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"billable\"(Billable), \"notBillable\"(Not Billable).\n    rounding:  Round Durations.\n    roundingMode:  Rounding Mode. Rounding Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"roundUpTo\"(Round Up To), \"roundToNearest\"(Round to Nearest), \"roundDownTo\"(Round Down To). This value depends on the value of \"rounding\". This parameter is only valid when the value of \"rounding\" is True.\n    roundingInterval:  Rounding Interval. Rounding Interval. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"min1\"(1 min), \"min5\"(5 min), \"min6\"(6 min), \"min10\"(10 min), \"min12\"(12 min), \"min15\"(15 min), \"min30\"(30 min), \"h1\"(1 h), \"h4\"(4 h). This value depends on the value of \"rounding\". This parameter is only valid when the value of \"rounding\" is True.\n    includeTeamTime:  Include Team Time.\nReturn Value:\n    Message: Message.\nDescription:\n    Get Time Entries: Gets the time entries from the specified time period in the specified workspace.\nParameterSummary: (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries from ${timePeriod} ${onDate}) Get time entries from ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${onDate}) Get time entries ${timePeriod} ${onDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${sinceDate}) Get time entries from ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries ${timePeriod} ${sinceDate}) Get time entries ${timePeriod} ${sinceDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod} ${startDate} and ${endDate}) Get time entries from ${timePeriod} ${startDate} and ${endDate}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}: ${lastNumberOfDays}) Get time entries from ${timePeriod}: ${lastNumberOfDays}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}; (Get time entries from ${timePeriod}) Get time entries from ${timePeriod}\n",
    "com.joehribar.toggl.GetSavedTimersIntent": "com.joehribar.toggl.GetSavedTimersIntent(workspace: WorkspaceDetails(Object), filterClientMode: FilterClientMode(Enum) = \"off\", client: String, filterProjectsMode: FilterProjectsMode(Enum) = \"off\", projectsIncluded: String, projectsExcluded: String, filterTasksMode: FilterTasksMode(Enum) = \"off\", tasksIncluded: String, filterDescriptionMode: FilterDescriptionMode(Enum) = \"off\", timeEntryDescription: String, filterTagsMode: FilterTagsMode(Enum) = \"off\", tagsIncluded: String, tagsExcluded: String, tagsMatched: String, filterBillableMode: FilterBillableMode(Enum) = \"off\") -> Message\n                            : String\nParameters:\n    workspace:  Workspace for Filters. Workspace Details.\n    filterClientMode:  Filter Client. Filter Client Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"client\"(Client), \"noClient\"(No Client).\n    client:  Client. This value depends on the value of \"filterClientMode\". This parameter is only valid when the value of \"filterClientMode\" is \"client\".\n    filterProjectsMode:  Filter Projects. Filter Projects Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"include\"(Include), \"exclude\"(Exclude), \"noProject\"(No Project).\n    projectsIncluded:  Projects. This value depends on the value of \"filterProjectsMode\". This parameter is only valid when the value of \"filterProjectsMode\" is \"include\".\n    projectsExcluded:  Projects. This value depends on the value of \"filterProjectsMode\". This parameter is only valid when the value of \"filterProjectsMode\" is \"exclude\".\n    filterTasksMode:  Filter Tasks. Filter Tasks Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"include\"(Include), \"noTask\"(No Task).\n    tasksIncluded:  Tasks. This value depends on the value of \"filterTasksMode\". This parameter is only valid when the value of \"filterTasksMode\" is \"include\".\n    filterDescriptionMode:  Filter Description. Filter Description Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"description\"(Description), \"noDescription\"(No Description), \"contains\"(Contains).\n    timeEntryDescription:  Description. This value depends on the value of \"filterDescriptionMode\". This parameter is only valid when the value of \"filterDescriptionMode\" is \"description\".\n    filterTagsMode:  Filter Tags. Filter Tags Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"include\"(Include), \"exclude\"(Exclude), \"match\"(Match), \"noTags\"(No Tags).\n    tagsIncluded:  Included Tags. This value depends on the value of \"filterTagsMode\". This parameter is only valid when the value of \"filterTagsMode\" is \"include\".\n    tagsExcluded:  Excluded Tags. This value depends on the value of \"filterTagsMode\". This parameter is only valid when the value of \"filterTagsMode\" is \"exclude\".\n    tagsMatched:  Matched Tags. This value depends on the value of \"filterTagsMode\". This parameter is only valid when the value of \"filterTagsMode\" is \"match\".\n    filterBillableMode:  Filter Billable. Filter Billable Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"billable\"(Billable), \"notBillable\"(Not Billable).\nReturn Value:\n    Message: Message.\nDescription:\n    Get Saved Timers: Gets the list of saved timers in the app.\nParameterSummary: (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers; (Get saved timers) Get saved timers\n",
    "com.joehribar.toggl.AddProjectIntent": "com.joehribar.toggl.AddProjectIntent(project: String, workspace: WorkspaceDetails(Object), assignClient: Bool, client: String, billable: Bool, color: String) -> Message\n                            : String\nParameters:\n    project:  Project.\n    workspace:  Workspace. Workspace Details.\n    assignClient:  Assign Client.\n    client:  Client. This value depends on the value of \"assignClient\". This parameter is only valid when the value of \"assignClient\" is True.\n    billable:  Billable.\n    color:  Color.\nReturn Value:\n    Message: Message.\nDescription:\n    Add Project: Adds a new project with the specified parameters.\nParameterSummary: (Add project ${project}) Add project ${project}; (Add project ${project}) Add project ${project}\n",
    "com.joehribar.toggl.ViewSavedTimersIntent": "com.joehribar.toggl.ViewSavedTimersIntent(savedTimers: SavedTimerDetails(Object), compactMode: Bool, showStartControls: Bool, startControlsInterval1: TimerWidgetStartInterval(Enum) = \"min1\", startControlsInterval2: TimerWidgetStartInterval(Enum) = \"min5\", startControlsInterval3: TimerWidgetStartInterval(Enum) = \"lastStopTime\", showPageControls: Bool, showCurrentTimeEntry: Bool, appearance: Appearance(Enum) = \"system\", alwaysShowCurrentColor: Bool, alwaysShowProjectColor: Bool, alwaysShowCurrentColorGradient: Bool, alwaysShowProjectColorGradient: Bool, useBlackWhenColorNotShown: Bool, useBlackWhenColorNotShownGradient: Bool, customColor: String, textColor: TextColor(Enum) = \"black\", openAppLocation: OpenAppLocation(Enum) = \"app\")\nParameters:\n    savedTimers:  Saved Timers. Timer Details.\n    compactMode:  Compact Mode.\n    showStartControls:  Show Start Controls.\n    startControlsInterval1:  Start Interval 1. Timer Widget Start Interval. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"min1\"(1 Minute Ago), \"min5\"(5 Minutes Ago), \"min10\"(10 Minutes Ago), \"min15\"(15 Minutes Ago), \"min30\"(30 Minutes Ago), \"ask\"(Ask Each Time), \"lastStopTime\"(Last Stop Time). This value depends on the value of \"showStartControls\". This parameter is only valid when the value of \"showStartControls\" is True.\n    startControlsInterval2:  Start Interval 2. Timer Widget Start Interval. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"min1\"(1 Minute Ago), \"min5\"(5 Minutes Ago), \"min10\"(10 Minutes Ago), \"min15\"(15 Minutes Ago), \"min30\"(30 Minutes Ago), \"ask\"(Ask Each Time), \"lastStopTime\"(Last Stop Time). This value depends on the value of \"showStartControls\". This parameter is only valid when the value of \"showStartControls\" is True.\n    startControlsInterval3:  Start Interval 3. Timer Widget Start Interval. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"min1\"(1 Minute Ago), \"min5\"(5 Minutes Ago), \"min10\"(10 Minutes Ago), \"min15\"(15 Minutes Ago), \"min30\"(30 Minutes Ago), \"ask\"(Ask Each Time), \"lastStopTime\"(Last Stop Time). This value depends on the value of \"showStartControls\". This parameter is only valid when the value of \"showStartControls\" is True.\n    showPageControls:  Show Timer Pages.\n    showCurrentTimeEntry:  Show Current Time Entry.\n    appearance:  Appearance. Appearance. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"system\"(System), \"light\"(Always Light), \"dark\"(Always Dark), \"black\"(Always Black), \"blackInDarkMode\"(Black in Dark Mode), \"projectColor\"(Project Color), \"projectColorGradient\"(Project Color Gradient), \"custom\"(Custom Color).\n    alwaysShowCurrentColor:  Always Show Current Color. This value depends on the value of \"appearance\". This parameter is only valid when the value of \"appearance\" is \"projectColor\".\n    alwaysShowProjectColor:  Single Selected Project: Always Show Project Color. This value depends on the value of \"appearance\". This parameter is only valid when the value of \"appearance\" is \"projectColor\".\n    alwaysShowCurrentColorGradient:  Always Show Current Color. This value depends on the value of \"appearance\". This parameter is only valid when the value of \"appearance\" is \"projectColorGradient\".\n    alwaysShowProjectColorGradient:  Single Selected Project: Always Show Project Color. This value depends on the value of \"appearance\". This parameter is only valid when the value of \"appearance\" is \"projectColorGradient\".\n    useBlackWhenColorNotShown:  Use Black When Color Not Shown. This value depends on the value of \"appearance\". This parameter is only valid when the value of \"appearance\" is \"projectColor\".\n    useBlackWhenColorNotShownGradient:  Use Black When Color Not Shown. This value depends on the value of \"appearance\". This parameter is only valid when the value of \"appearance\" is \"projectColorGradient\".\n    customColor:  Custom Hex Color. This value depends on the value of \"appearance\". This parameter is only valid when the value of \"appearance\" is \"custom\".\n    textColor:  Text Color. Text Color. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"black\"(Black), \"white\"(White). This value depends on the value of \"appearance\". This parameter is only valid when the value of \"appearance\" is \"custom\".\n    openAppLocation:  Widget Opens. Open App Location. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"app\"(App), \"savedTimers\"(Saved Timers), \"timeEntries\"(Time Entries), \"currentTimeEntry\"(Current Time Entry), \"newCurrentTimeEntry\"(New Current Time Entry), \"timersLists\"(Timers Lists), \"reportsOverview\"(Reports Overview), \"summaryReport\"(Summary Report).\nDescription:\n    View Saved Timers: Shows a customizable grid of saved timers.\nParameterSummary: () View Saved Timers\n",
    "com.joehribar.toggl.ViewTimeTrackedIntent": "com.joehribar.toggl.ViewTimeTrackedIntent(timePeriod: TimePeriodForWidget(Enum) = \"today\", thisWeekShowsLast7Days: Bool, reportMode: ReportMode(Enum) = \"useWidgetFilters\", savedReport: SavedReportDetails(Object), showSavedReportLabel: Bool, workspace: WorkspaceDetails(Object), filterClientMode: FilterClientMode(Enum) = \"off\", client: String, filterProjectsMode: FilterProjectsMode(Enum) = \"off\", projectsIncluded: ProjectDetails(Object), projectsExcluded: ProjectDetails(Object), filterTasksMode: FilterTasksMode(Enum) = \"off\", tasksIncluded: ProjectDetails(Object), filterDescriptionMode: FilterDescriptionMode(Enum) = \"off\", timeEntryDescription: String, filterTagsMode: FilterTagsMode(Enum) = \"off\", tagsIncluded: String, tagsExcluded: String, tagsMatched: String, filterBillableMode: FilterBillableMode(Enum) = \"off\", detailsGroupingMode: DetailsGroupingMode(Enum) = \"projects\", secondaryDetailsGroupingMode: DetailsGroupingMode(Enum) = \"descriptions\", showMoreGraphItems: Bool, showMoreGraphs: Bool, showWeekByDayInMedium: Bool, showExtendedDetails: Bool, showWeekByDay: Bool, rounding: Bool, roundingMode: RoundingMode(Enum) = \"roundUpTo\", roundingInterval: RoundingInterval(Enum) = \"min1\", roundingHideSeconds: Bool = True, useCustomHeading: Bool, customHeading: String, includeTimePeriod: Bool = True, barColor: BarColor(Enum) = \"appThemeColor\", customBarColor: String, showCurrentTimeEntry: Bool, showCompactCurrentTimeEntry: Bool, showStopButton: Bool, showTimePeriodSwitchButton: Bool, includeWeekByDayInTimePeriodSwitch: Bool = True, appearance: Appearance(Enum) = \"system\", alwaysShowCurrentColor: Bool, alwaysShowProjectColor: Bool, alwaysShowCurrentColorGradient: Bool, alwaysShowProjectColorGradient: Bool, useBlackWhenColorNotShown: Bool, useBlackWhenColorNotShownGradient: Bool, customColor: String, textColor: TextColor(Enum) = \"black\", openAppLocation: OpenAppLocation(Enum) = \"app\")\nParameters:\n    timePeriod:  Time Period. Time Period For Widget. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"today\"(Today), \"thisWeek\"(This Week).\n    thisWeekShowsLast7Days:  This Week Shows Last 7 Days.\n    reportMode:  Report Mode. Report Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"useWidgetFilters\"(Use Widget Filters), \"useSavedReport\"(Use Saved Report).\n    savedReport:  Saved Report. Saved Report Details. This value depends on the value of \"reportMode\". This parameter is only valid when the value of \"reportMode\" is \"useSavedReport\".\n    showSavedReportLabel:  Show Saved Report Label. This value depends on the value of \"reportMode\". This parameter is only valid when the value of \"reportMode\" is \"useSavedReport\".\n    workspace:  Workspace. Workspace Details.\n    filterClientMode:  Filter Client. Filter Client Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"client\"(Client), \"noClient\"(No Client).\n    client:  Client. This value depends on the value of \"filterClientMode\". This parameter is only valid when the value of \"filterClientMode\" is \"client\".\n    filterProjectsMode:  Filter Projects. Filter Projects Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"include\"(Include), \"exclude\"(Exclude), \"noProject\"(No Project).\n    projectsIncluded:  Included Projects. Project Details. This value depends on the value of \"filterProjectsMode\". This parameter is only valid when the value of \"filterProjectsMode\" is \"include\".\n    projectsExcluded:  Excluded Projects. Project Details. This value depends on the value of \"filterProjectsMode\". This parameter is only valid when the value of \"filterProjectsMode\" is \"exclude\".\n    filterTasksMode:  Filter Tasks. Filter Tasks Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"include\"(Include), \"noTask\"(No Task).\n    tasksIncluded:  Included Tasks. Project Details. This value depends on the value of \"filterTasksMode\". This parameter is only valid when the value of \"filterTasksMode\" is \"include\".\n    filterDescriptionMode:  Filter Description. Filter Description Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"description\"(Description), \"noDescription\"(No Description), \"contains\"(Contains).\n    timeEntryDescription:  Description. This value depends on the value of \"filterDescriptionMode\". This parameter is only valid when the value of \"filterDescriptionMode\" is \"description\".\n    filterTagsMode:  Filter Tags. Filter Tags Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"include\"(Include), \"exclude\"(Exclude), \"match\"(Match), \"noTags\"(No Tags).\n    tagsIncluded:  Included Tags. This value depends on the value of \"filterTagsMode\". This parameter is only valid when the value of \"filterTagsMode\" is \"include\".\n    tagsExcluded:  Excluded Tags. This value depends on the value of \"filterTagsMode\". This parameter is only valid when the value of \"filterTagsMode\" is \"exclude\".\n    tagsMatched:  Matched Tags. This value depends on the value of \"filterTagsMode\". This parameter is only valid when the value of \"filterTagsMode\" is \"match\".\n    filterBillableMode:  Filter Billable. Filter Billable Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"billable\"(Billable), \"notBillable\"(Not Billable).\n    detailsGroupingMode:  Grouping. Details Grouping Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"projects\"(Projects), \"tasks\"(Tasks), \"descriptions\"(Descriptions), \"tags\"(Tags), \"clients\"(Clients), \"days\"(Days), \"tagsSplit\"(Tags (Split)).\n    secondaryDetailsGroupingMode:  Secondary Grouping. Details Grouping Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"projects\"(Projects), \"tasks\"(Tasks), \"descriptions\"(Descriptions), \"tags\"(Tags), \"clients\"(Clients), \"days\"(Days), \"tagsSplit\"(Tags (Split)).\n    showMoreGraphItems:  Show More Graph Items.\n    showMoreGraphs:  Medium: Show Two Graphs.\n    showWeekByDayInMedium:  Medium: Show Week By Day. This value depends on the value of \"showMoreGraphs\". This parameter is only valid when the value of \"showMoreGraphs\" is True.\n    showExtendedDetails:  Large: Show Extended Details.\n    showWeekByDay:  Large: Show Week By Day. This value depends on the value of \"showExtendedDetails\". This parameter is only valid when the value of \"showExtendedDetails\" is False.\n    rounding:  Round Durations.\n    roundingMode:  Rounding Mode. Rounding Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"roundUpTo\"(Round Up To), \"roundToNearest\"(Round to Nearest), \"roundDownTo\"(Round Down To). This value depends on the value of \"rounding\". This parameter is only valid when the value of \"rounding\" is True.\n    roundingInterval:  Rounding Interval. Rounding Interval. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"min1\"(1 min), \"min5\"(5 min), \"min6\"(6 min), \"min10\"(10 min), \"min12\"(12 min), \"min15\"(15 min), \"min30\"(30 min), \"h1\"(1 h), \"h4\"(4 h). This value depends on the value of \"rounding\". This parameter is only valid when the value of \"rounding\" is True.\n    roundingHideSeconds:  Hide Seconds. This value depends on the value of \"rounding\". This parameter is only valid when the value of \"rounding\" is True.\n    useCustomHeading:  Use Custom Heading.\n    customHeading:  Custom Heading. This value depends on the value of \"useCustomHeading\". This parameter is only valid when the value of \"useCustomHeading\" is True.\n    includeTimePeriod:  Include Time Period. This value depends on the value of \"useCustomHeading\". This parameter is only valid when the value of \"useCustomHeading\" is True.\n    barColor:  Non-Project Bar Color. Bar Color. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"appThemeColor\"(App Theme Color), \"red\"(Red), \"darkRed\"(Dark Red), \"rose\"(Rose), \"orange\"(Orange), \"brown\"(Brown), \"yellow\"(Yellow), \"darkGreen\"(Dark Green), \"green\"(Green), \"teal\"(Teal), \"blue\"(Blue), \"darkBlue\"(Dark Blue), \"slate\"(Slate), \"lightPurple\"(Light Purple), \"purple\"(Purple), \"pink\"(Pink), \"custom\"(Custom Color).\n    customBarColor:  Custom Bar Hex Color. This value depends on the value of \"barColor\". This parameter is only valid when the value of \"barColor\" is \"custom\".\n    showCurrentTimeEntry:  Show Current Time Entry.\n    showCompactCurrentTimeEntry:  Medium: Compact Current Time Entry. This value depends on the value of \"showCurrentTimeEntry\". This parameter is only valid when the value of \"showCurrentTimeEntry\" is True.\n    showStopButton:  Show Stop Button.\n    showTimePeriodSwitchButton:  Show Time Period Switch Button.\n    includeWeekByDayInTimePeriodSwitch:  Include Week By Day. This value depends on the value of \"showTimePeriodSwitchButton\". This parameter is only valid when the value of \"showTimePeriodSwitchButton\" is True.\n    appearance:  Appearance. Appearance. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"system\"(System), \"light\"(Always Light), \"dark\"(Always Dark), \"black\"(Always Black), \"blackInDarkMode\"(Black in Dark Mode), \"projectColor\"(Project Color), \"projectColorGradient\"(Project Color Gradient), \"custom\"(Custom Color).\n    alwaysShowCurrentColor:  Always Show Current Color. This value depends on the value of \"appearance\". This parameter is only valid when the value of \"appearance\" is \"projectColor\".\n    alwaysShowProjectColor:  Single Included Project: Always Show Project Color. This value depends on the value of \"appearance\". This parameter is only valid when the value of \"appearance\" is \"projectColor\".\n    alwaysShowCurrentColorGradient:  Always Show Current Color. This value depends on the value of \"appearance\". This parameter is only valid when the value of \"appearance\" is \"projectColorGradient\".\n    alwaysShowProjectColorGradient:  Single Included Project: Always Show Project Color. This value depends on the value of \"appearance\". This parameter is only valid when the value of \"appearance\" is \"projectColorGradient\".\n    useBlackWhenColorNotShown:  Use Black Appearance When Color Not Shown. This value depends on the value of \"appearance\". This parameter is only valid when the value of \"appearance\" is \"projectColor\".\n    useBlackWhenColorNotShownGradient:  Use Black Appearance When Color Not Shown. This value depends on the value of \"appearance\". This parameter is only valid when the value of \"appearance\" is \"projectColorGradient\".\n    customColor:  Custom Hex Color. This value depends on the value of \"appearance\". This parameter is only valid when the value of \"appearance\" is \"custom\".\n    textColor:  Text Color. Text Color. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"black\"(Black), \"white\"(White). This value depends on the value of \"appearance\". This parameter is only valid when the value of \"appearance\" is \"custom\".\n    openAppLocation:  Widget Opens. Open App Location. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"app\"(App), \"savedTimers\"(Saved Timers), \"timeEntries\"(Time Entries), \"currentTimeEntry\"(Current Time Entry), \"newCurrentTimeEntry\"(New Current Time Entry), \"timersLists\"(Timers Lists), \"reportsOverview\"(Reports Overview), \"summaryReport\"(Summary Report).\nDescription:\n    View Time Tracked: Shows a customizable report of time tracked.\nParameterSummary: () View Time Tracked\n",
    "com.joehribar.toggl.ViewCurrentTimeEntryIntent": "com.joehribar.toggl.ViewCurrentTimeEntryIntent(startButtonOpens: StartButtonOpens(Enum) = \"timersLists\", appearance: Appearance(Enum) = \"system\", useBlackWhenColorNotShown: Bool, useBlackWhenColorNotShownGradient: Bool, customColor: String, textColor: TextColor(Enum) = \"black\", openAppLocation: OpenAppLocation(Enum) = \"currentTimeEntry\")\nParameters:\n    startButtonOpens:  Start Button Opens. Start Button Opens. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"timersLists\"(Timers Lists), \"editView\"(Edit View), \"app\"(App).\n    appearance:  Appearance. Appearance. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"system\"(System), \"light\"(Always Light), \"dark\"(Always Dark), \"black\"(Always Black), \"blackInDarkMode\"(Black in Dark Mode), \"projectColor\"(Project Color), \"projectColorGradient\"(Project Color Gradient), \"custom\"(Custom Color).\n    useBlackWhenColorNotShown:  Use Black Appearance When Color Not Shown. This value depends on the value of \"appearance\". This parameter is only valid when the value of \"appearance\" is \"projectColor\".\n    useBlackWhenColorNotShownGradient:  Use Black Appearance When Color Not Shown. This value depends on the value of \"appearance\". This parameter is only valid when the value of \"appearance\" is \"projectColorGradient\".\n    customColor:  Custom Hex Color. This value depends on the value of \"appearance\". This parameter is only valid when the value of \"appearance\" is \"custom\".\n    textColor:  Text Color. Text Color. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"black\"(Black), \"white\"(White). This value depends on the value of \"appearance\". This parameter is only valid when the value of \"appearance\" is \"custom\".\n    openAppLocation:  Widget Opens. Open App Location. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"app\"(App), \"savedTimers\"(Saved Timers), \"timeEntries\"(Time Entries), \"currentTimeEntry\"(Current Time Entry), \"newCurrentTimeEntry\"(New Current Time Entry), \"timersLists\"(Timers Lists), \"reportsOverview\"(Reports Overview), \"summaryReport\"(Summary Report).\nDescription:\n    View Current Time Entry: Shows the current running time entry.\nParameterSummary: () View Current Time Entry\n",
    "com.joehribar.toggl.ViewSummaryReportIntent": "com.joehribar.toggl.ViewSummaryReportIntent(reportMode: ReportMode(Enum) = \"useWidgetFilters\", savedReport: SavedReportDetails(Object), showSavedReportLabel: Bool, timePeriod: TimePeriodForReportWidget(Enum) = \"thisMonth\", sinceDate: String, lastNumberOfDays: Integer = 7, workspace: WorkspaceDetails(Object), filterClientMode: FilterClientMode(Enum) = \"off\", client: String, filterProjectsMode: FilterProjectsMode(Enum) = \"off\", projectsIncluded: ProjectDetails(Object), projectsExcluded: ProjectDetails(Object), filterTasksMode: FilterTasksMode(Enum) = \"off\", tasksIncluded: ProjectDetails(Object), filterDescriptionMode: FilterDescriptionMode(Enum) = \"off\", timeEntryDescription: String, filterTagsMode: FilterTagsModeReport(Enum) = \"off\", tagsIncluded: String, tagsExcluded: String, filterBillableMode: FilterBillableMode(Enum) = \"off\", detailsGroupingMode: DetailsGroupingModeReport(Enum) = \"projects\", showMoreGraphItems: Bool, useCustomHeading: Bool, customHeading: String, includeTimePeriod: Bool = True, barColor: BarColor(Enum) = \"appThemeColor\", customBarColor: String, showCurrentTimeEntry: Bool, showStopButton: Bool, appearance: Appearance(Enum) = \"system\", alwaysShowCurrentColor: Bool, alwaysShowProjectColor: Bool, alwaysShowCurrentColorGradient: Bool, alwaysShowProjectColorGradient: Bool, useBlackWhenColorNotShown: Bool, useBlackWhenColorNotShownGradient: Bool, customColor: String, textColor: TextColor(Enum) = \"black\", openAppLocation: OpenAppLocation(Enum) = \"app\")\nParameters:\n    reportMode:  Report Mode. Report Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"useWidgetFilters\"(Use Widget Filters), \"useSavedReport\"(Use Saved Report).\n    savedReport:  Saved Report. Saved Report Details. This value depends on the value of \"reportMode\". This parameter is only valid when the value of \"reportMode\" is \"useSavedReport\".\n    showSavedReportLabel:  Show Saved Report Label. This value depends on the value of \"reportMode\". This parameter is only valid when the value of \"reportMode\" is \"useSavedReport\".\n    timePeriod:  Time Period. Time Period For Report Widget. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"today\"(Today), \"thisWeek\"(This Week), \"thisMonth\"(This Month), \"thisYear\"(This Year), \"sinceDate\"(Since Date), \"lastNumberOfDays\"(Last Number of Days), \"last7Days\"(Last 7 Days), \"last30Days\"(Last 30 Days).\n    sinceDate:  Date. This value depends on the value of \"timePeriod\". This parameter is only valid when the value of \"timePeriod\" is \"sinceDate\".\n    lastNumberOfDays:  Days. This value depends on the value of \"timePeriod\". This parameter is only valid when the value of \"timePeriod\" is \"lastNumberOfDays\".\n    workspace:  Workspace. Workspace Details.\n    filterClientMode:  Filter Client. Filter Client Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"client\"(Client), \"noClient\"(No Client).\n    client:  Client. This value depends on the value of \"filterClientMode\". This parameter is only valid when the value of \"filterClientMode\" is \"client\".\n    filterProjectsMode:  Filter Projects. Filter Projects Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"include\"(Include), \"exclude\"(Exclude), \"noProject\"(No Project).\n    projectsIncluded:  Included Projects. Project Details. This value depends on the value of \"filterProjectsMode\". This parameter is only valid when the value of \"filterProjectsMode\" is \"include\".\n    projectsExcluded:  Excluded Projects. Project Details. This value depends on the value of \"filterProjectsMode\". This parameter is only valid when the value of \"filterProjectsMode\" is \"exclude\".\n    filterTasksMode:  Filter Tasks. Filter Tasks Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"include\"(Include), \"noTask\"(No Task).\n    tasksIncluded:  Included Tasks. Project Details. This value depends on the value of \"filterTasksMode\". This parameter is only valid when the value of \"filterTasksMode\" is \"include\".\n    filterDescriptionMode:  Filter Description. Filter Description Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"description\"(Description), \"noDescription\"(No Description), \"contains\"(Contains).\n    timeEntryDescription:  Description. This value depends on the value of \"filterDescriptionMode\". This parameter is only valid when the value of \"filterDescriptionMode\" is \"description\".\n    filterTagsMode:  Filter Tags. Filter Tags Mode Report. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"include\"(Include), \"exclude\"(Exclude), \"noTags\"(No Tags).\n    tagsIncluded:  Included Tags. This value depends on the value of \"filterTagsMode\". This parameter is only valid when the value of \"filterTagsMode\" is \"include\".\n    tagsExcluded:  Excluded Tags. This value depends on the value of \"filterTagsMode\". This parameter is only valid when the value of \"filterTagsMode\" is \"exclude\".\n    filterBillableMode:  Filter Billable. Filter Billable Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"billable\"(Billable), \"notBillable\"(Not Billable).\n    detailsGroupingMode:  Grouping. Details Grouping Mode Report. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"projects\"(Projects), \"descriptions\"(Descriptions).\n    showMoreGraphItems:  Show More Graph Items.\n    useCustomHeading:  Use Custom Heading.\n    customHeading:  Custom Heading. This value depends on the value of \"useCustomHeading\". This parameter is only valid when the value of \"useCustomHeading\" is True.\n    includeTimePeriod:  Include Time Period. This value depends on the value of \"useCustomHeading\". This parameter is only valid when the value of \"useCustomHeading\" is True.\n    barColor:  Non-Project Bar Color. Bar Color. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"appThemeColor\"(App Theme Color), \"red\"(Red), \"darkRed\"(Dark Red), \"rose\"(Rose), \"orange\"(Orange), \"brown\"(Brown), \"yellow\"(Yellow), \"darkGreen\"(Dark Green), \"green\"(Green), \"teal\"(Teal), \"blue\"(Blue), \"darkBlue\"(Dark Blue), \"slate\"(Slate), \"lightPurple\"(Light Purple), \"purple\"(Purple), \"pink\"(Pink), \"custom\"(Custom Color).\n    customBarColor:  Custom Bar Hex Color. This value depends on the value of \"barColor\". This parameter is only valid when the value of \"barColor\" is \"custom\".\n    showCurrentTimeEntry:  Show Current Time Entry.\n    showStopButton:  Show Stop Button.\n    appearance:  Appearance. Appearance. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"system\"(System), \"light\"(Always Light), \"dark\"(Always Dark), \"black\"(Always Black), \"blackInDarkMode\"(Black in Dark Mode), \"projectColor\"(Project Color), \"projectColorGradient\"(Project Color Gradient), \"custom\"(Custom Color).\n    alwaysShowCurrentColor:  Always Show Current Color. This value depends on the value of \"appearance\". This parameter is only valid when the value of \"appearance\" is \"projectColor\".\n    alwaysShowProjectColor:  Single Included Project: Always Show Project Color. This value depends on the value of \"appearance\". This parameter is only valid when the value of \"appearance\" is \"projectColor\".\n    alwaysShowCurrentColorGradient:  Always Show Current Color. This value depends on the value of \"appearance\". This parameter is only valid when the value of \"appearance\" is \"projectColorGradient\".\n    alwaysShowProjectColorGradient:  Single Included Project: Always Show Project Color. This value depends on the value of \"appearance\". This parameter is only valid when the value of \"appearance\" is \"projectColorGradient\".\n    useBlackWhenColorNotShown:  Use Black Appearance When Color Not Shown. This value depends on the value of \"appearance\". This parameter is only valid when the value of \"appearance\" is \"projectColor\".\n    useBlackWhenColorNotShownGradient:  Use Black Appearance When Color Not Shown. This value depends on the value of \"appearance\". This parameter is only valid when the value of \"appearance\" is \"projectColorGradient\".\n    customColor:  Custom Hex Color. This value depends on the value of \"appearance\". This parameter is only valid when the value of \"appearance\" is \"custom\".\n    textColor:  Text Color. Text Color. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"black\"(Black), \"white\"(White). This value depends on the value of \"appearance\". This parameter is only valid when the value of \"appearance\" is \"custom\".\n    openAppLocation:  Widget Opens. Open App Location. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"app\"(App), \"savedTimers\"(Saved Timers), \"timeEntries\"(Time Entries), \"currentTimeEntry\"(Current Time Entry), \"newCurrentTimeEntry\"(New Current Time Entry), \"timersLists\"(Timers Lists), \"reportsOverview\"(Reports Overview), \"summaryReport\"(Summary Report).\nDescription:\n    View Summary Report: Shows a customizable report of time tracked.\nParameterSummary: () View Summary Report\n",
    "com.joehribar.toggl.AddSavedTimerIntent": "com.joehribar.toggl.AddSavedTimerIntent(workspace: WorkspaceDetails(Object), project: String, timeEntryDescription: String, tags: String, billable: Bool) -> Message\n                            : String\nParameters:\n    workspace:  Workspace. Workspace Details.\n    project:  Project.\n    timeEntryDescription:  Description.\n    tags:  Tags.\n    billable:  Billable.\nReturn Value:\n    Message: Message.\nDescription:\n    Add Saved Timer: Adds a saved timer with the specified parameters.\nParameterSummary: (Add ${project} ${timeEntryDescription} saved timer tagged ${tags}) Add ${project} ${timeEntryDescription} saved timer tagged ${tags}\n",
    "com.joehribar.toggl.ViewRecentTimeEntriesIntent": "com.joehribar.toggl.ViewRecentTimeEntriesIntent(workspace: WorkspaceDetails(Object), filterClientMode: FilterClientMode(Enum) = \"off\", client: String, filterProjectsMode: FilterProjectsMode(Enum) = \"off\", projectsIncluded: ProjectDetails(Object), projectsExcluded: ProjectDetails(Object), filterTasksMode: FilterTasksMode(Enum) = \"off\", tasksIncluded: ProjectDetails(Object), filterDescriptionMode: FilterDescriptionMode(Enum) = \"off\", timeEntryDescription: String, filterTagsMode: FilterTagsMode(Enum) = \"off\", tagsIncluded: String, tagsExcluded: String, tagsMatched: String, filterBillableMode: FilterBillableMode(Enum) = \"off\", includeMatchingSavedTimers: Bool, includeCurrentTimeEntry: Bool, sorting: RecentTimeEntriesWidgetSortingMode(Enum) = \"recency\", compactMode: Bool, showStartControls: Bool, startControlsInterval1: TimerWidgetStartInterval(Enum) = \"min1\", startControlsInterval2: TimerWidgetStartInterval(Enum) = \"min5\", startControlsInterval3: TimerWidgetStartInterval(Enum) = \"lastStopTime\", showPageControls: Bool, showCurrentTimeEntry: Bool, appearance: Appearance(Enum) = \"system\", alwaysShowCurrentColor: Bool, alwaysShowProjectColor: Bool, alwaysShowCurrentColorGradient: Bool, alwaysShowProjectColorGradient: Bool, useBlackWhenColorNotShown: Bool, useBlackWhenColorNotShownGradient: Bool, customColor: String, textColor: TextColor(Enum) = \"black\", openAppLocation: OpenAppLocation(Enum) = \"app\")\nParameters:\n    workspace:  Workspace. Workspace Details.\n    filterClientMode:  Filter Client. Filter Client Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"client\"(Client), \"noClient\"(No Client).\n    client:  Client. This value depends on the value of \"filterClientMode\". This parameter is only valid when the value of \"filterClientMode\" is \"client\".\n    filterProjectsMode:  Filter Projects. Filter Projects Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"include\"(Include), \"exclude\"(Exclude), \"noProject\"(No Project).\n    projectsIncluded:  Included Projects. Project Details. This value depends on the value of \"filterProjectsMode\". This parameter is only valid when the value of \"filterProjectsMode\" is \"include\".\n    projectsExcluded:  Excluded Projects. Project Details. This value depends on the value of \"filterProjectsMode\". This parameter is only valid when the value of \"filterProjectsMode\" is \"exclude\".\n    filterTasksMode:  Filter Tasks. Filter Tasks Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"include\"(Include), \"noTask\"(No Task).\n    tasksIncluded:  Included Tasks. Project Details. This value depends on the value of \"filterTasksMode\". This parameter is only valid when the value of \"filterTasksMode\" is \"include\".\n    filterDescriptionMode:  Filter Description. Filter Description Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"description\"(Description), \"noDescription\"(No Description), \"contains\"(Contains).\n    timeEntryDescription:  Description. This value depends on the value of \"filterDescriptionMode\". This parameter is only valid when the value of \"filterDescriptionMode\" is \"description\".\n    filterTagsMode:  Filter Tags. Filter Tags Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"include\"(Include), \"exclude\"(Exclude), \"match\"(Match), \"noTags\"(No Tags).\n    tagsIncluded:  Included Tags. This value depends on the value of \"filterTagsMode\". This parameter is only valid when the value of \"filterTagsMode\" is \"include\".\n    tagsExcluded:  Excluded Tags. This value depends on the value of \"filterTagsMode\". This parameter is only valid when the value of \"filterTagsMode\" is \"exclude\".\n    tagsMatched:  Matched Tags. This value depends on the value of \"filterTagsMode\". This parameter is only valid when the value of \"filterTagsMode\" is \"match\".\n    filterBillableMode:  Filter Billable. Filter Billable Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"billable\"(Billable), \"notBillable\"(Not Billable).\n    includeMatchingSavedTimers:  Include Matching Saved Timers.\n    includeCurrentTimeEntry:  Include Current Time Entry.\n    sorting:  Sorting. Recent Timers Widget Sorting Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"recency\"(Last Used), \"projects\"(Projects), \"descriptions\"(Descriptions), \"tags\"(Tags).\n    compactMode:  Compact Mode.\n    showStartControls:  Show Start Controls.\n    startControlsInterval1:  Start Interval 1. Timer Widget Start Interval. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"min1\"(1 Minute Ago), \"min5\"(5 Minutes Ago), \"min10\"(10 Minutes Ago), \"min15\"(15 Minutes Ago), \"min30\"(30 Minutes Ago), \"ask\"(Ask Each Time), \"lastStopTime\"(Last Stop Time). This value depends on the value of \"showStartControls\". This parameter is only valid when the value of \"showStartControls\" is True.\n    startControlsInterval2:  Start Interval 2. Timer Widget Start Interval. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"min1\"(1 Minute Ago), \"min5\"(5 Minutes Ago), \"min10\"(10 Minutes Ago), \"min15\"(15 Minutes Ago), \"min30\"(30 Minutes Ago), \"ask\"(Ask Each Time), \"lastStopTime\"(Last Stop Time). This value depends on the value of \"showStartControls\". This parameter is only valid when the value of \"showStartControls\" is True.\n    startControlsInterval3:  Start Interval 3. Timer Widget Start Interval. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"min1\"(1 Minute Ago), \"min5\"(5 Minutes Ago), \"min10\"(10 Minutes Ago), \"min15\"(15 Minutes Ago), \"min30\"(30 Minutes Ago), \"ask\"(Ask Each Time), \"lastStopTime\"(Last Stop Time). This value depends on the value of \"showStartControls\". This parameter is only valid when the value of \"showStartControls\" is True.\n    showPageControls:  Show Timer Pages.\n    showCurrentTimeEntry:  Show Current Time Entry.\n    appearance:  Appearance. Appearance. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"system\"(System), \"light\"(Always Light), \"dark\"(Always Dark), \"black\"(Always Black), \"blackInDarkMode\"(Black in Dark Mode), \"projectColor\"(Project Color), \"projectColorGradient\"(Project Color Gradient), \"custom\"(Custom Color).\n    alwaysShowCurrentColor:  Always Show Current Color. This value depends on the value of \"appearance\". This parameter is only valid when the value of \"appearance\" is \"projectColor\".\n    alwaysShowProjectColor:  Single Included Project: Always Show Project Color. This value depends on the value of \"appearance\". This parameter is only valid when the value of \"appearance\" is \"projectColor\".\n    alwaysShowCurrentColorGradient:  Always Show Current Color. This value depends on the value of \"appearance\". This parameter is only valid when the value of \"appearance\" is \"projectColorGradient\".\n    alwaysShowProjectColorGradient:  Single Included Project: Always Show Project Color. This value depends on the value of \"appearance\". This parameter is only valid when the value of \"appearance\" is \"projectColorGradient\".\n    useBlackWhenColorNotShown:  Use Black Appearance When Color Not Shown. This value depends on the value of \"appearance\". This parameter is only valid when the value of \"appearance\" is \"projectColor\".\n    useBlackWhenColorNotShownGradient:  Use Black Appearance When Color Not Shown. This value depends on the value of \"appearance\". This parameter is only valid when the value of \"appearance\" is \"projectColorGradient\".\n    customColor:  Custom Hex Color. This value depends on the value of \"appearance\". This parameter is only valid when the value of \"appearance\" is \"custom\".\n    textColor:  Text Color. Text Color. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"black\"(Black), \"white\"(White). This value depends on the value of \"appearance\". This parameter is only valid when the value of \"appearance\" is \"custom\".\n    openAppLocation:  Widget Opens. Open App Location. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"app\"(App), \"savedTimers\"(Saved Timers), \"timeEntries\"(Time Entries), \"currentTimeEntry\"(Current Time Entry), \"newCurrentTimeEntry\"(New Current Time Entry), \"timersLists\"(Timers Lists), \"reportsOverview\"(Reports Overview), \"summaryReport\"(Summary Report).\nDescription:\n    View Recent Timers: Shows a customizable grid of recent timers.\nParameterSummary: () View Recent Timers\n",
    "com.joehribar.toggl.GetRecentTimeEntriesIntent": "com.joehribar.toggl.GetRecentTimeEntriesIntent(workspace: WorkspaceDetails(Object), filterClientMode: FilterClientMode(Enum) = \"off\", client: String, filterProjectsMode: FilterProjectsMode(Enum) = \"off\", projectsIncluded: String, projectsExcluded: String, filterTasksMode: FilterTasksMode(Enum) = \"off\", tasksIncluded: String, filterDescriptionMode: FilterDescriptionMode(Enum) = \"off\", timeEntryDescription: String, filterTagsMode: FilterTagsMode(Enum) = \"off\", tagsIncluded: String, tagsExcluded: String, tagsMatched: String, filterBillableMode: FilterBillableMode(Enum) = \"off\", sorting: RecentTimeEntriesWidgetSortingMode(Enum) = \"recency\") -> Message\n                            : String\nParameters:\n    workspace:  Workspace. Workspace Details.\n    filterClientMode:  Filter Client. Filter Client Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"client\"(Client), \"noClient\"(No Client).\n    client:  Client. This value depends on the value of \"filterClientMode\". This parameter is only valid when the value of \"filterClientMode\" is \"client\".\n    filterProjectsMode:  Filter Projects. Filter Projects Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"include\"(Include), \"exclude\"(Exclude), \"noProject\"(No Project).\n    projectsIncluded:  Projects. This value depends on the value of \"filterProjectsMode\". This parameter is only valid when the value of \"filterProjectsMode\" is \"include\".\n    projectsExcluded:  Projects. This value depends on the value of \"filterProjectsMode\". This parameter is only valid when the value of \"filterProjectsMode\" is \"exclude\".\n    filterTasksMode:  Filter Tasks. Filter Tasks Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"include\"(Include), \"noTask\"(No Task).\n    tasksIncluded:  Tasks. This value depends on the value of \"filterTasksMode\". This parameter is only valid when the value of \"filterTasksMode\" is \"include\".\n    filterDescriptionMode:  Filter Description. Filter Description Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"description\"(Description), \"noDescription\"(No Description), \"contains\"(Contains).\n    timeEntryDescription:  Description. This value depends on the value of \"filterDescriptionMode\". This parameter is only valid when the value of \"filterDescriptionMode\" is \"description\".\n    filterTagsMode:  Filter Tags. Filter Tags Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"include\"(Include), \"exclude\"(Exclude), \"match\"(Match), \"noTags\"(No Tags).\n    tagsIncluded:  Included Tags. This value depends on the value of \"filterTagsMode\". This parameter is only valid when the value of \"filterTagsMode\" is \"include\".\n    tagsExcluded:  Excluded Tags. This value depends on the value of \"filterTagsMode\". This parameter is only valid when the value of \"filterTagsMode\" is \"exclude\".\n    tagsMatched:  Matched Tags. This value depends on the value of \"filterTagsMode\". This parameter is only valid when the value of \"filterTagsMode\" is \"match\".\n    filterBillableMode:  Filter Billable. Filter Billable Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"billable\"(Billable), \"notBillable\"(Not Billable).\n    sorting:  Sorting. Recent Timers Widget Sorting Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"recency\"(Last Used), \"projects\"(Projects), \"descriptions\"(Descriptions), \"tags\"(Tags).\nReturn Value:\n    Message: Message.\nDescription:\n    Get Recent Timers: Gets a list of recent timers.\nParameterSummary: (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers; (Get Recent Timers) Get Recent Timers\n",
    "com.joehribar.toggl.ViewDashboardIntent": "com.joehribar.toggl.ViewDashboardIntent(showCurrentTimeEntryTodayTime: Bool, timersMode: DashboardTimersMode(Enum) = \"savedTimers\", savedTimers: SavedTimerDetails(Object), filterRecentTimeEntries: Bool, includeMatchingSavedTimers: Bool, recentTimeEntriesSorting: RecentTimeEntriesWidgetSortingMode(Enum) = \"recency\", compactMode: Bool = True, showStartControls: Bool, startControlsInterval1: TimerWidgetStartInterval(Enum) = \"min1\", startControlsInterval2: TimerWidgetStartInterval(Enum) = \"min5\", startControlsInterval3: TimerWidgetStartInterval(Enum) = \"lastStopTime\", showPageControls: Bool, graph1Type: DashboardGraphType(Enum) = \"today\", graph2Type: DashboardGraphType(Enum) = \"thisWeek\", thisWeekShowsLast7Days: Bool, showMoreGraphs: Bool, reportMode: ReportMode(Enum) = \"useWidgetFilters\", savedReport: SavedReportDetails(Object), showSavedReportLabel: Bool, workspace: WorkspaceDetails(Object), filterClientMode: FilterClientMode(Enum) = \"off\", client: String, filterProjectsMode: FilterProjectsMode(Enum) = \"off\", projectsIncluded: ProjectDetails(Object), projectsExcluded: ProjectDetails(Object), filterTasksMode: FilterTasksMode(Enum) = \"off\", tasksIncluded: ProjectDetails(Object), filterDescriptionMode: FilterDescriptionMode(Enum) = \"off\", timeEntryDescription: String, filterTagsMode: FilterTagsMode(Enum) = \"off\", tagsIncluded: String, tagsExcluded: String, tagsMatched: String, filterBillableMode: FilterBillableMode(Enum) = \"off\", detailsGroupingMode: DetailsGroupingMode(Enum) = \"projects\", secondaryDetailsGroupingMode: DetailsGroupingMode(Enum) = \"descriptions\", showMoreGraphItems: Bool, rounding: Bool, roundingMode: RoundingMode(Enum) = \"roundUpTo\", roundingInterval: RoundingInterval(Enum) = \"min1\", roundingHideSeconds: Bool = True, useCustomHeading: Bool, customHeading: String, includeTimePeriod: Bool = True, barColor: BarColor(Enum) = \"appThemeColor\", customBarColor: String, showTimePeriodSwitchButton: Bool, includeWeekByDayInTimePeriodSwitch: Bool = True, appearance: Appearance(Enum) = \"system\", useBlackWhenColorNotShown: Bool, useBlackWhenColorNotShownGradient: Bool, customColor: String, textColor: TextColor(Enum) = \"black\", openAppLocation: OpenAppLocation(Enum) = \"app\")\nParameters:\n    showCurrentTimeEntryTodayTime:  Show Current Time Entry Time Today.\n    timersMode:  Timers. Dashboard Timers Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"savedTimers\"(Saved Timers), \"recentTimeEntries\"(Recent Timers).\n    savedTimers:  Saved Timers. Timer Details. This value depends on the value of \"timersMode\". This parameter is only valid when the value of \"timersMode\" is \"savedTimers\".\n    filterRecentTimeEntries:  Apply Graph Filters. This value depends on the value of \"timersMode\". This parameter is only valid when the value of \"timersMode\" is \"recentTimeEntries\".\n    includeMatchingSavedTimers:  Include Matching Saved Timers. This value depends on the value of \"timersMode\". This parameter is only valid when the value of \"timersMode\" is \"recentTimeEntries\".\n    recentTimeEntriesSorting:  Sorting. Recent Timers Widget Sorting Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"recency\"(Last Used), \"projects\"(Projects), \"descriptions\"(Descriptions), \"tags\"(Tags). This value depends on the value of \"timersMode\". This parameter is only valid when the value of \"timersMode\" is \"recentTimeEntries\".\n    compactMode:  Compact Timers.\n    showStartControls:  Show Start Controls.\n    startControlsInterval1:  Start Interval 1. Timer Widget Start Interval. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"min1\"(1 Minute Ago), \"min5\"(5 Minutes Ago), \"min10\"(10 Minutes Ago), \"min15\"(15 Minutes Ago), \"min30\"(30 Minutes Ago), \"ask\"(Ask Each Time), \"lastStopTime\"(Last Stop Time). This value depends on the value of \"showStartControls\". This parameter is only valid when the value of \"showStartControls\" is True.\n    startControlsInterval2:  Start Interval 2. Timer Widget Start Interval. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"min1\"(1 Minute Ago), \"min5\"(5 Minutes Ago), \"min10\"(10 Minutes Ago), \"min15\"(15 Minutes Ago), \"min30\"(30 Minutes Ago), \"ask\"(Ask Each Time), \"lastStopTime\"(Last Stop Time). This value depends on the value of \"showStartControls\". This parameter is only valid when the value of \"showStartControls\" is True.\n    startControlsInterval3:  Start Interval 3. Timer Widget Start Interval. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"min1\"(1 Minute Ago), \"min5\"(5 Minutes Ago), \"min10\"(10 Minutes Ago), \"min15\"(15 Minutes Ago), \"min30\"(30 Minutes Ago), \"ask\"(Ask Each Time), \"lastStopTime\"(Last Stop Time). This value depends on the value of \"showStartControls\". This parameter is only valid when the value of \"showStartControls\" is True.\n    showPageControls:  Show Timer Pages.\n    graph1Type:  Graph 1. Dashboard Graph Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"today\"(Today), \"thisWeek\"(This Week), \"thisWeekByDay\"(This Week by Day).\n    graph2Type:  Graph 2. Dashboard Graph Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"today\"(Today), \"thisWeek\"(This Week), \"thisWeekByDay\"(This Week by Day).\n    thisWeekShowsLast7Days:  This Week Shows Last 7 Days.\n    showMoreGraphs:  Large: Show Two Graphs.\n    reportMode:  Report Mode. Report Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"useWidgetFilters\"(Use Widget Filters), \"useSavedReport\"(Use Saved Report).\n    savedReport:  Saved Report. Saved Report Details. This value depends on the value of \"reportMode\". This parameter is only valid when the value of \"reportMode\" is \"useSavedReport\".\n    showSavedReportLabel:  Show Saved Report Label. This value depends on the value of \"reportMode\". This parameter is only valid when the value of \"reportMode\" is \"useSavedReport\".\n    workspace:  Workspace. Workspace Details.\n    filterClientMode:  Filter Client. Filter Client Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"client\"(Client), \"noClient\"(No Client).\n    client:  Client. This value depends on the value of \"filterClientMode\". This parameter is only valid when the value of \"filterClientMode\" is \"client\".\n    filterProjectsMode:  Filter Projects. Filter Projects Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"include\"(Include), \"exclude\"(Exclude), \"noProject\"(No Project).\n    projectsIncluded:  Included Projects. Project Details. This value depends on the value of \"filterProjectsMode\". This parameter is only valid when the value of \"filterProjectsMode\" is \"include\".\n    projectsExcluded:  Excluded Projects. Project Details. This value depends on the value of \"filterProjectsMode\". This parameter is only valid when the value of \"filterProjectsMode\" is \"exclude\".\n    filterTasksMode:  Filter Tasks. Filter Tasks Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"include\"(Include), \"noTask\"(No Task).\n    tasksIncluded:  Included Tasks. Project Details. This value depends on the value of \"filterTasksMode\". This parameter is only valid when the value of \"filterTasksMode\" is \"include\".\n    filterDescriptionMode:  Filter Description. Filter Description Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"description\"(Description), \"noDescription\"(No Description), \"contains\"(Contains).\n    timeEntryDescription:  Description. This value depends on the value of \"filterDescriptionMode\". This parameter is only valid when the value of \"filterDescriptionMode\" is \"description\".\n    filterTagsMode:  Filter Tags. Filter Tags Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"include\"(Include), \"exclude\"(Exclude), \"match\"(Match), \"noTags\"(No Tags).\n    tagsIncluded:  Included Tags. This value depends on the value of \"filterTagsMode\". This parameter is only valid when the value of \"filterTagsMode\" is \"include\".\n    tagsExcluded:  Excluded Tags. This value depends on the value of \"filterTagsMode\". This parameter is only valid when the value of \"filterTagsMode\" is \"exclude\".\n    tagsMatched:  Matched Tags. This value depends on the value of \"filterTagsMode\". This parameter is only valid when the value of \"filterTagsMode\" is \"match\".\n    filterBillableMode:  Filter Billable. Filter Billable Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"billable\"(Billable), \"notBillable\"(Not Billable).\n    detailsGroupingMode:  Graph Grouping. Details Grouping Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"projects\"(Projects), \"tasks\"(Tasks), \"descriptions\"(Descriptions), \"tags\"(Tags), \"clients\"(Clients), \"days\"(Days), \"tagsSplit\"(Tags (Split)).\n    secondaryDetailsGroupingMode:  Secondary Graph Grouping. Details Grouping Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"projects\"(Projects), \"tasks\"(Tasks), \"descriptions\"(Descriptions), \"tags\"(Tags), \"clients\"(Clients), \"days\"(Days), \"tagsSplit\"(Tags (Split)).\n    showMoreGraphItems:  Show More Graph Items.\n    rounding:  Round Graph Durations.\n    roundingMode:  Rounding Mode. Rounding Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"roundUpTo\"(Round Up To), \"roundToNearest\"(Round to Nearest), \"roundDownTo\"(Round Down To). This value depends on the value of \"rounding\". This parameter is only valid when the value of \"rounding\" is True.\n    roundingInterval:  Rounding Interval. Rounding Interval. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"min1\"(1 min), \"min5\"(5 min), \"min6\"(6 min), \"min10\"(10 min), \"min12\"(12 min), \"min15\"(15 min), \"min30\"(30 min), \"h1\"(1 h), \"h4\"(4 h). This value depends on the value of \"rounding\". This parameter is only valid when the value of \"rounding\" is True.\n    roundingHideSeconds:  Hide Seconds. This value depends on the value of \"rounding\". This parameter is only valid when the value of \"rounding\" is True.\n    useCustomHeading:  Use Custom Graph Heading.\n    customHeading:  Custom Heading. This value depends on the value of \"useCustomHeading\". This parameter is only valid when the value of \"useCustomHeading\" is True.\n    includeTimePeriod:  Include Time Period. This value depends on the value of \"useCustomHeading\". This parameter is only valid when the value of \"useCustomHeading\" is True.\n    barColor:  Non-Project Bar Color. Bar Color. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"appThemeColor\"(App Theme Color), \"red\"(Red), \"darkRed\"(Dark Red), \"rose\"(Rose), \"orange\"(Orange), \"brown\"(Brown), \"yellow\"(Yellow), \"darkGreen\"(Dark Green), \"green\"(Green), \"teal\"(Teal), \"blue\"(Blue), \"darkBlue\"(Dark Blue), \"slate\"(Slate), \"lightPurple\"(Light Purple), \"purple\"(Purple), \"pink\"(Pink), \"custom\"(Custom Color).\n    customBarColor:  Custom Bar Hex Color. This value depends on the value of \"barColor\". This parameter is only valid when the value of \"barColor\" is \"custom\".\n    showTimePeriodSwitchButton:  Show Time Period Switch Button.\n    includeWeekByDayInTimePeriodSwitch:  Include Week By Day. This value depends on the value of \"showTimePeriodSwitchButton\". This parameter is only valid when the value of \"showTimePeriodSwitchButton\" is True.\n    appearance:  Appearance. Appearance. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"system\"(System), \"light\"(Always Light), \"dark\"(Always Dark), \"black\"(Always Black), \"blackInDarkMode\"(Black in Dark Mode), \"projectColor\"(Project Color), \"projectColorGradient\"(Project Color Gradient), \"custom\"(Custom Color).\n    useBlackWhenColorNotShown:  Use Black Appearance When Color Not Shown. This value depends on the value of \"appearance\". This parameter is only valid when the value of \"appearance\" is \"projectColor\".\n    useBlackWhenColorNotShownGradient:  Use Black Appearance When Color Not Shown. This value depends on the value of \"appearance\". This parameter is only valid when the value of \"appearance\" is \"projectColorGradient\".\n    customColor:  Custom Hex Color. This value depends on the value of \"appearance\". This parameter is only valid when the value of \"appearance\" is \"custom\".\n    textColor:  Text Color. Text Color. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"black\"(Black), \"white\"(White). This value depends on the value of \"appearance\". This parameter is only valid when the value of \"appearance\" is \"custom\".\n    openAppLocation:  Widget Opens. Open App Location. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"app\"(App), \"savedTimers\"(Saved Timers), \"timeEntries\"(Time Entries), \"currentTimeEntry\"(Current Time Entry), \"newCurrentTimeEntry\"(New Current Time Entry), \"timersLists\"(Timers Lists), \"reportsOverview\"(Reports Overview), \"summaryReport\"(Summary Report).\nDescription:\n    View Dashboard: Shows the current time entry, timer buttons, and graphs of time tracked.\nParameterSummary: () View Dashboard\n",
    "com.joehribar.toggl.ViewCurrentTimeEntryAccessoryIntent": "com.joehribar.toggl.ViewCurrentTimeEntryAccessoryIntent(circularStyle: CurrentTimeEntryAccessoryCircularStyle(Enum) = \"standard\", showStopButton: Bool = True, openAppLocation: OpenAppLocation(Enum) = \"currentTimeEntry\")\nParameters:\n    circularStyle:  Circular Style. Current Time Entry Accessory Circular Style. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"standard\"(Standard), \"noBackground\"(No Background), \"gauge\"(Gauge).\n    showStopButton:  Show Stop Button.\n    openAppLocation:  Widget Opens. Open App Location. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"app\"(App), \"savedTimers\"(Saved Timers), \"timeEntries\"(Time Entries), \"currentTimeEntry\"(Current Time Entry), \"newCurrentTimeEntry\"(New Current Time Entry), \"timersLists\"(Timers Lists), \"reportsOverview\"(Reports Overview), \"summaryReport\"(Summary Report).\nDescription:\n    View Current Time Entry: Shows the current running time entry.\nParameterSummary: () View Current Time Entry\n",
    "com.joehribar.toggl.ViewTimeTrackedAccessoryIntent": "com.joehribar.toggl.ViewTimeTrackedAccessoryIntent(timePeriod: TimePeriodForWidget(Enum) = \"today\", thisWeekShowsLast7Days: Bool, reportMode: ReportMode(Enum) = \"useWidgetFilters\", savedReport: SavedReportDetails(Object), showSavedReportLabel: Bool, workspace: WorkspaceDetails(Object), filterClientMode: FilterClientMode(Enum) = \"off\", client: String, filterProjectsMode: FilterProjectsMode(Enum) = \"off\", projectsIncluded: ProjectDetails(Object), projectsExcluded: ProjectDetails(Object), filterTasksMode: FilterTasksMode(Enum) = \"off\", tasksIncluded: ProjectDetails(Object), filterDescriptionMode: FilterDescriptionMode(Enum) = \"off\", timeEntryDescription: String, filterTagsMode: FilterTagsMode(Enum) = \"off\", tagsIncluded: String, tagsExcluded: String, tagsMatched: String, filterBillableMode: FilterBillableMode(Enum) = \"off\", detailsGroupingMode: DetailsGroupingModeAccessoryWidget(Enum) = \"projects\", rounding: Bool, roundingMode: RoundingMode(Enum) = \"roundUpTo\", roundingInterval: RoundingInterval(Enum) = \"min1\", roundingHideSeconds: Bool = True, showGraph: Bool = True, useCustomLabel: Bool, customLabel: String, showStopButton: Bool, circularStyle: AccessoryWidgetCircularStyle(Enum) = \"standard\", openAppLocation: OpenAppLocation(Enum) = \"app\")\nParameters:\n    timePeriod:  Time Period. Time Period For Widget. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"today\"(Today), \"thisWeek\"(This Week).\n    thisWeekShowsLast7Days:  This Week Shows Last 7 Days.\n    reportMode:  Report Mode. Report Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"useWidgetFilters\"(Use Widget Filters), \"useSavedReport\"(Use Saved Report).\n    savedReport:  Saved Report. Saved Report Details. This value depends on the value of \"reportMode\". This parameter is only valid when the value of \"reportMode\" is \"useSavedReport\".\n    showSavedReportLabel:  Show Saved Report Label. This value depends on the value of \"reportMode\". This parameter is only valid when the value of \"reportMode\" is \"useSavedReport\".\n    workspace:  Workspace. Workspace Details.\n    filterClientMode:  Filter Client. Filter Client Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"client\"(Client), \"noClient\"(No Client).\n    client:  Client. This value depends on the value of \"filterClientMode\". This parameter is only valid when the value of \"filterClientMode\" is \"client\".\n    filterProjectsMode:  Filter Projects. Filter Projects Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"include\"(Include), \"exclude\"(Exclude), \"noProject\"(No Project).\n    projectsIncluded:  Included Projects. Project Details. This value depends on the value of \"filterProjectsMode\". This parameter is only valid when the value of \"filterProjectsMode\" is \"include\".\n    projectsExcluded:  Excluded Projects. Project Details. This value depends on the value of \"filterProjectsMode\". This parameter is only valid when the value of \"filterProjectsMode\" is \"exclude\".\n    filterTasksMode:  Filter Tasks. Filter Tasks Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"include\"(Include), \"noTask\"(No Task).\n    tasksIncluded:  Included Tasks. Project Details. This value depends on the value of \"filterTasksMode\". This parameter is only valid when the value of \"filterTasksMode\" is \"include\".\n    filterDescriptionMode:  Filter Description. Filter Description Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"description\"(Description), \"noDescription\"(No Description), \"contains\"(Contains).\n    timeEntryDescription:  Description. This value depends on the value of \"filterDescriptionMode\". This parameter is only valid when the value of \"filterDescriptionMode\" is \"description\".\n    filterTagsMode:  Filter Tags. Filter Tags Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"include\"(Include), \"exclude\"(Exclude), \"match\"(Match), \"noTags\"(No Tags).\n    tagsIncluded:  Included Tags. This value depends on the value of \"filterTagsMode\". This parameter is only valid when the value of \"filterTagsMode\" is \"include\".\n    tagsExcluded:  Excluded Tags. This value depends on the value of \"filterTagsMode\". This parameter is only valid when the value of \"filterTagsMode\" is \"exclude\".\n    tagsMatched:  Matched Tags. This value depends on the value of \"filterTagsMode\". This parameter is only valid when the value of \"filterTagsMode\" is \"match\".\n    filterBillableMode:  Filter Billable. Filter Billable Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(Off), \"billable\"(Billable), \"notBillable\"(Not Billable).\n    detailsGroupingMode:  Grouping. Details Grouping Mode Accessory Widget. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"projects\"(Projects), \"tasks\"(Tasks), \"descriptions\"(Descriptions), \"tags\"(Tags), \"clients\"(Clients), \"tagsSplit\"(Tags (Split)).\n    rounding:  Round Durations.\n    roundingMode:  Rounding Mode. Rounding Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"roundUpTo\"(Round Up To), \"roundToNearest\"(Round to Nearest), \"roundDownTo\"(Round Down To). This value depends on the value of \"rounding\". This parameter is only valid when the value of \"rounding\" is True.\n    roundingInterval:  Rounding Interval. Rounding Interval. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"min1\"(1 min), \"min5\"(5 min), \"min6\"(6 min), \"min10\"(10 min), \"min12\"(12 min), \"min15\"(15 min), \"min30\"(30 min), \"h1\"(1 h), \"h4\"(4 h). This value depends on the value of \"rounding\". This parameter is only valid when the value of \"rounding\" is True.\n    roundingHideSeconds:  Hide Seconds. This value depends on the value of \"rounding\". This parameter is only valid when the value of \"rounding\" is True.\n    showGraph:  Show Graph.\n    useCustomLabel:  Use Custom Label.\n    customLabel:  Custom Label. This value depends on the value of \"useCustomLabel\". This parameter is only valid when the value of \"useCustomLabel\" is True.\n    showStopButton:  Show Stop Button.\n    circularStyle:  Circular Style. Accessory Widget Circular Style. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"standard\"(Standard), \"noBackground\"(No Background).\n    openAppLocation:  Widget Opens. Open App Location. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"app\"(App), \"savedTimers\"(Saved Timers), \"timeEntries\"(Time Entries), \"currentTimeEntry\"(Current Time Entry), \"newCurrentTimeEntry\"(New Current Time Entry), \"timersLists\"(Timers Lists), \"reportsOverview\"(Reports Overview), \"summaryReport\"(Summary Report).\nDescription:\n    View Time Tracked: Shows a customizable report of time tracked.\nParameterSummary: () View Time Tracked\n",
    "com.joehribar.toggl.StartTimeEntryAccessoryIntent": "com.joehribar.toggl.StartTimeEntryAccessoryIntent(mode: StartTimeEntryAccessoryMode(Enum) = \"showTimersLists\", showEditView: Bool, savedTimer: SavedTimerDetails(Object), label: SavedTimerLabelMode(Enum) = \"project\", customLabel: String, openAppLocation: OpenAppLocation(Enum) = \"app\", circularStyle: AccessoryWidgetCircularStyle(Enum) = \"standard\")\nParameters:\n    mode:  Widget Action. Start Time Entry Accessory Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"showTimersLists\"(Show Timers Lists), \"startSavedTimer\"(Start Saved Timer).\n    showEditView:  Show Edit View. This value depends on the value of \"mode\". This parameter is only valid when the value of \"mode\" is \"showTimersLists\".\n    savedTimer:  Saved Timer. Timer Details. This value depends on the value of \"mode\". This parameter is only valid when the value of \"mode\" is \"startSavedTimer\".\n    label:  Label. Saved Timer Label Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"project\"(Project), \"description\"(Description), \"tags\"(Tags), \"customLabel\"(Custom Label). This value depends on the value of \"mode\". This parameter is only valid when the value of \"mode\" is \"startSavedTimer\".\n    customLabel:  Custom Label (If Selected). This value depends on the value of \"mode\". This parameter is only valid when the value of \"mode\" is \"startSavedTimer\".\n    openAppLocation:  Widget Opens. Open App Location. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"app\"(App), \"savedTimers\"(Saved Timers), \"timeEntries\"(Time Entries), \"currentTimeEntry\"(Current Time Entry), \"newCurrentTimeEntry\"(New Current Time Entry), \"timersLists\"(Timers Lists), \"reportsOverview\"(Reports Overview), \"summaryReport\"(Summary Report). This value depends on the value of \"mode\". This parameter is only valid when the value of \"mode\" is \"startSavedTimer\".\n    circularStyle:  Circular Style. Accessory Widget Circular Style. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"standard\"(Standard), \"noBackground\"(No Background).\nDescription:\n    Start Time Entry: Starts a new current time entry.\nParameterSummary: () Start Time Entry\n",
    "com.joehribar.toggl.ViewSingleSavedTimerIntent": "com.joehribar.toggl.ViewSingleSavedTimerIntent(savedTimer: SavedTimerDetails(Object), timePeriod: TimePeriodForWidget(Enum) = \"today\", thisWeekShowsLast7Days: Bool, appearance: Appearance(Enum) = \"system\", alwaysShowProjectColor: Bool, alwaysShowProjectColorGradient: Bool, useBlackWhenColorNotShown: Bool, useBlackWhenColorNotShownGradient: Bool, customColor: String, textColor: TextColor(Enum) = \"black\", openAppLocation: OpenAppLocation(Enum) = \"app\")\nParameters:\n    savedTimer:  Saved Timer. Timer Details.\n    timePeriod:  Time Period. Time Period For Widget. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"today\"(Today), \"thisWeek\"(This Week).\n    thisWeekShowsLast7Days:  This Week Shows Last 7 Days.\n    appearance:  Appearance. Appearance. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"system\"(System), \"light\"(Always Light), \"dark\"(Always Dark), \"black\"(Always Black), \"blackInDarkMode\"(Black in Dark Mode), \"projectColor\"(Project Color), \"projectColorGradient\"(Project Color Gradient), \"custom\"(Custom Color).\n    alwaysShowProjectColor:  Always Show Project Color. This value depends on the value of \"appearance\". This parameter is only valid when the value of \"appearance\" is \"projectColor\".\n    alwaysShowProjectColorGradient:  Always Show Project Color. This value depends on the value of \"appearance\". This parameter is only valid when the value of \"appearance\" is \"projectColorGradient\".\n    useBlackWhenColorNotShown:  Use Black Appearance When Color Not Shown. This value depends on the value of \"appearance\". This parameter is only valid when the value of \"appearance\" is \"projectColor\".\n    useBlackWhenColorNotShownGradient:  Use Black Appearance When Color Not Shown. This value depends on the value of \"appearance\". This parameter is only valid when the value of \"appearance\" is \"projectColorGradient\".\n    customColor:  Custom Hex Color. This value depends on the value of \"appearance\". This parameter is only valid when the value of \"appearance\" is \"custom\".\n    textColor:  Text Color. Text Color. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"black\"(Black), \"white\"(White). This value depends on the value of \"appearance\". This parameter is only valid when the value of \"appearance\" is \"custom\".\n    openAppLocation:  Widget Opens. Open App Location. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"app\"(App), \"savedTimers\"(Saved Timers), \"timeEntries\"(Time Entries), \"currentTimeEntry\"(Current Time Entry), \"newCurrentTimeEntry\"(New Current Time Entry), \"timersLists\"(Timers Lists), \"reportsOverview\"(Reports Overview), \"summaryReport\"(Summary Report).\nDescription:\n    View Single Saved Timer: Start a saved timer.\nParameterSummary: () View Single Saved Timer\n",
    "com.joehribar.toggl.ViewProjectIntent": "com.joehribar.toggl.ViewProjectIntent(project: ProjectDetails(Object), workspace: WorkspaceDetails(Object), graph1Type: DashboardGraphType(Enum) = \"today\", graph2Type: DashboardGraphType(Enum) = \"thisWeek\", thisWeekShowsLast7Days: Bool, detailsGroupingMode: DetailsGroupingMode(Enum) = \"descriptions\", showMoreGraphItems: Bool, showMoreGraphs: Bool, showMoreGraphsXL: Bool, timersMode: DashboardTimersMode(Enum) = \"savedTimers\", savedTimers: SavedTimerDetails(Object), includeMatchingSavedTimers: Bool, recentTimersSorting: ProjectWidgetSortingMode(Enum) = \"lastUsed\", compactMode: Bool = True, showStartControls: Bool, startControlsInterval1: TimerWidgetStartInterval(Enum) = \"min1\", startControlsInterval2: TimerWidgetStartInterval(Enum) = \"min5\", startControlsInterval3: TimerWidgetStartInterval(Enum) = \"lastStopTime\", showPageControls: Bool, showTimers: Bool, showCurrentTimeEntry: Bool, showTimePeriodSwitchButton: Bool, includeWeekByDayInTimePeriodSwitch: Bool = True, appearance: Appearance(Enum) = \"system\", alwaysShowProjectColor: Bool, alwaysShowProjectColorGradient: Bool, useBlackWhenColorNotShown: Bool, useBlackWhenColorNotShownGradient: Bool, customColor: String, textColor: TextColor(Enum) = \"black\", openAppLocation: OpenAppLocation(Enum) = \"app\")\nParameters:\n    project:  Project. Project Details.\n    workspace:  Workspace. Workspace Details.\n    graph1Type:  Graph 1. Dashboard Graph Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"today\"(Today), \"thisWeek\"(This Week), \"thisWeekByDay\"(This Week by Day).\n    graph2Type:  Graph 2. Dashboard Graph Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"today\"(Today), \"thisWeek\"(This Week), \"thisWeekByDay\"(This Week by Day).\n    thisWeekShowsLast7Days:  This Week Shows Last 7 Days.\n    detailsGroupingMode:  Graph Grouping. Details Grouping Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"projects\"(Projects), \"tasks\"(Tasks), \"descriptions\"(Descriptions), \"tags\"(Tags), \"clients\"(Clients), \"days\"(Days), \"tagsSplit\"(Tags (Split)).\n    showMoreGraphItems:  Show More Graph Items.\n    showMoreGraphs:  Large: Show Two Graphs.\n    showMoreGraphsXL:  Extra-Large: Show Three Graphs.\n    timersMode:  Timers Mode. Dashboard Timers Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"savedTimers\"(Saved Timers), \"recentTimeEntries\"(Recent Timers).\n    savedTimers:  Saved Timers. Timer Details. This value depends on the value of \"timersMode\". This parameter is only valid when the value of \"timersMode\" is \"savedTimers\".\n    includeMatchingSavedTimers:  Include Matching Saved Timers. This value depends on the value of \"timersMode\". This parameter is only valid when the value of \"timersMode\" is \"recentTimeEntries\".\n    recentTimersSorting:  Recent Timers Sorting. Project Widget Sorting Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"lastUsed\"(Last Used), \"tasks\"(Tasks), \"descriptions\"(Descriptions), \"tags\"(Tags). This value depends on the value of \"timersMode\". This parameter is only valid when the value of \"timersMode\" is \"recentTimeEntries\".\n    compactMode:  Compact Timers.\n    showStartControls:  Show Start Controls.\n    startControlsInterval1:  Start Interval 1. Timer Widget Start Interval. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"min1\"(1 Minute Ago), \"min5\"(5 Minutes Ago), \"min10\"(10 Minutes Ago), \"min15\"(15 Minutes Ago), \"min30\"(30 Minutes Ago), \"ask\"(Ask Each Time), \"lastStopTime\"(Last Stop Time). This value depends on the value of \"showStartControls\". This parameter is only valid when the value of \"showStartControls\" is True.\n    startControlsInterval2:  Start Interval 2. Timer Widget Start Interval. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"min1\"(1 Minute Ago), \"min5\"(5 Minutes Ago), \"min10\"(10 Minutes Ago), \"min15\"(15 Minutes Ago), \"min30\"(30 Minutes Ago), \"ask\"(Ask Each Time), \"lastStopTime\"(Last Stop Time). This value depends on the value of \"showStartControls\". This parameter is only valid when the value of \"showStartControls\" is True.\n    startControlsInterval3:  Start Interval 3. Timer Widget Start Interval. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"min1\"(1 Minute Ago), \"min5\"(5 Minutes Ago), \"min10\"(10 Minutes Ago), \"min15\"(15 Minutes Ago), \"min30\"(30 Minutes Ago), \"ask\"(Ask Each Time), \"lastStopTime\"(Last Stop Time). This value depends on the value of \"showStartControls\". This parameter is only valid when the value of \"showStartControls\" is True.\n    showPageControls:  Show Timer Pages.\n    showTimers:  Small: Show Timers.\n    showCurrentTimeEntry:  Show Current Time Entry.\n    showTimePeriodSwitchButton:  Show Time Period Switch Button.\n    includeWeekByDayInTimePeriodSwitch:  Include Week By Day. This value depends on the value of \"showTimePeriodSwitchButton\". This parameter is only valid when the value of \"showTimePeriodSwitchButton\" is True.\n    appearance:  Appearance. Appearance. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"system\"(System), \"light\"(Always Light), \"dark\"(Always Dark), \"black\"(Always Black), \"blackInDarkMode\"(Black in Dark Mode), \"projectColor\"(Project Color), \"projectColorGradient\"(Project Color Gradient), \"custom\"(Custom Color).\n    alwaysShowProjectColor:  Always Show Project Color. This value depends on the value of \"appearance\". This parameter is only valid when the value of \"appearance\" is \"projectColor\".\n    alwaysShowProjectColorGradient:  Always Show Project Color. This value depends on the value of \"appearance\". This parameter is only valid when the value of \"appearance\" is \"projectColorGradient\".\n    useBlackWhenColorNotShown:  Use Black Appearance When Color Not Shown. This value depends on the value of \"appearance\". This parameter is only valid when the value of \"appearance\" is \"projectColor\".\n    useBlackWhenColorNotShownGradient:  Use Black Appearance When Color Not Shown. This value depends on the value of \"appearance\". This parameter is only valid when the value of \"appearance\" is \"projectColorGradient\".\n    customColor:  Custom Hex Color. This value depends on the value of \"appearance\". This parameter is only valid when the value of \"appearance\" is \"custom\".\n    textColor:  Text Color. Text Color. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"black\"(Black), \"white\"(White). This value depends on the value of \"appearance\". This parameter is only valid when the value of \"appearance\" is \"custom\".\n    openAppLocation:  Widget Opens. Open App Location. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"app\"(App), \"savedTimers\"(Saved Timers), \"timeEntries\"(Time Entries), \"currentTimeEntry\"(Current Time Entry), \"newCurrentTimeEntry\"(New Current Time Entry), \"timersLists\"(Timers Lists), \"reportsOverview\"(Reports Overview), \"summaryReport\"(Summary Report).\nDescription:\n    View Project: View project time tracked and start timers.\nParameterSummary: () View Project\n",
    "com.joehribar.toggl.ConfigureTimeryFocusFilter": "com.joehribar.toggl.ConfigureTimeryFocusFilter(setWorkspace: Bool = \"0\", workspace: WorkspaceAppEntity(Object), filterClients: Bool = \"0\", filterClientsMode: FocusFilterClientsMode(Enum) = \"include\", filteredClients: array(ClientAppEntity(Object)), filterProjects: Bool = \"0\", filterProjectsMode: FocusFilterProjectsMode(Enum) = \"include\", filteredProjects: array(ProjectAppEntity(Object)), filterTags: Bool = \"0\", filterTagsMode: FocusFilterTagsMode(Enum) = \"include\", filteredTags: array(TagAppEntity(Object)), setReports: Bool = \"0\", reportsOverview: ReportsOverviewAppEntity(Object), summaryReport: SummaryReportAppEntity(Object))\nParameters:\n    setWorkspace: Set Workspace. Switch to a particular workspace..\n    workspace: Workspace. Workspace.\n    filterClients: Filter Clients. Show or hide particular clients..\n    filterClientsMode: Filter Clients Mode. Filter Clients. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"include\"(Show Clients), \"exclude\"(Hide Clients).\n    filteredClients: Filtered Clients. Only clients in the active workspace will be shown..\n    filterProjects: Filter Projects. Show or hide particular projects..\n    filterProjectsMode: Filter Projects Mode. Filter Projects. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"include\"(Show Projects), \"exclude\"(Hide Projects).\n    filteredProjects: Filtered Projects. Only projects in the active workspace will be shown. And if clients are filtered, only projects matching the clients filter will be shown..\n    filterTags: Filter Tags. Show or hide particular tags..\n    filterTagsMode: Filter Tags. Filter Tags. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"include\"(Show Tags), \"exclude\"(Hide Tags).\n    filteredTags: Filtered Tags. Only tags in the active workspace will be shown..\n    setReports: Set Reports. Show particular saved reports..\n    reportsOverview: Reports Overview. Reports Overview.\n    summaryReport: Summary Report. Summary Report.\nDescription:\n    Configure Timery: Set the workspace; filter clients, projects, and tags; and set saved reports.\nParameterSummary: (setWorkspace,workspace,filterClients,filterClientsMode,filteredClients,filterProjects,filterProjectsMode,filteredProjects,filterTags,filterTagsMode,filteredTags,setReports,reportsOverview,summaryReport) Configure Timery; (setWorkspace,workspace,filterClients,filterClientsMode,filteredClients,filterProjects,filterProjectsMode,filteredProjects,filterTags,setReports,reportsOverview,summaryReport) Configure Timery; (setWorkspace,workspace,filterClients,filterClientsMode,filteredClients,filterProjects,filterTags,filterTagsMode,filteredTags,setReports,reportsOverview,summaryReport) Configure Timery; (setWorkspace,workspace,filterClients,filterClientsMode,filteredClients,filterProjects,filterTags,setReports,reportsOverview,summaryReport) Configure Timery; (setWorkspace,workspace,filterClients,filterProjects,filterProjectsMode,filteredProjects,filterTags,filterTagsMode,filteredTags,setReports,reportsOverview,summaryReport) Configure Timery; (setWorkspace,workspace,filterClients,filterProjects,filterProjectsMode,filteredProjects,filterTags,setReports,reportsOverview,summaryReport) Configure Timery; (setWorkspace,workspace,filterClients,filterProjects,filterTags,filterTagsMode,filteredTags,setReports,reportsOverview,summaryReport) Configure Timery; (setWorkspace,workspace,filterClients,filterProjects,filterTags,setReports,reportsOverview,summaryReport) Configure Timery; (setWorkspace,workspace,filterClients,filterClientsMode,filteredClients,filterProjects,filterProjectsMode,filteredProjects,filterTags,filterTagsMode,filteredTags,setReports) Configure Timery; (setWorkspace,workspace,filterClients,filterClientsMode,filteredClients,filterProjects,filterProjectsMode,filteredProjects,filterTags,setReports) Configure Timery; (setWorkspace,workspace,filterClients,filterClientsMode,filteredClients,filterProjects,filterTags,filterTagsMode,filteredTags,setReports) Configure Timery; (setWorkspace,workspace,filterClients,filterClientsMode,filteredClients,filterProjects,filterTags,setReports) Configure Timery; (setWorkspace,workspace,filterClients,filterProjects,filterProjectsMode,filteredProjects,filterTags,filterTagsMode,filteredTags,setReports) Configure Timery; (setWorkspace,workspace,filterClients,filterProjects,filterProjectsMode,filteredProjects,filterTags,setReports) Configure Timery; (setWorkspace,workspace,filterClients,filterProjects,filterTags,filterTagsMode,filteredTags,setReports) Configure Timery; (setWorkspace,workspace,filterClients,filterProjects,filterTags,setReports) Configure Timery; (setWorkspace,filterClients,filterClientsMode,filteredClients,filterProjects,filterProjectsMode,filteredProjects,filterTags,filterTagsMode,filteredTags,setReports,reportsOverview,summaryReport) Configure Timery; (setWorkspace,filterClients,filterClientsMode,filteredClients,filterProjects,filterProjectsMode,filteredProjects,filterTags,setReports,reportsOverview,summaryReport) Configure Timery; (setWorkspace,filterClients,filterClientsMode,filteredClients,filterProjects,filterTags,filterTagsMode,filteredTags,setReports,reportsOverview,summaryReport) Configure Timery; (setWorkspace,filterClients,filterClientsMode,filteredClients,filterProjects,filterTags,setReports,reportsOverview,summaryReport) Configure Timery; (setWorkspace,filterClients,filterProjects,filterProjectsMode,filteredProjects,filterTags,filterTagsMode,filteredTags,setReports,reportsOverview,summaryReport) Configure Timery; (setWorkspace,filterClients,filterProjects,filterProjectsMode,filteredProjects,filterTags,setReports,reportsOverview,summaryReport) Configure Timery; (setWorkspace,filterClients,filterProjects,filterTags,filterTagsMode,filteredTags,setReports,reportsOverview,summaryReport) Configure Timery; (setWorkspace,filterClients,filterProjects,filterTags,setReports,reportsOverview,summaryReport) Configure Timery; (setWorkspace,filterClients,filterClientsMode,filteredClients,filterProjects,filterProjectsMode,filteredProjects,filterTags,filterTagsMode,filteredTags,setReports) Configure Timery; (setWorkspace,filterClients,filterClientsMode,filteredClients,filterProjects,filterProjectsMode,filteredProjects,filterTags,setReports) Configure Timery; (setWorkspace,filterClients,filterClientsMode,filteredClients,filterProjects,filterTags,filterTagsMode,filteredTags,setReports) Configure Timery; (setWorkspace,filterClients,filterClientsMode,filteredClients,filterProjects,filterTags,setReports) Configure Timery; (setWorkspace,filterClients,filterProjects,filterProjectsMode,filteredProjects,filterTags,filterTagsMode,filteredTags,setReports) Configure Timery; (setWorkspace,filterClients,filterProjects,filterProjectsMode,filteredProjects,filterTags,setReports) Configure Timery; (setWorkspace,filterClients,filterProjects,filterTags,filterTagsMode,filteredTags,setReports) Configure Timery; (setWorkspace,filterClients,filterProjects,filterTags,setReports) Configure Timery\n",
    "com.joehribar.toggl.ExportSavedReport": "com.joehribar.toggl.ExportSavedReport(reportType: ExportSavedReportType(Enum) = \"reportsOverview\", reportsOverview: ReportsOverviewAppEntity(Object), summaryReport: SummaryReportAppEntity(Object), fileType: ExportSavedReportFileType(Enum) = \"png\") -> Export Saved Report\n                            : 12(Object)\nParameters:\n    reportType: Report Type. Report Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"reportsOverview\"(Saved Reports Overview), \"summaryReport\"(Saved Summary Report).\n    reportsOverview: Reports Overview. Reports Overview.\n    summaryReport: Summary Reports. Summary Report.\n    fileType: File Type. Report Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"csv\"(CSV), \"pdf\"(PDF), \"png\"(PNG).\nReturn Value:\n    Export Saved Report: \nDescription:\n    Export Saved Report: Exports a saved reports overview or summary report as a CSV, PDF, or PNG.\nParameterSummary: (reportType,summaryReport,fileType) Export ${reportType} ${summaryReport} as ${fileType}; (reportType,reportsOverview,fileType) Export ${reportType} ${reportsOverview} as ${fileType}\n",
    "com.joehribar.toggl.OpenTimery": "com.joehribar.toggl.OpenTimery(openAppLocation: OpenAppLocationAppEnum(Enum) = \"app\", reportsOverview: ReportsOverviewAppEntity(Object), summaryReport: SummaryReportAppEntity(Object))\nParameters:\n    openAppLocation: Location. Open App Location. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"app\"(App), \"savedTimers\"(Saved Timers), \"timeEntries\"(Time Entries), \"currentTimeEntry\"(Current Time Entry), \"newCurrentTimeEntry\"(New Current Time Entry), \"timersLists\"(Timers Lists), \"reportsOverview\"(Reports Overview), \"summaryReport\"(Summary Report).\n    reportsOverview: Reports Overview. Reports Overview.\n    summaryReport: Summary Report. Summary Report.\nDescription:\n    Open Timery: Opens Timery optionally to a specific view or saved report.\nParameterSummary: (openAppLocation,reportsOverview) Open ${openAppLocation} to ${reportsOverview}; (openAppLocation,summaryReport) Open ${openAppLocation} to ${summaryReport}; (openAppLocation) Open ${openAppLocation}\n",
    "com.joehribar.toggl.PerformActionAppIntent": "com.joehribar.toggl.PerformActionAppIntent(action: PerformActionAppIntentAction(Enum) = \"startSavedTimer\", secondaryAction: PerformActionAppIntentAction(Enum) = \"startSavedTimer\")\nParameters:\n    action: Action. Action. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"startSavedTimer\"(Start Saved Timer), \"startRecentTimer\"(Start Recent Timer), \"stopCurrentTimeEntry\"(Stop Current Time Entry), \"editCurrentTimeEntry\"(Edit Current Time Entry), \"newCurrentTimeEntry\"(Start New Current Time Entry), \"continueLatestTimer\"(Continue Latest Timer), \"showCurrentTimeEntryMenu\"(Show Current Time Entry Menu).\n    secondaryAction: Secondary Action. Action. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"startSavedTimer\"(Start Saved Timer), \"startRecentTimer\"(Start Recent Timer), \"stopCurrentTimeEntry\"(Stop Current Time Entry), \"editCurrentTimeEntry\"(Edit Current Time Entry), \"newCurrentTimeEntry\"(Start New Current Time Entry), \"continueLatestTimer\"(Continue Latest Timer), \"showCurrentTimeEntryMenu\"(Show Current Time Entry Menu).\nDescription:\n    Perform Action: Opens Timery and performs the selected action. Also performs the action if Timery is already open—like if the action is run from the Action button on the iPhone 15 Pro or Pro Max.\n\nIf “Stop Current Time Entry” is selected and a current time entry isn’t running or “Continue Latest Timer” is selected and a current time entry is running, the secondary action will run instead.\nParameterSummary: (action,secondaryAction) Open Timery and ${action}; (action) Open Timery and ${action}\n",
    "com.joehribar.toggl.StartLiveActivity": "com.joehribar.toggl.StartLiveActivity() -> Start Live Activity\n                            : TimeEntryAppEntity(Object)\nReturn Value:\n    Start Live Activity: Time Entries.\nDescription:\n    Start Live Activity: Starts or updates a Live Activity on iPhone and iPad when a current time entry is running and ends the Live Activity when a current time entry is not running.\n\nThe action returns the current time entry.\nParameterSummary: () Start Live Activity\n",
    "com.joehribar.toggl.StartRecentTimer": "com.joehribar.toggl.StartRecentTimer(mode: StartRecentTimerMode(Enum) = \"fromList\", recentTimerEntity: RecentTimerAppEntity(Object), listSortingMode: StartRecentTimerListSortingMode(Enum) = \"lastUsed\", startTimeMode: StartTimeAppEnum(Enum) = \"currentTime\", specifiedStartTime: String, minutesAgo: Integer, widgetId: String, widgetRecentTimerId: String, widgetRecentTimerProjectId: Integer = \"0\", widgetRecentTimerTaskId: Integer = \"0\", widgetRecentTimerDescription: String, widgetRecentTimerTags: array(String) = \"array()\", widgetRecentTimerBillable: Bool = \"0\") -> Start Recent Timer\n                            : TimeEntryAppEntity(Object)\nParameters:\n    mode: Mode. Recent Timer Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"fromList\"(Recent Timer from List), \"fromTimer\"(Found Recent Timer).\n    recentTimerEntity: Recent Timer. Recent Timers.\n    listSortingMode: List Sorting. List Sorting Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"lastUsed\"(Last Used), \"projects\"(Projects), \"descriptions\"(Descriptions), \"tags\"(Tags).\n    startTimeMode: Start Time. Start Time. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"currentTime\"(Current Time), \"specifiedTime\"(Specified Time), \"lastStopTime\"(Last Stop Time Today), \"minutesAgo\"(Minutes Ago).\n    specifiedStartTime: Specified Time.\n    minutesAgo: Minutes Ago.\n    widgetId: Widget ID.\n    widgetRecentTimerId: Recent Timer ID.\n    widgetRecentTimerProjectId: Recent Timer Project ID.\n    widgetRecentTimerTaskId: Recent Timer Task ID.\n    widgetRecentTimerDescription: Recent Timer Description.\n    widgetRecentTimerTags: Recent Timer Tags.\n    widgetRecentTimerBillable: Recent Timer Billable.\nReturn Value:\n    Start Recent Timer: Time Entries.\nDescription:\n    Start Recent Timer: Starts a recent timer. By default, the action gets a list of recent timers and asks which one to start.\n                                               \nThe action also accepts as input a found recent timer from a “Find Recent Timers” action. Use it with a “Choose from List” action to select one to start.\n\nThe action starts a Live Activity and returns the started time entry.\nParameterSummary: (mode,recentTimerEntity,startTimeMode,specifiedStartTime) Start ${mode} ${recentTimerEntity}; (mode,recentTimerEntity,startTimeMode,minutesAgo) Start ${mode} ${recentTimerEntity}; (mode,recentTimerEntity,startTimeMode) Start ${mode} ${recentTimerEntity}; (mode,listSortingMode,startTimeMode,specifiedStartTime) Start ${mode}; (mode,listSortingMode,startTimeMode,minutesAgo) Start ${mode}; (mode,listSortingMode,startTimeMode) Start ${mode}\n",
    "com.joehribar.toggl.StartSavedTimer": "com.joehribar.toggl.StartSavedTimer(savedTimerEntity: SavedTimerAppEntity(Object), startTimeMode: StartTimeAppEnum(Enum) = \"currentTime\", specifiedStartTime: String, minutesAgo: Integer) -> Start Saved Timer\n                            : TimeEntryAppEntity(Object)\nParameters:\n    savedTimerEntity: Saved Timer. Saved Timers.\n    startTimeMode: Start Time. Start Time. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"currentTime\"(Current Time), \"specifiedTime\"(Specified Time), \"lastStopTime\"(Last Stop Time Today), \"minutesAgo\"(Minutes Ago).\n    specifiedStartTime: Specified Time.\n    minutesAgo: Minutes Ago.\nReturn Value:\n    Start Saved Timer: Time Entries.\nDescription:\n    Start Saved Timer: Starts a saved timer. By default, the action will ask which one to start if one is not specified.\n                                               \nThe action also accepts as input a found saved timer from a “Find Saved Timers” action. Use it with a “Choose from List” action to select one to start.\n\nThe action starts a Live Activity and returns the started time entry.\nParameterSummary: (savedTimerEntity,startTimeMode,specifiedStartTime) Start ${savedTimerEntity}; (savedTimerEntity,startTimeMode,minutesAgo) Start ${savedTimerEntity}; (savedTimerEntity,startTimeMode) Start ${savedTimerEntity}\n",
    "com.leomehlig.today.AddTaskIntent": "com.leomehlig.today.AddTaskIntent(title: String, taskType: TaskTypeEntity(Enum) = \"timed\", day: String, startDate: String, duration: Float = \"15\", symbol: SymbolEntity(Object), notes: String, hexString: String, theme: ThemeType(Enum), subtasks: array(String), recurrence: TaskRecurranceType(Enum) = \"once\") -> shortcuts.add.result_value\n                            : TaskEntity(Object)\nParameters:\n    title: shortcuts.add.property.title. shortcuts.add.property.title.description.\n    taskType: shortcuts.add.property.type. shortcuts.add.property.type.description. Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"timed\"(shortcuts.task_type.timeline), \"allDay\"(shortcuts.task_type.all_day), \"inbox\"(shortcuts.task_type.inbox).\n    day: shortcuts.add.property.day. shortcuts.add.property.day.description.\n    startDate: shortcuts.add.property.start_time. shortcuts.add.property.start_time.description.\n    duration: shortcuts.add.property.duration. shortcuts.add.property.duration.description.\n    symbol: shortcuts.add.property.symbol. shortcuts.add.property.symbol.description. shortcuts.symbol.\n    notes: shortcuts.add.property.notes. shortcuts.add.property.notes.description.\n    hexString: shortcuts.add.property.hex_code. shortcuts.add.property.hex_code.description.\n    theme: shortcuts.add.property.theme. shortcuts.add.property.theme.description. shortcuts.theme. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"day\"(shortcuts.theme.day), \"night\"(shortcuts.theme.night), \"nature\"(shortcuts.theme.nature), \"classic\"(shortcuts.theme.classic), \"custom\"(shortcuts.theme.custom).\n    subtasks: shortcuts.add.property.subtasks. shortcuts.add.property.subtasks.description.\n    recurrence: shortcuts.add.property.recurrence. shortcuts.add.property.recurrence.description. Recurrence. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"once\"(shortcuts.recurrence_type.once), \"daily\"(shortcuts.recurrence_type.daily), \"weekly\"(shortcuts.recurrence_type.weekly), \"monthly\"(shortcuts.recurrence_type.monthly).\nReturn Value:\n    shortcuts.add.result_value: shortcuts.task.\nDescription:\n    shortcuts.add.title: shortcuts.add.description\nParameterSummary: (title,taskType,duration,symbol,theme,subtasks,notes) shortcuts.add.summary.inbox ${title}; (title,taskType,duration,symbol,theme,hexString,subtasks,notes) shortcuts.add.summary.inbox ${title}; (title,day,taskType,symbol,theme,recurrence,subtasks,notes) shortcuts.add.summary.all_day ${title} ${day}; (title,day,taskType,symbol,theme,hexString,recurrence,subtasks,notes) shortcuts.add.summary.all_day ${title} ${day}; (title,day,startDate,taskType,duration,symbol,theme,recurrence,subtasks,notes) shortcuts.add.summary.timeline ${title} ${day} ${startDate}; (title,day,startDate,taskType,duration,symbol,theme,hexString,recurrence,subtasks,notes) shortcuts.add.summary.timeline ${title} ${day} ${startDate}\n",
    "com.leomehlig.today.DayScheduleIntent": "com.leomehlig.today.DayScheduleIntent(day: RelativeDayEntity(Enum) = \"today\", otherDate: String) -> shortcuts.check_schedule.result_value\n                            : array(TaskEntity(Object))\nParameters:\n    day: shortcuts.check_schedule.property.day. shortcuts.check_schedule.property.day.description. Day. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"yesterday\"(shortcuts.relative_day.yesterday), \"today\"(shortcuts.relative_day.today), \"tomorrow\"(shortcuts.relative_day.tomorrow), \"other\"(shortcuts.relative_day.date).\n    otherDate: shortcuts.check_schedule.property.date. shortcuts.check_schedule.property.date.description.\nReturn Value:\n    shortcuts.check_schedule.result_value: \nDescription:\n    shortcuts.check_schedule.title: shortcuts.check_schedule.description\nParameterSummary: (day,otherDate) shortcuts.check_schedule.summary ${day}; (day) shortcuts.check_schedule.summary ${day}\n",
    "com.leomehlig.today.DeleteTaskIntent": "com.leomehlig.today.DeleteTaskIntent(tasks: array(TaskEntity(Object)), recurringDelete: RecurringDeleteType(Enum))\nParameters:\n    tasks: shortcuts.delete.property.tasks. shortcuts.delete.property.tasks.description.\n    recurringDelete: shortcuts.delete.property.recurring. shortcuts.delete.property.recurring.description. Recurring Task Delete Setting. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"onlyThis\"(shortcuts.recurring_delete.only_this), \"allFuture\"(shortcuts.recurring_delete.all_future), \"all\"(shortcuts.recurring_delete.all).\nDescription:\n    shortcuts.delete.title: shortcuts.delete.description\nParameterSummary: (tasks,recurringDelete) shortcuts.delete.summary ${tasks}\n",
    "com.leomehlig.today.DuplicateTaskIntent": "com.leomehlig.today.DuplicateTaskIntent(task: array(TaskEntity(Object))) -> shortcuts.duplicate.result_value\n                            : array(TaskEntity(Object))\nParameters:\n    task: shortcuts.duplicate.property.tasks. shortcuts.duplicate.property.tasks.description.\nReturn Value:\n    shortcuts.duplicate.result_value: \nDescription:\n    shortcuts.duplicate.title: shortcuts.duplicate.description\nParameterSummary: (task) shortcuts.duplicate.summary ${task}\n",
    "com.leomehlig.today.EditIntent": "com.leomehlig.today.EditIntent(tasks: array(TaskEntity(Object)), detail: EditableTaskProperty(Enum), title: String, notes: String, subtasks: array(String), status: TaskCompletionStateType(Enum) = \"completed\", theme: ThemeType(Enum), hex: String, duration: Float, day: String, startTime: String, endTime: String, symbol: SymbolEntity(Object), recurringEditType: RecurringEditType(Enum), taskType: TaskTypeEntity(Enum) = \"timed\") -> shortcuts.edit.result_value\n                            : array(TaskEntity(Object))\nParameters:\n    tasks: shortcuts.edit.property.tasks. shortcuts.edit.property.tasks.description.\n    detail: shortcuts.edit.property.detail. shortcuts.edit.property.detail.description. Property. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"taskType\"(shortcuts.edit.property.type), \"title\"(shortcuts.edit.property.title), \"day\"(shortcuts.edit.property.day), \"startTime\"(shortcuts.edit.property.start_time), \"endTime\"(shortcuts.edit.property.end_time), \"duration\"(shortcuts.edit.property.duration), \"isCompleted\"(shortcuts.edit.property.completion_state), \"symbol\"(shortcuts.edit.property.symbol), \"color\"(shortcuts.edit.property.color), \"subtasks\"(shortcuts.edit.property.subtasks), \"notes\"(shortcuts.edit.property.notes).\n    title: shortcuts.edit.property.title. shortcuts.edit.property.title.description.\n    notes: shortcuts.edit.property.notes. shortcuts.edit.property.notes.description.\n    subtasks: shortcuts.edit.property.subtasks. shortcuts.edit.property.subtasks.description.\n    status: shortcuts.edit.property.completion_state. shortcuts.edit.property.completion_state.description. Completion State. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"completed\"(shortcuts.completion_state.completed), \"incomplete\"(shortcuts.completion_state.incomplete).\n    theme: shortcuts.edit.property.color. shortcuts.edit.property.color.description. shortcuts.theme. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"day\"(shortcuts.theme.day), \"night\"(shortcuts.theme.night), \"nature\"(shortcuts.theme.nature), \"classic\"(shortcuts.theme.classic), \"custom\"(shortcuts.theme.custom).\n    hex: shortcuts.edit.property.hex_code. shortcuts.edit.property.hex_code.description.\n    duration: shortcuts.edit.property.duration. shortcuts.edit.property.duration.description.\n    day: shortcuts.edit.property.day. shortcuts.edit.property.day.description.\n    startTime: shortcuts.edit.property.start_time. shortcuts.edit.property.start_time.description.\n    endTime: shortcuts.edit.property.end_time. shortcuts.edit.property.end_time.description.\n    symbol: shortcuts.edit.property.symbol. shortcuts.edit.property.symbol.description. shortcuts.symbol.\n    recurringEditType: shortcuts.edit.property.recurring_edit. shortcuts.edit.property.recurring_edit.description. Recurring Task Edit Setting. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"onlyThis\"(shortcuts.recurring_edit.only_this), \"allFuture\"(shortcuts.recurring_edit.all_future), \"all\"(shortcuts.recurring_edit.all).\n    taskType: shortcuts.edit.property.type. shortcuts.edit.property.type.description. Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"timed\"(shortcuts.task_type.timeline), \"allDay\"(shortcuts.task_type.all_day), \"inbox\"(shortcuts.task_type.inbox).\nReturn Value:\n    shortcuts.edit.result_value: \nDescription:\n    shortcuts.edit.title: shortcuts.edit.description\nParameterSummary: (detail,tasks,status,recurringEditType) shortcuts.edit.summary.status ${detail} ${tasks} ${status}; (detail,tasks,subtasks,recurringEditType) shortcuts.edit.summary.subtasks ${detail} ${tasks} ${subtasks}; (detail,tasks,notes,recurringEditType) shortcuts.edit.summary.notes ${detail} ${tasks} ${notes}; (detail,tasks,theme,recurringEditType) shortcuts.edit.summary.theme ${detail} ${tasks} ${theme}; (detail,tasks,theme,hex,recurringEditType) shortcuts.edit.summary.hex ${detail} ${tasks} ${theme} ${hex}; (detail,tasks,duration,recurringEditType) shortcuts.edit.summary.duration ${detail} ${tasks} ${duration}; (detail,tasks,day) shortcuts.edit.summary.day ${detail} ${tasks} ${day}; (detail,tasks,startTime,recurringEditType) shortcuts.edit.summary.start_time ${detail} ${tasks} ${startTime}; (detail,tasks,endTime,recurringEditType) shortcuts.edit.summary.end_time ${detail} ${tasks} ${endTime}; (detail,tasks,title,recurringEditType) shortcuts.edit.summary.title ${detail} ${tasks} ${title}; (detail,tasks,symbol,recurringEditType) shortcuts.edit.summary.symbol ${detail} ${tasks} ${symbol}; (detail,tasks,taskType,day,startTime,duration,recurringEditType) shortcuts.edit.summary.type ${detail} ${tasks} ${taskType}; (detail,tasks,taskType,day,recurringEditType) shortcuts.edit.summary.type ${detail} ${tasks} ${taskType}; (detail,tasks,taskType) shortcuts.edit.summary.type ${detail} ${tasks} ${taskType}; (detail,tasks,taskType,recurringEditType) shortcuts.edit.summary.type ${detail} ${tasks} ${taskType}; (detail,tasks,recurringEditType) shortcuts.edit.summary.empty ${detail} ${tasks}\n",
    "com.leomehlig.today.FocusTimerIntent": "com.leomehlig.today.FocusTimerIntent(task: TaskEntity(Object), isSilent: Bool = \"0\") -> shortcuts.focus.result_value\n                            : TaskEntity(Object)\nParameters:\n    task: shortcuts.focus.property.task. shortcuts.focus.property.task.description. shortcuts.task.\n    isSilent: Silent Mode. If enabled, the action show an error, when there is no task to focus on..\nReturn Value:\n    shortcuts.focus.result_value: shortcuts.task.\nDescription:\n    shortcuts.focus.title: shortcuts.focus.description\nParameterSummary: () shortcuts.focus.summary\n",
    "com.leomehlig.today.GetCurrentTaskIntent": "com.leomehlig.today.GetCurrentTaskIntent(includeCompleted: Bool = \"0\") -> shortcuts.get_current.result_value\n                            : array(TaskEntity(Object))\nParameters:\n    includeCompleted: shortcuts.get_current.property.include_completed. shortcuts.get_current.property.include_completed.description.\nReturn Value:\n    shortcuts.get_current.result_value: \nDescription:\n    shortcuts.get_current.title: shortcuts.get_current.description\nParameterSummary: (includeCompleted) shortcuts.get_current.summary\n",
    "com.leomehlig.today.OpenDayIntent": "com.leomehlig.today.OpenDayIntent(date: String)\nParameters:\n    date: shortcuts.open_day.property.day. shortcuts.open_day.property.day.description.\nDescription:\n    shortcuts.open_day.title: shortcuts.open_day.description\nParameterSummary: (date) shortcuts.open_day.summary ${date}\n",
    "com.leomehlig.today.OpenInboxIntent": "com.leomehlig.today.OpenInboxIntent()\nDescription:\n    shortcuts.open_inbox.title: shortcuts.open_inbox.description\nParameterSummary: () shortcuts.open_inbox.title\n",
    "com.leomehlig.today.OpenTaskIntent": "com.leomehlig.today.OpenTaskIntent(task: TaskEntity(Object)) -> shortcuts.open_task.title\n                            : TaskEntity(Object)\nParameters:\n    task: shortcuts.open_task.property.task. shortcuts.open_task.property.task.description. shortcuts.task.\nReturn Value:\n    shortcuts.open_task.title: shortcuts.task.\nDescription:\n    shortcuts.open_task.title: shortcuts.open_task.description\nParameterSummary: (task) shortcuts.open_task.summary ${task}\n",
    "com.leomehlig.today.ShowInboxIntent": "com.leomehlig.today.ShowInboxIntent(includeCompleted: Bool = \"0\", limitToggle: Bool = \"0\", limit: Integer = \"5\") -> shortcuts.show_inbox.result_value\n                            : array(TaskEntity(Object))\nParameters:\n    includeCompleted: shortcuts.show_inbox.property.include_completed. shortcuts.show_inbox.property.include_completed.description.\n    limitToggle: shortcuts.show_inbox.property.has_limit. shortcuts.show_inbox.property.has_limit.description.\n    limit: shortcuts.show_inbox.property.limit. shortcuts.show_inbox.property.limit.description.\nReturn Value:\n    shortcuts.show_inbox.result_value: \nDescription:\n    shortcuts.show_inbox.title: shortcuts.show_inbox.description\nParameterSummary: (includeCompleted,limitToggle) shortcuts.show_inbox.summary; (includeCompleted,limitToggle,limit) shortcuts.show_inbox.summary\n",
    "com.leomehlig.today.ShowTaskIntent": "com.leomehlig.today.ShowTaskIntent(tasks: array(TaskEntity(Object)), prompt: String) -> shortcuts.show_tasks.title\n                            : array(TaskEntity(Object))\nParameters:\n    tasks: shortcuts.show_tasks.property.tasks. shortcuts.show_tasks.property.tasks.description.\n    prompt: shortcuts.show_tasks.property.prompt. shortcuts.show_tasks.property.prompt.description.\nReturn Value:\n    shortcuts.show_tasks.title: \nDescription:\n    shortcuts.show_tasks.title: shortcuts.show_tasks.description\nParameterSummary: (tasks,prompt) shortcuts.show_tasks.summary ${tasks}\n",
    "com.lifx.lifx.LFXLightThemeIntent": "com.lifx.lifx.LFXLightThemeIntent(target: Target(Object), theme: String)\nParameters:\n    target:  Light. Target.\n    theme:  Theme.\nDescription:\n    Apply a Theme: Apply a group of colours to your LIFX lights\nParameterSummary: (Apply ${theme} to ${target}) Apply ${theme} to ${target}\n",
    "com.lifx.lifx.LFXLightSceneIntent": "com.lifx.lifx.LFXLightSceneIntent(scene: Scene(Object), duration: Integer = 1)\nParameters:\n    scene:  Scene. Scene.\n    duration:  Duration.\nDescription:\n    Set a Scene: Set your lights to a specific scene\nParameterSummary: (Set the scene to ${scene} over ${duration} seconds) Set the scene to ${scene} over ${duration} seconds\n",
    "com.lifx.lifx.LFXLightStateIntent": "com.lifx.lifx.LFXLightStateIntent(target: Target(Object), power: Bool = True, brightness: Integer = 100, color: Color(Object), duration: Integer = 1) -> Target\n                            : Target(Object)\nParameters:\n    target:  Light. Target.\n    power:  Power.\n    brightness:  Brightness.\n    color:  Colour. Color.\n    duration:  Duration.\nReturn Value:\n    Target: Target. Target.\nDescription:\n    Set light state: Update a light's colour, power or brightness\nParameterSummary: (Turn ${target} ${power} and set colour to ${color} and brightness to ${brightness}) Turn ${target} ${power} and set colour to ${color} and brightness to ${brightness}\n",
    "com.lifx.lifx.LFXLightPowerIntent": "com.lifx.lifx.LFXLightPowerIntent(target: Target(Object), power: Bool = True, duration: Integer = 1) -> Target\n                            : Target(Object)\nParameters:\n    target:  Light. Target.\n    power:  Power.\n    duration:  Duration.\nReturn Value:\n    Target: Target. Target.\nDescription:\n    Set light power: Update a light's power\nParameterSummary: (Turn ${target} ${power}) Turn ${target} ${power}\n",
    "com.lifx.lifx.LFXLightBrightnessIntent": "com.lifx.lifx.LFXLightBrightnessIntent(target: Target(Object), brightness: Integer = 100, duration: Integer = 1) -> Target\n                            : Target(Object)\nParameters:\n    target:  Light. Target.\n    brightness:  Brightness.\n    duration:  Duration.\nReturn Value:\n    Target: Target. Target.\nDescription:\n    Set light brightness: Update a light's brightness\nParameterSummary: (Set ${target} to ${brightness} brightness) Set ${target} to ${brightness} brightness\n",
    "com.lifx.lifx.LFXLightColorIntent": "com.lifx.lifx.LFXLightColorIntent(target: Target(Object), isWhite: Bool = True, hue: Integer, saturation: Integer = 100, kelvin: Integer = 3500, duration: Integer = 1) -> Target\n                            : Target(Object)\nParameters:\n    target:  Light. Target.\n    isWhite:  White.\n    hue:  Hue. This value depends on the value of \"isWhite\". This parameter is only valid when the value of \"isWhite\" is False.\n    saturation:  Saturation. This value depends on the value of \"isWhite\". This parameter is only valid when the value of \"isWhite\" is False.\n    kelvin:  Kelvin. This value depends on the value of \"isWhite\". This parameter is only valid when the value of \"isWhite\" is True.\n    duration:  Duration.\nReturn Value:\n    Target: Target. Target.\nDescription:\n    Set light colour: Update a light's colour\nParameterSummary: (Set ${target}to ${isWhite}) Set ${target}to ${isWhite}; (Set ${target} to ${isWhite} ) Set ${target} to ${isWhite} (${kelvin}K); (Set ${target} to ${isWhite} ) Set ${target} to ${isWhite} (${hue} hue and ${saturation} saturation)\n",
    "com.lifx.lifx.LFXGetLightsIntent": "com.lifx.lifx.LFXGetLightsIntent() -> Lights\n                            : Target(Object)\nReturn Value:\n    Lights: Lights. Target.\nDescription:\n    Get Lights: Lists all lights on user's account\nParameterSummary: () Get Lights\n",
    "com.lifx.lifx.LFXGetThemesIntent": "com.lifx.lifx.LFXGetThemesIntent() -> Themes\n                            : String\nReturn Value:\n    Themes: Themes.\nDescription:\n    List Themes: Lists all Themes\nParameterSummary: () List Themes\n",
    "com.lifx.lifx.LFXGetScenesIntent": "com.lifx.lifx.LFXGetScenesIntent() -> Scenes\n                            : Scene(Object)\nReturn Value:\n    Scenes: Scenes. Scene.\nDescription:\n    Get Scenes: Lists all Scenes\nParameterSummary: () Get Scenes\n",
    "com.lifx.lifx.LFXCleanCycleIntent": "com.lifx.lifx.LFXCleanCycleIntent(target: Target(Object), active: Bool = True, duration: TimeInterval(Object))\nParameters:\n    target:  Light. Target.\n    active:  Active.\n    duration:  Duration. This value depends on the value of \"active\". This parameter is only valid when the value of \"active\" is True.\nDescription:\n    Clean Cycle: Starts or stops a Clean Cycle on your LIFX Clean light\nParameterSummary: (${active} Clean Cycle on ${target}) ${active} Clean Cycle on ${target}; (${active} Clean Cycle on ${target}) ${active} Clean Cycle on ${target}\n",
    "com.lukilabs.lukiapp.SelectDocumentIntent": "com.lukilabs.lukiapp.SelectDocumentIntent(workspace: Workspace(Object), document: CraftDocument(Object), isBrandingEnabled: Bool)\nParameters:\n    workspace:  Space. Workspace.\n    document:  Document. Craft Document. This value depends on the value of \"workspace\". This parameter is only valid when \"workspace has any value.\n    isBrandingEnabled:  Colors. This value depends on the value of \"workspace\". This parameter is only valid when \"workspace has any value.\nDescription:\n    Select Document: Select which document you wish to show\nParameterSummary: () Select Document\n",
    "com.lukilabs.lukiapp.OpenCraftIntent": "com.lukilabs.lukiapp.OpenCraftIntent()\nDescription:\n    Open Craft: Opens the app.\nParameterSummary: (Open the Craft app) Open the Craft app\n",
    "com.lukilabs.lukiapp.OpenDocumentIntent": "com.lukilabs.lukiapp.OpenDocumentIntent(workspace: Workspace(Object), document: CraftDocument(Object))\nParameters:\n    workspace:  Space. Workspace.\n    document:  Document. Craft Document. This value depends on the value of \"workspace\". This parameter is only valid when \"workspace has any value.\nDescription:\n    Open Document: Opens the selected document in the selected Space.\nParameterSummary: (Open the ${document} in the ${workspace}) Open the ${document} in the ${workspace}; (Open document in ${workspace}) Open document in ${workspace}\n",
    "com.lukilabs.lukiapp.OpenSpaceIntent": "com.lukilabs.lukiapp.OpenSpaceIntent(workspace: Workspace(Object), tab: Tab(Enum) = \"current\")\nParameters:\n    workspace:  Space. Workspace.\n    tab:  Selected Tab. Tab. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"documents\"(Documents), \"calendar\"(Calendar), \"search\"(Search), \"current\"(Current). This value depends on the value of \"workspace\". This parameter is only valid when \"workspace has any value.\nDescription:\n    Open Space: Opens the selected Space.\nParameterSummary: (Open ${workspace}) Open ${workspace}; (Open ${workspace}) Open ${workspace}\n",
    "com.lukilabs.lukiapp.SelectWorkspaceIntent": "com.lukilabs.lukiapp.SelectWorkspaceIntent(workspace: Workspace(Object))\nParameters:\n    workspace:  Space. Workspace.\nDescription:\n    Select Space: Select which space you wish to show\nParameterSummary: () Select Space\n",
    "com.lukilabs.lukiapp.QuickAddIntent": "com.lukilabs.lukiapp.QuickAddIntent(workspace: Workspace(Object), folder: CraftFolder(Object), title: String, content: String)\nParameters:\n    workspace:  Space. Workspace.\n    folder:  Folder. Craft Folder. This value depends on the value of \"workspace\". This parameter is only valid when \"workspace has any value.\n    title:  Title.\n    content:  Content.\nDescription:\n    Create Craft Doc: Creates a document in the selected Space with given input\nParameterSummary: (Create ${title} in ${workspace} with ${content}) Create ${title} in ${workspace} with ${content}; (Create ${title} in ${workspace} in folder: ${folder} with ${content}) Create ${title} in ${workspace} in folder: ${folder} with ${content}\n",
    "com.lukilabs.lukiapp.AddToDocumentIntent": "com.lukilabs.lukiapp.AddToDocumentIntent(workspace: Workspace(Object), document: CraftDocument(Object), content: String, insertPosition: InsertPosition(Enum) = \"append\")\nParameters:\n    workspace:  Space. Workspace.\n    document:  Document. Craft Document. This value depends on the value of \"workspace\". This parameter is only valid when \"workspace has any value.\n    content:  Content.\n    insertPosition:  Mode. Insert Position. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"append\"(Append), \"prepend\"(Prepend).\nDescription:\n    Add to Craft Doc: Adds text to a document.\nParameterSummary: (Add ${content} to ${workspace}) Add ${content} to ${workspace}; (Add ${content} to ${document} in ${workspace}) Add ${content} to ${document} in ${workspace}\n",
    "com.lukilabs.lukiapp.OpenAndSearchIntent": "com.lukilabs.lukiapp.OpenAndSearchIntent(workspace: Workspace(Object), query: String)\nParameters:\n    workspace:  Space. Workspace.\n    query:  Query.\nDescription:\n    Open And Search: Open Craft and search for a given query\nParameterSummary: (Open Craft and search for ${query} in ${workspace}) Open Craft and search for ${query} in ${workspace}\n",
    "com.microsoft.bing.OpenCashbackIntent": "com.microsoft.bing.OpenCashbackIntent()\nDescription:\n    Bing Cashback\nParameterSummary: () Bing Cashback\n",
    "com.microsoft.bing.OpenMoneyIntent": "com.microsoft.bing.OpenMoneyIntent()\nDescription:\n    Bing Money\nParameterSummary: () Bing Money\n",
    "com.microsoft.bing.OpenNewsIntent": "com.microsoft.bing.OpenNewsIntent()\nDescription:\n    Bing News\nParameterSummary: () Bing News\n",
    "com.microsoft.bing.OpenRewardsIntent": "com.microsoft.bing.OpenRewardsIntent()\nDescription:\n    Bing Rewards\nParameterSummary: () Bing Rewards\n",
    "com.microsoft.bing.OpenShoppingIntent": "com.microsoft.bing.OpenShoppingIntent()\nDescription:\n    Bing Shopping\nParameterSummary: () Bing Shopping\n",
    "com.microsoft.bing.OpenSydneyAndSummerizeBigNewsIntent": "com.microsoft.bing.OpenSydneyAndSummerizeBigNewsIntent()\nDescription:\n    Summerize big news of this week\nParameterSummary: () Summerize big news of this week\n",
    "com.microsoft.bing.OpenSydneyAndWriteEmailIntent": "com.microsoft.bing.OpenSydneyAndWriteEmailIntent()\nDescription:\n    Write an email for me\nParameterSummary: () Write an email for me\n",
    "com.microsoft.bing.OpenSydneyIntent": "com.microsoft.bing.OpenSydneyIntent(query: String)\nParameters:\n    query: Query.\nDescription:\n    new Bing\nParameterSummary: () new Bing\n",
    "com.microsoft.bing.OpenWallpaperIntent": "com.microsoft.bing.OpenWallpaperIntent()\nDescription:\n    Bing Wallpapers\nParameterSummary: () Bing Wallpapers\n",
    "com.microsoft.bing.OpenWeatherIntent": "com.microsoft.bing.OpenWeatherIntent()\nDescription:\n    Bing Weather\nParameterSummary: () Bing Weather\n",
    "com.microsoft.msedge.OpenInChromeIntent": "com.microsoft.msedge.OpenInChromeIntent(url: String)\nParameters:\n    url:  URL.\nDescription:\n    Open URLs in Edge\nParameterSummary: (Open ${url}) Open ${url}\n",
    "com.microsoft.msedge.SearchInChromeIntent": "com.microsoft.msedge.SearchInChromeIntent(searchPhrase: String)\nParameters:\n    searchPhrase:  Search phrase.\nDescription:\n    Search in Edge\nParameterSummary: (Search ${searchPhrase} in Edge) Search ${searchPhrase} in Edge\n",
    "com.microsoft.msedge.OpenInChromeIncognitoIntent": "com.microsoft.msedge.OpenInChromeIncognitoIntent(url: String)\nParameters:\n    url:  URL.\nDescription:\n    Open URLs In Edge InPrivate\nParameterSummary: (Open ${url} in InPrivate) Open ${url} in InPrivate\n",
    "com.microsoft.msedge.AddReadingListItemToChromeIntent": "com.microsoft.msedge.AddReadingListItemToChromeIntent(url: String)\nParameters:\n    url:  URL.\nDescription:\n    Add Reading List Item to Chrome\nParameterSummary: (Add ${url} to reading list) Add ${url} to reading list\n",
    "com.microsoft.msedge.AddBookmarkToChromeIntent": "com.microsoft.msedge.AddBookmarkToChromeIntent(url: String)\nParameters:\n    url:  URL.\nDescription:\n    Add Bookmark to Chrome\nParameterSummary: (Add ${url} to bookmarks) Add ${url} to bookmarks\n",
    "com.microsoft.msedge.OpenReadingListIntent": "com.microsoft.msedge.OpenReadingListIntent()\nDescription:\n    See chrome reading list\nParameterSummary: (See Chrome Reading List) See Chrome Reading List\n",
    "com.microsoft.msedge.OpenBookmarksIntent": "com.microsoft.msedge.OpenBookmarksIntent()\nDescription:\n    See Chrome Bookmarks\nParameterSummary: (See Chrome Bookmarks) See Chrome Bookmarks\n",
    "com.microsoft.msedge.OpenRecentTabsIntent": "com.microsoft.msedge.OpenRecentTabsIntent()\nDescription:\n    See Recent Tabs In Chrome\nParameterSummary: (See Recent Tabs In Chrome) See Recent Tabs In Chrome\n",
    "com.microsoft.msedge.OpenTabGridIntent": "com.microsoft.msedge.OpenTabGridIntent()\nDescription:\n    Visit The Tab Grid In Chrome\nParameterSummary: (Visit The Tab Grid In Chrome) Visit The Tab Grid In Chrome\n",
    "com.microsoft.msedge.SearchWithVoiceIntent": "com.microsoft.msedge.SearchWithVoiceIntent()\nDescription:\n    Search with voice in Chrome\nParameterSummary: (Search with voice in Chrome) Search with voice in Chrome\n",
    "com.microsoft.msedge.OpenNewTabIntent": "com.microsoft.msedge.OpenNewTabIntent()\nDescription:\n    Open new tab in Chrome\nParameterSummary: (Open new tab in Chrome) Open new tab in Chrome\n",
    "com.microsoft.msedge.PlayDinoGameIntent": "com.microsoft.msedge.PlayDinoGameIntent()\nDescription:\n    Play Chrome Dino Game\nParameterSummary: (Play Chrome Dino Game) Play Chrome Dino Game\n",
    "com.microsoft.msedge.SetChromeDefaultBrowserIntent": "com.microsoft.msedge.SetChromeDefaultBrowserIntent()\nDescription:\n    Set Chrome As Default Browser\nParameterSummary: (Set Chrome As Default Browser) Set Chrome As Default Browser\n",
    "com.microsoft.msedge.ViewHistoryIntent": "com.microsoft.msedge.ViewHistoryIntent()\nDescription:\n    View Your Chrome History\nParameterSummary: (View Your Chrome History) View Your Chrome History\n",
    "com.microsoft.msedge.OpenNewIncognitoTabIntent": "com.microsoft.msedge.OpenNewIncognitoTabIntent()\nDescription:\n    Open Chrome Incognito Tab\nParameterSummary: (Open Chrome Incognito Tab) Open Chrome Incognito Tab\n",
    "com.microsoft.msedge.ManagePaymentMethodsIntent": "com.microsoft.msedge.ManagePaymentMethodsIntent()\nDescription:\n    Manage Payment Methods in Chrome\nParameterSummary: (Manage Payment Methods in Chrome) Manage Payment Methods in Chrome\n",
    "com.microsoft.msedge.RunSafetyCheckIntent": "com.microsoft.msedge.RunSafetyCheckIntent()\nDescription:\n    Run Chrome Safety Check\nParameterSummary: (Run Chrome Safety Check) Run Chrome Safety Check\n",
    "com.microsoft.msedge.ManagePasswordsIntent": "com.microsoft.msedge.ManagePasswordsIntent()\nDescription:\n    Manage passwords in Chrome\nParameterSummary: (Manage passwords in Chrome) Manage passwords in Chrome\n",
    "com.microsoft.msedge.ManageSettingsIntent": "com.microsoft.msedge.ManageSettingsIntent()\nDescription:\n    Manage Chrome Settings\nParameterSummary: (Manage Chrome Settings) Manage Chrome Settings\n",
    "com.microsoft.msedge.OpenLatestTabIntent": "com.microsoft.msedge.OpenLatestTabIntent()\nDescription:\n    Open My Latest Tab in Chrome\nParameterSummary: (Open My Latest Tab in Chrome) Open My Latest Tab in Chrome\n",
    "com.microsoft.msedge.OpenLensIntent": "com.microsoft.msedge.OpenLensIntent()\nDescription:\n    Search Visuals in Chrome\nParameterSummary: (Search Visuals in Chrome.) Search Visuals in Chrome.\n",
    "com.microsoft.msedge.ClearBrowsingDataIntent": "com.microsoft.msedge.ClearBrowsingDataIntent()\nDescription:\n    Clear Browsing Data in Chrome\nParameterSummary: (Clear Browsing Data in Chrome.) Clear Browsing Data in Chrome.\n",
    "com.microsoft.msedge.OpenEdgeCopilotIntent": "com.microsoft.msedge.OpenEdgeCopilotIntent()\nDescription:\n    Start Microsoft Copilot\nParameterSummary: (Ask Microsoft Copilot Anything) Ask Microsoft Copilot Anything\n",
    "com.microsoft.to-do.WLShowListIntent": "com.microsoft.to-do.WLShowListIntent(list: List(Object))\nParameters:\n    list:  List. List.\nDescription:\n    Open List: Opens a list in Microsoft To Do\nParameterSummary: (Open ${list}) Open ${list}\n",
    "com.microsoft.to-do.WLAddTaskIntent": "com.microsoft.to-do.WLAddTaskIntent(taskTitle: String, list: List(Object), addToMyDay: Bool, isImportant: Bool, reminder: String, dueDate: String, notes: String)\nParameters:\n    taskTitle:  Task.\n    list:  List. List.\n    addToMyDay:  Add to My Day.\n    isImportant:  Mark as Important.\n    reminder:  Reminder.\n    dueDate:  Due Date.\n    notes:  Notes.\nDescription:\n    Add Task: Adds a task to a list in Microsoft To Do\nParameterSummary: (Add ${taskTitle} to ${list}) Add ${taskTitle} to ${list}\n",
    "com.microsoft.to-do.WLChooseListIntent": "com.microsoft.to-do.WLChooseListIntent(list: List(Object))\nParameters:\n    list:  List name. List.\nDescription:\n    Choose List: Choose a list to show in Microsoft To Do Widget\nParameterSummary: () Choose List\n",
    "com.microsoft.to-do.WLChooseListForAddTaskIntent": "com.microsoft.to-do.WLChooseListForAddTaskIntent(list: List(Object))\nParameters:\n    list:  List name. List.\nDescription:\n    Choose List For Add Task: Choose a list to add task from Microsoft To Do Widget\nParameterSummary: () Choose List For Add Task\n",
    "com.microsoft.to-do.WLChooseListForMyDayIntent": "com.microsoft.to-do.WLChooseListForMyDayIntent(list: List(Object))\nParameters:\n    list:  List name. List.\nDescription:\n    Choose List For My Day: Choose a list to my day in Microsoft To Do Widget\nParameterSummary: () Choose List For My Day\n",
    "com.openai.chat.AskIntent": "com.openai.chat.AskIntent(prompt: String, newChat: Bool = \"0\", model: ModelEntity(Object), continuous: Bool = \"0\") -> Ask ChatGPT\n                            : String\nParameters:\n    prompt: Message. Message to send to ChatGPT.\n    newChat: Start new chat. Indicates whether a new chat should be started.\n    model: Model. Model to use with the new chat. Model.\n    continuous: Continuous chat. Whether to enable back-and-forth chat or complete the Shortcut immediately after response.\nReturn Value:\n    Ask ChatGPT: \nDescription:\n    Ask ChatGPT: This action will send a single message to a chat with ChatGPT and return the response.\nParameterSummary: (prompt,newChat,continuous) Ask ChatGPT ${prompt}; (prompt,newChat,model,continuous) Ask ChatGPT ${prompt} in a new chat; (prompt,model,newChat,model,continuous) Ask ChatGPT ${prompt} in a new chat using ${model}\n",
    "com.openai.chat.OpenVoiceModeIntent": "com.openai.chat.OpenVoiceModeIntent()\nDescription:\n    Start voice conversation with ChatGPT: This action launches the ChatGPT app to start a voice conversation with ChatGPT.\nParameterSummary: () Start voice conversation with ChatGPT\n",
    "com.overdesigned.Cheatsheet.CSAddCheatIntent": "com.overdesigned.Cheatsheet.CSAddCheatIntent(text: String, icon: IconToGo(Object), title: String, folder: FolderToGo(Object)) -> New Cheat\n                            : CheatToGo(Object)\nParameters:\n    text: Text.\n    icon: Icon. Icon.\n    title: Title.\n    folder: Folder. Folder.\nReturn Value:\n    New Cheat: Cheat(s).\nDescription:\n    Add Cheat: Add a new cheat.\nParameterSummary: (text,icon,folder,title) Add cheat with ${text}\n",
    "com.overdesigned.Cheatsheet.CSAppendCheatIntent": "com.overdesigned.Cheatsheet.CSAppendCheatIntent(cheat: CheatToGo(Object), text: String) -> Cheat\n                            : CheatToGo(Object)\nParameters:\n    cheat: Cheat. Cheat(s).\n    text: Text.\nReturn Value:\n    Cheat: Cheat(s).\nDescription:\n    Append to Cheat: Append text to an existing cheat.\nParameterSummary: (text,cheat) Append ${text} to ${cheat}\n",
    "com.overdesigned.Cheatsheet.CSDeleteCheatIntent": "com.overdesigned.Cheatsheet.CSDeleteCheatIntent(cheats: array(CheatToGo(Object)))\nParameters:\n    cheats: Cheats.\nDescription:\n    Delete Cheats: Delete cheats.\nParameterSummary: (cheats) Delete ${cheats}\n",
    "com.overdesigned.Cheatsheet.CSFindCheatsIntent": "com.overdesigned.Cheatsheet.CSFindCheatsIntent(limit: Integer = \"1\", order: SortOrderToGo(Enum) = \"auto\", folder: FolderToGo(Object)) -> Get Cheats (Deprecated)\n                            : array(CheatToGo(Object))\nParameters:\n    limit: Limit.\n    order: Sort Order. Sort Order. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"auto\"(Match App), \"none\"(Don’t Sort), \"alpha\"(Alphabetical), \"created\"(Date Created), \"modified\"(Date Modified).\n    folder: Folder. Folder.\nReturn Value:\n    Get Cheats (Deprecated): \nDescription:\n    Get Cheats (Deprecated): Deprecated: Please use “Find Cheats” action on iOS 16 and macOS 13.\nParameterSummary: (limit,order,folder) Get Cheats (Deprecated)\n",
    "com.overdesigned.Cheatsheet.CSMoveCheatIntent": "com.overdesigned.Cheatsheet.CSMoveCheatIntent(cheat: CheatToGo(Object), folder: FolderToGo(Object)) -> Cheat\n                            : CheatToGo(Object)\nParameters:\n    cheat: Cheat. Cheat(s).\n    folder: Folder. Folder.\nReturn Value:\n    Cheat: Cheat(s).\nDescription:\n    Move Cheat to Folder: Move cheat to a folder.\nParameterSummary: (cheat,folder) Move ${cheat} to ${folder}\n",
    "com.overdesigned.Cheatsheet.CSMoveCheatToTopIntent": "com.overdesigned.Cheatsheet.CSMoveCheatToTopIntent(cheat: CheatToGo(Object), folder: FolderToGo(Object)) -> Cheat\n                            : CheatToGo(Object)\nParameters:\n    cheat: Cheat. Cheat(s).\n    folder: Folder. Folder.\nReturn Value:\n    Cheat: Cheat(s).\nDescription:\n    Move Cheat To Top: Move cheat to the top of the list.\nParameterSummary: (cheat,folder) Move ${cheat} to top of ${folder}\n",
    "com.overdesigned.Cheatsheet.CSOpenCheatIntent": "com.overdesigned.Cheatsheet.CSOpenCheatIntent(cheat: CheatToGo(Object))\nParameters:\n    cheat: Cheat. Cheat(s).\nDescription:\n    Open Cheat\nParameterSummary: (cheat) Open ${cheat}\n",
    "com.overdesigned.Cheatsheet.CSOpenFolderIntent": "com.overdesigned.Cheatsheet.CSOpenFolderIntent(folder: FolderToGo(Object))\nParameters:\n    folder: Folder. Folder.\nDescription:\n    Open Folder\nParameterSummary: (folder) Open ${folder}\n",
    "com.overdesigned.Cheatsheet.CSSetCheatIconIntent": "com.overdesigned.Cheatsheet.CSSetCheatIconIntent(cheat: CheatToGo(Object), icon: IconToGo(Object)) -> Cheat\n                            : CheatToGo(Object)\nParameters:\n    cheat: Cheat. Cheat(s).\n    icon: Icon. Icon.\nReturn Value:\n    Cheat: Cheat(s).\nDescription:\n    Set Icon of Cheat: Set the icon.\nParameterSummary: (cheat,icon) Set ${cheat} icon to ${icon}\n",
    "com.overdesigned.Cheatsheet.CSSetCheatTitleIntent": "com.overdesigned.Cheatsheet.CSSetCheatTitleIntent(cheat: CheatToGo(Object), title: String) -> Cheat\n                            : CheatToGo(Object)\nParameters:\n    cheat: Cheat. Cheat(s).\n    title: Title.\nReturn Value:\n    Cheat: Cheat(s).\nDescription:\n    Set Title of Cheat: Set the title.\nParameterSummary: (cheat,title) Set ${cheat} title to ${title}\n",
    "com.overdesigned.Cheatsheet.GetCheatFromURL": "com.overdesigned.Cheatsheet.GetCheatFromURL(urls: array(String)) -> Get Cheats from URLs\n                            : array(CheatToGo(Object))\nParameters:\n    urls: URLs.\nReturn Value:\n    Get Cheats from URLs: \nDescription:\n    Get Cheats from URLs: Get cheats from their URLs. To get a cheat’s URL, use the Share button in the app. Cheat URLs must be of the form “cheatsheet://open?CHEAT-ID”.\nParameterSummary: (urls) Get cheats from ${urls}\n",
    "com.rivian.ios.consumer.CloseFrunkIntent": "com.rivian.ios.consumer.CloseFrunkIntent(vehicle: VehicleIntentEntity(Object))\nParameters:\n    vehicle: appIntent.parameter.vehicle. appIntent.vehicleEntity.typeName.\nDescription:\n    appIntent.close.frunk: appIntent.close.frunk.description\nParameterSummary: () appIntent.close.frunk\n",
    "com.rivian.ios.consumer.CloseLiftgateIntent": "com.rivian.ios.consumer.CloseLiftgateIntent(vehicle: VehicleIntentEntity(Object))\nParameters:\n    vehicle: appIntent.parameter.vehicle. appIntent.vehicleEntity.typeName.\nDescription:\n    appIntent.close.liftgate: appIntent.close.liftgate.description\nParameterSummary: () appIntent.close.liftgate\n",
    "com.rivian.ios.consumer.CloseWindowsIntent": "com.rivian.ios.consumer.CloseWindowsIntent(vehicle: VehicleIntentEntity(Object))\nParameters:\n    vehicle: appIntent.parameter.vehicle. appIntent.vehicleEntity.typeName.\nDescription:\n    appIntent.close.windows: appIntent.close.windows.description\nParameterSummary: () appIntent.close.windows\n",
    "com.rivian.ios.consumer.LockDoorsIntent": "com.rivian.ios.consumer.LockDoorsIntent(vehicle: VehicleIntentEntity(Object))\nParameters:\n    vehicle: appIntent.parameter.vehicle. appIntent.vehicleEntity.typeName.\nDescription:\n    appIntent.lock.doors: appIntent.lock.doors.description\nParameterSummary: () appIntent.lock.doors\n",
    "com.rivian.ios.consumer.OpenAppIntent": "com.rivian.ios.consumer.OpenAppIntent()\nDescription:\n    appIntent.openRivian\nParameterSummary: () appIntent.openRivian\n",
    "com.rivian.ios.consumer.OpenFrunkIntent": "com.rivian.ios.consumer.OpenFrunkIntent(vehicle: VehicleIntentEntity(Object))\nParameters:\n    vehicle: appIntent.parameter.vehicle. appIntent.vehicleEntity.typeName.\nDescription:\n    appIntent.open.frunk: appIntent.open.frunk.description\nParameterSummary: () appIntent.open.frunk\n",
    "com.rivian.ios.consumer.OpenLiftgateIntent": "com.rivian.ios.consumer.OpenLiftgateIntent(vehicle: VehicleIntentEntity(Object))\nParameters:\n    vehicle: appIntent.parameter.vehicle. appIntent.vehicleEntity.typeName.\nDescription:\n    appIntent.open.liftgate: appIntent.open.liftgate.description\nParameterSummary: () appIntent.open.liftgate\n",
    "com.rivian.ios.consumer.OpenWindowsIntent": "com.rivian.ios.consumer.OpenWindowsIntent(vehicle: VehicleIntentEntity(Object))\nParameters:\n    vehicle: appIntent.parameter.vehicle. appIntent.vehicleEntity.typeName.\nDescription:\n    appIntent.open.windows: appIntent.open.windows.description\nParameterSummary: () appIntent.open.windows\n",
    "com.rivian.ios.consumer.StartChargingIntent": "com.rivian.ios.consumer.StartChargingIntent(vehicle: VehicleIntentEntity(Object))\nParameters:\n    vehicle: appIntent.parameter.vehicle. appIntent.vehicleEntity.typeName.\nDescription:\n    appIntent.start.charging: appIntent.start.charging.description\nParameterSummary: () appIntent.start.charging\n",
    "com.rivian.ios.consumer.StartMotionCamIntent": "com.rivian.ios.consumer.StartMotionCamIntent(vehicle: VehicleIntentEntity(Object))\nParameters:\n    vehicle: appIntent.parameter.vehicle. appIntent.vehicleEntity.typeName.\nDescription:\n    appIntent.start.motionCam: appIntent.start.motionCam.description\nParameterSummary: () appIntent.start.motionCam\n",
    "com.rivian.ios.consumer.StartPreconditioningIntent": "com.rivian.ios.consumer.StartPreconditioningIntent(vehicle: VehicleIntentEntity(Object))\nParameters:\n    vehicle: appIntent.parameter.vehicle. appIntent.vehicleEntity.typeName.\nDescription:\n    appIntent.start.preconditioning: appIntent.start.preconditioning.description\nParameterSummary: () appIntent.start.preconditioning\n",
    "com.rivian.ios.consumer.StopChargingIntent": "com.rivian.ios.consumer.StopChargingIntent(vehicle: VehicleIntentEntity(Object))\nParameters:\n    vehicle: appIntent.parameter.vehicle. appIntent.vehicleEntity.typeName.\nDescription:\n    appIntent.stop.charging: appIntent.stop.charging.description\nParameterSummary: () appIntent.stop.charging\n",
    "com.rivian.ios.consumer.StopMotionCamIntent": "com.rivian.ios.consumer.StopMotionCamIntent(vehicle: VehicleIntentEntity(Object))\nParameters:\n    vehicle: appIntent.parameter.vehicle. appIntent.vehicleEntity.typeName.\nDescription:\n    appIntent.stop.motionCam: appIntent.stop.motionCam.description\nParameterSummary: () appIntent.stop.motionCam\n",
    "com.rivian.ios.consumer.StopPreconditioningIntent": "com.rivian.ios.consumer.StopPreconditioningIntent(vehicle: VehicleIntentEntity(Object))\nParameters:\n    vehicle: appIntent.parameter.vehicle. appIntent.vehicleEntity.typeName.\nDescription:\n    appIntent.stop.preconditioning: appIntent.stop.preconditioning.description\nParameterSummary: () appIntent.stop.preconditioning\n",
    "com.rivian.ios.consumer.UnlockDoorsIntent": "com.rivian.ios.consumer.UnlockDoorsIntent(vehicle: VehicleIntentEntity(Object))\nParameters:\n    vehicle: appIntent.parameter.vehicle. appIntent.vehicleEntity.typeName.\nDescription:\n    appIntent.unlock.doors: appIntent.unlock.doors.description\nParameterSummary: () appIntent.unlock.doors\n",
    "com.sindresorhus.Actions.AddToListIntent": "com.sindresorhus.Actions.AddToListIntent(list: None, item: 12(Object), prepend: Bool = \"0\")\nParameters:\n    list: List. Tap and hold the parameter to select a variable to a list. Don't quick tap it..\n    item: Item.\n    prepend: Prepend.\nDescription:\n    Add to List: Adds the input item to the given list.\n\nEven though the description says this action accepts input of type Files, it accepts any type.\n\nNote: If you get the error “The operation failed because Shortcuts couldn't convert from Text to NSString.”, just change the preview to show a list view instead. This is a bug in the Shortcuts app.\nParameterSummary: (prepend,item,list) ${prepend} ${item} to ${list}\n",
    "com.sindresorhus.Actions.ApplyCaptureDateIntent": "com.sindresorhus.Actions.ApplyCaptureDateIntent(images: None, setModificationDate: Bool = \"0\")\nParameters:\n    images: Images.\n    setModificationDate: Also Set Modification Date.\nDescription:\n    Apply Capture Date: Applies the original capture date and time of the photo (from Exif metadata) to the file's creation and modification date.\n\nIf an image does not have a capture date metadata, the file is just passed through.\n\nThis action can be useful to run after the built-in “Convert Image” action (ensure “Preserve Metadata” is checked).\nParameterSummary: (setModificationDate,images) Set the ${setModificationDate} of ${images} to the original capture date and time\n",
    "com.sindresorhus.Actions.Boolean": "com.sindresorhus.Actions.Boolean(boolean: Bool) -> Boolean\n                            : Bool\nParameters:\n    boolean: Boolean.\nReturn Value:\n    Boolean: \nDescription:\n    Boolean: Passes the specified boolean value to the next action.\n\nSimilar to the built-in “Number” and “Text” actions.\n\nThis can be useful if you want to create a variable that is initially set to a boolean.\nParameterSummary: (boolean) ${boolean}\n",
    "com.sindresorhus.Actions.CalculateWithSoulver": "com.sindresorhus.Actions.CalculateWithSoulver(expression: String, decimalPlaces: Integer = \"2\", showThousandsSeparator: Bool = \"1\", abbreviateLargeNumbers: Bool = \"1\", useLiveCurrencyRates: Bool = \"0\") -> Soulver Result\n                            : String\nParameters:\n    expression: Expression.\n    decimalPlaces: Decimal Places.\n    showThousandsSeparator: Show Thousands Separator.\n    abbreviateLargeNumbers: Abbreviate Large Numbers. Show numbers from a million and up as “1.35M” instead of “1350000”..\n    useLiveCurrencyRates: Use Live Currency Rates. This will make the action run slower. It will fall back to the built-in rates if the live rates cannot be fetched..\nReturn Value:\n    Soulver Result: \nDescription:\n    Calculate with Soulver: Lets you calculate day-to-day math expressions using natural language, provided by Soulver.\n\n\nExamples:\n\n$10 for lunch + 15%% tip\n→ $11.50\n\n65 kg in pounds\n→ 154.32 lb\n\n$2 in euro\n→ €2,02\n\n12%% of 478\n→ 57.36\n\n40 as %% of 90\n→ 44.44%%\n\n$150 is 25%% on what\n→ $120.00\n\n$25/hour * 14 hours of work\n→ $350.00\n\nJanuary 30 2020 + 3 months 2 weeks 5 days\n→ May 19, 2020\n\n9:35am in New York to Japan\n→ 10:35 pm\n\ndays until April\n→ 37 days\n\ndays left in Feb\n→ 5 days\n\ndays remaining in 2023\n→ 311 days\n\n$25k over 10 years at 7.5%%\n→ $51,525.79 (compound interest)\n\n\nThe expression can be written in English, German, Russian, or Simplified Chinese.\n\nIf you like this action, you may also like the Soulver macOS app.\nParameterSummary: (expression,decimalPlaces,showThousandsSeparator,abbreviateLargeNumbers,useLiveCurrencyRates) Calculate ${expression}\n",
    "com.sindresorhus.Actions.ClampNumberIntent": "com.sindresorhus.Actions.ClampNumberIntent(number: Float, minimum: Float, maximum: Float) -> Clamped Number\n                            : Float\nParameters:\n    number: Number.\n    minimum: Minimum.\n    maximum: Maximum.\nReturn Value:\n    Clamped Number: \nDescription:\n    Clamp Number: Clamps the input number to above or equal to the given minimum number and below or equal to the given maximum number.\n\nFor example, if you provide 10 as the number, 4 as minimum, and 8 as maximum, you will get 8 back.\nParameterSummary: (number,minimum,maximum) Clamp ${number} to be within ${minimum} and ${maximum}\n",
    "com.sindresorhus.Actions.ColorIntent": "com.sindresorhus.Actions.ColorIntent(color: String, shouldSetOpacity: Bool = \"0\", opacity: Float = \"1\") -> Color\n                            : ColorAppEntity(Object)\nParameters:\n    color: Color (hex format). Example: #ff69b4\nExample: #80ff69b4 (with 50%% opacity).\n    shouldSetOpacity: Set Opacity.\n    opacity: Opacity. Overrides any opacity in the Hex code..\nReturn Value:\n    Color: Color.\nDescription:\n    Color: Create a color type.\n\nThis color type can be used as input for the following actions:\n- Get Average Color\n\nThis color type is the return value of the following actions:\n- Get Random Color\n- Get Dominant Colors of Image\n- Get Average Color of Image\n\nFor example, you could get the two most dominant colors of an image using the “Get Dominant Colors of Image” action and then pass the result into the “Get Average Color” action to get the average of those.\nParameterSummary: (color,shouldSetOpacity) ${color}; (color,shouldSetOpacity,opacity) ${color}\n",
    "com.sindresorhus.Actions.CombineListsIntent": "com.sindresorhus.Actions.CombineListsIntent(list1: None, list2: None, list3: None, list4: None, list5: None, list6: None, list7: None, list8: None, list9: None, list10: None)\nParameters:\n    list1: List 1.\n    list2: List 2.\n    list3: List 3.\n    list4: List 4.\n    list5: List 5.\n    list6: List 6.\n    list7: List 7.\n    list8: List 8.\n    list9: List 9.\n    list10: List 10.\nDescription:\n    Combine Lists: Combines two or more lists into one list.\n\nSupports up to 10 lists.\n\nTap and hold a list parameter to select a variable to a list. Don't quick tap it.\n\nNote: If you get the error “The operation failed because Shortcuts couldn't convert from Text to NSString.”, just change the preview to show a list view instead. This is a bug in the Shortcuts app.\nParameterSummary: (list1,list2,list3,list4,list5,list6,list7,list8,list9,list10) Combine ${list1} with ${list2}\n",
    "com.sindresorhus.Actions.ConvertCoordinatesToLocation": "com.sindresorhus.Actions.ConvertCoordinatesToLocation(latitude: Float, longitude: Float) -> Location\n                            : 10(Object)\nParameters:\n    latitude: Latitude.\n    longitude: Longitude.\nReturn Value:\n    Location: \nDescription:\n    Convert Coordinates to Location: Returns the location at the given latitude and longitude.\n\nTip: Use the built-in “Get Details of Locations” action to get more details from the location.\nParameterSummary: (latitude,longitude) Get location at coordinates ${latitude}, ${longitude}\n",
    "com.sindresorhus.Actions.CreateURLIntent": "com.sindresorhus.Actions.CreateURLIntent(scheme: String = \"https\", host: String, path: String, queryItems: array(String) = \"array()\", fragment: String, user: String, password: String, useCustomPort: Bool = \"0\", port: Integer) -> URL\n                            : String\nParameters:\n    scheme: Scheme.\n    host: Host.\n    path: Path.\n    queryItems: Query Items (every other item is key & value).\n    fragment: Fragment.\n    user: User.\n    password: Password.\n    useCustomPort: Custom Port.\n    port: Port.\nReturn Value:\n    URL: \nDescription:\n    Create URL: Creates a URL from components.\nParameterSummary: () Create URL\n",
    "com.sindresorhus.Actions.DateToUnixTimeIntent": "com.sindresorhus.Actions.DateToUnixTimeIntent(date: String) -> Unix Time\n                            : Integer\nParameters:\n    date: Date.\nReturn Value:\n    Unix Time: \nDescription:\n    Convert Date to Unix Time: Returns the Unix time for the input date.\n\nExample: 1663178163\n\nTip: Write “current date” as the date to get it for the current date and time.\n\nUnix time (also known as Epoch time) is a system for describing a point in time — the number of seconds that have elapsed since the Unix epoch.\nParameterSummary: (date) Convert ${date} to Unix time\n",
    "com.sindresorhus.Actions.EditURLIntent": "com.sindresorhus.Actions.EditURLIntent(url: String, action: EditURLActionAppEnum(Enum) = \"addQueryItem\", queryItemName: String, queryItemValue: String, addPathComponentValue: String, appendToQueryValue: String, appendToFragmentValue: String, removeQueryItemsNamedValue: String, username: String, password: String, setQueryValue: String, setFragmentValue: String, setPathValue: String, setSchemeValue: String, setHostValue: String) -> Modified URL\n                            : String\nParameters:\n    url: URL.\n    action: Action. Edit URL Action. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"addQueryItem\"(Add query item), \"addPathComponent\"(Add path component), \"appendToQuery\"(Append to query), \"appendToFragment\"(Append to fragment), \"removeQueryItemsNamed\"(Remove query items named), \"removeLastPathComponent\"(Remove last path component), \"removeQuery\"(Remove query), \"removeFragment\"(Remove fragment), \"removePath\"(Remove path), \"removePort\"(Remove port), \"removeUserAndPassword\"(Remove user and password), \"setQuery\"(Set query), \"setFragment\"(Set fragment), \"setPath\"(Set path), \"setScheme\"(Set scheme), \"setHost\"(Set host), \"setUsernameAndPassword\"(Set username and password).\n    queryItemName: Name.\n    queryItemValue: Value.\n    addPathComponentValue: Path Component.\n    appendToQueryValue: Query.\n    appendToFragmentValue: Fragment.\n    removeQueryItemsNamedValue: Name.\n    username: Username.\n    password: Password.\n    setQueryValue: Query.\n    setFragmentValue: Fragment.\n    setPathValue: Path.\n    setSchemeValue: Scheme.\n    setHostValue: Host.\nReturn Value:\n    Modified URL: \nDescription:\n    Edit URL: Lets you edit the components of the input URL.\n\nFor example, add a query item, change the path, or remove the fragment.\nParameterSummary: (action,queryItemName,queryItemValue,url) ${action} ${queryItemName} ${queryItemValue} to ${url}; (action,addPathComponentValue,url) ${action} ${addPathComponentValue} of ${url}; (action,appendToQueryValue,url) ${action} ${appendToQueryValue} of ${url}; (action,appendToFragmentValue,url) ${action} ${appendToFragmentValue} of ${url}; (action,removeQueryItemsNamedValue,url) ${action} ${removeQueryItemsNamedValue} from ${url}; (action,setQueryValue,url) ${action} to ${setQueryValue} for ${url}; (action,setFragmentValue,url) ${action} to ${setFragmentValue} for ${url}; (action,setPathValue,url) ${action} to ${setPathValue} for ${url}; (action,setSchemeValue,url) ${action} to ${setSchemeValue} for ${url}; (action,setHostValue,url) ${action} to ${setHostValue} for ${url}; (action,username,password,url) ${action} to ${username} ${password} for ${url}; (action,url) ${action} of ${url}\n",
    "com.sindresorhus.Actions.FilterListIntent": "com.sindresorhus.Actions.FilterListIntent(list: array(String), shouldKeep: Bool = \"1\", condition: FilterConditionAppEnum(Enum) = \"contains\", matchText: String, caseSensitive: Bool = \"0\", shouldLimit: Bool = \"0\", limit: Integer = \"4\") -> Filtered List\n                            : array(String)\nParameters:\n    list: List. A list of text and/or numbers..\n    shouldKeep: Keep.\n    condition: Condition. Filter Condition. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"contains\"(contains), \"beginsWith\"(begins with), \"endsWith\"(ends with), \"regex\"(matches regex), \"is\"(is).\n    matchText: Text.\n    caseSensitive: Case Sensitive.\n    shouldLimit: Limit.\n    limit: Maximum Results.\nReturn Value:\n    Filtered List: \nDescription:\n    Filter List: Choose which items to keep or discard in the input list based on a condition.\n\nNote: If you get the error “The operation failed because Shortcuts couldn't convert from Text to NSString.”, just change the preview to show a list view instead. This is a bug in the Shortcuts app.\nParameterSummary: (shouldKeep,list,condition,matchText,shouldLimit,caseSensitive) ${shouldKeep} items in ${list} that ${condition} ${matchText}; (shouldKeep,list,condition,matchText,shouldLimit,limit,caseSensitive) ${shouldKeep} items in ${list} that ${condition} ${matchText}\n",
    "com.sindresorhus.Actions.FlashScreen": "com.sindresorhus.Actions.FlashScreen()\nDescription:\n    Flash Screen: Flashes the screen momentarily.\nParameterSummary: () Flash screen\n",
    "com.sindresorhus.Actions.FormatCurrencyIntent": "com.sindresorhus.Actions.FormatCurrencyIntent(amount: Float, currency: CurrencyAppEntity(Object)) -> Formatted Currency\n                            : String\nParameters:\n    amount: Amount.\n    currency: Currency. Uses the currency of the system locale if not specified.. Currency.\nReturn Value:\n    Formatted Currency: \nDescription:\n    Format Currency: Formats the input amount as currency.\nParameterSummary: (amount,currency) Format ${amount} as currency\n",
    "com.sindresorhus.Actions.FormatDateDifferenceIntent": "com.sindresorhus.Actions.FormatDateDifferenceIntent(firstDate: String, secondDate: String) -> Formatted Date Difference\n                            : String\nParameters:\n    firstDate: First Date.\n    secondDate: Second Date.\nReturn Value:\n    Formatted Date Difference: \nDescription:\n    Format Date Difference: Formats the difference of one date relative to another date.\n\nFor example, “Yesterday” or “2 weeks ago”.\nParameterSummary: (firstDate,secondDate) Format the difference of ${firstDate} relative to ${secondDate}\n",
    "com.sindresorhus.Actions.FormatDurationIntent": "com.sindresorhus.Actions.FormatDurationIntent(duration: Float, unitStyle: FormatDurationUnitStyleAppEnum(Enum) = \"full\", showSeconds: Bool = \"1\", showMinutes: Bool = \"1\", showHours: Bool = \"1\", showDays: Bool = \"1\", showMonths: Bool = \"0\", showYears: Bool = \"0\", maximumUnitCount: Integer = \"6\") -> Formatted Duration\n                            : String\nParameters:\n    duration: Duration. In seconds..\n    unitStyle: Unit Style. Format Duration Unit Style. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"positional\"(Positional), \"abbreviated\"(Abbreviated), \"brief\"(Brief), \"short\"(Short), \"full\"(Full), \"spellOut\"(Spell Out).\n    showSeconds: Show Seconds.\n    showMinutes: Show Minutes.\n    showHours: Show Hours.\n    showDays: Show Days.\n    showMonths: Show Months.\n    showYears: Show Years.\n    maximumUnitCount: Maximum Unit Count.\nReturn Value:\n    Formatted Duration: \nDescription:\n    Format Duration: Formats the input duration to a human-friendly representation.\n\nFor example, “9h 41m 30s” or “9:31:30”.\n\nStyles:\n- Positional: 9:31:30\n- Abbreviated: 9h 41m 30s\n- Brief: 9hr 41min 30sec\n- Short: 9 hr, 41 min, 30 sec\n- Full: 9 hours, 41 minutes, 30 seconds\n- Spell Out: nine hours, forty-one minutes, thirty seconds\nParameterSummary: (duration,unitStyle,showSeconds,showMinutes,showHours,showDays,showMonths,showYears,maximumUnitCount) Format ${duration}\n",
    "com.sindresorhus.Actions.FormatNumberCompactIntent": "com.sindresorhus.Actions.FormatNumberCompactIntent(number: Float, abbreviatedUnit: Bool = \"0\") -> Formatted Number\n                            : String\nParameters:\n    number: Number.\n    abbreviatedUnit: Abbreviated Unit.\nReturn Value:\n    Formatted Number: \nDescription:\n    Format Number — Compact: Formats the number into text using a compact style.\n\nFor example, 3420 becomes “3.4 thousand” or “3.4K”.\nParameterSummary: (number,abbreviatedUnit) Format ${number} with compact style\n",
    "com.sindresorhus.Actions.FormatPersonName": "com.sindresorhus.Actions.FormatPersonName(givenName: String, middleName: String, familyName: String, namePrefix: String, nickname: String, style: FormatPersonNameStyleAppEnum(Enum) = \"medium\") -> Formatted Person Name\n                            : String\nParameters:\n    givenName: Given Name.\n    middleName: Middle Name.\n    familyName: Family Name.\n    namePrefix: Name Prefix.\n    nickname: Nickname.\n    style: Style. Person Name Components Format Style. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"short\"(Short), \"medium\"(Medium), \"long\"(Long), \"abbreviated\"(Abbreviated).\nReturn Value:\n    Formatted Person Name: \nDescription:\n    Format Person Name: Formats the name of a person.\nParameterSummary: (givenName,middleName,familyName,namePrefix,nickname,style) Format ${givenName} ${middleName} ${familyName}\n",
    "com.sindresorhus.Actions.GenerateUUIDIntent": "com.sindresorhus.Actions.GenerateUUIDIntent() -> UUID\n                            : String\nReturn Value:\n    UUID: \nDescription:\n    Generate UUID: Generates a universally unique identifier (UUID).\nParameterSummary: () Generate UUID\n",
    "com.sindresorhus.Actions.GeoURIIntent": "com.sindresorhus.Actions.GeoURIIntent(location: 10(Object), includeAccuracy: Bool = \"1\") -> Geo URI\n                            : String\nParameters:\n    location: Location.\n    includeAccuracy: Include Accuracy.\nReturn Value:\n    Geo URI: \nDescription:\n    Convert Location to Geo URI: Returns the geo URI for the given location.\nParameterSummary: (location,includeAccuracy) Get the geo URI for ${location}\n",
    "com.sindresorhus.Actions.GetActionsVersion": "com.sindresorhus.Actions.GetActionsVersion() -> Actions App Version\n                            : ActionsVersionAppEntity(Object)\nReturn Value:\n    Actions App Version: Actions App Version.\nDescription:\n    Get Actions App Version: Returns the current version of the Actions app.\n\nThe build number is an increasing integer and can be used to do version checks.\nParameterSummary: () Get the version of the Actions app\n",
    "com.sindresorhus.Actions.GetAudioPlaybackDestinationIntent": "com.sindresorhus.Actions.GetAudioPlaybackDestinationIntent() -> Audio Playback Destination\n                            : String\nReturn Value:\n    Audio Playback Destination: \nDescription:\n    Get Audio Playback Destination (Does not detect AirPlay devices): Returns the audio playback destination of the device.\n\nCan be useful in combination with the built-in “Set Playback Destination” action.\n\nKnown limitation: It will not be able to detect when the output is an AirPlay device because of a system bug.\nParameterSummary: () Get audio playback destination\n",
    "com.sindresorhus.Actions.GetAverageColorIntent": "com.sindresorhus.Actions.GetAverageColorIntent(colors: array(ColorAppEntity(Object))) -> Average Color\n                            : ColorAppEntity(Object)\nParameters:\n    colors: Color.\nReturn Value:\n    Average Color: Color.\nDescription:\n    Get Average Color: Returns the average color of the input colors.\n\nIMPORTANT: Because of a bug in the Shortcuts app, you must first make the colors you want with the “Color” action, then pass the colors to the “List” action, and then pass the list to this action. (If you work at Apple → FB13291593)\nParameterSummary: (colors) Get the average color of ${colors} (Please read the action description)\n",
    "com.sindresorhus.Actions.GetBatteryStateIntent": "com.sindresorhus.Actions.GetBatteryStateIntent(state: BatteryStateTypeAppEnum(Enum) = \"charging\") -> Battery State\n                            : Bool\nParameters:\n    state: State. Battery State Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"unplugged\"(unplugged), \"charging\"(charging), \"full\"(full).\nReturn Value:\n    Battery State: \nDescription:\n    Get Battery State: Returns whether the device's battery is unplugged, charging, or full.\nParameterSummary: (state) Is the battery ${state}?\n",
    "com.sindresorhus.Actions.GetBooleanFromInput": "com.sindresorhus.Actions.GetBooleanFromInput(booleanString: String) -> Boolean\n                            : Bool\nParameters:\n    booleanString: Boolean-like Text. Accepts the following text values with any casing: true, false, yes, no, 1, 0.\nReturn Value:\n    Boolean: \nDescription:\n    Get Boolean from Input: Converts boolean-like text values (for example, “true”, “no”, “1”) into their corresponding boolean representation.\n\nIf no boolean could be detected, it returns an empty result.\n\nThis can be useful when an action expects a proper boolean type and you only have some boolean-like text value.\nParameterSummary: (booleanString) Get boolean from ${booleanString}\n",
    "com.sindresorhus.Actions.GetDeviceDetailsExtended": "com.sindresorhus.Actions.GetDeviceDetailsExtended() -> Device Details\n                            : DeviceDetailsAppEntity(Object)\nReturn Value:\n    Device Details: Device Details.\nDescription:\n    Get Device Details (Extended): Get details about the device.\n\nThis is an extension to the built-in “Get Device Details” action. Unlike the built-in action, this one returns all the values at once instead of making you pick a single value in the action.\n\nYou can access the individual values. For example, with the built-in “Show Result” action.\n\nPossible values for thermal state: Nominal, Fair, Serious, Critical\n\nTip: Use the “Format Duration” action to format the “Uptime” and “Duration since boot” values.\nParameterSummary: () Get Device Details (Extended)\n",
    "com.sindresorhus.Actions.GetDeviceMotionData": "com.sindresorhus.Actions.GetDeviceMotionData(sampleCount: Integer = \"1\", interval: Float = \"0.1\") -> Device Motion Data\n                            : array(DeviceMotion_AppEntity(Object))\nParameters:\n    sampleCount: Sample Count.\n    interval: Interval (seconds). Time between capturing samples..\nReturn Value:\n    Device Motion Data: \nDescription:\n    Get Device Motion Data: Returns measurements of the acceleration, rotation rate, and attitude of the device.\n\nData:\n- User Acceleration: Acceleration that the user is giving to the device.\n- Gravity: Gravity acceleration vector expressed in the device's reference frame.\n- Rotation Rate: Bias-corrected gyroscope data measuring rotation around three axes.\n- Attitude: Orientation of the device relative to the device's reference frame.\n\t- Roll: Rotation around a longitudinal axis that passes through the device from its top to bottom.\n\t- Pitch: Rotation around a lateral axis that passes through the device from side to side.\n\t- Yaw: Rotation around its vertical axis, originating at its center of gravity and directed downwards.\n\t- Quaternion: Orientation in 3D space as a quaternion, providing a compact and efficient way to describe its rotation relative to the device's reference frame.\n\nGoogle “CMDeviceMotion” for more info about this data.\n\nUse the built-in “Show Result” action to inspect the individual properties.\n\nNOTE: On iOS, the action can only run for maximum 30 seconds, so the interval times sample count must be less than that.\n\nNOTE: Does not work on visionOS.\nParameterSummary: (sampleCount,interval) Get device motion data\n",
    "com.sindresorhus.Actions.GetDeviceOrientationIntent": "com.sindresorhus.Actions.GetDeviceOrientationIntent() -> Device Orientation\n                            : DeviceOrientationAppEnum(Enum)\nReturn Value:\n    Device Orientation: Device Orientation. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"unknown\"(unknown), \"portrait\"(portrait), \"portraitUpsideDown\"(portraitUpsideDown), \"landscapeLeft\"(landscapeLeft), \"landscapeRight\"(landscapeRight), \"faceUp\"(faceUp), \"faceDown\"(faceDown).\nDescription:\n    Get Device Orientation: Returns the orientation of the device.\n\nFor example, whether the device is portrait or facing down.\n\nPossible values:\n- unknown\n- portrait\n- portraitUpsideDown\n- landscapeLeft\n- landscapeRight\n- faceUp\n- faceDown\n\nOn macOS and visionOS, it always returns “unknown”.\nParameterSummary: () Get Device Orientation\n",
    "com.sindresorhus.Actions.GetEmojisIntent": "com.sindresorhus.Actions.GetEmojisIntent(text: String) -> Emojis\n                            : String\nParameters:\n    text: Text.\nReturn Value:\n    Emojis: \nDescription:\n    Get Emojis: Returns all emojis in the input text.\nParameterSummary: (text) Get emojis in ${text}\n",
    "com.sindresorhus.Actions.GetFileIconIntent": "com.sindresorhus.Actions.GetFileIconIntent(files: None)\nParameters:\n    files: Files.\nDescription:\n    Get File Icon: Returns the icon for the input files or directories.\nParameterSummary: (files) Get the icon of ${files}\n",
    "com.sindresorhus.Actions.GetFilePathIntent": "com.sindresorhus.Actions.GetFilePathIntent(file: None, type: FilePathTypeAppEnum(Enum) = \"path\") -> File Path\n                            : array(String)\nParameters:\n    file: File.\n    type: Type. File Path Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"path\"(Path), \"url\"(URL), \"tildePath\"(Tilde Path).\nReturn Value:\n    File Path: \nDescription:\n    Get File Path: Returns the path or URL of the input files.\n\nFolder paths always end with a slash.\nParameterSummary: (type,file) Get the ${type} to ${file}\n",
    "com.sindresorhus.Actions.GetHighResolutionTimestamp": "com.sindresorhus.Actions.GetHighResolutionTimestamp() -> High-Resolution Timestamp\n                            : Integer\nReturn Value:\n    High-Resolution Timestamp: \nDescription:\n    Get High-Resolution Timestamp: Returns a timestamp representing the current instant in nanoseconds.\n\nExample: 434055845120916\n\nThe most common use-case is to subtract two instances of this to get a highly accurate difference.\n\nThe timestamp is not meant to be stored for a long time. It's only unique for the current computer session.\nParameterSummary: () Get high-resolution timestamp\n",
    "com.sindresorhus.Actions.GetIndexOfListItem": "com.sindresorhus.Actions.GetIndexOfListItem(list: array(String), item: String) -> Index of List Item\n                            : Integer\nParameters:\n    list: List.\n    item: Item.\nReturn Value:\n    Index of List Item: \nDescription:\n    Get Index of List Item: Returns the position of the item in the list, or -1 if the item is not in the list.\n\nIt uses 1-based indexing.\nParameterSummary: (item,list) Get the index of ${item} in ${list}\n",
    "com.sindresorhus.Actions.GetModifierKeyState": "com.sindresorhus.Actions.GetModifierKeyState() -> Modifier Key State\n                            : ModifierKeyState_AppEntity(Object)\nReturn Value:\n    Modifier Key State: Modifier Key State.\nDescription:\n    Get Modifier Key State: Returns which modifier keys are currently pressed.\n\nThis can be useful to have alternative behavior when, for example, the user presses the Option key.\n\nSupported modifier keys:\n- Shift\n- Control\n- Option\n- Command\n- Function\nParameterSummary: () Get state of modifier keys\n",
    "com.sindresorhus.Actions.GetMusicPlaylistsIntent": "com.sindresorhus.Actions.GetMusicPlaylistsIntent() -> Music Playlists\n                            : array(String)\nReturn Value:\n    Music Playlists: \nDescription:\n    Get Music Playlists: Returns the names of the playlists in your Music library.\n\nSee the “Find Music Playlist” action for more advanced functionality.\nParameterSummary: () Get Music Playlists\n",
    "com.sindresorhus.Actions.GetParagraphsFromTextIntent": "com.sindresorhus.Actions.GetParagraphsFromTextIntent(text: String, language: NLLanguageAppEntity(Object)) -> Paragraphs\n                            : array(String)\nParameters:\n    text: Text.\n    language: Language. Defaults to the system language.. Language.\nReturn Value:\n    Paragraphs: \nDescription:\n    Get Paragraphs from Text: Returns the text split into paragraphs.\n\nRelated action: Get Sentences from Text\nParameterSummary: (text,language) Get paragraphs from ${text}\n",
    "com.sindresorhus.Actions.GetQueryItemValueFromURLIntent": "com.sindresorhus.Actions.GetQueryItemValueFromURLIntent(url: String, queryItemName: String) -> URL Query Item Value\n                            : String\nParameters:\n    url: URL.\n    queryItemName: Name.\nReturn Value:\n    URL Query Item Value: \nDescription:\n    Get Query Item Value from URL: Returns the value of the first query item with the given name from the input URL.\nParameterSummary: (queryItemName,url) Get value of first query item named ${queryItemName} from ${url}\n",
    "com.sindresorhus.Actions.GetQueryItemsFromURLAsDictionaryIntent": "com.sindresorhus.Actions.GetQueryItemsFromURLAsDictionaryIntent(url: String) -> URL Query Items Dictionary\n                            : 12(Object)\nParameters:\n    url: URL.\nReturn Value:\n    URL Query Items Dictionary: \nDescription:\n    Get Query Items from URL as Dictionary: Returns all query items from the input URL as a dictionary.\n\nThis makes it convenient to get specific items.\n\nLimitation: URLs support having multiple query items with the same name, but dictionaries cannot have duplicate keys.\n\nTip: You could, for example, use this action together with the built-in “Get Dictionary Value” action.\nParameterSummary: (url) Get query items from ${url} as a dictionary\n",
    "com.sindresorhus.Actions.GetQueryItemsFromURLIntent": "com.sindresorhus.Actions.GetQueryItemsFromURLIntent(url: String) -> URL Query Items\n                            : array(URLQueryItemAppEntity(Object))\nParameters:\n    url: URL.\nReturn Value:\n    URL Query Items: \nDescription:\n    Get Query Items from URL: Returns all query items from the input URL.\n\nThe name and value of the query item can be accessed individually.\nParameterSummary: (url) Get query items from ${url}\n",
    "com.sindresorhus.Actions.GetRandomNumberFromSeed": "com.sindresorhus.Actions.GetRandomNumberFromSeed(minimum: Integer, maximum: Integer, seed: String) -> Random Number\n                            : Integer\nParameters:\n    minimum: Minimum.\n    maximum: Maximum.\n    seed: Seed. When specified, the returned number will always be the same if the seed is the same..\nReturn Value:\n    Random Number: \nDescription:\n    Get Random Number from Seed: Returns a random number between the given minimum and maximum value.\nParameterSummary: (minimum,maximum,seed) Get a random number between ${minimum} and ${maximum} from ${seed}\n",
    "com.sindresorhus.Actions.GetRelatedWordsIntent": "com.sindresorhus.Actions.GetRelatedWordsIntent(word: String, maximumCount: Integer = \"50\", language: NLLanguageAppEntity(Object)) -> Related Words\n                            : array(String)\nParameters:\n    word: Word.\n    maximumCount: Maximum Count.\n    language: Language. Language.\nReturn Value:\n    Related Words: \nDescription:\n    Get Related Words: Returns words related to the input word.\n\nFor example, given the word “horse”, it would return stallion, racehorse, pony, etc.\nParameterSummary: (word,maximumCount,language) Get words related to ${word}\n",
    "com.sindresorhus.Actions.GetSentencesFromTextIntent": "com.sindresorhus.Actions.GetSentencesFromTextIntent(text: String, language: NLLanguageAppEntity(Object)) -> Sentences\n                            : array(String)\nParameters:\n    text: Text.\n    language: Language. Defaults to the system language.. Language.\nReturn Value:\n    Sentences: \nDescription:\n    Get Sentences from Text: Returns the text split into sentences.\n\nRelated action: Get Paragraphs from Text\nParameterSummary: (text,language) Get sentences from ${text}\n",
    "com.sindresorhus.Actions.GetUniformTypeIdentifierIntent": "com.sindresorhus.Actions.GetUniformTypeIdentifierIntent(file: 12(Object)) -> Uniform Type Identifier\n                            : String\nParameters:\n    file: File.\nReturn Value:\n    Uniform Type Identifier: \nDescription:\n    Get Uniform Type Identifier: Returns the Uniform Type Identifier (UTI) of the input file.\n\nFor example, a JPEG file would return “public.jpeg”.\n\n\nRelated actions:\n- Set Uniform Type Identifier\n- Is Conforming to Uniform Type Identifier\nParameterSummary: (file) Get the Uniform Type Identifier of ${file}\n",
    "com.sindresorhus.Actions.GetUserDetailsIntent": "com.sindresorhus.Actions.GetUserDetailsIntent(type: UserDetailsTypeAppEnum(Enum) = \"name\") -> User Details\n                            : String\nParameters:\n    type: Type. User Details Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"username\"(Username (macOS-only)), \"name\"(Name), \"givenName\"(Given Name), \"familyName\"(Family Name), \"initials\"(Initials), \"shell\"(Shell), \"languageCode\"(Language Code), \"idleTime\"(Idle Time in Seconds (macOS-only)).\nReturn Value:\n    User Details: \nDescription:\n    Get User Details: Returns details about the current user.\n\nFor example, username, name, language, idle time, etc.\nParameterSummary: (type) Get the current user's ${type}\n",
    "com.sindresorhus.Actions.IsAudioPlayingIntent": "com.sindresorhus.Actions.IsAudioPlayingIntent() -> Is Audio Playing\n                            : Bool\nReturn Value:\n    Is Audio Playing: \nDescription:\n    Is Audio Playing: Returns whether there is audio currently playing on the device.\n\nImportant: The action simply returns the value that the system provides, so if there are any false-positives, there is unfortunately not much we can do about it. I recommend trying to restart your device, which sometimes fixes such issues.\n\nKnown issues\n- It incorrectly returns “true” if the microphone is active.\n- It incorrectly returns “true” if you have the “Accessibility › Sound Recognition” system setting enabled.\n- It returns “false” if audio is playing through AirPlay. There is unfortunately no way to detect this.\n- It returns “true” for a while after you end a call, even though no audio is playing.\nParameterSummary: () Is Audio Playing\n",
    "com.sindresorhus.Actions.IsBluetoothOnIntent": "com.sindresorhus.Actions.IsBluetoothOnIntent() -> Is Bluetooth On\n                            : Bool\nReturn Value:\n    Is Bluetooth On: \nDescription:\n    Is Bluetooth On: Returns whether Bluetooth is on or off.\n\nNOTE: You need to allow the Bluetooth permission in the main app before using this action.\nParameterSummary: () Is Bluetooth On\n",
    "com.sindresorhus.Actions.IsCallActive": "com.sindresorhus.Actions.IsCallActive() -> Is Call Active\n                            : Bool\nReturn Value:\n    Is Call Active: \nDescription:\n    Is Call Active: Returns whether the device is on a call (phone, FaceTime, VoIP, etc).\n\nOn macOS, it always returns “false”.\nParameterSummary: () Is Call Active\n",
    "com.sindresorhus.Actions.IsCameraOn": "com.sindresorhus.Actions.IsCameraOn() -> Is Camera On\n                            : Bool\nReturn Value:\n    Is Camera On: \nDescription:\n    Is Camera On: Returns whether any camera on the computer is on.\nParameterSummary: () Is Camera On\n",
    "com.sindresorhus.Actions.IsCellularDataOn": "com.sindresorhus.Actions.IsCellularDataOn() -> Is Cellular Data On\n                            : Bool\nReturn Value:\n    Is Cellular Data On: \nDescription:\n    Is Cellular Data On: Returns whether cellular data is enabled on the device.\n\nOn macOS and visionOS, it always returns false.\nParameterSummary: () Is Cellular Data On\n",
    "com.sindresorhus.Actions.IsCellularLowDataModeOn": "com.sindresorhus.Actions.IsCellularLowDataModeOn() -> Is Cellular Low Data Mode On\n                            : Bool\nReturn Value:\n    Is Cellular Low Data Mode On: \nDescription:\n    Is Cellular Low Data Mode On: Returns whether cellular low data mode is enabled on the device.\n\nOn macOS and visionOS, it always returns false.\nParameterSummary: () Is Cellular Low Data Mode On\n",
    "com.sindresorhus.Actions.IsConformingToUTIIntent": "com.sindresorhus.Actions.IsConformingToUTIIntent(utiString: String, parentUTIString: String) -> Is Conforming to Uniform Type Identifier\n                            : Bool\nParameters:\n    utiString: UTI. For example: “public.jpeg”.\n    parentUTIString: Parent UTI. For example: “public.image”.\nReturn Value:\n    Is Conforming to Uniform Type Identifier: \nDescription:\n    Is Conforming to Uniform Type Identifier: Returns whether the given Uniform Type Identifier (UTI) conforms to another one.\n\nFor example, it would return true if the first parameter is “public.jpeg” (JPEG image) and the second parameter is “public.image”.\n\nThis could be useful in combination with the “Get Uniform Type Identifier” action to check if a file conforms to a certain UTI. For example, to check if a file is an image.\nParameterSummary: (utiString,parentUTIString) Does ${utiString} conform to ${parentUTIString}?\n",
    "com.sindresorhus.Actions.IsConnectedToVPNIntent": "com.sindresorhus.Actions.IsConnectedToVPNIntent() -> Is Connected to VPN\n                            : Bool\nReturn Value:\n    Is Connected to VPN: \nDescription:\n    Is Connected to VPN: Returns whether the device is connected to a VPN.\n\nNote: There are some VPN protocols it is not able to detect. If the check is not working, try selecting a different VPN protocol in your VPN provider's app if possible. For example, the WireGuard protocol is known to not be detectable, while OpenVPN, IKEv2, and IPSec are detectable.\nParameterSummary: () Is Connected to VPN\n",
    "com.sindresorhus.Actions.IsDay": "com.sindresorhus.Actions.IsDay(day: String, type: DayType_AppEnum(Enum) = \"monday\") -> Is Day\n                            : Bool\nParameters:\n    day: Day. The date to check. Write “today” to check today..\n    type: Type. Day Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"monday\"(Monday), \"tuesday\"(Tuesday), \"wednesday\"(Wednesday), \"thursday\"(Thursday), \"friday\"(Friday), \"saturday\"(Saturday), \"sunday\"(Sunday), \"today\"(Today), \"tomorrow\"(Tomorrow), \"yesterday\"(Yesterday), \"weekend\"(Weekend), \"weekday\"(Weekday), \"currentWeek\"(In the current week), \"currentMonth\"(In the current month), \"currentYear\"(In the current year).\nReturn Value:\n    Is Day: \nDescription:\n    Is Day: Check if the input date corresponds to a specific weekday, today, tomorrow, yesterday, or falls on a weekend.\nParameterSummary: (day,type) Is ${day} ${type}?\n",
    "com.sindresorhus.Actions.IsDeviceMoving": "com.sindresorhus.Actions.IsDeviceMoving(timeout: Float = \"1\", minAcceleration: Float = \"0.01\") -> Is Device Moving\n                            : Bool\nParameters:\n    timeout: Timeout (seconds). How long it should wait before giving up waiting for the device to move. The maximum is 28..\n    minAcceleration: Minimum Acceleration. Defines the threshold acceleration in units of gravitational force (G's) required to register as movement. A higher threshold requires more significant movements to trigger detection, whereas a lower threshold is more sensitive to minor movements. Default: 0.01..\nReturn Value:\n    Is Device Moving: \nDescription:\n    Is Device Moving: Returns whether the device is currently moving.\n\nIf no movement is detect within 1 second, it returns “false”.\n\nThis can be useful to detect whether the device is in use or not.\n\nNOTE: On macOS and visionOS, it always returns “false”.\nParameterSummary: (timeout,minAcceleration) Is device moving?\n",
    "com.sindresorhus.Actions.IsDeviceOrientationIntent": "com.sindresorhus.Actions.IsDeviceOrientationIntent(orientation: IsDeviceOrientationAppEnum(Enum)) -> Is Device Orientation\n                            : Bool\nParameters:\n    orientation: Orientation. Is Device Orientation. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"portrait\"(Portrait), \"portraitUpsideDown\"(Portrait Upside Down), \"landscapeLeft\"(Landscape Left), \"landscapeRight\"(Landscape Right), \"faceUp\"(Face Up), \"faceDown\"(Face Down), \"anyPortrait\"(Any Portrait), \"anyLandscape\"(Any Landscape), \"faceUpOrDown\"(Face Up or Down).\nReturn Value:\n    Is Device Orientation: \nDescription:\n    Is Device Orientation: Returns whether the device is in the chosen orientation.\n\nOn macOS and visionOS, it always returns “false”.\nParameterSummary: (orientation) Is the device in ${orientation} orientation?\n",
    "com.sindresorhus.Actions.IsLowPowerModeIntent": "com.sindresorhus.Actions.IsLowPowerModeIntent() -> Is Low Power Mode On\n                            : Bool\nReturn Value:\n    Is Low Power Mode On: \nDescription:\n    Is Low Power Mode On: Returns whether low power mode is enabled on the device.\nParameterSummary: () Is Low Power Mode On\n",
    "com.sindresorhus.Actions.IsOnlineIntent": "com.sindresorhus.Actions.IsOnlineIntent() -> Is Online\n                            : Bool\nReturn Value:\n    Is Online: \nDescription:\n    Is Online: Returns whether the computer is online. It tries to connect to one or more servers to ensure you're actually online.\nParameterSummary: () Is online?\n",
    "com.sindresorhus.Actions.IsShakingDevice": "com.sindresorhus.Actions.IsShakingDevice(timeout: Float = \"2\") -> Is Shaking Device\n                            : Bool\nParameters:\n    timeout: Timeout (seconds). How long it should wait before giving up detecting a shake gesture. The maximum is 28..\nReturn Value:\n    Is Shaking Device: \nDescription:\n    Is Shaking Device: Returns whether you are currently shaking the device.\n\nIf no shaking is detect within 2 seconds, it returns “false”.\n\nOn macOS and visionOS, it always returns “false”.\nParameterSummary: (timeout) Is shaking device?\n",
    "com.sindresorhus.Actions.IsSilentModeOnIntent": "com.sindresorhus.Actions.IsSilentModeOnIntent() -> Is Silent Mode On\n                            : Bool\nReturn Value:\n    Is Silent Mode On: \nDescription:\n    Is Silent Mode On: Returns whether the silent switch (mute) is enabled on the device.\n\nKnown limitation: This will return true even if silent mode is not enabled if it's run while Voice Memos is recording.\nParameterSummary: () Is silent mode on?\n",
    "com.sindresorhus.Actions.IsWiFiOnIntent": "com.sindresorhus.Actions.IsWiFiOnIntent() -> Is Wi-Fi On\n                            : Bool\nReturn Value:\n    Is Wi-Fi On: \nDescription:\n    Is Wi-Fi On: Returns whether Wi-Fi is turned on.\n\nIt returns false if the device does not support Wi-Fi.\n\nUse the “Is Online” action if you simply want to check for internet connectivity.\nParameterSummary: () Is Wi-Fi on?\n",
    "com.sindresorhus.Actions.PlayAlertSound": "com.sindresorhus.Actions.PlayAlertSound()\nDescription:\n    Play Alert Sound: Plays the user preferred alert sound.\nParameterSummary: () Play alert sound\n",
    "com.sindresorhus.Actions.PrettyPrintDictionariesIntent": "com.sindresorhus.Actions.PrettyPrintDictionariesIntent(dictionaries: array(String)) -> Pretty Printed Dictionaries\n                            : array(String)\nParameters:\n    dictionaries: Dictionary.\nReturn Value:\n    Pretty Printed Dictionaries: \nDescription:\n    Pretty Print Dictionaries: Formats dictionaries (JSON) to be prettier and more readable.\nParameterSummary: (dictionaries) Pretty print ${dictionaries}\n",
    "com.sindresorhus.Actions.RandomBooleanIntent": "com.sindresorhus.Actions.RandomBooleanIntent() -> Random Boolean\n                            : Bool\nReturn Value:\n    Random Boolean: \nDescription:\n    Get Random Boolean: Returns a random boolean. Think of it as a random “Yes” or “No” answer.\nParameterSummary: () Get Random Boolean\n",
    "com.sindresorhus.Actions.RandomColorIntent": "com.sindresorhus.Actions.RandomColorIntent() -> Random Color\n                            : ColorAppEntity(Object)\nReturn Value:\n    Random Color: Color.\nDescription:\n    Get Random Color: Returns a random color.\nParameterSummary: () Get Random Color\n",
    "com.sindresorhus.Actions.RandomDateTimeIntent": "com.sindresorhus.Actions.RandomDateTimeIntent(start: String, end: String) -> Random Date and Time\n                            : String\nParameters:\n    start: Start.\n    end: End.\nReturn Value:\n    Random Date and Time: \nDescription:\n    Get Random Date and Time: Returns a random date and time in the given range.\nParameterSummary: (start,end) Get a random date and time between ${start} and ${end}\n",
    "com.sindresorhus.Actions.RandomEmojiIntent": "com.sindresorhus.Actions.RandomEmojiIntent() -> Random Emoticon\n                            : String\nReturn Value:\n    Random Emoticon: \nDescription:\n    Get Random Emoticon: Returns a random emoticon (also known as smiley).\nParameterSummary: () Get Random Emoticon\n",
    "com.sindresorhus.Actions.RandomFloatingPointNumberIntent": "com.sindresorhus.Actions.RandomFloatingPointNumberIntent(minimum: Float, maximum: Float, seed: String) -> Random Floating-Point Number\n                            : Float\nParameters:\n    minimum: Minimum.\n    maximum: Maximum.\n    seed: Seed. When specified, the returned number will always be the same if the seed is the same..\nReturn Value:\n    Random Floating-Point Number: \nDescription:\n    Get Random Floating-Point Number: Returns a random floating-point number between the given minimum and maximum value.\nParameterSummary: (minimum,maximum,seed) Get a random floating-point number between ${minimum} and ${maximum}\n",
    "com.sindresorhus.Actions.RandomTextIntent": "com.sindresorhus.Actions.RandomTextIntent(length: Integer = \"10\", lowercase: Bool = \"1\", uppercase: Bool = \"1\", digits: Bool = \"1\", useCustomCharacters: Bool = \"0\", customCharacters: String, seed: String) -> Random Text\n                            : String\nParameters:\n    length: Length.\n    lowercase: Lowercase.\n    uppercase: Uppercase.\n    digits: Digits.\n    useCustomCharacters: Use Custom Characters.\n    customCharacters: Custom Characters.\n    seed: Seed. When specified, the returned text will always be the same if the seed is the same..\nReturn Value:\n    Random Text: \nDescription:\n    Generate Random Text: Generates random text of the given length.\n\nThis can be useful as a placeholder, token, etc.\nParameterSummary: (length,lowercase,uppercase,digits,useCustomCharacters,seed) Random text of ${length} characters; (length,useCustomCharacters,customCharacters,seed) Random text of ${length} characters\n",
    "com.sindresorhus.Actions.RemoveDuplicateLinesIntent": "com.sindresorhus.Actions.RemoveDuplicateLinesIntent(text: String, caseInsensitive: Bool = \"0\") -> Text with Deduplicated Lines\n                            : String\nParameters:\n    text: Text.\n    caseInsensitive: Case Insensitive.\nReturn Value:\n    Text with Deduplicated Lines: \nDescription:\n    Remove Duplicate Lines: Removes duplicate lines from the input text. Empty or whitespace-only lines are not considered duplicates.\nParameterSummary: (text,caseInsensitive) Remove duplicate lines from ${text}\n",
    "com.sindresorhus.Actions.RemoveEmojiIntent": "com.sindresorhus.Actions.RemoveEmojiIntent(text: String) -> Text without Emojis\n                            : String\nParameters:\n    text: Text.\nReturn Value:\n    Text without Emojis: \nDescription:\n    Remove Emojis: Removes all emojis in the input text.\nParameterSummary: (text) Remove emojis in ${text}\n",
    "com.sindresorhus.Actions.RemoveEmptyLinesIntent": "com.sindresorhus.Actions.RemoveEmptyLinesIntent(text: String) -> Text without Empty and Whitespace-only Lines\n                            : String\nParameters:\n    text: Text.\nReturn Value:\n    Text without Empty and Whitespace-only Lines: \nDescription:\n    Remove Empty Lines: Removes empty and whitespace-only lines from the input text.\nParameterSummary: (text) Remove empty lines from ${text}\n",
    "com.sindresorhus.Actions.RemoveFromListIntent": "com.sindresorhus.Actions.RemoveFromListIntent(list: None, action: RemoveFromListActionAppEnum(Enum) = \"firstItem\", index: Integer, rangeLowerBound: Integer, rangeUpperBound: Integer, randomItemCount: Integer = \"1\")\nParameters:\n    list: List. Tap and hold the parameter to select a variable to a list. Don't quick tap it..\n    action: Action. Remove from List Action. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"firstItem\"(First Item), \"lastItem\"(Last Item), \"index\"(Item at Index), \"range\"(Items in Range), \"randomItems\"(Random Items).\n    index: Index.\n    rangeLowerBound: Start Index.\n    rangeUpperBound: End Index.\n    randomItemCount: Count.\nDescription:\n    Remove from List: Removes items from the input list.\n\nIt uses 1-based indexing.\n\nNote: If you get the error “The operation failed because Shortcuts couldn't convert from Text to NSString.”, just change the preview to show a list view instead. This is a bug in the Shortcuts app.\nParameterSummary: (action,index,list) Remove ${action} ${index} from ${list}; (action,rangeLowerBound,rangeUpperBound,list) Remove ${action} ${rangeLowerBound} to ${rangeUpperBound} from ${list}; (randomItemCount,action,list) Remove ${randomItemCount} ${action} from ${list}; (action,list) Remove ${action} from ${list}\n",
    "com.sindresorhus.Actions.RemoveNonPrintableCharactersIntent": "com.sindresorhus.Actions.RemoveNonPrintableCharactersIntent(text: String) -> Text without Non-Printable Characters\n                            : String\nParameters:\n    text: Text.\nReturn Value:\n    Text without Non-Printable Characters: \nDescription:\n    Remove Non-Printable Characters: Removes non-printable (invisible) Unicode characters from the input text, excluding normal whitespace characters.\n\nThis can be useful to clean up input text which might contain things like left-to-right embedding, control characters, etc.\nParameterSummary: (text) Remove non-printable characters in ${text}\n",
    "com.sindresorhus.Actions.ReverseLines": "com.sindresorhus.Actions.ReverseLines(text: String) -> Text with Lines Reversed\n                            : String\nParameters:\n    text: Text.\nReturn Value:\n    Text with Lines Reversed: \nDescription:\n    Reverse Lines: Reverses the lines of the input text.\nParameterSummary: (text) Reverse lines of ${text}\n",
    "com.sindresorhus.Actions.ReverseListIntent": "com.sindresorhus.Actions.ReverseListIntent(list: None)\nParameters:\n    list: List. Tap and hold the parameter to select a variable to a list. Don't quick tap it..\nDescription:\n    Reverse List: Reverses the input list.\n\nNote: If you get the error “The operation failed because Shortcuts couldn't convert from Text to NSString.”, just change the preview to show a list view instead. This is a bug in the Shortcuts app.\nParameterSummary: (list) Reverse ${list}\n",
    "com.sindresorhus.Actions.RoundNumberToMultipleIntent": "com.sindresorhus.Actions.RoundNumberToMultipleIntent(number: Float, multiple: Integer, mode: NumberRoundingModeAppEnum(Enum) = \"normal\") -> Rounded Number\n                            : Integer\nParameters:\n    number: Number.\n    multiple: Multiple.\n    mode: Mode. Number Rounding Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"normal\"(Normal), \"alwaysRoundUp\"(Always Round Up), \"alwaysRoundDown\"(Always Round Down).\nReturn Value:\n    Rounded Number: \nDescription:\n    Round Number to Multiple: Rounds the input number to the nearest multiple of the second number.\n\nFor example, if the number represents minutes and you want to round it to the nearest half-hour, you could use 30 as the multiple.\nParameterSummary: (number,multiple,mode) Round ${number} to the nearest multiple of ${multiple}\n",
    "com.sindresorhus.Actions.SampleColorIntent": "com.sindresorhus.Actions.SampleColorIntent() -> Sampled Color\n                            : ColorAppEntity(Object)\nReturn Value:\n    Sampled Color: Color.\nDescription:\n    Sample Color from Screen: Lets you pick a color from the screen.\nParameterSummary: () Sample Color from Screen\n",
    "com.sindresorhus.Actions.SendFeedbackIntent": "com.sindresorhus.Actions.SendFeedbackIntent(message: String, email: String) -> Send Feedback\n                            : String\nParameters:\n    message: Message.\n    email: Your Email.\nReturn Value:\n    Send Feedback: \nDescription:\n    Send Feedback: Lets you send feedback, action ideas, bug reports, etc, directly to the developer of the Actions app. You can also email me at sindresorhus@gmail.com if you prefer that.\nParameterSummary: (email,message) Send feedback to the developer of the Actions app\n",
    "com.sindresorhus.Actions.SetFileCreationModificationDateIntent": "com.sindresorhus.Actions.SetFileCreationModificationDateIntent(file: 12(Object), type: SetFileDateTypeAppEnum(Enum) = \"both\", date: String, modifyOriginal: Bool = \"0\") -> File with Updated Creation and Modification Date\n                            : 12(Object)\nParameters:\n    file: File.\n    type: Type. Set File Date Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"creationDate\"(Creation Date), \"modificationDate\"(Modification Date), \"both\"(Creation and Modification Date).\n    date: Date and Time.\n    modifyOriginal: Modify Original. When enabled, applies the changes to the original file (for example, in iCloud) instead of just the copy used in the shortcut. NOTE: It only works if you select a file directly in the parameter. It cannot come from a variable..\nReturn Value:\n    File with Updated Creation and Modification Date: \nDescription:\n    Set Creation and Modification Date of File: Sets the creation and modification date of a file or folder to a new value.\n\nTo be able to select a folder, use the built-in “Folder” action.\n\nNote: Setting the modification date of a file/folder in iCloud may not work as iCloud changes the modification date when it syncs.\nParameterSummary: (type,file,date,modifyOriginal) Set ${type} of ${file} to ${date}\n",
    "com.sindresorhus.Actions.SetUniformTypeIdentifier": "com.sindresorhus.Actions.SetUniformTypeIdentifier(file: 12(Object), typeIdentifier: String) -> File with Updated Uniform Type Identifier\n                            : 12(Object)\nParameters:\n    file: File.\n    typeIdentifier: Type Identifier. For example, use “public.jpeg” to set it to be a JPEG image..\nReturn Value:\n    File with Updated Uniform Type Identifier: \nDescription:\n    Set Uniform Type Identifier: Sets the Uniform Type Identifier (UTI) of the input file.\n\nThis can be useful when the previous shortcut action returned some data without a specific type.\nParameterSummary: (file,typeIdentifier) Set the Uniform Type Identifier of ${file} to ${typeIdentifier}\n",
    "com.sindresorhus.Actions.ShuffleListIntent": "com.sindresorhus.Actions.ShuffleListIntent(list: None, shouldLimit: Bool = \"0\", limit: Integer = \"10\")\nParameters:\n    list: List. Tap and hold the parameter to select a variable to a list. Don't quick tap it..\n    shouldLimit: Limit.\n    limit: Maximum Results.\nDescription:\n    Shuffle List: Shuffles the input list.\n\nNote: If you get the error “The operation failed because Shortcuts couldn't convert from Text to NSString.”, just change the preview to show a list view instead. This is a bug in the Shortcuts app.\nParameterSummary: (list,shouldLimit) Shuffle ${list}; (list,shouldLimit,limit) Shuffle ${list}\n",
    "com.sindresorhus.Actions.SortListIntent": "com.sindresorhus.Actions.SortListIntent(list: array(String), ascending: Bool = \"1\", sortType: SortTypeAppEnum(Enum) = \"natural\") -> Sorted List\n                            : array(String)\nParameters:\n    list: List. A list of text and/or numbers..\n    ascending: Sort Order.\n    sortType: Sort Type. Sort Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"natural\"(Natural), \"localized\"(Localized), \"localizedCaseInsensitive\"(Localized Case Insensitive), \"number\"(Number).\nReturn Value:\n    Sorted List: \nDescription:\n    Sort List: Sorts the input list.\n\nNote: If you get the error “The operation failed because Shortcuts couldn't convert from Text to NSString.”, just change the preview to show a list view instead. This is a bug in the Shortcuts app.\nParameterSummary: (list,ascending,sortType) Sort ${list} in ${ascending} order\n",
    "com.sindresorhus.Actions.SpellOutNumberIntent": "com.sindresorhus.Actions.SpellOutNumberIntent(number: Integer, locale: LocaleAppEntity(Object)) -> Spelled Out Number\n                            : String\nParameters:\n    number: Number.\n    locale: Locale. Locale.\nReturn Value:\n    Spelled Out Number: \nDescription:\n    Spell Out Number: Spells out the input number.\n\nFor example, 1000 becomes “one thousand”.\n\nIf a locale is not specified, the system locale is used.\nParameterSummary: (number,locale) Spell out ${number}\n",
    "com.sindresorhus.Actions.TransformListsIntent": "com.sindresorhus.Actions.TransformListsIntent(type: OperationTypeAppEnum(Enum) = \"intersection\", list1: None, list2: None)\nParameters:\n    type: Operation. Operation Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"subtraction\"(Subtraction), \"intersection\"(Intersection), \"symmetricDifference\"(Symmetric difference).\n    list1: List 1.\n    list2: List 2.\nDescription:\n    Transform Lists: Transforms items of two lists.\n\nNote that duplicates will be removed from the result.\n\nTap and hold a list parameter to select a variable to a list. Don't quick tap it.\n\nNote: If you get the error “The operation failed because Shortcuts couldn't convert from Text to NSString.”, just change the preview to show a list view instead. This is a bug in the Shortcuts app.\n\nKnown limitation: It does not work with iTunes Media items.\nParameterSummary: (list1,list2,type) Get items that are not in both ${list1} and ${list2}\n",
    "com.sindresorhus.Actions.TransformTextIntent": "com.sindresorhus.Actions.TransformTextIntent(text: String, transformation: TransformationAppEnum(Enum)) -> Transformed Text\n                            : String\nParameters:\n    text: Text.\n    transformation: Transformation. Transformation. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"camelCase\"(camelCase), \"pascalCase\"(PascalCase), \"snakeCase\"(snake_case), \"constantCase\"(CONSTANT_CASE), \"dashCase\"(dash-case), \"slugify\"(Slugify), \"stripPunctation\"(Strip Punctuation), \"stripQuotationMarks\"(Strip Quotation Marks), \"stripHTML\"(Strip HTML), \"stripDiacritics\"(Strip Diacritics), \"transliterateToLatin\"(Transliterate to Latin), \"transliterateLatinToArabic\"(Transliterate Latin to Arabic), \"transliterateLatinToCyrillic\"(Transliterate Latin to Cyrillic), \"transliterateLatinToGreek\"(Transliterate Latin to Greek), \"transliterateLatinToHebrew\"(Transliterate Latin to Hebrew), \"transliterateLatinToHangul\"(Transliterate Latin to Hangul), \"transliterateLatinToHiragana\"(Transliterate Latin to Hiragana), \"transliterateLatinToThai\"(Transliterate Latin to Thai), \"transliterateHiraganaToKatakana\"(Transliterate Hiragana to Katakana), \"transliterateMandarinToLatin\"(Transliterate Mandarin to Latin).\nReturn Value:\n    Transformed Text: \nDescription:\n    Transform Text: Transforms the input text to camel case, pascal case, snake case, constant case, or dash case. It also has transliteration transformations.\nParameterSummary: (text,transformation) Transform ${text} using ${transformation}\n",
    "com.sindresorhus.Actions.TransformTextWithJavaScriptIntent": "com.sindresorhus.Actions.TransformTextWithJavaScriptIntent(text: String, javaScriptCode: String = \"return $text.toLowerCase();\") -> Transformed Text\n                            : String\nParameters:\n    text: Text.\n    javaScriptCode: JavaScript Code. You are expected to return a string. The code must be synchronous..\nReturn Value:\n    Transformed Text: \nDescription:\n    Transform Text with JavaScript: Transforms the input text with the given JavaScript code.\n\nThe input text is available in a global variable named “$text”.\n\nThe code is excuted with JavaScriptCore (same as used in Safari), not JXA.\nParameterSummary: (text,javaScriptCode) Transform ${text} with ${javaScriptCode}\n",
    "com.sindresorhus.Actions.TrimWhitespaceIntent": "com.sindresorhus.Actions.TrimWhitespaceIntent(text: String) -> Text with Trimmed Whitespace\n                            : String\nParameters:\n    text: Text.\nReturn Value:\n    Text with Trimmed Whitespace: \nDescription:\n    Trim Whitespace: Removes leading & trailing whitespace and newline characters from the input text.\nParameterSummary: (text) Trim leading and trailing whitespace from ${text}\n",
    "com.sindresorhus.Actions.TruncateListIntent": "com.sindresorhus.Actions.TruncateListIntent(list: None, limit: Integer)\nParameters:\n    list: List. Tap and hold the parameter to select a variable to a list. Don't quick tap it..\n    limit: Count.\nDescription:\n    Truncate List: Truncates the input list to the given limit by removing items from the end.\n\nNote: If you get the error “The operation failed because Shortcuts couldn't convert from Text to NSString.”, just change the preview to show a list view instead. This is a bug in the Shortcuts app.\nParameterSummary: (list,limit) Truncate ${list} to maximum ${limit} items\n",
    "com.sindresorhus.Actions.TruncateNumber": "com.sindresorhus.Actions.TruncateNumber(number: Float, decimalPlaces: Integer = \"0\") -> Truncated Number\n                            : Float\nParameters:\n    number: Number.\n    decimalPlaces: Decimal Places.\nReturn Value:\n    Truncated Number: \nDescription:\n    Truncate Number: Removes the fractional part of the given number.\n\nExample: 3.4 => 3\nExample: 3.457 => 3.45\nParameterSummary: (number,decimalPlaces) Truncate ${number} to ${decimalPlaces} decimal places\n",
    "com.sindresorhus.Actions.TruncateTextIntent": "com.sindresorhus.Actions.TruncateTextIntent(text: String, maximumLength: Integer, truncationIndicator: String = \"…\") -> Truncated Text\n                            : String\nParameters:\n    text: Text.\n    maximumLength: Maximum Length. Sets the maximum length for the resulting text, truncation character included..\n    truncationIndicator: Truncation Indicator. The default indicator “…” is a single character called Horizontal Ellipsis, not three dots..\nReturn Value:\n    Truncated Text: \nDescription:\n    Truncate Text: Truncates the input text from the end to the given maximum length.\nParameterSummary: (text,maximumLength,truncationIndicator) Truncate ${text} to ${maximumLength} characters\n",
    "com.sindresorhus.Actions.UnixTimeToDateIntent": "com.sindresorhus.Actions.UnixTimeToDateIntent(unixTime: Integer) -> Date\n                            : String\nParameters:\n    unixTime: Unix Time. Example: 1663178163.\nReturn Value:\n    Date: \nDescription:\n    Convert Unix Time to Date: Returns the date for the input Unix time.\n\nUnix time (also known as Epoch time) is a system for describing a point in time — the number of seconds that have elapsed since the Unix epoch.\nParameterSummary: (unixTime) Convert ${unixTime} to a date\n",
    "com.sindresorhus.Actions.WaitMilliseconds": "com.sindresorhus.Actions.WaitMilliseconds(duration: Integer)\nParameters:\n    duration: Duration.\nDescription:\n    Wait Milliseconds: Waits for the specified number of milliseconds before continuing with the next action.\n\nIt is guaranteed to take at least the given amount of milliseconds. Sometimes it may take slightly longer.\n\nUse the built-in “Wait” action for durations longer than 1 second.\nParameterSummary: (duration) Wait ${duration} milliseconds\n",
    "com.sindresorhus.Actions.AskForText": "com.sindresorhus.Actions.AskForText(prompt: String, type: InputTypeAppEnum(Enum) = \"text\", message: String, defaultAnswer: String, timeout: Float, timeoutReturnValue: String, showCancelButton: Bool = \"1\")\nParameters:\n    prompt: Prompt.\n    type: Type. This helps the system pick the optimal keyboard.. Input Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"text\"(Text), \"number\"(Number), \"url\"(URL), \"email\"(Email), \"phoneNumber\"(Phone Number).\n    message: Message.\n    defaultAnswer: Default Answer. Prefill the text field. This can be a good way to let the user edit some existing text..\n    timeout: Timeout.\n    timeoutReturnValue: Return Value on Timeout. The text to return if the action times out..\n    showCancelButton: Show Cancel Button.\nDescription:\n    Ask for Text with Timeout: Displays a dialog prompting the user to enter some text.\n\nIf you provide a timeout, the action will cancel after the given timeout as long as the user has not started writing anything.\n\nIMPORTANT: The result is copied to the clipboard. Add the “Wait to Return” and “Get Clipboard” actions after this one.\nParameterSummary: (prompt,type,message,defaultAnswer,timeout,timeoutReturnValue,showCancelButton) Ask for text with ${prompt}\n",
    "com.sindresorhus.Actions.Authenticate": "com.sindresorhus.Actions.Authenticate(openURL: String, timeout: Float)\nParameters:\n    openURL: Open When Finished. If provided, opens the URL instead of the Shortcuts app when finished..\n    timeout: Timeout (seconds). When it times out, it returns “false” as if the authentication failed..\nDescription:\n    Authenticate (Legacy): Authenticate the user using Face ID or Touch ID.\n\nIMPORTANT: Use the “Authenticate” action instead.\n\nIMPORTANT: The result is copied to the clipboard as the text “true” or “false”. Add the “Wait to Return” and “Get Clipboard” actions after this one. Use the “If” action to decide what to do with the result.\n\nQ: Why can't it return the value directly?\nA: The system authentication feature can only be triggered from an app, so the action has to send you to the Actions app, which shows it, and then sends you back to the shortcut.\nParameterSummary: () Authenticate (Legacy)\n",
    "com.sindresorhus.Actions.Authenticate2": "com.sindresorhus.Actions.Authenticate2(openURL: String, timeout: Float) -> Is Authenticated\n                            : Bool\nParameters:\n    openURL: Open When Finished. If provided, opens the URL instead of the Shortcuts app when finished..\n    timeout: Timeout (seconds). When it times out, it returns “false” as if the authentication failed. On iOS & visionOS, the max timeout is 25 seconds, and it will always timeout after that even if this settings is not specified..\nReturn Value:\n    Is Authenticated: \nDescription:\n    Authenticate: Authenticate the user using Face ID or Touch ID.\n\nUnlike the old authenticate action, this one directly returns a boolean for whether the authentication succeeded.\n\nOn iOS & visionOS, it needs to momentarily open the Actions app to be able to present the authentication prompt. Afterwards, it goes back to the Shortcuts app. If you were running the shortcut in the background, there is unfortunately no way to go back to the previous app you were in, other than opening the app again from the shortcut.\nParameterSummary: () Authenticate\n",
    "com.sindresorhus.Actions.BlurImages": "com.sindresorhus.Actions.BlurImages(images: None, amount: Float)\nParameters:\n    images: Images.\n    amount: Amount. For example, 10%% blur will look the same regardless of the dimensions of the image. If you specify it as a variable, it should be a number from 0 to 1..\nDescription:\n    Blur Images: Apply gaussian blur to the input images.\nParameterSummary: (amount,images) Apply ${amount} blur to ${images}\n",
    "com.sindresorhus.Actions.ChooseFromListExtendedIntent": "com.sindresorhus.Actions.ChooseFromListExtendedIntent(list: array(String), prompt: String, message: String, selectMultiple: Bool = \"0\", selectAllInitially: Bool = \"0\", allowCustomItems: Bool = \"0\", useTimeout: Bool = \"0\", timeout: Float = \"10\", timeoutReturnValue: ChooseFromListTimeoutValueAppEnum(Enum) = \"nothing\")\nParameters:\n    list: List.\n    prompt: Prompt. Keep it short..\n    message: Message. Shown above the choices. This one can be longer. For example, use it to show instructions..\n    selectMultiple: Select Multiple.\n    selectAllInitially: Select All Initially.\n    allowCustomItems: Allow Custom Items.\n    useTimeout: Use Timeout.\n    timeout: Timeout.\n    timeoutReturnValue: Return Value on Timeout. Choose from List Timeout Value. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"nothing\"(Nothing), \"firstItem\"(First Item), \"lastItem\"(Last Item), \"randomItem\"(Random Item).\nDescription:\n    Choose from List (Extended): Presents a searchable list where you can select one or multiple items.\n\nIt also supports setting a timeout and interactively adding custom items.\n\nThis is an extended version of the built-in “Choose from List” action.\n\nIMPORTANT: Add the “Wait to Return” and “Get Clipboard” actions after this one.\n\nNote: If you get the error “The operation failed because Shortcuts couldn't convert from Text to NSString.”, just change the preview to show a list view instead. This is a bug in the Shortcuts app.\nParameterSummary: (list,prompt,message,selectMultiple,useTimeout,allowCustomItems) Choose from ${list}; (list,prompt,message,selectMultiple,useTimeout,timeout,timeoutReturnValue,allowCustomItems) Choose from ${list}; (list,prompt,message,selectMultiple,selectAllInitially,useTimeout,allowCustomItems) Choose from ${list}; (list,prompt,message,selectMultiple,selectAllInitially,useTimeout,timeout,timeoutReturnValue,allowCustomItems) Choose from ${list}\n",
    "com.sindresorhus.Actions.CombineVideosIntent": "com.sindresorhus.Actions.CombineVideosIntent(videos: None) -> Combined Video\n                            : 12(Object)\nParameters:\n    videos: Videos. Accepts MP4 and MOV videos..\nReturn Value:\n    Combined Video: \nDescription:\n    Combine Videos: Combine videos into a single video.\n\nIMPORTANT: The videos must have the same size and orientation.\n\nThis can be useful for combining Live Photos.\n\nIt uses passthrough whenever possible to prevent unnecessary transcoding, preserving original video quality.\n\nNOTE: On iOS & visionOS, shortcut actions only get 30 seconds to run, so if the videos are very long, it may not work.\nParameterSummary: (videos) Combine videos ${videos} (MUST HAVE SAME SIZE & ORIENTATION)\n",
    "com.sindresorhus.Actions.CreateColorImageIntent": "com.sindresorhus.Actions.CreateColorImageIntent(color: String = \"#ff69b4\", width: Integer, height: Integer, opacity: Float = \"1\") -> Color Image\n                            : 12(Object)\nParameters:\n    color: Hex Color.\n    width: Width.\n    height: Height.\n    opacity: Opacity.\nReturn Value:\n    Color Image: \nDescription:\n    Create Color Image: Creates a solid color image.\nParameterSummary: (color,width,height,opacity) Create image of color ${color} with size ${width}×${height}\n",
    "com.sindresorhus.Actions.CreateMenuItem": "com.sindresorhus.Actions.CreateMenuItem(menuTitle: String, sfSymbolName: String, emoji: String, subtitle: String, iconType: MenuItemIconType(Enum) = \"sfSymbol\", foreground: MenuItemStyle(Enum) = \"default\", background: MenuItemStyle(Enum) = \"default\", backgroundShape: MenuItemBackgroundShape(Enum) = \"circle\", data: String) -> Menu Item\n                            : MenuItem(Object)\nParameters:\n    menuTitle: Title.\n    sfSymbolName: SF Symbol. Find symbol names here: https://developer.apple.com/sf-symbols/.\n    emoji: Emoji. Tap the emoji button on your keyboard and select one emoji..\n    subtitle: Subtitle.\n    iconType: Icon Type. Menu Item Icon Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"sfSymbol\"(SF Symbol), \"emoji\"(Emoji).\n    foreground: Foreground Color. Menu Item Style. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"default\"(Default), \"red\"(Red), \"orange\"(Orange), \"yellow\"(Yellow), \"green\"(Green), \"mint\"(Mint), \"teal\"(Teal), \"cyan\"(Cyan), \"blue\"(Blue), \"purple\"({urple), \"pink\"({ink), \"brown\"(Brown), \"white\"(White), \"gray\"(Gray), \"black\"(Black), \"clear\"(Clear).\n    background: Background Color. Use this in combination with the background shape to show a background behind the icon.. Menu Item Style. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"default\"(Default), \"red\"(Red), \"orange\"(Orange), \"yellow\"(Yellow), \"green\"(Green), \"mint\"(Mint), \"teal\"(Teal), \"cyan\"(Cyan), \"blue\"(Blue), \"purple\"({urple), \"pink\"({ink), \"brown\"(Brown), \"white\"(White), \"gray\"(Gray), \"black\"(Black), \"clear\"(Clear).\n    backgroundShape: Background Style. The style of the icon's background.. Menu Item Background Shape. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"circle\"(Circle), \"square\"(Square), \"noBackground\"(No Background).\n    data: Data.\nReturn Value:\n    Menu Item: Menu Item.\nDescription:\n    Create Menu Item: Create a menu item with a title, subtitle, and icon.\n\nYou can later use one or more of these menu items in a “Choose from List” action.\n\nAdd an “Add to Variable” action below this one to populate a list and then use that variable in the “Choose From List” action.\n\nNOTE: If you pass in the color as a variable, you may have to write it in lowercase, “red” instead of “Red”, because of a iOS bug.\nParameterSummary: (menuTitle,sfSymbolName,subtitle,iconType,foreground,background,backgroundShape,data) Create menu item with title ${menuTitle} and icon ${sfSymbolName}; (menuTitle,sfSymbolName,subtitle,iconType,foreground,backgroundShape,data) Create menu item with title ${menuTitle} and icon ${sfSymbolName}; (menuTitle,emoji,subtitle,iconType,background,backgroundShape,data) Create menu item with title ${menuTitle} and icon ${emoji}; (menuTitle,emoji,subtitle,iconType,backgroundShape,data) Create menu item with title ${menuTitle} and icon ${emoji}; (menuTitle) Create menu item with title ${menuTitle}\n",
    "com.sindresorhus.Actions.DebugIntent": "com.sindresorhus.Actions.DebugIntent() -> Debug Info\n                            : String\nReturn Value:\n    Debug Info: \nDescription:\n    Debug (Internal): This is meant for debugging problems with actions.\nParameterSummary: () Debug (Internal)\n",
    "com.sindresorhus.Actions.EncryptFile": "com.sindresorhus.Actions.EncryptFile(shouldEncrypt: Bool = \"1\", file: 12(Object), key: String, decryptedType: String = \"public.data\") -> Encrypted/Decrypted File\n                            : 12(Object)\nParameters:\n    shouldEncrypt: Action.\n    file: File.\n    key: Key. The key must be 32 characters. Only ASCII characters (English letters and numbers)..\n    decryptedType: Decrypted Type. The type of the decrypted file in Uniform Type Identifier format. For example, “public.png” for PNG image or “public.zip-archive” for ZIP archive..\nReturn Value:\n    Encrypted/Decrypted File: \nDescription:\n    Encrypt File: Encrypts/decrypts a file/data securely using the given key.\n\nIt uses an AES-256-GCM cipher.\n\nIMPORTANT: Don't store the key in the shortcut if you intend to share the shortcut. Instead, read it from a local file.\n\nSee the “Encrypt Text” action to encrypt text.\nParameterSummary: (shouldEncrypt,file,key,decryptedType) ${shouldEncrypt} ${file} using key ${key} as type ${decryptedType}; (shouldEncrypt,file,key) ${shouldEncrypt} ${file} using key ${key}\n",
    "com.sindresorhus.Actions.EncryptText": "com.sindresorhus.Actions.EncryptText(shouldEncrypt: Bool = \"1\", text: String, key: String) -> Encrypted/Decrypted Text\n                            : String\nParameters:\n    shouldEncrypt: Action.\n    text: Text.\n    key: Key. The key must be 32 characters. Only ASCII characters (English letters and numbers)..\nReturn Value:\n    Encrypted/Decrypted Text: \nDescription:\n    Encrypt Text: Encrypts/decrypts text securely using the given key.\n\nThe encrypted text is returned as Base64-encoded text.\n\nIt uses an AES-256-GCM cipher.\n\nIMPORTANT: Don't store the key in the shortcut if you intend to share the shortcut. Instead, read it from a local file.\n\nSee the “Encrypt File” action to encrypt things like files and images.\nParameterSummary: (shouldEncrypt,text,key) ${shouldEncrypt} ${text} using key ${key}\n",
    "com.sindresorhus.Actions.GenerateCSVIntent": "com.sindresorhus.Actions.GenerateCSVIntent(dictionaries: None, keys: array(String) = \"array()\", delimiter: CSVDelimiterAppEnum(Enum) = \"comma\", customDelimiter: String) -> CSV File\n                            : 12(Object)\nParameters:\n    dictionaries: Dictionaries.\n    keys: Keys. By default, all keys are included. Here, you can specify which keys to include and in what order..\n    delimiter: Delimiter. CSV Delimiter. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"comma\"(Comma), \"tab\"(Tab), \"custom\"(Custom).\n    customDelimiter: Custom Delimiter.\nReturn Value:\n    CSV File: \nDescription:\n    Generate CSV: Generates a CSV file from a list of dictionaries.\n\nThe keys of the dictionaries are the CSV headers.\n\nThe dictionaries must have the same shape.\nParameterSummary: (dictionaries,delimiter,customDelimiter,keys) Generate CSV from ${dictionaries}; (dictionaries,delimiter,keys) Generate CSV from ${dictionaries}\n",
    "com.sindresorhus.Actions.GenerateRandomData": "com.sindresorhus.Actions.GenerateRandomData(size: Integer, outputType: GenerateRandomDataOutputTypeAppEnum(Enum) = \"hex\") -> Random Data\n                            : 12(Object)\nParameters:\n    size: Size. The size in bytes..\n    outputType: Type. Random Data Output Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"hex\"(Hex), \"base64\"(Base64), \"binary\"(Binary).\nReturn Value:\n    Random Data: \nDescription:\n    Generate Random Data: Generates cryptographically secure random data as Hex, Base64, or binary.\n\nExample use-cases: Generating keys, secrets, nonces, OTP, passwords, PINs, secure tokens, etc.\nParameterSummary: (size,outputType) Generate ${size} bytes of random data as ${outputType}\n",
    "com.sindresorhus.Actions.GetAverageColorOfImage": "com.sindresorhus.Actions.GetAverageColorOfImage(image: 12(Object)) -> Average Color of Image\n                            : ColorAppEntity(Object)\nParameters:\n    image: Image.\nReturn Value:\n    Average Color of Image: Color.\nDescription:\n    Get Average Color of Image: Returns the average color of the image.\n\nAverage color is all the colors in an image mixed into one, while dominant color is the most seen color in an image.\nParameterSummary: (image) Get average color of ${image}\n",
    "com.sindresorhus.Actions.GetBluetoothDevice": "com.sindresorhus.Actions.GetBluetoothDevice(deviceIdentifier: String, timeout: Float = \"2\") -> Bluetooth Device\n                            : BluetoothDevice_AppEntity(Object)\nParameters:\n    deviceIdentifier: Device Identifier. The UUID of the Bluetooth device..\n    timeout: Timeout (seconds). The duration to wait before giving up connecting to the device..\nReturn Value:\n    Bluetooth Device: Bluetooth Device.\nDescription:\n    Get Bluetooth Device: Returns the Bluetooth device with the given identifier if it's in range and discoverable.\n\nThis can be useful to check if a certain Bluetooth device is connected or in range and perform a specific action based on that.\n\nUse the “Get Bluetooth Devices” action to discover devices and their identifiers.\n\nNOTE: You need to allow the Bluetooth permission in the main app before using this action.\n\nNOTE: You need to have been connected to the device at least once before.\n\nNOTE: It only works for BLE (Bluetooth Low Energy) peripherals, not legacy Bluetooth peripherals.\n\nNOTE: Bluetooth has a lot of limitations on iOS and if this action doesn't work for you, it's unfortunately unlikely there is anything I can do about it.\n\nNOTE: The `transmitPowerLevel` property is not provided for this action.\n\nNOTE: The RSSI and signal strength are available for only one of the two AirPods. If it shows RSSI of 0, try the identifier of the other AirPods device.\nParameterSummary: (deviceIdentifier,timeout) Get Bluetooth Device with Identifier ${deviceIdentifier} (PLEASE READ THE ACTION DESCRIPTION)\n",
    "com.sindresorhus.Actions.GetBluetoothDevices": "com.sindresorhus.Actions.GetBluetoothDevices(scanDuration: Float = \"5\", includeUnnamedDevices: Bool = \"0\") -> Bluetooth Devices\n                            : array(BluetoothDevice_AppEntity(Object))\nParameters:\n    scanDuration: Scan Duration (seconds). Default: 5. Max: 25.\n    includeUnnamedDevices: Include Unnamed Devices.\nReturn Value:\n    Bluetooth Devices: \nDescription:\n    Get Bluetooth Devices: Returns the Bluetooth devices in range.\n\nOn iOS & visionOS, it has to open the main app while scanning because they do not allow scanning for arbitrary devices in the background.\n\nUse the “Get Bluetooth Device” action to check for a specific device.\n\nNOTE: You need to allow the Bluetooth permission in the main app before using this action.\n\nNOTE: The “connected” status may not be correct. For a correct connection status, use the “Get Bluetooth Device” action.\n\nNOTE: The “Services” field is only available in the “Get Bluetooth Device” action.\nParameterSummary: (scanDuration,includeUnnamedDevices) Get Bluetooth Devices (PLEASE READ THE ACTION DESCRIPTION)\n",
    "com.sindresorhus.Actions.GetCompassHeading": "com.sindresorhus.Actions.GetCompassHeading(headingType: CompassHeadingType_AppEnum(Enum) = \"magnetic\") -> Compass Heading\n                            : Float\nParameters:\n    headingType: Heading Type. Compass Heading Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"magnetic\"(Magnetic), \"trueNorth\"(True North).\nReturn Value:\n    Compass Heading: \nDescription:\n    Get Compass Heading: Returns the current compass heading, in magnetic or true north format.\n\nThe returned value is in degrees. The value 0 means the device is pointed toward north, 90 means it is pointed due east, 180 means it is pointed due south, and so on.\n\nMagnetic heading aligns with traditional compasses and maps, while true north is crucial for accurate astronomical alignments and specific surveying tasks.\n\nNOTE: Does not work on visionOS.\nParameterSummary: (headingType) Get ${headingType} compass heading\n",
    "com.sindresorhus.Actions.GetDominantColorsOfImage": "com.sindresorhus.Actions.GetDominantColorsOfImage(image: 12(Object), count: Integer = \"5\", excludeWhite: Bool = \"0\", excludeBlack: Bool = \"0\") -> Dominant Colors of Image\n                            : array(ColorAppEntity(Object))\nParameters:\n    image: Image.\n    count: Count. The number of colors to return. The colors are ordered by most dominant first. Max 128..\n    excludeWhite: Exclude White. Exclude white colors..\n    excludeBlack: Exclude Black. Exclude black colors..\nReturn Value:\n    Dominant Colors of Image: \nDescription:\n    Get Dominant Colors of Image: Returns the dominant colors of the image.\n\nYou could use this to make a palette of the main colors in an image.\n\nDominant color is the most seen color in an image, while average color is all the colors in an image mixed into one.\n\nNote: The Shortcuts output preview is buggy and shows the colors in random order. Switch to the list view for a stable order in the preview.\nParameterSummary: (count,image,excludeWhite,excludeBlack) Get ${count} dominant colors of ${image}\n",
    "com.sindresorhus.Actions.GetElevation": "com.sindresorhus.Actions.GetElevation() -> Elevation\n                            : Bool\nReturn Value:\n    Elevation: \nDescription:\n    Get Elevation: Returns the current elevation of the device, the absolute altitude above sea level.\n\nNOTE: Does not work on visionOS.\nParameterSummary: () Get Elevation\n",
    "com.sindresorhus.Actions.GetImageLocation": "com.sindresorhus.Actions.GetImageLocation(image: 12(Object)) -> Image Location\n                            : String\nParameters:\n    image: Image.\nReturn Value:\n    Image Location: \nDescription:\n    Get Image Location: Returns the capture location of the image from Exif metadata, if any.\n\nThe return value is in the format “-77.0364, 38.8951” (latitude, longitude).\n\nSee the “Set Image Location” action for the inverse.\nParameterSummary: (image) Get the location of ${image}\n",
    "com.sindresorhus.Actions.GetMapImageOfLocation": "com.sindresorhus.Actions.GetMapImageOfLocation(location: 10(Object), radius: Bool = \"10\", width: Integer = \"1000\", height: Integer = \"1000\", showPlacemark: Bool = \"1\", mapType: MapTypeAppEnum(Enum) = \"standard\", appearance: AppearanceAppEnum(Enum) = \"system\") -> Map Image of Location\n                            : 12(Object)\nParameters:\n    location: Location.\n    radius: Visible Radius. How much area to show around the location..\n    width: Width. The image width in pixels..\n    height: Height. The image height in pixels..\n    showPlacemark: Show Placemark.\n    mapType: Map Type. Map Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"standard\"(Standard), \"satellite\"(Satellite), \"hybrid\"(Hybrid), \"satelliteFlyover\"(Satellite Flyover), \"hybridFlyover\"(Hybrid Flyover), \"mutedStandard\"(Muted Standard).\n    appearance: Appearance. On macOS, it always uses the system appearance (because of a macOS bug).. Appearance. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"system\"(System), \"light\"(Light), \"dark\"(Dark).\nReturn Value:\n    Map Image of Location: \nDescription:\n    Get Map Image of Location: Returns an image with the given location marked and centered on a map.\n\nKnown issue: On iOS & visionOS, it only works the first time. There is some kind of system bug that makes it not work the second time it's run. There's unfortunately no workaround and we have to wait for Apple to fix this.\nParameterSummary: (location,radius,width,height,showPlacemark,mapType,appearance) Get map image of ${location} with ${radius} radius (PLEASE READ THE ACTION DESCRIPTION)\n",
    "com.sindresorhus.Actions.GetTitleOfURLIntent": "com.sindresorhus.Actions.GetTitleOfURLIntent(url: String) -> Title of URL\n                            : String\nParameters:\n    url: URL.\nReturn Value:\n    Title of URL: \nDescription:\n    Get Title of URL: Returns the title of the given website, or nothing if it failed to get the title.\nParameterSummary: (url) Get the title of ${url}\n",
    "com.sindresorhus.Actions.GetUnsplashImageIntent": "com.sindresorhus.Actions.GetUnsplashImageIntent(keywords: array(String) = \"array()\", onlyFeaturedImages: Bool = \"1\", size: UnsplashImageSizeAppEnum(Enum) = \"any\", sizeWidth: Integer, sizeHeight: Integer) -> Unsplash Image\n                            : 12(Object)\nParameters:\n    keywords: Keywords.\n    onlyFeaturedImages: Only Featured Images.\n    size: Size. Unsplash Image Size. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"any\"(Any), \"screenSize\"(Screen Size), \"custom\"(Custom).\n    sizeWidth: Width.\n    sizeHeight: Height.\nReturn Value:\n    Unsplash Image: \nDescription:\n    Get Unsplash Image: Returns a random image from Unsplash.\n\nFor example, use it together with the built-in “Set Wallpaper” action.\nParameterSummary: (keywords,onlyFeaturedImages,size,sizeWidth,sizeHeight) Get Unsplash image; (keywords,onlyFeaturedImages,size) Get Unsplash image\n",
    "com.sindresorhus.Actions.GlobalVariableDelete": "com.sindresorhus.Actions.GlobalVariableDelete(deleteAll: Bool = \"0\", keys: array(String))\nParameters:\n    deleteAll: Delete All?.\n    keys: Variables.\nDescription:\n    Global Variable: Delete: Delete global variables.\nParameterSummary: (deleteAll,keys) ${deleteAll} ${keys}; (deleteAll) ${deleteAll} variables\n",
    "com.sindresorhus.Actions.GlobalVariableGetAll": "com.sindresorhus.Actions.GlobalVariableGetAll() -> All Global Variables\n                            : 12(Object)\nReturn Value:\n    All Global Variables: \nDescription:\n    Global Variable: Get All: Returns all the global variables as a dictionary.\n\nTip: Use the built-in “Get Dictionary Value” action to access all keys.\nParameterSummary: () Get all global variables\n",
    "com.sindresorhus.Actions.GlobalVariableGetBoolean": "com.sindresorhus.Actions.GlobalVariableGetBoolean(key: String) -> Global Variable — Boolean\n                            : Bool\nParameters:\n    key: Key.\nReturn Value:\n    Global Variable — Boolean: \nDescription:\n    Global Variable: Get Boolean: Returns the global variable with the given key if any.\nParameterSummary: (key) Get global boolean variable ${key}\n",
    "com.sindresorhus.Actions.GlobalVariableGetNumber": "com.sindresorhus.Actions.GlobalVariableGetNumber(key: String) -> Global Variable — Number\n                            : Float\nParameters:\n    key: Key.\nReturn Value:\n    Global Variable — Number: \nDescription:\n    Global Variable: Get Number: Returns the global variable with the given key if any.\nParameterSummary: (key) Get global number variable ${key}\n",
    "com.sindresorhus.Actions.GlobalVariableGetText": "com.sindresorhus.Actions.GlobalVariableGetText(key: String) -> Global Variable — Text\n                            : String\nParameters:\n    key: Key.\nReturn Value:\n    Global Variable — Text: \nDescription:\n    Global Variable: Get Text: Returns the global variable with the given key if any.\nParameterSummary: (key) Get global text variable ${key}\n",
    "com.sindresorhus.Actions.GlobalVariableSetBoolean": "com.sindresorhus.Actions.GlobalVariableSetBoolean(shouldToggle: Bool = \"0\", key: String, value: Bool)\nParameters:\n    shouldToggle: Action.\n    key: Key. Maximum 20 characters..\n    value: Value.\nDescription:\n    Global Variable: Set Boolean: Sets a global variable with the given boolean.\n\nYou can also toggle a boolean.\n\nGlobal variables persist across your shortcuts and devices, with a limit of 1000 variables and a total storage capacity of 1 MB. Avoid using this for large amounts of data. For large data, use iCloud Drive, Notes, or Data Jar.\nParameterSummary: (shouldToggle,key,value) ${shouldToggle} global boolean variable ${key} to ${value}; (shouldToggle,key) ${shouldToggle} global boolean variable ${key}\n",
    "com.sindresorhus.Actions.GlobalVariableSetNumber": "com.sindresorhus.Actions.GlobalVariableSetNumber(action: GlobalVariableSetNumberAction_AppEnum(Enum) = \"set\", key: String, value: Float)\nParameters:\n    action: Action. Global Variable Set Number Action. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"set\"(Set), \"increment\"(Increment), \"decrement\"(Decrement).\n    key: Key. Maximum 20 characters..\n    value: Value.\nDescription:\n    Global Variable: Set Number: Sets a global variable with the given number.\n\nYou can also increment or decrement a number.\n\nGlobal variables persist across your shortcuts and devices, with a limit of 1000 variables and a total storage capacity of 1 MB. Avoid using this for large amounts of data. For large data, use iCloud Drive, Notes, or Data Jar.\nParameterSummary: (action,key,value) ${action} global number variable ${key} to ${value}\n",
    "com.sindresorhus.Actions.GlobalVariableSetText": "com.sindresorhus.Actions.GlobalVariableSetText(key: String, value: String)\nParameters:\n    key: Key. Maximum 20 characters..\n    value: Value.\nDescription:\n    Global Variable: Set Text: Sets a global variable with the given text.\n\nTip: You can store a dictionary of string/boolean/number values by passing it in as a variable. To get the persisted dictionary back, pass the output of the “Global Variables: Get Text” action to the “Get Dictionary from Input” action.\n\nGlobal variables persist across your shortcuts and devices, with a limit of 1000 variables and a total storage capacity of 1 MB. Avoid using this for large amounts of data. For large data, use iCloud Drive, Notes, or Data Jar.\nParameterSummary: (key,value) Set global text variable ${key} to ${value}\n",
    "com.sindresorhus.Actions.HapticFeedbackIntent": "com.sindresorhus.Actions.HapticFeedbackIntent(type: HapticFeedbackTypeAppEnum(Enum))\nParameters:\n    type: Type. Haptic Feedback Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"success\"(success), \"warning\"(warning), \"error\"(error), \"selection\"(selection), \"soft\"(soft), \"light\"(light), \"medium\"(medium), \"heavy\"(heavy), \"rigid\"(rigid).\nDescription:\n    Generate Haptic Feedback: Generate haptic feedback (vibrate).\n\nThe action has to momentarily open the main app as haptic feedback can only be generated from the app.\n\nNot supported on iPad. Requires iPhone 8 or later.\n\nOn macOS and visionOS, it does nothing.\nParameterSummary: (type) Generate ${type} haptic feedback (PLEASE READ THE ACTION DESCRIPTION)\n",
    "com.sindresorhus.Actions.HexEncode": "com.sindresorhus.Actions.HexEncode(input: 12(Object), action: HexEncodeActionAppEnum(Enum) = \"encode\", decodeContentType: String) -> Hex Encoded Data\n                            : 12(Object)\nParameters:\n    input: Input. Accepts a file or text. Tap the parameter to select a file. Tap and hold to select a variable to some text..\n    action: Action. Hex Encode Action. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"encode\"(Encode), \"decode\"(Decode).\n    decodeContentType: Uniform Type Identifier. For example, if the Hex string represents a PNG image, use “public.png”..\nReturn Value:\n    Hex Encoded Data: \nDescription:\n    Hex Encode: Encodes or decodes text or files using Hex encoding.\n\nExample: Hi → 4869\n\nNote: Use Base64 encoding whenever possible as it's more space efficient.\nParameterSummary: (action,input) ${action} ${input} to Hex; (action,input,decodeContentType) ${action} ${input} from Hex to ${decodeContentType}\n",
    "com.sindresorhus.Actions.HideShortcutsAppIntent": "com.sindresorhus.Actions.HideShortcutsAppIntent()\nDescription:\n    Hide Shortcuts App: Hides the Shortcuts app.\n\nThis is useful for making cross-platform shortcuts. If you just target iOS, use the built-in “Go to Home Screen” action instead.\nParameterSummary: () Hide the Shortcuts app\n",
    "com.sindresorhus.Actions.InvertImages": "com.sindresorhus.Actions.InvertImages(images: None)\nParameters:\n    images: Images.\nDescription:\n    Invert Images: Invert the colors of the input images.\nParameterSummary: (images) Invert ${images}\n",
    "com.sindresorhus.Actions.IsAccessibilityFeatureOn": "com.sindresorhus.Actions.IsAccessibilityFeatureOn(feature: AccessibilityFeature_AppEnum(Enum)) -> Is Accessibility Feature On\n                            : Bool\nParameters:\n    feature: Feature. Accessibility Feature. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"boldText\"(Bold Text), \"closedCaptioning\"(Closed Captioning), \"increaseContrast\"(Increase Contrast), \"grayscale\"(Grayscale), \"invertColors\"(Invert Colors), \"monoAudio\"(Mono Audio), \"onOffSwitchLabels\"(On/Off Switch Labels), \"reduceMotion\"(Reduce Motion), \"reduceTransparency\"(Reduce Transparency), \"shakeToUndo\"(Shake to Undo), \"speakScreen\"(Speak Screen), \"speakSelection\"(Speak Selection), \"switchControlRunning\"(Switch Control), \"videoAutoplay\"(Video Autoplay), \"voiceOverRunning\"(VoiceOver), \"differentiateWithoutColor\"(Differentiate without Color), \"buttonShapes\"(Button Shapes), \"prefersCrossFadeTransitions\"(Prefer Cross-Fade Transitions).\nReturn Value:\n    Is Accessibility Feature On: \nDescription:\n    Is Accessibility Feature On: Returns whether a certain accessibility feature is enabled.\n\nOn macOS, only the following are available. The rest always return false.\n- Reduce Motion\n- Reduce Transparency\n- Invert Colors\n- Increase Contrast\n- Differentiate without Color\n- VoiceOver\n- Switch Control\n\nIt's unfortunately not possible to check for “Assistive Touch” and “Guided Access”.\nParameterSummary: (feature) Is the ${feature} accessibility feature on?\n",
    "com.sindresorhus.Actions.IsDarkModeIntent": "com.sindresorhus.Actions.IsDarkModeIntent() -> Is Dark Mode On\n                            : Bool\nReturn Value:\n    Is Dark Mode On: \nDescription:\n    Is Dark Mode On: Returns whether dark mode is enabled on the device.\n\nNOTE: This always returns \"“false” on visionOS.\nParameterSummary: () Is Dark Mode On\n",
    "com.sindresorhus.Actions.IsDeviceLocked": "com.sindresorhus.Actions.IsDeviceLocked() -> Is Device Locked\n                            : Bool\nReturn Value:\n    Is Device Locked: \nDescription:\n    Is Device Locked: Returns whether the device is currently locked.\n\nLimitations:\n- It takes about 10 seconds from when you lock the screen until the device is actually locked.\n- This will not work if you don't have any authentication (passcode, Face ID, or Touch ID) for the device.\nParameterSummary: () Is device locked? (PLEASE READ THE ACTION DESCRIPTION)\n",
    "com.sindresorhus.Actions.IsHostReachable": "com.sindresorhus.Actions.IsHostReachable(host: String, port: Integer, timeout: Float = \"10\", debugMode: Bool = \"0\") -> Is Host Reachable\n                            : Bool\nParameters:\n    host: Host. A domain (sindresorhus.com) or IP address (172.67.135.124)..\n    port: Port.\n    timeout: Timeout (seconds).\n    debugMode: Debug. Throw errors instead of simply returning “false”. Can be useful for debugging..\nReturn Value:\n    Is Host Reachable: \nDescription:\n    Is Host Reachable: Returns whether the host at the given domain or IP address is reachable.\n\nUse the “Is Web Server Reachable” action if the host is a web server.\nParameterSummary: (host,port,timeout,debugMode) Is ${host} at port ${port} reachable?\n",
    "com.sindresorhus.Actions.IsMicrophoneOnIntent": "com.sindresorhus.Actions.IsMicrophoneOnIntent() -> Is Microphone On\n                            : Bool\nReturn Value:\n    Is Microphone On: \nDescription:\n    Is Microphone On: Returns whether any microphone on the computer is on.\nParameterSummary: () Is Microphone On\n",
    "com.sindresorhus.Actions.IsReachableIntent": "com.sindresorhus.Actions.IsReachableIntent(host: String, timeout: Float = \"10\", requireSuccessStatusCode: Bool = \"1\", useGetMethod: Bool = \"0\") -> Is Web Server Reachable\n                            : Bool\nParameters:\n    host: Host. A domain (sindresorhus.com), URL (https://sindresorhus.com/actions), or IP address (172.67.135.124)..\n    timeout: Timeout (seconds). Max 25 seconds..\n    requireSuccessStatusCode: Require success (2xx) status code.\n    useGetMethod: Use GET instead of HEAD. While the HEAD HTTP method is faster and widely supported, there are some scenarios involving proxies where using the GET method could work better..\nReturn Value:\n    Is Web Server Reachable: \nDescription:\n    Is Web Server Reachable: Returns whether the web server at the given host or URL is reachable.\n\nUse the “Is Online” action if you just want to check whether your computer is online.\n\nUse the “Is Host Reachable” action if you want to check reachability with a host that is not a web server.\nParameterSummary: (host,timeout,requireSuccessStatusCode,useGetMethod) Is web server at ${host} reachable?\n",
    "com.sindresorhus.Actions.IsScreenLockedIntent": "com.sindresorhus.Actions.IsScreenLockedIntent() -> Is Screen Locked\n                            : Bool\nReturn Value:\n    Is Screen Locked: \nDescription:\n    Is Screen Locked: Returns whether the screen is locked.\nParameterSummary: () Is the screen locked?\n",
    "com.sindresorhus.Actions.JoinWiFiIntent": "com.sindresorhus.Actions.JoinWiFiIntent(ssid: String, password: String, waitForConnection: Bool = \"1\", isWEP: Bool = \"0\", isHidden: Bool = \"0\")\nParameters:\n    ssid: Name (SSID).\n    password: Password.\n    waitForConnection: Wait for Connection. Whether the action should wait for the connection to complete before continuing. Setting this to false means you will not be notified of any connection errors..\n    isWEP: Is WEP. Set this to true if the network is WEP, otherwise it is assumed to be WPA/WPA2/WPA3..\n    isHidden: Is Hidden. Whether the Wi-Fi name (SSID) is hidden. Setting this to true makes the system perform an active scan for the SSID..\nDescription:\n    Join Wi-Fi: Joins the given Wi-Fi network.\n\nNOTE: The prompt to join a Wi-Fi network can only be presented in an app, so the action has to open the Actions app momentarily and then it switches back to the Shortcuts app. If you're running the shortcut in the background, you may want to add the “Go to Home Screen” action after this one. It is not possible to join a Wi-Fi network without the join prompt.\nParameterSummary: (ssid,password,waitForConnection,isWEP,isHidden) Join Wi-Fi named ${ssid}  (PLEASE READ THE ACTION DESCRIPTION)\n",
    "com.sindresorhus.Actions.MergeDictionariesIntent": "com.sindresorhus.Actions.MergeDictionariesIntent(dictionary1: 12(Object), dictionary2: 12(Object), dictionary3: 12(Object), dictionary4: 12(Object), dictionary5: 12(Object), dictionary6: 12(Object), dictionary7: 12(Object), dictionary8: 12(Object), dictionary9: 12(Object), dictionary10: 12(Object)) -> Merged Dictionary\n                            : 12(Object)\nParameters:\n    dictionary1: Dictionary 1.\n    dictionary2: Dictionary 2.\n    dictionary3: Dictionary 3.\n    dictionary4: Dictionary 4.\n    dictionary5: Dictionary 5.\n    dictionary6: Dictionary 6.\n    dictionary7: Dictionary 7.\n    dictionary8: Dictionary 8.\n    dictionary9: Dictionary 9.\n    dictionary10: Dictionary 10.\nReturn Value:\n    Merged Dictionary: \nDescription:\n    Merge Dictionaries: Merges two or more dictionaries into one dictionary.\n\nSupports up to 10 dictionaries.\n\nIt does shallow merging.\n\nTap and hold a dictionary parameter to select a variable to a dictionary. Don't quick tap it.\n\nIn Shortcuts, dictionaries are just JSON, so you can use this to merge JSON (file or text) too.\nParameterSummary: (dictionary1,dictionary2,dictionary3,dictionary4,dictionary5,dictionary6,dictionary7,dictionary8,dictionary9,dictionary10) Merge into ${dictionary1} from ${dictionary2} ${dictionary3} ${dictionary4} ${dictionary5} ${dictionary6} ${dictionary7} ${dictionary8} ${dictionary9} ${dictionary10}\n",
    "com.sindresorhus.Actions.OverwriteFile": "com.sindresorhus.Actions.OverwriteFile(source: 12(Object), destination: 12(Object)) -> New Destination File\n                            : 12(Object)\nParameters:\n    source: Source. Accepts a file, image, or text. Tap the parameter to select a file. Tap and hold to select a variable to an image or text..\n    destination: Destination. Must be a real file..\nReturn Value:\n    New Destination File: \nDescription:\n    Overwrite File: Overwrites the given destination file with the given source file.\n\nReturns the new destination file.\nParameterSummary: (destination,source) Overwrite ${destination} with ${source}\n",
    "com.sindresorhus.Actions.ParseCSVIntent": "com.sindresorhus.Actions.ParseCSVIntent(file: 12(Object), hasHeader: Bool = \"1\", delimiter: CSVDelimiterAppEnum(Enum) = \"comma\", customDelimiter: String)\nParameters:\n    file: CSV. Accepts a file or text. Tap the parameter to select a file. Tap and hold to select a variable to some text..\n    hasHeader: First Row Is Header.\n    delimiter: Delimiter. CSV Delimiter. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"comma\"(Comma), \"tab\"(Tab), \"custom\"(Custom).\n    customDelimiter: Custom Delimiter.\nDescription:\n    Parse CSV: Parses CSV into a list of dictionaries.\nParameterSummary: (file,delimiter,hasHeader,customDelimiter) Parse ${file}; (file,hasHeader,delimiter) Parse ${file}\n",
    "com.sindresorhus.Actions.ParseJSON5Intent": "com.sindresorhus.Actions.ParseJSON5Intent(file: 12(Object)) -> Parsed JSON5\n                            : 12(Object)\nParameters:\n    file: JSON5. Accepts a file or text. Tap the parameter to select a file. Tap and hold to select a variable to some text..\nReturn Value:\n    Parsed JSON5: \nDescription:\n    Parse JSON5: Parses JSON5 into a dictionary.\n\nJSON5 is a more human-friendly version of JSON. It can handle comments, single-quotes, and more.\n\nThe built-in “Get Dictionary from Input” action does not support JSON5.\nParameterSummary: (file) Parse ${file} into a dictionary\n",
    "com.sindresorhus.Actions.RemoveDuplicatesFromListIntent": "com.sindresorhus.Actions.RemoveDuplicatesFromListIntent(list: None)\nParameters:\n    list: List. Tap and hold the parameter to select a variable to a list. Don't quick tap it..\nDescription:\n    Remove Duplicates from List: Removes duplicates from the input list.\n\nNote: If you get the error “The operation failed because Shortcuts couldn't convert from Text to NSString.”, just change the preview to show a list view instead. This is a bug in the Shortcuts app.\nParameterSummary: (list) Remove duplicates from ${list}\n",
    "com.sindresorhus.Actions.ScanDocumentsIntent": "com.sindresorhus.Actions.ScanDocumentsIntent()\nDescription:\n    Scan Documents: Scans one or more documents using the system document scanner.\n\nIMPORTANT: The resulting images are copied to the clipboard. Add the “Wait to Return” and “Get Clipboard” actions after this one.\n\nNOTE: In contrast to the built-in “Scan Document” action, this one makes it possible to use the scanned document in the shortcut.\nParameterSummary: () Scan documents\n",
    "com.sindresorhus.Actions.ScanQRCodesInImageIntent": "com.sindresorhus.Actions.ScanQRCodesInImageIntent(image: 12(Object), multiple: Bool = \"0\") -> QR Code Messages\n                            : array(String)\nParameters:\n    image: Image.\n    multiple: Scan Multiple.\nReturn Value:\n    QR Code Messages: \nDescription:\n    Scan QR Codes in Image: Returns the messages of the QR codes in the input image.\n\nBy default, it only returns the message for the first QR code.\n\nThe messages are sorted by the physical size of their QR code in ascending order (largest first).\nParameterSummary: (image,multiple) Scan QR codes in ${image}\n",
    "com.sindresorhus.Actions.SetImageLocation": "com.sindresorhus.Actions.SetImageLocation(coordinateString: String, images: None)\nParameters:\n    coordinateString: Latitude & Longitude. Example: -77.0364, 38.8951.\n    images: Image.\nDescription:\n    Set Image Location: Sets the capture location (Exif metadata) of the input images.\n\nNote: It only modifies the image in the workflow, not the original image.\n\nSee the “Get Image Location” action for the inverse.\nParameterSummary: (coordinateString,images) Set location to ${coordinateString} for ${images}\n",
    "com.sindresorhus.Actions.SymbolImageIntent": "com.sindresorhus.Actions.SymbolImageIntent(symbolName: String, size: Integer = \"128\", rendering: SymbolImageRenderingAppEnum(Enum) = \"monochrome\", color: String = \"#ff69b4\", paletteColors: array(String) = \"array(#ff69b4(string), )\") -> SF Symbol Image\n                            : 12(Object)\nParameters:\n    symbolName: Symbol Name.\n    size: Size.\n    rendering: Rendering. Symbol Image Rendering. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"monochrome\"(monochrome), \"hierarchical\"(hierarchical), \"palette\"(palette), \"multicolor\"(multicolor (iOS & visionOS-only)).\n    color: Hex Color.\n    paletteColors: Hex Color.\nReturn Value:\n    SF Symbol Image: \nDescription:\n    Get SF Symbol Image: Returns a SF Symbols symbol as an image.\n\nFor example, “checkmark.circle.fill”.\n\nUse the SF Symbols app to find the symbol you want.\nParameterSummary: (symbolName,size,rendering,color) Get symbol ${symbolName} of size ${size} as ${rendering} ${color}; (symbolName,size,rendering,paletteColors) Get symbol ${symbolName} of size ${size} as ${rendering} ${paletteColors}; (symbolName,size,rendering) Get symbol ${symbolName} of size ${size} as ${rendering}\n",
    "com.sindresorhus.Actions.TranscribeAudioIntent": "com.sindresorhus.Actions.TranscribeAudioIntent(file: 12(Object), locale: SFLocaleAppEntity(Object), offline: Bool = \"0\") -> Transcription\n                            : String\nParameters:\n    file: Audio File.\n    locale: Custom Locale (Many of the locales do not work because of a system bug). Locale.\n    offline: Perform Offline (Buggy, don't use).\nReturn Value:\n    Transcription: \nDescription:\n    Transcribe Audio: Converts the speech in the input audio file to text.\n\nNote: Prefer the built-in “Transcribe Audio” action.\n\nNote: On iOS & visionOS, the transcription only works if the audio takes less than 30 seconds to process. This usually means about 1 minute of transcription. This is because third-party actions only get 30 seconds to execute.\n\nTip: Check out my app Aiko on the App Store. It has higher quality transcription, unlimited duration, and supports 100 languages.\n\nSee the built-in “Dictate Text” action if you need to transcribe in real-time.\n\nImportant: If you have permission issues even after granting access, try removing the action from your shortcut, force quit Shortcuts and Actions, and then add the action again.\nParameterSummary: (file,locale,offline) Transcribe ${file}\n",
    "com.sindresorhus.Actions.WriteTextIntent": "com.sindresorhus.Actions.WriteTextIntent(text: String, shouldEdit: Bool = \"0\", editorTitle: String)\nParameters:\n    text: Text.\n    shouldEdit: Edit.\n    editorTitle: Editor Title.\nDescription:\n    Write or Edit Text: Opens a text editor where you can write or edit text.\n\nIMPORTANT: The result is copied to the clipboard. Add the “Wait to Return” and “Get Clipboard” actions after this one.\nParameterSummary: (shouldEdit,editorTitle) ${shouldEdit} text; (shouldEdit,text,editorTitle) ${shouldEdit} ${text}\n",
    "com.sindresorhus.One-Thing.GetTextColorIntent": "com.sindresorhus.One-Thing.GetTextColorIntent() -> Text Color\n                            : String\nReturn Value:\n    Text Color: \nDescription:\n    Get Text Color: Returns the color of the text shown in the menu bar.\n\nThe color is in Hex format. Example: #ff69b4\n\nIt returns nothing if it's the default color.\nParameterSummary: () Get menu bar text color\n",
    "com.sindresorhus.One-Thing.GetTextIntent": "com.sindresorhus.One-Thing.GetTextIntent(textType: TextType_AppEnum(Enum) = \"text\") -> Text\n                            : String\nParameters:\n    textType: Type. Text Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"text\"(Text), \"prefixText\"(Prefix Text), \"suffixText\"(Suffix Text).\nReturn Value:\n    Text: \nDescription:\n    Get Text: Returns the text shown in the menu bar.\nParameterSummary: (textType) Get menu bar ${textType}\n",
    "com.sindresorhus.One-Thing.SetTextColorIntent": "com.sindresorhus.One-Thing.SetTextColorIntent(textColor: String)\nParameters:\n    textColor: Text Color. In Hex format. Example: #ff69b4.\nDescription:\n    Set Text Color: Sets the color of the text shown in the menu bar.\nParameterSummary: (textColor) Set menu bar text color to ${textColor}\n",
    "com.sindresorhus.One-Thing.SetTextIntent": "com.sindresorhus.One-Thing.SetTextIntent(text: String, textType: TextType_AppEnum(Enum) = \"text\")\nParameters:\n    text: Text.\n    textType: Type. Text Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"text\"(Text), \"prefixText\"(Prefix Text), \"suffixText\"(Suffix Text).\nDescription:\n    Set Text: Sets the text shown in the menu bar. Keep it short.\n\nGive it an empty value to clear the text.\nParameterSummary: (textType,text) Set menu bar ${textType} to ${text}\n",
    "com.tapbots.Ivory.PTHIvoryOpenFediverseURLIntent": "com.tapbots.Ivory.PTHIvoryOpenFediverseURLIntent(url: String, account: String)\nParameters:\n    url:  URL.\n    account:  Account.\nDescription:\n    Open Fediverse URL: Open's the Fediverse URL in the appropriate Ivory view\nParameterSummary: (Open Fediverse ${url}) Open Fediverse ${url}\n",
    "com.tapbots.Ivory.PTHIvoryPostStatusIntent": "com.tapbots.Ivory.PTHIvoryPostStatusIntent(text: String, account: String, replyPostURL: String) -> Account\n                            : String\nParameters:\n    text:  Text.\n    account:  Account.\n    replyPostURL:  Reply Post URL.\nReturn Value:\n    Account: Account.\nDescription:\n    Post Status: Posts a Status\nParameterSummary: (Post Status with ${text}) Post Status with ${text}\n",
    "com.tapbots.Ivory.PTHIvoryOpenIntent": "com.tapbots.Ivory.PTHIvoryOpenIntent(tab: TabType(Enum) = \"timeline\", query: String, profile: String, account: Account(Object))\nParameters:\n    tab:  Tab. TabType. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"timeline\"(Home), \"mentions\"(Mentions), \"favorites\"(Favorites), \"search\"(Search), \"profile\"(Profile), \"lists\"(Lists), \"mute\"(Mutes), \"statistics\"(Statistics), \"bookmarks\"(Bookmarks), \"notifications\"(Notifications), \"tags\"(Hashtags).\n    query:  Query. This value depends on the value of \"tab\". This parameter is only valid when the value of \"tab\" is \"search\".\n    profile:  Profile. This value depends on the value of \"tab\". This parameter is only valid when the value of \"tab\" is \"profile\".\n    account:  Account. Account.\nDescription:\n    Open Ivory: Opens the specified page\nParameterSummary: (Open ${tab}) Open ${tab}; (View @${profile}) View @${profile}; (Search for “${query}”) Search for “${query}”\n",
    "com.tapbots.Ivory.PTHIvoryTimelineWidgetIntent": "com.tapbots.Ivory.PTHIvoryTimelineWidgetIntent(account: Account(Object), timeline: Timeline(Object), name: TimelineName(Enum) = \"fullName\", header: Bool)\nParameters:\n    account:  Account. Account.\n    timeline:  Timeline. Timeline.\n    name:  Name. TimelineName. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"username\"(User Name), \"fullName\"(Full Name).\n    header:  Header.\nDescription:\n    Timeline Widget Intent\nParameterSummary: () Timeline Widget Intent\n",
    "com.tapbots.Ivory.PTHIvoryLatestFollowersWidgetIntent": "com.tapbots.Ivory.PTHIvoryLatestFollowersWidgetIntent(account: Account(Object), header: Bool)\nParameters:\n    account:  Account. Account.\n    header:  Header.\nDescription:\n    Latest Followers Widget Intent\nParameterSummary: () Latest Followers Widget Intent\n",
    "com.tapbots.Ivory.PTHIvoryFollowersCountWidgetIntent": "com.tapbots.Ivory.PTHIvoryFollowersCountWidgetIntent(account: Account(Object), header: Bool)\nParameters:\n    account:  Account. Account.\n    header:  Header.\nDescription:\n    Followers Count Widget Intent\nParameterSummary: () Followers Count Widget Intent\n",
    "com.tapbots.Ivory.PTHIvoryTimelineImageWidgetIntent": "com.tapbots.Ivory.PTHIvoryTimelineImageWidgetIntent(account: Account(Object), timeline: Timeline(Object), header: Bool)\nParameters:\n    account:  Account. Account.\n    timeline:  Timeline. Timeline.\n    header:  Header.\nDescription:\n    Timeline Image Widget Intent\nParameterSummary: () Timeline Image Widget Intent\n",
    "com.tapbots.Ivory.PTHIvoryStatsWidgetIntent": "com.tapbots.Ivory.PTHIvoryStatsWidgetIntent(account: Account(Object), header: Bool = True)\nParameters:\n    account:  Account. Account.\n    header:  Header.\nDescription:\n    Stats Widget Intent\nParameterSummary: () Stats Widget Intent\n",
    "com.todoist.ios.CreateTaskIntent": "com.todoist.ios.CreateTaskIntent(content: String, contentDescription: String, project: IntentProject(Object), section: IntentSection(Object), dueDate: String, priority: IntentPriority(Enum) = \"priority4\", labels: IntentLabel(Object)) -> Task\n                            : IntentTask(Object)\nParameters:\n    content:  Task Name.\n    contentDescription:  Description.\n    project:  Project. Project.\n    section:  Section. Section. This value depends on the value of \"project\". This parameter is only valid when \"project has any value.\n    dueDate:  Due Date.\n    priority:  Priority. Priority. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"priority1\"(Priority 1), \"priority2\"(Priority 2), \"priority3\"(Priority 3), \"priority4\"(Priority 4).\n    labels:  Labels. Label.\nReturn Value:\n    Task: Task. Task.\nDescription:\n    Create Task: Creates a new task. If a project isn't selected, the task will be added to the Inbox.\nParameterSummary: (Add ${content}) Add ${content}; (Add ${content}) Add ${content}\n",
    "com.todoist.ios.OpenTodayIntent": "com.todoist.ios.OpenTodayIntent()\nDescription:\n    Open Today: Opens Today\nParameterSummary: () Open Today\n",
    "com.todoist.ios.OpenUpcomingIntent": "com.todoist.ios.OpenUpcomingIntent()\nDescription:\n    Open Upcoming: Opens Upcoming\nParameterSummary: () Open Upcoming\n",
    "com.todoist.ios.OpenProjectIntent": "com.todoist.ios.OpenProjectIntent(project: IntentProject(Object))\nParameters:\n    project:  Project. Project.\nDescription:\n    Open Project: Opens the specified project\nParameterSummary: () Open Project\n",
    "com.todoist.ios.OpenLabelIntent": "com.todoist.ios.OpenLabelIntent(label: IntentLabel(Object))\nParameters:\n    label:  Label. Label.\nDescription:\n    Open Label: Opens the specified label\nParameterSummary: () Open Label\n",
    "com.todoist.ios.OpenFilterIntent": "com.todoist.ios.OpenFilterIntent(filter: IntentFilter(Object))\nParameters:\n    filter:  Filter. Filter.\nDescription:\n    Open Filter: Opens the specified filter\nParameterSummary: () Open Filter\n",
    "com.todoist.ios.OpenViewIntent": "com.todoist.ios.OpenViewIntent(viewMode: ViewMode(Enum) = \"today\", project: IntentProject(Object), label: IntentLabel(Object), filter: IntentFilter(Object))\nParameters:\n    viewMode:  View. View. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"today\"(Today), \"upcoming\"(Upcoming), \"project\"(Project), \"label\"(Label), \"filter\"(Filter).\n    project:  Project. Project. This value depends on the value of \"viewMode\". This parameter is only valid when the value of \"viewMode\" is \"project\".\n    label:  Label. Label. This value depends on the value of \"viewMode\". This parameter is only valid when the value of \"viewMode\" is \"label\".\n    filter:  Filter. Filter. This value depends on the value of \"viewMode\". This parameter is only valid when the value of \"viewMode\" is \"filter\".\nDescription:\n    Open View: Opens the specified view\nParameterSummary: (Open ${viewMode}) Open ${viewMode}; (Open ${viewMode} \"${filter}\") Open ${viewMode} \"${filter}\"; (Open ${viewMode} \"${label}\") Open ${viewMode} \"${label}\"; (Open ${viewMode} \"${project}\") Open ${viewMode} \"${project}\"\n",
    "com.todoist.ios.GetProjectsIntent": "com.todoist.ios.GetProjectsIntent(query: String, isLimited: Bool, limit: Integer = 5) -> Projects\n                            : IntentProject(Object)\nParameters:\n    query:  Query.\n    isLimited:  Limit.\n    limit:  Count. This value depends on the value of \"isLimited\". This parameter is only valid when the value of \"isLimited\" is True.\nReturn Value:\n    Projects: Projects. Project.\nDescription:\n    Get Projects: Gets all your projects in Todoist\nParameterSummary: () Get Projects\n",
    "com.todoist.ios.OpenProductivityIntent": "com.todoist.ios.OpenProductivityIntent(productivityGoal: ProductivityGoal(Enum) = \"daily\")\nParameters:\n    productivityGoal:  Productivity Goal. Productivity Goal. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"daily\"(Daily), \"weekly\"(Weekly).\nDescription:\n    Open Productivity: Opens the productivity view\nParameterSummary: () Open Productivity\n",
    "com.todoist.ios.OpenNextTaskIntent": "com.todoist.ios.OpenNextTaskIntent()\nDescription:\n    Open Next Task: Opens the next task\nParameterSummary: () Open Next Task\n",
    "com.tplink.kasa-ios.TapoDeviceToggleIntent": "com.tplink.kasa-ios.TapoDeviceToggleIntent(devices: Intent_Device(Object), state: Intent_DeviceState(Enum) = \"on\")\nParameters:\n    devices:  Device. Device.\n    state:  Target State. Power State. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"on\"(on), \"off\"(off).\nDescription:\n    Turn on/off a device: You can use this shortcut to turn on/off your Tapo smart devices. Please choose one or multiple devices, and select between on and off in the shortcut settings.\nParameterSummary: (Turn ${state} the ${devices}) Turn ${state} the ${devices}\n",
    "com.tplink.kasa-ios.TapoBulbColorSetIntent": "com.tplink.kasa-ios.TapoBulbColorSetIntent(devices: Intent_Device(Object), color: Intent_Color(Enum), brightness: Integer = 100)\nParameters:\n    devices:  Device. Device.\n    color:  Color. Light Color. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"red\"(Red), \"orange\"(Orange), \"yellow\"(Yellow), \"yellow_green\"(Yellow Green), \"green\"(Green), \"aqua\"(Aqua), \"sky_blue\"(Sky Blue), \"blue\"(Blue), \"deep_blue\"(Deep Blue), \"blue_violet\"(Blue Violet), \"purple\"(Purple), \"pink\"(Pink), \"temp_warm_white\"(Warm White), \"temp_neutral_white\"(Neutral White), \"temp_cool_white\"(Cool White), \"temp_natural_daylight\"(Daylight), \"temp_bright_daylight\"(Bright Daylight), \"temp_overcast_sky\"(Overcast Sky), \"temp_blue_sky\"(Blue Sky).\n    brightness:  Brightness.\nDescription:\n    Change lighting color/brightness: You can use this shortcut to change the color and/or brightness of your Tapo smart bulb or light strip. Please choose a device, select a color, and choose a brightness level in the shortcut settings.\nNote: Only multicolor bulbs support color changes.\nParameterSummary: (Change ${devices} to ${color} at ${brightness}%) Change ${devices} to ${color} at ${brightness}%\n",
    "com.tplink.kasa-ios.TapoRunShortcutIntent": "com.tplink.kasa-ios.TapoRunShortcutIntent(shortcut: Intent_Shortcut(Object))\nParameters:\n    shortcut:  Shortcut. Shortcut.\nDescription:\n    Play a Kasa shortcut: You can use this shortcut to play a Tapo shortcut. Please choose a Tapo shortcut in the shortcut settings.\nParameterSummary: (Play the selected Kasa scene: ${shortcut}) Play the selected Kasa scene: ${shortcut}\n",
    "com.tplink.kasa-ios.TapoTriggerAlarmIntent": "com.tplink.kasa-ios.TapoTriggerAlarmIntent(device: Intent_HubDevice(Object), alarm: Intent_Alarm(Object), degree: Intent_AlarmDegree(Enum) = \"Normal\", duration: Intent_AlarmDuration(Enum) = \"fives\")\nParameters:\n    device:  Device. Hub Device.\n    alarm:  Ringtone. Alarm. This value depends on the value of \"device\". This parameter is only valid when \"device has any value.\n    degree:  Volume. Alarm Degree. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Mute\"(mute), \"Low\"(low), \"Normal\"(normal), \"High\"(high).\n    duration:  Duration. Alarm Duration. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"fives\"(5s), \"tens\"(10s), \"thirtys\"(30s), \"onemin\"(1min), \"fivemins\"(5min), \"tenmin\"(10min).\nDescription:\n    Trigger Alarm: You can use this shortcut to set alarm.\nParameterSummary: (Trigger ${device} alarm) Trigger ${device} alarm; (Trigger ${device} alarm , sounding ${alarm}) Trigger ${device} alarm , sounding ${alarm}\n",
    "com.tplink.kasa-ios.TapoSetTemperatureIntent": "com.tplink.kasa-ios.TapoSetTemperatureIntent(device: Intent_Device(Object), temperature: Integer = 25)\nParameters:\n    device:  Device. Device.\n    temperature:  Temperature.\nDescription:\n    Set temperature: You can use this shortcut to set temperature.\nParameterSummary: (Set ${device} to ${temperature}°C) Set ${device} to ${temperature}°C\n",
    "com.tplink.kasa-ios.KasaDeviceToggleIntent": "com.tplink.kasa-ios.KasaDeviceToggleIntent(devices: Intent_Device(Object), state: Intent_DeviceState(Enum) = \"on\")\nParameters:\n    devices:  Device. Device.\n    state:  Target State. Power State. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"on\"(on), \"off\"(off).\nDescription:\n    Turn on/off a device: You can use this shortcut to turn on/off your Kasa smart devices. Please choose one or multiple devices, and select between on and off in the shortcut settings.\nParameterSummary: (Turn ${state} the ${devices}) Turn ${state} the ${devices}\n",
    "com.tplink.kasa-ios.KasaColorSetIntent": "com.tplink.kasa-ios.KasaColorSetIntent(devices: Intent_Device(Object), color: Intent_Color(Enum), brightness: Integer = 100)\nParameters:\n    devices:  Device. Device.\n    color:  Color. Light Color. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"red\"(Red), \"orange\"(Orange), \"yellow\"(Yellow), \"yellow_green\"(Yellow Green), \"green\"(Green), \"aqua\"(Aqua), \"sky_blue\"(Sky Blue), \"blue\"(Blue), \"deep_blue\"(Deep Blue), \"blue_violet\"(Blue Violet), \"purple\"(Purple), \"pink\"(Pink), \"temp_warm_white\"(Warm White), \"temp_neutral_white\"(Neutral White), \"temp_cool_white\"(Cool White), \"temp_natural_daylight\"(Daylight), \"temp_bright_daylight\"(Bright Daylight), \"temp_overcast_sky\"(Overcast Sky), \"temp_blue_sky\"(Blue Sky).\n    brightness:  Brightness.\nDescription:\n    Change lighting color/brightness: You can use this shortcut to change the color and/or brightness of your Kasa smart bulb or light strip. Please choose a device, select a color, and choose a brightness level in the shortcut settings.\nNote: Only multicolor bulbs support color changes.\nParameterSummary: (Change ${devices} to ${color} at ${brightness}%) Change ${devices} to ${color} at ${brightness}%\n",
    "com.tplink.kasa-ios.KasaRunSceneIntent": "com.tplink.kasa-ios.KasaRunSceneIntent(scene: Intent_Scene(Object))\nParameters:\n    scene:  Scene. Scene.\nDescription:\n    Play a Kasa shortcut: You can use this shortcut to play a Kasa shortcut. Please choose a Kasa shortcut in the shortcut settings.\nParameterSummary: (Play the selected Kasa scene: ${scene}) Play the selected Kasa scene: ${scene}\n",
    "com.wiheads.paste.CreateItemIntent": "com.wiheads.paste.CreateItemIntent(content: String, list: ListEntity(Object)) -> Create Item\n                            : String\nParameters:\n    content: Content. Text.\n    list: List. Clipboard or Pinboard. List.\nReturn Value:\n    Create Item: \nDescription:\n    Create Item: Create a new item in the specified list using the content passed as input.\nParameterSummary: (content,list) Create item with ${content} in ${list}\n",
    "com.wiheads.paste.CreatePinboardIntent": "com.wiheads.paste.CreatePinboardIntent(name: String) -> Create Pinboard\n                            : ListEntity(Object)\nParameters:\n    name: Name. Text.\nReturn Value:\n    Create Pinboard: List.\nDescription:\n    Create Pinboard: Create a pinboard with the name provided as input.\nParameterSummary: (name) Create pinboard ${name}\n",
    "com.wiheads.paste.GetItemAtIndexIntent": "com.wiheads.paste.GetItemAtIndexIntent(index: Integer = \"0\", list: ListEntity(Object)) -> Get Item at Index\n                            : String\nParameters:\n    index: Index. Item Index.\n    list: List. Clipboard or Pinboard. List.\nReturn Value:\n    Get Item at Index: \nDescription:\n    Get Item at Index: Retrieve an item from a specified position in a list.\nParameterSummary: (index,list) Get Item at ${index} from ${list}\n",
    "com.wiheads.paste.GetLatestItemIntent": "com.wiheads.paste.GetLatestItemIntent(type: ItemType(Enum) = \"text\", list: ListEntity(Object)) -> Get Latest Item\n                            : String\nParameters:\n    type: Type. Text or Link. Item Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"text\"(Text), \"link\"(Link).\n    list: List. Clipboard or Pinboard. List.\nReturn Value:\n    Get Latest Item: \nDescription:\n    Get Latest Item: Retrieve the latest item of a specified type from a list.\nParameterSummary: (type,list) Get latest ${type} item from ${list}\n",
    "com.wiheads.paste.SelectListsWidgetConfigurationIntent": "com.wiheads.paste.SelectListsWidgetConfigurationIntent(lists: array(ListEntity(Object)))\nParameters:\n    lists: Lists.\nDescription:\n    Select Lists\nParameterSummary: () Select Lists\n",
    "dk.simonbs.DataJar.DeleteValueIntent": "dk.simonbs.DataJar.DeleteValueIntent(keyPath: String, errorWhenValueNotFound: Bool, deleteStrategy: DeleteStrategy(Enum) = \"disallowArraysAndDictionaries\")\nParameters:\n    keyPath:  Key Path.\n    errorWhenValueNotFound:  Error If Value Not Found.\n    deleteStrategy:  Allow. Delete Strategy. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"alwaysAllow\"(Any value), \"disallowArraysAndDictionaries\"(Not lists and dictionaries).\nDescription:\n    Delete Value: Deletes the value at the specified key path from the store. The action will delete the value without warning. \nParameterSummary: (Delete value for ${keyPath}) Delete value for ${keyPath}\n",
    "dk.simonbs.DataJar.GetValueIntent": "dk.simonbs.DataJar.GetValueIntent(keyPath: String, fallbackValues: File(Object)) -> Projects\n                            : String\nParameters:\n    keyPath:  Key Path.\n    fallbackValues:  If Value Does Not Exist.\nReturn Value:\n    Projects: Projects.\nDescription:\n    Get Value: Gets value at the specified key path. Lists and dictionaries are returned as JSON.\nParameterSummary: (Get value for ${keyPath}) Get value for ${keyPath}\n",
    "dk.simonbs.DataJar.SetValueIntent": "dk.simonbs.DataJar.SetValueIntent(keyPath: String, values: File(Object), valueConversionMode: ValueConversionMode(Enum) = \"automatic\", overwriteStrategy: OverwriteStrategy(Enum) = \"disallowArraysAndDictionaries\", filename: String)\nParameters:\n    keyPath:  Key Path.\n    values:  Value.\n    valueConversionMode:  Store Value As. Value Conversion Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"automatic\"(Automatic), \"text\"(Text), \"file\"(File).\n    overwriteStrategy:  Overwrite. Overwrite Strategy. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"alwaysAllow\"(Yes), \"alwaysDisallow\"(No), \"disallowArraysAndDictionaries\"(Not lists and dictionaries).\n    filename:  Filename.\nDescription:\n    Set Value: Inserts or updates the value at the specified key path. The value can be a text, number, list, dictionary or a file. By default the action does not allow overwriting lists and dictionaries. This can be configured in the action. When storing a file, the \"Filename\" parameter can be used o specify the name of the file.\nParameterSummary: (Set ${keyPath} to ${values}) Set ${keyPath} to ${values}\n",
    "dk.simonbs.DataJar.InsertValueInArrayIntent": "dk.simonbs.DataJar.InsertValueInArrayIntent(values: File(Object), keyPath: String, insertionPoint: ArrayValueInsertionPoint(Enum) = \"beginning\", index: Integer = 1, valueConversionMode: ValueConversionMode(Enum) = \"automatic\")\nParameters:\n    values:  Value.\n    keyPath:  Key Path.\n    insertionPoint:  Insertion Point. Array Value Insertion Point. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"beginning\"(Beginning), \"end\"(End), \"index\"(Index).\n    index:  Index. This value depends on the value of \"insertionPoint\". This parameter is only valid when the value of \"insertionPoint\" is \"index\".\n    valueConversionMode:  Store Value As. Value Conversion Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"automatic\"(Automatic), \"text\"(Text), \"file\"(File).\nDescription:\n    Add To List: Inserts a value into the list at the specified key path.\nParameterSummary: (Add ${values} at ${insertionPoint} ${index} of list at ${keyPath}) Add ${values} at ${insertionPoint} ${index} of list at ${keyPath}; (Add ${values} at ${insertionPoint} of list at ${keyPath}) Add ${values} at ${insertionPoint} of list at ${keyPath}\n",
    "dk.simonbs.DataJar.GetTypeOfValueIntent": "dk.simonbs.DataJar.GetTypeOfValueIntent(keyPath: String) -> Type of Value\n                            : String\nParameters:\n    keyPath:  Key Path.\nReturn Value:\n    Type of Value: Type of Value.\nDescription:\n    Get Type of Value: Returns the type of value at the specified key path. Possible returned values are \"Text\", \"Number\", \"Boolean\", \"File\", \"List\" and \"Dictionary\".\nParameterSummary: (Get type of value at ${keyPath}) Get type of value at ${keyPath}\n",
    "dk.simonbs.DataJar.CheckIfValueExistsIntent": "dk.simonbs.DataJar.CheckIfValueExistsIntent(keyPath: String) -> Value Exists\n                            : Bool\nParameters:\n    keyPath:  Key Path.\nReturn Value:\n    Value Exists: Value Exists.\nDescription:\n    Check If Value Exists: Checks if a value exists at the specified key path. The returned value is a boolean represented as 1 for true and 0 for false.\nParameterSummary: (Check if value exists at ${keyPath}) Check if value exists at ${keyPath}\n",
    "dk.simonbs.DataJar.GetKeysIntent": "dk.simonbs.DataJar.GetKeysIntent(source: GetKeysSource(Enum) = \"dictionary\", keyPath: String, errorWhenValueNotFound: Bool = True) -> Error Message\n                            : String\nParameters:\n    source:  Source. Get Keys Source. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"root\"(store), \"dictionary\"(dictionary).\n    keyPath:  Key Path. This value depends on the value of \"source\". This parameter is only valid when the value of \"source\" is \"dictionary\".\n    errorWhenValueNotFound:  Error If Value Not Found. This value depends on the value of \"source\". This parameter is only valid when the value of \"source\" is \"dictionary\".\nReturn Value:\n    Error Message: Error Message.\nDescription:\n    Get Keys: Gets keys in the dictionary at the specified key path or get all keys at the top level of the store.\nParameterSummary: (Get keys in ${source} at ${keyPath}) Get keys in ${source} at ${keyPath}; (Get keys in ${source}) Get keys in ${source}\n",
    "dk.simonbs.DataJar.GetChildCountIntent": "dk.simonbs.DataJar.GetChildCountIntent(keyPath: String, errorWhenValueNotFound: Bool = True) -> Error Message\n                            : String\nParameters:\n    keyPath:  Key Path.\n    errorWhenValueNotFound:  Error If Value Not Found.\nReturn Value:\n    Error Message: Error Message.\nDescription:\n    Count Values: Outputs the number of values in a list or dictionary.\nParameterSummary: (Count children at ${keyPath}) Count children at ${keyPath}\n",
    "dk.simonbs.DataJar.ViewValueIntent": "dk.simonbs.DataJar.ViewValueIntent(keyPath: String)\nParameters:\n    keyPath:  Key Path.\nDescription:\n    View Value: Opens Data Jar at the specified key path. When passing the key path of a text, number or boolean, the containing value will be opened.\nParameterSummary: (View value at ${keyPath}) View value at ${keyPath}\n",
    "dk.simonbs.Jayson.ViewJSONIntent": "dk.simonbs.Jayson.ViewJSONIntent(files: String, viewDestination: ViewDestination(Enum) = \"app\", closeTabs: Bool, showText: Bool, filename: String, saveDestination: SaveDestination(Enum) = \"none\") -> Error Message\n                            : String\nParameters:\n    files:  Text.\n    viewDestination:  Destination. View Destination. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"app\"(app), \"notification\"(notification).\n    closeTabs:  Close Tabs. This value depends on the value of \"viewDestination\". This parameter is only valid when the value of \"viewDestination\" is \"app\".\n    showText:  Show Text. This value depends on the value of \"viewDestination\". This parameter is only valid when the value of \"viewDestination\" is \"app\".\n    filename:  Filename.\n    saveDestination:  Save. Save Destination. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"none\"(Don't Save), \"local\"(Local), \"iCloud\"(iCloud).\nReturn Value:\n    Error Message: Error Message.\nDescription:\n    View JSON: Parse the input as JSON and view the result.\nParameterSummary: (View ${files} in ${viewDestination}) View ${files} in ${viewDestination}; (View ${files} in ${viewDestination}) View ${files} in ${viewDestination}\n",
    "dk.simonbs.Jayson.GetFileIntent": "dk.simonbs.Jayson.GetFileIntent(folder: Folder(Enum) = \"iCloud\", filename: String) -> File\n                            : File(Object)\nParameters:\n    folder:  Folder. Folder. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"iCloud\"(iCloud), \"local\"(local documents).\n    filename:  Filename.\nReturn Value:\n    File: File.\nDescription:\n    Get File: Get file from Jaysons documents folder.\nParameterSummary: (Get ${filename} from ${folder}) Get ${filename} from ${folder}\n",
    "dk.simonbs.Jayson.PrettifyJSONIntent": "dk.simonbs.Jayson.PrettifyJSONIntent(json: String, compact: Bool, indentMode: IndentMode(Enum) = \"spaces\", indentSpaceCount: Integer = 2) -> Prettified JSON\n                            : String\nParameters:\n    json:  JSON.\n    compact:  Compact.\n    indentMode:  Indent With. Indent Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"spaces\"(spaces), \"tabs\"(tabs).\n    indentSpaceCount:  Number of Spaces. This value depends on the value of \"indentMode\". This parameter is only valid when the value of \"indentMode\" is \"spaces\".\nReturn Value:\n    Prettified JSON: Prettified JSON.\nDescription:\n    Prettify JSON: Formats the input JSON to make it readable. Enabling the \"Compact\" parameter will make dictionaries start on the same line as the previous dictionary ended.\nParameterSummary: (Prettify ${json}) Prettify ${json}; (Prettify ${json}) Prettify ${json}\n",
    "dk.simonbs.Scriptable.RunScriptIntent": "dk.simonbs.Scriptable.RunScriptIntent(fileName: String)\nParameters:\n    fileName: \nDescription:\n    Run Script: Run a script\nParameterSummary: (fileName) Run \"${fileName}\"\n",
    "dk.simonbs.Scriptable.RunScriptWithArgumentsIntent": "dk.simonbs.Scriptable.RunScriptWithArgumentsIntent(fileName: String, encodedArguments: String)\nParameters:\n    fileName: \n    encodedArguments: \nDescription:\n    Run Script: Run a script\nParameterSummary: (encodedArguments,fileName) Run \"${fileName}\" with Arguments; (fileName) Run \"${fileName}\"\n",
    "dk.simonbs.Scriptable.ParameterizedRunScriptIntent": "dk.simonbs.Scriptable.ParameterizedRunScriptIntent(fileName: String, parameter: File(Object), texts: String, urls: String, images: File(Object), files: File(Object), runInApp: Bool) -> Prettified JSON\n                            : String\nParameters:\n    fileName:  Script.\n    parameter:  Parameter.\n    texts:  Texts.\n    urls:  URLs.\n    images:  Images.\n    files:  Files.\n    runInApp:  Run In App.\nReturn Value:\n    Prettified JSON: Prettified JSON.\nDescription:\n    Run Script: Runs a script in Scriptable. The parameter can be accessed using args.shortcutParameter. This parameter can be a text, list, dictionary or a file. When passing a file to the action it will attempt to convert the content to JSON or plain text. If the content is not JSON or plain text, the file path will be passed instead. Use args.plainTexts, args.images, args.urls and args.fileURLs to read the other input parameters. When passing large images and to the action, the script may fail due to memory constraints. In that case you should enable \"Run In App\". Use JavaScript's \"return\" keyword or Script.setShortcutOutput() to output a value. In case you don't output a value, add Script.complete() to indicate that your script have finished running.\nParameterSummary: (Run ${fileName} with ${parameter}) Run ${fileName} with ${parameter}\n",
    "dk.simonbs.Scriptable.CreateFileBookmarkIntent": "dk.simonbs.Scriptable.CreateFileBookmarkIntent(name: String, location: File(Object))\nParameters:\n    name:  Name.\n    location:  File.\nDescription:\n    Create File Bookmark: Creates a new file bookmark. The bookmark can be used to access files in your scripts using FileManagers bookmarkedPath(name) function. Please beware that bookmarks must be created using this action in order to be used in scripts running in the Shortcuts app.\nParameterSummary: (Create bookmark named ${name} for ${location}) Create bookmark named ${name} for ${location}\n",
    "dk.simonbs.Scriptable.RunScriptInlineIntent": "dk.simonbs.Scriptable.RunScriptInlineIntent(script: String, parameter: File(Object), texts: String, urls: String, images: File(Object), files: File(Object), runInApp: Bool) -> Answer\n                            : String\nParameters:\n    script:  Script.\n    parameter:  Parameter.\n    texts:  Texts.\n    urls:  URLs.\n    images:  Images.\n    files:  Files.\n    runInApp:  Run In App.\nReturn Value:\n    Answer: Answer.\nDescription:\n    Run Inline Script: Runs a script in Scriptable. The parameter can be accessed using args.shortcutParameter. This parameter can be a text, list, dictionary or a file. When passing a file to the action it will attempt to convert the content to JSON or plain text. If the content is not JSON or plain text, the file path will be passed instead. Use args.plainTexts, args.images, args.urls and args.fileURLs to read the other input parameters. When passing large images and to the action, the script may fail due to memory constraints. In that case you should enable \"Run In App\". Use JavaScript's \"return\" keyword or Script.setShortcutOutput() to output a value. In case you don't output a value, add Script.complete() to indicate that your script have finished running.\nParameterSummary: (Run with ${parameter}) Run with ${parameter}\n",
    "dk.simonbs.Scriptable.RunScriptWidgetConfigurationIntent": "dk.simonbs.Scriptable.RunScriptWidgetConfigurationIntent(scriptFile: ScriptFile(Object), interactAction: WidgetInteractAction(Enum) = \"openApp\", url: String, parameter: String)\nParameters:\n    scriptFile:  Script. Script.\n    interactAction:  When Interacting. Action. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"openApp\"(Open App), \"runScript\"(Run Script), \"openScript\"(Open Script), \"openURL\"(Open URL).\n    url:  URL. This value depends on the value of \"interactAction\". This parameter is only valid when the value of \"interactAction\" is \"openURL\".\n    parameter:  Parameter.\nDescription:\n    Run Script: Run a script\nParameterSummary: () Run Script\n",
    "dk.simonbs.Scriptable.RefreshAllWidgetsIntent": "dk.simonbs.Scriptable.RefreshAllWidgetsIntent()\nDescription:\n    Refresh All Widgets: Refreshes all widgets, causing the scripts to run again and provide an updated widget.\nParameterSummary: (Refresh all widgets) Refresh all widgets\n",
    "fm.overcast.overcast.OCChapterNextIntent": "fm.overcast.overcast.OCChapterNextIntent()\nDescription:\n    Next Chapter: Seek to the next chapter.\nParameterSummary: () Next Chapter\n",
    "fm.overcast.overcast.OCChapterPreviousIntent": "fm.overcast.overcast.OCChapterPreviousIntent()\nDescription:\n    Previous Chapter: Seek to the previous chapter.\nParameterSummary: () Previous Chapter\n",
    "fm.overcast.overcast.OCCurrentEpisodeInfoIntent": "fm.overcast.overcast.OCCurrentEpisodeInfoIntent() -> Current Episode Info\n                            : OCIntentEpisode(Object)\nReturn Value:\n    Current Episode Info: Episode.\nDescription:\n    Current Episode Info: Get the current episode's title, info, and sharing URL.\nParameterSummary: () Current Episode Info\n",
    "fm.overcast.overcast.OCPauseIntent": "fm.overcast.overcast.OCPauseIntent()\nDescription:\n    Pause: Pause playback.\nParameterSummary: () Pause\n",
    "fm.overcast.overcast.OCPlayIntent": "fm.overcast.overcast.OCPlayIntent()\nDescription:\n    Play: Begin playback.\nParameterSummary: () Play\n",
    "fm.overcast.overcast.OCPlaybackSpeedIntent": "fm.overcast.overcast.OCPlaybackSpeedIntent(speed: Float = \"1\")\nParameters:\n    speed: Speed.\nDescription:\n    Set Playback Speed: Set the playback speed.\nParameterSummary: (speed) Set Playback Speed\n",
    "fm.overcast.overcast.OCPodcastNextIntent": "fm.overcast.overcast.OCPodcastNextIntent()\nDescription:\n    Next Podcast: Play the next episode.\nParameterSummary: () Next Podcast\n",
    "fm.overcast.overcast.OCPodcastPreviousIntent": "fm.overcast.overcast.OCPodcastPreviousIntent()\nDescription:\n    Previous Podcast: Play the previous episode.\nParameterSummary: () Previous Podcast\n",
    "fm.overcast.overcast.OCSeekBackIntent": "fm.overcast.overcast.OCSeekBackIntent(seconds: Float)\nParameters:\n    seconds: Seconds.\nDescription:\n    Seek Back: Jump back within the current podcast.\nParameterSummary: (seconds) Seek Back\n",
    "fm.overcast.overcast.OCSeekForwardIntent": "fm.overcast.overcast.OCSeekForwardIntent(seconds: Float)\nParameters:\n    seconds: Seconds.\nDescription:\n    Seek Forward: Jump forward within the current podcast.\nParameterSummary: (seconds) Seek Forward\n",
    "fm.overcast.overcast.OCSleepTimerCancelIntent": "fm.overcast.overcast.OCSleepTimerCancelIntent()\nDescription:\n    Cancel Sleep Timer: Cancel the current sleep timer if set.\nParameterSummary: () Cancel Sleep Timer\n",
    "fm.overcast.overcast.OCSleepTimerEOFIntent": "fm.overcast.overcast.OCSleepTimerEOFIntent()\nDescription:\n    Sleep After Current Episode: Set the sleep timer to stop at the end of the current episode.\nParameterSummary: () Sleep After Current Episode\n",
    "fm.overcast.overcast.OCSleepTimerIntervalIntent": "fm.overcast.overcast.OCSleepTimerIntervalIntent(interval: Float)\nParameters:\n    interval: Interval.\nDescription:\n    Sleep After Time Interval: Set the sleep timer for a certain duration.\nParameterSummary: (interval) Sleep After Time Interval\n",
    "fm.overcast.overcast.OCSmartSpeedIntent": "fm.overcast.overcast.OCSmartSpeedIntent(state: OCIntentParamState(Enum) = \"on\")\nParameters:\n    state: On. State. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"on\"(on), \"off\"(off).\nDescription:\n    Set Smart Speed: Turn Smart Speed on or off.\nParameterSummary: (state) Set Smart Speed\n",
    "fm.overcast.overcast.OCStarIntent": "fm.overcast.overcast.OCStarIntent(state: OCIntentParamState(Enum) = \"on\")\nParameters:\n    state: Starred. State. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"on\"(on), \"off\"(off).\nDescription:\n    Star Current Episode: Star (recommend) the current episode.\nParameterSummary: (state) Star Current Episode\n",
    "fm.overcast.overcast.OCVoiceBoostIntent": "fm.overcast.overcast.OCVoiceBoostIntent(state: OCIntentParamState(Enum) = \"on\")\nParameters:\n    state: On. State. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"on\"(on), \"off\"(off).\nDescription:\n    Set Voice Boost: Turn Voice Boost on or off.\nParameterSummary: (state) Set Voice Boost\n",
    "fm.overcast.overcast.PlayFeed": "fm.overcast.overcast.PlayFeed(feed: FeedEntity(Object))\nParameters:\n    feed: Podcast. Podcast.\nDescription:\n    Play Podcast\nParameterSummary: (feed) Play ${feed}\n",
    "fm.overcast.overcast.PlayPlaylist": "fm.overcast.overcast.PlayPlaylist(playlist: PlaylistEntity(Object))\nParameters:\n    playlist: Playlist. Playlist.\nDescription:\n    Play Playlist\nParameterSummary: (playlist) Play ${playlist}\n",
    "in.muditbhargava.LookUp.AddToCollectionIntent": "in.muditbhargava.LookUp.AddToCollectionIntent(collectionsNamed: CollectionEntity(Object), word: String) -> Add Word to Collection\n                            : AddToCollectionResultEntity(Object)\nParameters:\n    collectionsNamed: Collection. Collections.\n    word: Word.\nReturn Value:\n    Add Word to Collection: Add to Collection Result.\nDescription:\n    Add Word to Collection: Adds a word to the collection specified as input\nParameterSummary: (word,collectionsNamed) Add ${word} to ${collectionsNamed}\n",
    "in.muditbhargava.LookUp.ClipboardSearchIntent": "in.muditbhargava.LookUp.ClipboardSearchIntent(intentWord: String, lookupType: LookUpTypeAppEnum(Enum) = \"meaning\") -> Search for a Word\n                            : MeaningResultAppEntity(Object)\nParameters:\n    intentWord: word.\n    lookupType: LookUp Type. LookUp Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"meaning\"(Meaning), \"origin\"(Origin), \"exampleSentences\"(Example Sentences), \"opposites\"(Opposites), \"similarWords\"(Similar Words), \"wikipedia\"(Wikipedia), \"phrases\"(Phrases).\nReturn Value:\n    Search for a Word: Meaning Result.\nDescription:\n    Search for a Word: Searches specific definition parts for a specified word\nParameterSummary: (lookupType,intentWord) Search for ${lookupType} of ${intentWord}\n",
    "in.muditbhargava.LookUp.ExportCollectionIntent": "in.muditbhargava.LookUp.ExportCollectionIntent(collection: CollectionEntity(Object)) -> Export Collection as PDF\n                            : 12(Object)\nParameters:\n    collection: Collection. Collections.\nReturn Value:\n    Export Collection as PDF: \nDescription:\n    Export Collection as PDF: Generates a PDF for a collection to share with others\nParameterSummary: (collection) Export ${collection} as PDF\n",
    "in.muditbhargava.LookUp.FindCollectedWordsIntent": "in.muditbhargava.LookUp.FindCollectedWordsIntent(collection: CollectionEntity(Object), shouldFilterByDate: Bool, addedBefore: String, addedAfter: String, sortOptions: SortOptionsAppEnum(Enum) = \"listOrder\", sortOrderAlphabetically: SortOrderAlphabeticallyAppEnum(Enum) = \"AtoZ\", sortOrderDateCreated: SortOrderDateCreatedAppEnum(Enum) = \"mostRecentFirst\", shouldLimit: Bool, fetchLimit: Integer = \"5\") -> Find Words in Collection\n                            : array(CollectionEntryAppEntity(Object))\nParameters:\n    collection: Collection. Collections.\n    shouldFilterByDate: Filter By Date.\n    addedBefore: Added before.\n    addedAfter: Added After.\n    sortOptions: Sort Options. Sort Options. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"listOrder\"(List Order), \"alphabetically\"(Alphabetically), \"dateCreated\"(Date Created).\n    sortOrderAlphabetically: Sort Order. Sort Order Alphabetically. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"AtoZ\"(A to Z), \"ZtoA\"(Z to A).\n    sortOrderDateCreated: Sort Order. Sort Order Date Created. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"mostRecentFirst\"(Most Recent First), \"oldestFirst\"(Oldest First).\n    shouldLimit: Limit.\n    fetchLimit: Number of Words.\nReturn Value:\n    Find Words in Collection: \nDescription:\n    Find Words in Collection: Finds words in a collection that match a particular criteria\nParameterSummary: (collection,sortOptions,sortOrderAlphabetically,shouldLimit,shouldFilterByDate) Find words in ${collection}; (collection,sortOptions,sortOrderAlphabetically,shouldLimit,fetchLimit,shouldFilterByDate) Find words in ${collection}; (collection,sortOptions,sortOrderDateCreated,shouldLimit,shouldFilterByDate) Find words in ${collection}; (collection,sortOptions,sortOrderDateCreated,shouldLimit,fetchLimit,shouldFilterByDate) Find words in ${collection}; (collection,sortOptions,shouldLimit,shouldFilterByDate) Find words in ${collection}; (collection,sortOptions,shouldLimit,fetchLimit,shouldFilterByDate) Find words in ${collection}\n",
    "in.muditbhargava.LookUp.PronunciationIntent": "in.muditbhargava.LookUp.PronunciationIntent(word: String)\nParameters:\n    word: Word.\nDescription:\n    Get Pronunciation: Get the pronunciation of any word\nParameterSummary: (word) Pronounce ${word}\n",
    "in.muditbhargava.LookUp.WoDIntent": "in.muditbhargava.LookUp.WoDIntent() -> Get Word of the Day\n                            : WordOfTheDayResultAppEntity(Object)\nReturn Value:\n    Get Word of the Day: Word Of The Day Result.\nDescription:\n    Get Word of the Day: Gets the meaning and definition of the Word of the Day\nParameterSummary: () Get Word of the Day\n",
    "io.pushcut.Pushcut.RunShortcutIntent": "io.pushcut.Pushcut.RunShortcutIntent(shortcut: String, eventType: EventType(Enum) = \"atTime\", time: String, arrivingLocation: Placemark(Object), leavingLocation: Placemark(Object), input: String, reminderIdentifier: String)\nParameters:\n    shortcut:  Shortcut.\n    eventType:  Event Type. Event Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"now\"(Now), \"atTime\"(At Time), \"whenArriving\"(When I Arrive), \"whenLeaving\"(When I Leave).\n    time:  Time. This value depends on the value of \"eventType\". This parameter is only valid when the value of \"eventType\" is \"atTime\".\n    arrivingLocation:  Location. This value depends on the value of \"eventType\". This parameter is only valid when the value of \"eventType\" is \"whenArriving\".\n    leavingLocation:  Location. This value depends on the value of \"eventType\". This parameter is only valid when the value of \"eventType\" is \"whenLeaving\".\n    input:  Input.\n    reminderIdentifier:  Reminder Identifier.\nDescription:\n    Schedule Shortcut: Schedules a shortcut to run on this device when a specified event occurs.\nParameterSummary: (Schedule ${shortcut} ${eventType} at ${arrivingLocation}) Schedule ${shortcut} ${eventType} at ${arrivingLocation}; (Schedule ${shortcut}${eventType}) Schedule ${shortcut}${eventType}; (Schedule ${shortcut} ${eventType} from ${leavingLocation}) Schedule ${shortcut} ${eventType} from ${leavingLocation}; (Schedule ${shortcut} ${eventType} ${time}) Schedule ${shortcut} ${eventType} ${time}\n",
    "io.pushcut.Pushcut.ShowNotificationIntent": "io.pushcut.Pushcut.ShowNotificationIntent(notification: String, eventType: EventType(Enum) = \"now\", time: String, arrivingLocation: Placemark(Object), leavingLocation: Placemark(Object), title: String, text: String, input: String, reminderIdentifier: String, image: File(Object), timeSensitive: TimeSensitiveType(Enum), threadId: String) -> Notification\n                            : Notification(Object)\nParameters:\n    notification:  Notification.\n    eventType:  Event Type. Event Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"now\"(Now), \"atTime\"(At Time), \"whenArriving\"(When I Arrive), \"whenLeaving\"(When I Leave).\n    time:  Time. This value depends on the value of \"eventType\". This parameter is only valid when the value of \"eventType\" is \"atTime\".\n    arrivingLocation:  Arriving Location. This value depends on the value of \"eventType\". This parameter is only valid when the value of \"eventType\" is \"whenArriving\".\n    leavingLocation:  Leaving Location. This value depends on the value of \"eventType\". This parameter is only valid when the value of \"eventType\" is \"whenLeaving\".\n    title:  Title.\n    text:  Text.\n    input:  Input.\n    reminderIdentifier:  Reminder Identifier.\n    image:  Image.\n    timeSensitive:  Time Sensitive. Time Sensitive Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"yes\"(yes), \"no\"(no).\n    threadId:  Thread ID.\nReturn Value:\n    Notification: Notification. Notification.\nDescription:\n    Show Notification: Shows a notification on this device when a specified event occurs.\nParameterSummary: (Show ${notification} ${eventType} at ${arrivingLocation}) Show ${notification} ${eventType} at ${arrivingLocation}; (Show ${notification} ${eventType} from ${leavingLocation}) Show ${notification} ${eventType} from ${leavingLocation}; (Show ${notification} ${eventType} ${time}) Show ${notification} ${eventType} ${time}; (Show ${notification} ${eventType}) Show ${notification} ${eventType}\n",
    "io.pushcut.Pushcut.CancelNotificationIntent": "io.pushcut.Pushcut.CancelNotificationIntent(reminderIdentifier: String, shouldCancelRemote: Bool)\nParameters:\n    reminderIdentifier:  Identifier.\n    shouldCancelRemote:  Cancel Notifications on Other Devices?.\nDescription:\n    Cancel Notification: Cancels a scheduled notification on this (or other) device(s). Removes a notification that was already delivered.\nParameterSummary: (Cancel notification ${reminderIdentifier}) Cancel notification ${reminderIdentifier}\n",
    "io.pushcut.Pushcut.SendNotificationIntent": "io.pushcut.Pushcut.SendNotificationIntent(notification: String, asJson: ConfigurationType(Enum) = \"simple\", devices: String, title: String, text: String, input: String, json: String, timeSensitive: TimeSensitiveType(Enum), reminderIdentifier: String, image: File(Object), delay: String, threadId: String) -> Error Message\n                            : String\nParameters:\n    notification:  Notification.\n    asJson:  Configuration Type. Configuration Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"simple\"(Simple), \"json\"(JSON).\n    devices:  all devices. This value depends on the value of \"asJson\". This parameter is only valid when the value of \"asJson\" is \"simple\".\n    title:  Title. This value depends on the value of \"asJson\". This parameter is only valid when the value of \"asJson\" is \"simple\".\n    text:  Text. This value depends on the value of \"asJson\". This parameter is only valid when the value of \"asJson\" is \"simple\".\n    input:  Input. This value depends on the value of \"asJson\". This parameter is only valid when the value of \"asJson\" is \"simple\".\n    json:  JSON Configuration. This value depends on the value of \"asJson\". This parameter is only valid when the value of \"asJson\" is \"json\".\n    timeSensitive:  Time Sensitive. Time Sensitive Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"yes\"(yes), \"no\"(no). This value depends on the value of \"asJson\". This parameter is only valid when the value of \"asJson\" is \"simple\".\n    reminderIdentifier:  Reminder Identifier. This value depends on the value of \"asJson\". This parameter is only valid when the value of \"asJson\" is \"simple\".\n    image:  Image. This value depends on the value of \"asJson\". This parameter is only valid when the value of \"asJson\" is \"simple\".\n    delay:  Delay. This value depends on the value of \"asJson\". This parameter is only valid when \"asJson has any value.\n    threadId:  Thread ID. This value depends on the value of \"asJson\". This parameter is only valid when the value of \"asJson\" is \"simple\".\nReturn Value:\n    Error Message: Error Message.\nDescription:\n    Send Notification: Sends a customizable Pushcut notification to your devices.\\nUse this action with the Reminder Identifier to update a notification.\\n\\nDelay your notification by setting 'delay' to the length of time before the notification should be delivered e.g. 10s, 15m, 6h\nParameterSummary: (Send notification ${notification}) Send notification ${notification}; (Send notification ${notification} with JSON) Send notification ${notification} with JSON; (Send notification ${notification} to ${devices}) Send notification ${notification} to ${devices}; (Send notification ${notification} with JSON) Send notification ${notification} with JSON\n",
    "io.pushcut.Pushcut.ExecuteServerActionIntent": "io.pushcut.Pushcut.ExecuteServerActionIntent(actionType: ServerActionType(Enum) = \"shortcut\", shortcut: String, homekit: String, input: String, isDelayed: Bool, delay: TimeInterval(Object) = 5.0, waitForResult: ServerActionTimeout(Enum) = \"nowait\", actionIdentifier: String) -> Error Message\n                            : String\nParameters:\n    actionType:  Action Type. Server Action Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"shortcut\"(Shortcut), \"homekit\"(HomeKit).\n    shortcut:  Shortcut. This value depends on the value of \"actionType\". This parameter is only valid when the value of \"actionType\" is \"shortcut\".\n    homekit:  Scene. This value depends on the value of \"actionType\". This parameter is only valid when the value of \"actionType\" is \"homekit\".\n    input:  Input. This value depends on the value of \"actionType\". This parameter is only valid when the value of \"actionType\" is \"shortcut\".\n    isDelayed:  Is Delayed.\n    delay:  Delay. This value depends on the value of \"isDelayed\". This parameter is only valid when the value of \"isDelayed\" is True.\n    waitForResult:  Wait For Result. Server Action Timeout. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"nowait\"(No), \"tenSeconds\"(10 seconds), \"thirtySeconds\"(30 seconds), \"fortyfiveSeconds\"(45 seconds). This value depends on the value of \"isDelayed\". This parameter is only valid when the value of \"isDelayed\" is False.\n    actionIdentifier:  Identifier. This value depends on the value of \"isDelayed\". This parameter is only valid when the value of \"isDelayed\" is True.\nReturn Value:\n    Error Message: Error Message.\nDescription:\n    Execute Server Action: Executes a server action on your Automation Server device.\nParameterSummary: (Execute ${homekit} on server ${isDelayed}) Execute ${homekit} on server ${isDelayed}; (Execute ${homekit} on server ${isDelayed} ${delay}) Execute ${homekit} on server ${isDelayed} ${delay}; (Execute ${homekit} on server ${isDelayed}) Execute ${homekit} on server ${isDelayed}; (Execute Server Action) Execute Server Action; (Execute Server Action) Execute Server Action; (Execute Server Action) Execute Server Action; (Execute ${shortcut} on server ${isDelayed}) Execute ${shortcut} on server ${isDelayed}; (Execute ${shortcut} on server ${isDelayed} ${delay}) Execute ${shortcut} on server ${isDelayed} ${delay}; (Execute ${shortcut} on server ${isDelayed} ) Execute ${shortcut} on server ${isDelayed} \n",
    "io.pushcut.Pushcut.CancelServerActionIntent": "io.pushcut.Pushcut.CancelServerActionIntent(actionIdentifier: String)\nParameters:\n    actionIdentifier:  Identifier.\nDescription:\n    Cancel Server Action: Cancels a scheduled server action.\nParameterSummary: (Cancel Server Action ${actionIdentifier}) Cancel Server Action ${actionIdentifier}\n",
    "io.pushcut.Pushcut.SendNotificationFocusFilter": "io.pushcut.Pushcut.SendNotificationFocusFilter(notifications: array(NotificationEntity(Object)), devices: array(AppDevice(Object)), homekitTasks: array(String), shortcutTasks: array(String))\nParameters:\n    notifications: General.Notifications.\n    devices: SendNotificationFocusFilter.DevicesToNotify.\n    homekitTasks: SendNotificationFocusFilter.HomekitScenes.\n    shortcutTasks: SendNotificationFocusFilter.Shortcut.\nDescription:\n    SendNotificationFocusFilter.Title: SendNotificationFocusFilter.Description\nParameterSummary: () SendNotificationFocusFilter.Title\n",
    "io.pushcut.Pushcut.CreateServerSchedule": "io.pushcut.Pushcut.CreateServerSchedule(homekitTask: String, shortcutTask: String, taskType: ServerScheduleTaskType(Enum), jobType: ServerScheduleJobType(Enum), interval: Integer = \"15\", intervalUnit: CronJobIntervalUnit(Enum) = \"minutes\", weekdays: array(CronJobWeekDay(Enum)), time: String, shouldExecuteOnServerStart: Bool, note: String) -> CreateServerSchedule.Title\n                            : ServerSchedule(Object)\nParameters:\n    homekitTask: CreateServerSchedule.homekitScene.\n    shortcutTask: CreateServerSchedule.shortcut.\n    taskType: ServerSchedule.taskType. ServerScheduleTaskType.typeDisplayRepresentation. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"shortcut\"(ServerScheduleTaskType.Shortcut), \"homekit\"(ServerScheduleTaskType.Homekit).\n    jobType: ServerSchedule.jobType. ServerScheduleJobType.typeDisplayRepresentation. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"interval\"(ServerScheduleJobType.Every), \"atTime\"(ServerScheduleJobType.AtTime).\n    interval: ServerScheduleJobType.Interval.\n    intervalUnit: CronJobIntervalUnit.typeDisplayRepresentation. CronJobIntervalUnit.typeDisplayRepresentation. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"minutes\"(CronJobIntervalUnit.minutes), \"hours\"(CronJobIntervalUnit.hours), \"days\"(CronJobIntervalUnit.days).\n    weekdays: CreateServerSchedule.weekdays.\n    time: CreateServerSchedule.time.\n    shouldExecuteOnServerStart: CronJobVC.ExecuteOnServerStart. CronJobVC.ExecuteOnServerStart.Description.\n    note: CreateServerSchedule.note.\nReturn Value:\n    CreateServerSchedule.Title: ServerSchedule.typeDisplayRepresentation.\nDescription:\n    CreateServerSchedule.Title: CreateServerSchedule.Description\nParameterSummary: (taskType,shortcutTask,jobType,weekdays,time,shouldExecuteOnServerStart,note) CreateServerSchedule.CreateScheduleAtTimeShortcut${taskType}${shortcutTask}${jobType}${weekdays}${time}; (taskType,shortcutTask,jobType,interval,intervalUnit,shouldExecuteOnServerStart,note) CreateServerSchedule.CreateScheduleShortcutInterval${taskType}${shortcutTask}${jobType}${interval}${intervalUnit}; (taskType,jobType,shouldExecuteOnServerStart,note) CreateServerSchedule.CreateScheduleDefault${taskType}${jobType}; (taskType,homekitTask,jobType,weekdays,time,shouldExecuteOnServerStart,note) CreateServerSchedule.CreateScheduleHomekitAtTime${taskType}${homekitTask}${jobType}${weekdays}${time}; (taskType,homekitTask,jobType,interval,intervalUnit,shouldExecuteOnServerStart,note) CreateServerSchedule.CreateScheduleHomekitInterval${taskType}${homekitTask}${jobType}${interval}${intervalUnit}\n",
    "io.pushcut.Pushcut.EnableDisableServerSchedule": "io.pushcut.Pushcut.EnableDisableServerSchedule(schedule: ServerSchedule(Object), shouldEnable: Bool = \"1\") -> EnableDisableServerSchedule.Title\n                            : ServerSchedule(Object)\nParameters:\n    schedule: EnableDisableServerSchedule.schedule.Title. ServerSchedule.typeDisplayRepresentation.\n    shouldEnable: EnableDisableServerSchedule.ShouldEnable.Title. EnableDisableServerSchedule.ShouldEnable.Description.\nReturn Value:\n    EnableDisableServerSchedule.Title: ServerSchedule.typeDisplayRepresentation.\nDescription:\n    EnableDisableServerSchedule.Title: EnableDisableServerSchedule.Description\nParameterSummary: (shouldEnable,schedule) EnableDisableServerSchedule.ParameterSummary${shouldEnable}${schedule}\n",
    "io.pushcut.Pushcut.GetServerStatus": "io.pushcut.Pushcut.GetServerStatus() -> GetServerStatus.Title\n                            : array(ServerStatus(Object))\nReturn Value:\n    GetServerStatus.Title: \nDescription:\n    GetServerStatus.Title: GetServerStatus.Description\nParameterSummary: () GetServerStatus.Title\n",
    "io.pushcut.Pushcut.OpenPushcut": "io.pushcut.Pushcut.OpenPushcut(action: AppOpenAction(Enum))\nParameters:\n    action: Action. OpenAction.typeDisplayRepresentation. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"notifications\"(General.Notifications), \"triggers\"(General.Triggers), \"widgets\"(General.Widgets), \"server\"(General.Server), \"account\"(General.Account), \"runServer\"(General.RunServer), \"monitorServer\"(General.MonitorServer), \"settings\"(SwiftUI.Settings).\nDescription:\n    Open Pushcut: AppIntent.OpenPushcut.Description\nParameterSummary: (action) Open Pushcut and ${action}\n",
    "io.pushcut.Pushcut.RunHomeKitScene": "io.pushcut.Pushcut.RunHomeKitScene(widgetId: String, actionHash: String, scene: String)\nParameters:\n    widgetId: AppIntents.WidgetId.\n    actionHash: AppIntents.ActionHash.\n    scene: RunHomeKitScene.HomeKitScene.\nDescription:\n    RunHomeKitScene.Title: RunHomeKitScene.Description\nParameterSummary: (scene) RunHomeKitScene.ParameterSummary${scene}\n",
    "io.pushcut.Pushcut.RunIntegration": "io.pushcut.Pushcut.RunIntegration(widgetId: String, actionHash: String, action: String, input: String)\nParameters:\n    widgetId: AppIntents.WidgetId.\n    actionHash: AppIntents.ActionHash.\n    action: RunIntegration.IntegrationAction.\n    input: RunIntegration.Input.\nDescription:\n    RunIntegration.Title: RunIntegration.Description\nParameterSummary: (action,input) RunIntegration.ParameterSummary${action}${input}; (action) RunIntegration.ParameterSummary${action}\n",
    "io.pushcut.Pushcut.RunShortcut": "io.pushcut.Pushcut.RunShortcut(shortcutName: String, input: String)\nParameters:\n    shortcutName: General.Shortcut.\n    input: General.Input.\nDescription:\n    RunShortcut.Title: RunShortcut.Description\nParameterSummary: (shortcutName,input) RunShortcut.ParameterSummary${shortcutName}${input}\n",
    "io.pushcut.Pushcut.UploadImageIntent": "io.pushcut.Pushcut.UploadImageIntent(image: 12(Object), imageName: String)\nParameters:\n    image: UploadImage.image.\n    imageName: UploadImage.imageName.\nDescription:\n    UploadImage.Title: UploadImage.Description\nParameterSummary: (image,imageName) UploadImage.ParameterSummary${image}${imageName}\n",
    "io.robbie.HomeAssistant.CallServiceIntent": "io.robbie.HomeAssistant.CallServiceIntent(server: IntentServer(Object), service: String, payload: String)\nParameters:\n    server:  Server. Server.\n    service:  Service.\n    payload:  Service Data.\nDescription:\n    Call Service: Call a service on the Home Assistant instance\nParameterSummary: (Call ${service} with data) Call ${service} with data\n",
    "io.robbie.HomeAssistant.SendLocationIntent": "io.robbie.HomeAssistant.SendLocationIntent(location: Placemark(Object)) -> Location\n                            : Placemark(Object)\nParameters:\n    location:  Location.\nReturn Value:\n    Location: Location.\nDescription:\n    Send Location: Send location to Home Assistant\nParameterSummary: (Send ${location} to Home Assistant) Send ${location} to Home Assistant\n",
    "io.robbie.HomeAssistant.FireEventIntent": "io.robbie.HomeAssistant.FireEventIntent(server: IntentServer(Object), eventName: String = \"shortcut_event\", eventData: String)\nParameters:\n    server:  Server. Server.\n    eventName:  Event Name.\n    eventData:  Event Data.\nDescription:\n    Fire Event: Fire an event to the Home Assistant event bus\nParameterSummary: (Fire ${eventName} with data) Fire ${eventName} with data\n",
    "io.robbie.HomeAssistant.GetCameraImageIntent": "io.robbie.HomeAssistant.GetCameraImageIntent(server: IntentServer(Object), cameraID: String) -> Error\n                            : String\nParameters:\n    server:  Server. Server.\n    cameraID:  Camera Entity.\nReturn Value:\n    Error: Error.\nDescription:\n    Get Camera Image: Get a single still frame from a camera\nParameterSummary: (Get image of ${cameraID}) Get image of ${cameraID}\n",
    "io.robbie.HomeAssistant.RenderTemplateIntent": "io.robbie.HomeAssistant.RenderTemplateIntent(server: IntentServer(Object), template: String = \"{{ now() }}\") -> Error\n                            : String\nParameters:\n    server:  Server. Server.\n    template:  Template.\nReturn Value:\n    Error: Error.\nDescription:\n    Render Template: Renders the Home Assistant template\nParameterSummary: (Render the provided template) Render the provided template\n",
    "io.robbie.HomeAssistant.PerformActionIntent": "io.robbie.HomeAssistant.PerformActionIntent(action: IntentActionAppEntity(Object))\nParameters:\n    action: Action. Action.\nDescription:\n    Perform Action: Performs an action defined in the app\nParameterSummary: (action) Perform ${action}\n",
    "io.robbie.HomeAssistant.WidgetActionsIntent": "io.robbie.HomeAssistant.WidgetActionsIntent(actions: array(IntentActionAppEntity(Object)))\nParameters:\n    actions: Actions.\nDescription:\n    Actions: View and run actions\nParameterSummary: () Actions\n",
    "io.robbie.HomeAssistant.UpdateSensorsIntent": "io.robbie.HomeAssistant.UpdateSensorsIntent()\nDescription:\n    Update Sensors: Send a sensor update to Home Assistant\nParameterSummary: (Update Sensors) Update Sensors\n",
    "io.robbie.HomeAssistant.OpenPageIntent": "io.robbie.HomeAssistant.OpenPageIntent(page: IntentPanel(Object))\nParameters:\n    page:  Page. Page.\nDescription:\n    Open Page: Open a page in the frontend\nParameterSummary: (Open ${page}) Open ${page}\n",
    "io.robbie.HomeAssistant.WidgetOpenPageIntent": "io.robbie.HomeAssistant.WidgetOpenPageIntent(pages: IntentPanel(Object))\nParameters:\n    pages:  Pages. Page.\nDescription:\n    Open Page: Open a page in the frontend\nParameterSummary: () Open Page\n",
    "io.robbie.HomeAssistant.AssistIntent": "io.robbie.HomeAssistant.AssistIntent(server: IntentServer(Object), text: String, language: IntentLanguage(Object)) -> Result\n                            : IntentAssistResult(Object)\nParameters:\n    server:  Server. Server.\n    text:  Text.\n    language:  Language. Intent Language.\nReturn Value:\n    Result: Result. Assist Result.\nDescription:\n    Assist: Ask for Assistance\nParameterSummary: (Assist with \"${text}\") Assist with \"${text}\"\n",
    "ke.bou.GizmoPack.AddWalletPassIntent": "ke.bou.GizmoPack.AddWalletPassIntent(passes: File(Object), preview: Bool)\nParameters:\n    passes:  Pass.\n    preview:  Preview.\nDescription:\n    Add Wallet Pass: Add Pass to Wallet. Add 'Wait to return' after this action to pause execution until done. Pressing 'Preview' does nothing.\nParameterSummary: (Add ${passes} to Wallet) Add ${passes} to Wallet\n",
    "ke.bou.GizmoPack.CreateWalletPassIntent": "ke.bou.GizmoPack.CreateWalletPassIntent(title: String, descript: String, barcode: PassBarcodeFormat(Enum) = \"qr\", barcodeData: String, barcodeLabel: String, type: PassType(Enum) = \"generic\", transitType: PassTransitType(Enum) = \"generic\", from: String, to: String, genericPrimary: String, couponPrimary: String, eventTicketPrimary: String, storeCardPrimary: String, boardingPassFooter: File(Object), couponStrip: File(Object), genericThumbnail: File(Object), storeCardStrip: File(Object), eventTicketStrip: File(Object), eventTicketBackground: File(Object), eventTicketThumbnail: File(Object), header: String, secondary: String, auxiliary: String, back: String, backgroundColor: String, foregroundColor: String, labelColor: String, icon: File(Object), logo: File(Object), location: Placemark(Object), distance: Distance(Object) = 100.0, date: String) -> Pass\n                            : File(Object)\nParameters:\n    title:  Title.\n    descript:  Description.\n    barcode:  Barcode. Pass Barcode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"qr\"(QR), \"pdf417\"(PDF417), \"aztec\"(Aztec), \"code128\"(Code 128).\n    barcodeData:  Barcode Data.\n    barcodeLabel:  Barcode Label.\n    type:  Type. Pass Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"boardingPass\"(Boarding Pass), \"coupon\"(Coupon), \"eventTicket\"(Event Ticket), \"generic\"(Generic Pass), \"storeCard\"(Store Card).\n    transitType:  Transit Type. Pass Transit Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"air\"(Air), \"boat\"(Boat), \"bus\"(Bus), \"generic\"(Generic), \"train\"(Train). This value depends on the value of \"type\". This parameter is only valid when the value of \"type\" is \"boardingPass\".\n    from:  From. This value depends on the value of \"type\". This parameter is only valid when the value of \"type\" is \"boardingPass\".\n    to:  To. This value depends on the value of \"type\". This parameter is only valid when the value of \"type\" is \"boardingPass\".\n    genericPrimary:  Primary. This value depends on the value of \"type\". This parameter is only valid when the value of \"type\" is \"generic\".\n    couponPrimary:  Primary. This value depends on the value of \"type\". This parameter is only valid when the value of \"type\" is \"coupon\".\n    eventTicketPrimary:  Primary. This value depends on the value of \"type\". This parameter is only valid when the value of \"type\" is \"eventTicket\".\n    storeCardPrimary:  Primary. This value depends on the value of \"type\". This parameter is only valid when the value of \"type\" is \"storeCard\".\n    boardingPassFooter:  Footer. This value depends on the value of \"type\". This parameter is only valid when the value of \"type\" is \"boardingPass\".\n    couponStrip:  Strip. This value depends on the value of \"type\". This parameter is only valid when the value of \"type\" is \"coupon\".\n    genericThumbnail:  Thumbnail. This value depends on the value of \"type\". This parameter is only valid when the value of \"type\" is \"generic\".\n    storeCardStrip:  Strip. This value depends on the value of \"type\". This parameter is only valid when the value of \"type\" is \"storeCard\".\n    eventTicketStrip:  Strip. This value depends on the value of \"type\". This parameter is only valid when the value of \"type\" is \"eventTicket\".\n    eventTicketBackground:  Background. This value depends on the value of \"type\". This parameter is only valid when the value of \"type\" is \"eventTicket\".\n    eventTicketThumbnail:  Thumbnail. This value depends on the value of \"type\". This parameter is only valid when the value of \"type\" is \"eventTicket\".\n    header:  Header.\n    secondary:  Secondary.\n    auxiliary:  Auxiliary.\n    back:  Back.\n    backgroundColor:  Background Color.\n    foregroundColor:  Foreground Color.\n    labelColor:  Label Color.\n    icon:  Icon.\n    logo:  Logo.\n    location:  Location.\n    distance:  Distance. This value depends on the value of \"location\". This parameter is only valid when \"location has any value.\n    date:  Date.\nReturn Value:\n    Pass: Pass.\nDescription:\n    Create Wallet Pass: Create a Wallet Pass. Colors should be specified in CSS-style rgb(1, 2, 3) format. Add 'Add Wallet Pass' action after this one to add it to your Wallet.\n\nThis action requires GizmoPack Pro.\nParameterSummary: (Create ${type} with ${title} and ${descript}) Create ${type} with ${title} and ${descript}; (Create ${type} with ${title} and ${descript}) Create ${type} with ${title} and ${descript}; (Create ${type} with ${title} and ${descript}) Create ${type} with ${title} and ${descript}; (Create ${type} with ${title} and ${descript}) Create ${type} with ${title} and ${descript}; (Create ${transitType} ${type} with ${title} and ${descript}) Create ${transitType} ${type} with ${title} and ${descript}\n",
    "ke.bou.GizmoPack.FuzzyFinderIntent": "ke.bou.GizmoPack.FuzzyFinderIntent(items: String)\nParameters:\n    items:  Items.\nDescription:\n    Fuzzy Finder: Interactively select an item from a list using your keyboard. This action opens a search box that allows you to quickly search through a list of items to find the one you're looking for.\n\nAdd a 'Wait to return' and 'Get clipboard' action after this one to get the result.\nParameterSummary: (Fuzzy find in ${items}) Fuzzy find in ${items}\n",
    "ke.bou.GizmoPack.GenerateCSVIntent": "ke.bou.GizmoPack.GenerateCSVIntent(rows: File(Object), allFields: Bool = True, fields: String, delimiter: CSVDelimiter(Enum) = \"comma\", customDelimiter: String = \";\") -> CSV File\n                            : File(Object)\nParameters:\n    rows:  Rows.\n    allFields:  Include all fields.\n    fields:  Fields. This value depends on the value of \"allFields\". This parameter is only valid when the value of \"allFields\" is False.\n    delimiter:  Delimiter. CSV Delimiter. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"comma\"(Comma), \"tab\"(Tab), \"custom\"(Custom).\n    customDelimiter:  Delimiter. This value depends on the value of \"delimiter\". This parameter is only valid when the value of \"delimiter\" is \"custom\".\nReturn Value:\n    CSV File: CSV File.\nDescription:\n    Generate CSV: Generate CSV from list of Dictionaries\n\nThis action requires GizmoPack Pro.\nParameterSummary: (Create CSV from ${rows}) Create CSV from ${rows}; (Create CSV from ${rows} separated by ${customDelimiter}) Create CSV from ${rows} separated by ${customDelimiter}; (Create CSV from ${rows} with ${fields}) Create CSV from ${rows} with ${fields}; (Create CSV from ${rows} with ${fields} separated by ${customDelimiter}) Create CSV from ${rows} with ${fields} separated by ${customDelimiter}\n",
    "ke.bou.GizmoPack.ParseCSVIntent": "ke.bou.GizmoPack.ParseCSVIntent(file: File(Object), hasHeader: Bool = True, fields: String, delimiter: ParseCSVDelimiter(Enum) = \"detect\", customDelimiter: String = \";\") -> Rows\n                            : File(Object)\nParameters:\n    file:  File.\n    hasHeader:  First row is header.\n    fields:  Fields. This value depends on the value of \"hasHeader\". This parameter is only valid when the value of \"hasHeader\" is False.\n    delimiter:  Delimiter. CSV Delimiter. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"detect\"(Detect), \"comma\"(Comma), \"tab\"(Tab), \"custom\"(Custom).\n    customDelimiter:  Delimiter. This value depends on the value of \"delimiter\". This parameter is only valid when the value of \"delimiter\" is \"custom\".\nReturn Value:\n    Rows: Rows.\nDescription:\n    Parse CSV: Parse CSV into list of Dictionaries. Detecting the delimiter only looks at the filename.\n\nThis action requires GizmoPack Pro.\nParameterSummary: (Parse CSV ${file} separated by ${customDelimiter}) Parse CSV ${file} separated by ${customDelimiter}; (Parse CSV ${file} as ${fields} separated by ${customDelimiter}) Parse CSV ${file} as ${fields} separated by ${customDelimiter}; (Parse CSV ${file}) Parse CSV ${file}; (Parse CSV ${file} as ${fields}) Parse CSV ${file} as ${fields}\n",
    "ke.bou.GizmoPack.QueryDocumentIntent": "ke.bou.GizmoPack.QueryDocumentIntent(file: File(Object), queryType: DocumentQueryType(Enum) = \"css\", cssQuery: String = \"head > title\", xpathQuery: String = \"//head/title\", outputType: QueryDocumentOutput(Enum) = \"text\", oneResult: Bool) -> Output\n                            : File(Object)\nParameters:\n    file:  File.\n    queryType:  Query Type. Document Query Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"css\"(CSS), \"xpath\"(XPath).\n    cssQuery:  CSS Query. This value depends on the value of \"queryType\". This parameter is only valid when the value of \"queryType\" is \"css\".\n    xpathQuery:  XPath Query. This value depends on the value of \"queryType\". This parameter is only valid when the value of \"queryType\" is \"xpath\".\n    outputType:  Output Type. Query Document Output. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"text\"(Text), \"html_xml\"(HTML/XML).\n    oneResult:  Limit to one result.\nReturn Value:\n    Output: Output.\nDescription:\n    Scrape HTML/XML with CSS/XPath: Query HTML or XML document using CSS or XPath queries.\n\nCSS 3.0 selectors, and XPath 1.0 is supported.\n\nThis action requires GizmoPack Pro.\nParameterSummary: (Query ${file} for ${cssQuery}) Query ${file} for ${cssQuery}; (Choose a ${queryType}) Choose a ${queryType}; (Query ${file} for ${xpathQuery}) Query ${file} for ${xpathQuery}\n",
    "ke.bou.GizmoPack.SnapshotMapIntent": "ke.bou.GizmoPack.SnapshotMapIntent(location: Placemark(Object), mapType: MapType(Enum) = \"standard\", style: UserInterfaceStyle(Enum) = \"unknown\", pointsOfInterest: MapPointsOfInterest(Enum) = \"includeAll\", latitude: Distance(Object) = 25.0, width: Float = 256.0, height: Float = 256.0) -> Image\n                            : File(Object)\nParameters:\n    location:  Location.\n    mapType:  Type. Map Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"standard\"(Standard), \"satellite\"(Satellite), \"hybrid\"(Hybrid), \"mutedStandard\"(Muted Standard).\n    style:  Style. Style. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"light\"(Light), \"dark\"(Dark).\n    pointsOfInterest:  Points of Interest. Map Points of Interest. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"includeAll\"(Include), \"excludeAll\"(Exclude).\n    latitude:  Latitude.\n    width:  Width.\n    height:  Height.\nReturn Value:\n    Image: Image.\nDescription:\n    Snapshot Map: Take a snapshot of a map location.\n\nLatitude is the distance from top to bottom in the picture. Increase it to zoom out further.\nWidth and Height are multiplied by the pixel density of your device.\nParameterSummary: (Take snapshot of ${location}) Take snapshot of ${location}\n",
    "ke.bou.GizmoPack.UniversalVariablesIntent": "ke.bou.GizmoPack.UniversalVariablesIntent(operation: UniversalVariableOperation(Enum) = \"unknown\", setValue: File(Object), setName: String, setReturnPrevious: Bool, getName: String, addValue: File(Object), addName: String, addPosition: UniversalVariablesListPosition(Enum) = \"end\", deleteName: String, addIndex: Integer, removePosition: UniversalVariablesListPosition(Enum) = \"start\", removeIndex: Integer, removeName: String, database: UniversalVariablesDatabase(Enum)) -> Values\n                            : File(Object)\nParameters:\n    operation:  Operation. Universal Variable Operation. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"set\"(Set), \"get\"(Get), \"add\"(Add), \"delete\"(Delete), \"remove\"(Remove), \"getAll\"(Get all).\n    setValue:  Value. This value depends on the value of \"operation\". This parameter is only valid when the value of \"operation\" is \"set\".\n    setName:  Name. This value depends on the value of \"operation\". This parameter is only valid when the value of \"operation\" is \"set\".\n    setReturnPrevious:  Output Previous Value. This value depends on the value of \"operation\". This parameter is only valid when the value of \"operation\" is \"set\".\n    getName:  Name. This value depends on the value of \"operation\". This parameter is only valid when the value of \"operation\" is \"get\".\n    addValue:  Value. This value depends on the value of \"operation\". This parameter is only valid when the value of \"operation\" is \"add\".\n    addName:  Name. This value depends on the value of \"operation\". This parameter is only valid when the value of \"operation\" is \"add\".\n    addPosition:  Position. Universal Variables List Position. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"start\"(Start), \"end\"(End), \"index\"(Index). This value depends on the value of \"operation\". This parameter is only valid when the value of \"operation\" is \"add\".\n    deleteName:  Name. This value depends on the value of \"operation\". This parameter is only valid when the value of \"operation\" is \"delete\".\n    addIndex:  Index. This value depends on the value of \"operation\". This parameter is only valid when the value of \"operation\" is \"add\".\n    removePosition:  Position. Universal Variables List Position. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"start\"(Start), \"end\"(End), \"index\"(Index). This value depends on the value of \"operation\". This parameter is only valid when the value of \"operation\" is \"remove\".\n    removeIndex:  Index. This value depends on the value of \"operation\". This parameter is only valid when the value of \"operation\" is \"remove\".\n    removeName:  Name. This value depends on the value of \"operation\". This parameter is only valid when the value of \"operation\" is \"remove\".\n    database:  Database. Universal Variables Database. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"public\"(Public), \"protected\"(Protected), \"private\"(Private).\nReturn Value:\n    Values: Values.\nDescription:\n    Universal Variables: Manipulate universal variables.\n\nAn internet connection is required.\n\nPublic values are readable and writable by everyone.\nProtected values are readable by everyone and writable by the creator.\nPrivate values are readable and writable by only the creator.\n\nSet overwrites a value.\nGet retrieves a value.\nAdd adds an item to a value.\nDelete deletes a value.\nRemove deletes an item from a value.\nGet all retrieves the name of all the values you have set.\nParameterSummary: (${operation} ${addValue} to ${addName} at ${addPosition} in ${database}) ${operation} ${addValue} to ${addName} at ${addPosition} in ${database}; (${operation} from ${database}) ${operation} from ${database}; (${operation} ${getName} from ${database}) ${operation} ${getName} from ${database}; (${operation} ${deleteName} from ${database}) ${operation} ${deleteName} from ${database}; (${operation} value at ${removePosition} in ${removeName} from ${database}) ${operation} value at ${removePosition} in ${removeName} from ${database}; (${operation} ${setName} to ${setValue} in ${database}) ${operation} ${setName} to ${setValue} in ${database}\n",
    "ke.bou.GizmoPack.QueryRecordsIntent": "ke.bou.GizmoPack.QueryRecordsIntent(fields: String, input: File(Object), outputType: QueryRecordsOutput(Enum) = \"automatic\", hasWhere: Bool, whereClause: String, hasGroupBy: Bool, groupByClause: String, hasOrderBy: Bool, orderByClause: String, hasLimit: Bool, limitClause: Integer = 1) -> Output\n                            : File(Object)\nParameters:\n    fields:  Fields.\n    input:  Input.\n    outputType:  Output. Query Records Output. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"automatic\"(Automatic), \"json\"(JSON), \"csv\"(CSV).\n    hasWhere:  Where.\n    whereClause:  Where. This value depends on the value of \"hasWhere\". This parameter is only valid when the value of \"hasWhere\" is True.\n    hasGroupBy:  Group By.\n    groupByClause:  Group By. This value depends on the value of \"hasGroupBy\". This parameter is only valid when the value of \"hasGroupBy\" is True.\n    hasOrderBy:  Order By.\n    orderByClause:  Order By. This value depends on the value of \"hasOrderBy\". This parameter is only valid when the value of \"hasOrderBy\" is True.\n    hasLimit:  Limit.\n    limitClause:  Limit. This value depends on the value of \"hasLimit\". This parameter is only valid when the value of \"hasLimit\" is True.\nReturn Value:\n    Output: Output.\nDescription:\n    Query CSV/Dictionaries with SQL: Query a CSV file or list of JSON Dictionaries using SQL statement.\n\nYou can use all the Sqlite functions, and a custom function 'parsedate(string, format)' that uses the same format as 'Parse Date'.\n\nThis action requires GizmoPack Pro.\nParameterSummary: (Select ${fields} from ${input} group by ${groupByClause}) Select ${fields} from ${input} group by ${groupByClause}; (Select ${fields} from ${input} group by ${groupByClause} limit ${limitClause}) Select ${fields} from ${input} group by ${groupByClause} limit ${limitClause}; (Select ${fields} from ${input} group by ${groupByClause} order by ${orderByClause}) Select ${fields} from ${input} group by ${groupByClause} order by ${orderByClause}; (Select ${fields} from ${input} group by ${groupByClause} order by ${orderByClause} limit ${limitClause}) Select ${fields} from ${input} group by ${groupByClause} order by ${orderByClause} limit ${limitClause}; (Select ${fields} from ${input}) Select ${fields} from ${input}; (Select ${fields} from ${input} limit ${limitClause}) Select ${fields} from ${input} limit ${limitClause}; (Select ${fields} from ${input} order by ${orderByClause}) Select ${fields} from ${input} order by ${orderByClause}; (Select ${fields} from ${input} order by ${orderByClause} limit ${limitClause}) Select ${fields} from ${input} order by ${orderByClause} limit ${limitClause}; (Select ${fields} from ${input} where ${whereClause} group by ${groupByClause}) Select ${fields} from ${input} where ${whereClause} group by ${groupByClause}; (Select ${fields} from ${input} where ${whereClause} group by ${groupByClause} limit ${limitClause}) Select ${fields} from ${input} where ${whereClause} group by ${groupByClause} limit ${limitClause}; (Select ${fields} from ${input} where ${whereClause} group by ${groupByClause} order by ${orderByClause}) Select ${fields} from ${input} where ${whereClause} group by ${groupByClause} order by ${orderByClause}; (Select ${fields} from ${input} where ${whereClause}) Select ${fields} from ${input} where ${whereClause}; (Select ${fields} from ${input} where ${whereClause} limit ${limitClause}) Select ${fields} from ${input} where ${whereClause} limit ${limitClause}; (Select ${fields} from ${input} where ${whereClause} order by ${orderByClause}) Select ${fields} from ${input} where ${whereClause} order by ${orderByClause}; (Select ${fields} from ${input} where ${whereClause} order by ${orderByClause} limit ${limitClause}) Select ${fields} from ${input} where ${whereClause} order by ${orderByClause} limit ${limitClause}; (Select ${fields} from ${input} where ${whereClause} group by ${groupByClause} order by ${orderByClause} limit ${limitClause}) Select ${fields} from ${input} where ${whereClause} group by ${groupByClause} order by ${orderByClause} limit ${limitClause}\n",
    "ke.bou.GizmoPack.QueryJSONIntent": "ke.bou.GizmoPack.QueryJSONIntent(input: File(Object), queryType: JSONQueryType(Enum) = \"jsonPath\", jsonPathQuery: String = \"$\", jqQuery: String = \".[]\", slurp: Bool) -> Result\n                            : File(Object)\nParameters:\n    input:  Input.\n    queryType:  Query Type. JSON Query Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"jsonPath\"(JSONPath), \"jq\"(jq).\n    jsonPathQuery:  Query. This value depends on the value of \"queryType\". This parameter is only valid when the value of \"queryType\" is \"jsonPath\".\n    jqQuery:  Query. This value depends on the value of \"queryType\". This parameter is only valid when the value of \"queryType\" is \"jq\".\n    slurp:  Slurp. This value depends on the value of \"queryType\". This parameter is only valid when the value of \"queryType\" is \"jq\".\nReturn Value:\n    Result: Result.\nDescription:\n    Process JSON with JSONPath/jq: Process JSON using JSONPath or jq.\n\nThis action requires GizmoPack Pro.\nParameterSummary: (Process ${input} with ${queryType} query ${jqQuery}) Process ${input} with ${queryType} query ${jqQuery}; (Process ${input} with ${queryType} query ${jsonPathQuery}) Process ${input} with ${queryType} query ${jsonPathQuery}\n",
    "ke.bou.GizmoPack.CombineListsIntent": "ke.bou.GizmoPack.CombineListsIntent(firstList: String, secondList: String, operation: CombineListsOperation(Enum), removeDuplicates: Bool) -> Combined List\n                            : String\nParameters:\n    firstList:  First.\n    secondList:  Second.\n    operation:  Operation. Operation. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"join\"(Join), \"intersect\"(Intersect), \"subtract\"(Subtract).\n    removeDuplicates:  Remove Duplicates.\nReturn Value:\n    Combined List: Combined List.\nDescription:\n    Combine Lists: Combine two lists by joining, intersecting or subtracting.\n\nJoining combines the two lists into one.\nIntersecting creates a list of all the elements in the first that are also in the second.\nSubtracting creates a list of all the elements in the first that are not in the second.\nParameterSummary: (${operation} ${firstList} with ${secondList}) ${operation} ${firstList} with ${secondList}\n",
    "ke.bou.GizmoPack.TrimFileIntent": "ke.bou.GizmoPack.TrimFileIntent(file: File(Object), characterClass: TrimFileCharacterClass(Enum), lineCount: Integer = 1, position: TrimFilePosition(Enum)) -> Trimmed File\n                            : File(Object)\nParameters:\n    file:  File.\n    characterClass:  What?. Trim File Character Class. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"spaces\"(spaces), \"lines\"(lines).\n    lineCount:  count. This value depends on the value of \"characterClass\". This parameter is only valid when the value of \"characterClass\" is \"lines\".\n    position:  Position. Trim File Position. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"begin\"(begin), \"end\"(end), \"beginEnd\"(begin and end).\nReturn Value:\n    Trimmed File: Trimmed File.\nDescription:\n    Trim File: Trim file by removing lines or spaces.\nParameterSummary: (Drop ${characterClass} from ${position} of ${file}) Drop ${characterClass} from ${position} of ${file}; (Drop ${lineCount} ${characterClass} from ${position} of ${file}) Drop ${lineCount} ${characterClass} from ${position} of ${file}\n",
    "ke.bou.GizmoPack.FilterDictionariesIntent": "ke.bou.GizmoPack.FilterDictionariesIntent(dictionaries: File(Object), key: String, operation: FilterDictionariesOperation(Enum), isValue: String, isNotValue: String) -> Dictionaries\n                            : File(Object)\nParameters:\n    dictionaries:  Dictionaries.\n    key:  Key.\n    operation:  Operation. Operation. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"is\"(is), \"isNot\"(is not), \"contains\"(contain), \"doesNotContain\"(do not contain).\n    isValue:  Value. This value depends on the value of \"operation\". This parameter is only valid when the value of \"operation\" is \"is\".\n    isNotValue:  Value. This value depends on the value of \"operation\". This parameter is only valid when the value of \"operation\" is \"isNot\".\nReturn Value:\n    Dictionaries: Dictionaries.\nDescription:\n    Filter Dictionaries: Filter a list of JSON Dictionaries\nParameterSummary: (Filter ${dictionaries} which ${operation} ${key}) Filter ${dictionaries} which ${operation} ${key}; (Filter ${dictionaries} where ${key} ${operation} ${isNotValue}) Filter ${dictionaries} where ${key} ${operation} ${isNotValue}; (Filter ${dictionaries} where ${key} ${operation} ${isValue}) Filter ${dictionaries} where ${key} ${operation} ${isValue}\n",
    "ke.bou.GizmoPack.EncodeHexIntent": "ke.bou.GizmoPack.EncodeHexIntent(operation: EncodeHexOperation(Enum) = \"encode\", input: File(Object)) -> Hex Encoded\n                            : File(Object)\nParameters:\n    operation:  Operation. Encode Hex Operation. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"encode\"(Encode), \"decode\"(Decode).\n    input:  Input.\nReturn Value:\n    Hex Encoded: Hex Encoded.\nDescription:\n    Hex Encode: Encodes or decodes text of files using Hex encoding.\nParameterSummary: (${operation} ${input} as hex) ${operation} ${input} as hex\n",
    "ke.bou.GizmoPack.HashDataIntent": "ke.bou.GizmoPack.HashDataIntent(input: File(Object), algorithm: HashDataAlgorithm(Enum) = \"sha512\", hmacMd5Key: File(Object), hmacSha1Key: File(Object), hmacSha224Key: File(Object), hmacSha256Key: File(Object), hmacSha384Key: File(Object), hmacSha512Key: File(Object), outputEncoding: BinaryOutputEncoding(Enum) = \"hex\") -> Digest\n                            : File(Object)\nParameters:\n    input:  Data.\n    algorithm:  Algorithm. Hash Data Algorithm. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"md2\"(MD2), \"md4\"(MD4), \"md5\"(MD5), \"sha1\"(SHA-1), \"sha224\"(SHA-224), \"sha256\"(SHA-256), \"sha384\"(SHA-384), \"sha512\"(SHA-512), \"hmacMd5\"(HMAC-MD5), \"hmacSha1\"(HMAC-SHA1), \"hmacSha224\"(HMAC-SHA224), \"hmacSha256\"(HMAC-SHA256), \"hmacSha384\"(HMAC-SHA384), \"hmacSha512\"(HMAC-SHA512).\n    hmacMd5Key:  Key. This value depends on the value of \"algorithm\". This parameter is only valid when the value of \"algorithm\" is \"hmacMd5\".\n    hmacSha1Key:  Key. This value depends on the value of \"algorithm\". This parameter is only valid when the value of \"algorithm\" is \"hmacSha1\".\n    hmacSha224Key:  Key. This value depends on the value of \"algorithm\". This parameter is only valid when the value of \"algorithm\" is \"hmacSha224\".\n    hmacSha256Key:  Key. This value depends on the value of \"algorithm\". This parameter is only valid when the value of \"algorithm\" is \"hmacSha256\".\n    hmacSha384Key:  Key. This value depends on the value of \"algorithm\". This parameter is only valid when the value of \"algorithm\" is \"hmacSha384\".\n    hmacSha512Key:  Key. This value depends on the value of \"algorithm\". This parameter is only valid when the value of \"algorithm\" is \"hmacSha512\".\n    outputEncoding:  Output. Binary Output Encoding. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"binary\"(Binary), \"hex\"(Hex), \"base64\"(Base64).\nReturn Value:\n    Digest: Digest.\nDescription:\n    Generate Hash (Extended): Generate hash digest of input.\n\nSupported algorithms:\n- MD2\n- MD4\n- MD5\n- SHA-1\n- SHA-224\n- SHA-384\n- SHA-512\n- HMAC-MD5\n- HMAC-SHA1\n- HMAC-SHA224\n- HMAC-SHA384\n- HMAC-SHA512\n\nThis action requires GizmoPack Pro.\nParameterSummary: (Generate ${algorithm} hash of ${input} with ${hmacMd5Key}) Generate ${algorithm} hash of ${input} with ${hmacMd5Key}; (Generate ${algorithm} hash of ${input} with ${hmacSha1Key}) Generate ${algorithm} hash of ${input} with ${hmacSha1Key}; (Generate ${algorithm} hash of ${input} with ${hmacSha224Key}) Generate ${algorithm} hash of ${input} with ${hmacSha224Key}; (Generate ${algorithm} hash of ${input} with ${hmacSha256Key}) Generate ${algorithm} hash of ${input} with ${hmacSha256Key}; (Generate ${algorithm} hash of ${input} with ${hmacSha384Key}) Generate ${algorithm} hash of ${input} with ${hmacSha384Key}; (Generate ${algorithm} hash of ${input}) Generate ${algorithm} hash of ${input}; (Generate ${algorithm} hash of ${input} with ${hmacSha512Key}) Generate ${algorithm} hash of ${input} with ${hmacSha512Key}\n",
    "ke.bou.GizmoPack.RandomDataIntent": "ke.bou.GizmoPack.RandomDataIntent(size: Integer = 32, outputEncoding: BinaryOutputEncoding(Enum) = \"hex\") -> Random Data\n                            : File(Object)\nParameters:\n    size:  Size.\n    outputEncoding:  Output. Binary Output Encoding. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"binary\"(Binary), \"hex\"(Hex), \"base64\"(Base64).\nReturn Value:\n    Random Data: Random Data.\nDescription:\n    Random Data: Generate cryptographically secure random data. Output as binary, hex or Base64.\n\nThis action requires GizmoPack Pro.\nParameterSummary: (Generate ${size} bytes of random data) Generate ${size} bytes of random data\n",
    "ke.bou.GizmoPack.ShortcutMetadataIntent": "ke.bou.GizmoPack.ShortcutMetadataIntent(shortcut: File(Object)) -> Shortcut Metadata\n                            : ShortcutMetadata(Object)\nParameters:\n    shortcut:  Shortcut.\nReturn Value:\n    Shortcut Metadata: Shortcut Metadata. Shortcut Metadata.\nDescription:\n    Shortcut Metadata: Get metadata of shortcut.\n\nReturns:\n- Number of actions\n- Hex color\n- System symbol name (if available)\n- First comment at the top of the shortcut\n\nThis action requires GizmoPack Pro.\nParameterSummary: (Get metadata for ${shortcut}) Get metadata for ${shortcut}\n",
    "ke.bou.GizmoPack.EncodePlistIntent": "ke.bou.GizmoPack.EncodePlistIntent(operation: EncodeDecode(Enum) = \"decode\", format: PlistFormat(Enum) = \"xml\", input: File(Object)) -> Plist Encoded\n                            : File(Object)\nParameters:\n    operation:  Operation. Encode Decode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"encode\"(Encode), \"decode\"(Decode).\n    format:  Format. Property List Format. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"xml\"(XML), \"binary\"(binary). This value depends on the value of \"operation\". This parameter is only valid when the value of \"operation\" is \"encode\".\n    input:  Input.\nReturn Value:\n    Plist Encoded: Plist Encoded.\nDescription:\n    Encode Property List: Encode/decode a property list as a JSON Dictionary.\n\nYou can use this to inspect the underlying code of a shortcut. Use 'Get Link to File' after encoding it back to a property list to import the shortcut into the Shortcuts app.\n\nThis action requires GizmoPack Pro.\nParameterSummary: (${operation} ${input} as ${format} property list) ${operation} ${input} as ${format} property list; (${operation} ${input} property list) ${operation} ${input} property list\n",
    "ke.bou.GizmoPack.OverwriteFileIntent": "ke.bou.GizmoPack.OverwriteFileIntent(file: File(Object), overwrite: File(Object), isFolder: Bool, path: String)\nParameters:\n    file:  Destination.\n    overwrite:  Source.\n    isFolder:  Destination is folder.\n    path:  file.txt. This value depends on the value of \"isFolder\". This parameter is only valid when the value of \"isFolder\" is True.\nDescription:\n    Overwrite File: Overwrite a passed in file with the contents of another.\nParameterSummary: (Overwrite ${file} with ${overwrite}) Overwrite ${file} with ${overwrite}; (Overwrite ${file}/${path} with ${overwrite}) Overwrite ${file}/${path} with ${overwrite}\n",
    "ke.bou.GizmoPack.ParseDateIntent": "ke.bou.GizmoPack.ParseDateIntent(date: String, format: String = \"MM/dd/yyyy\", errorIfInvalid: Bool, locale: DateLocale(Object)) -> Parsed Date\n                            : String\nParameters:\n    date:  Date.\n    format:  Format.\n    errorIfInvalid:  Error If Invalid.\n    locale:  Locale. Locale.\nReturn Value:\n    Parsed Date: Parsed Date.\nDescription:\n    Parse Date: Interpret date with custom format.\n\nA date like 12/25/2001 can be parsed with format 'MM/dd/yyyy'.\n\nThis action requires GizmoPack Pro.\nParameterSummary: (Parse ${date} as ${format} date) Parse ${date} as ${format} date\n",
    "ke.bou.GizmoPack.FileInfoIntent": "ke.bou.GizmoPack.FileInfoIntent(file: File(Object)) -> File Info\n                            : FileMetadata(Object)\nParameters:\n    file:  File.\nReturn Value:\n    File Info: File Info. File Metadata.\nDescription:\n    File Info: Retrieve file path, name, type.\nParameterSummary: (Get info on ${file}) Get info on ${file}\n",
    "ke.bou.GizmoPack.SignJWTIntent": "ke.bou.GizmoPack.SignJWTIntent(key: File(Object), algorithm: JWTAlgorithm(Enum), issuer: String, keyID: String, audience: String, notBefore: TimeInterval(Object), expiration: TimeInterval(Object) = 1200.0, subject: String, jwtID: String) -> JWT\n                            : String\nParameters:\n    key:  Key.\n    algorithm:  Algorithm. JWT Algorithm. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"es256\"(ES256), \"es384\"(ES384), \"es512\"(ES512), \"hs256\"(HS256), \"hs384\"(HS384), \"hs512\"(HS512), \"ps256\"(PS256), \"ps384\"(PS384), \"ps512\"(PS512), \"rs256\"(RS256), \"rs384\"(RS384), \"rs512\"(RS512), \"none\"(None).\n    issuer:  Issuer.\n    keyID:  Key ID.\n    audience:  Audience.\n    notBefore:  Not Before.\n    expiration:  Expiration.\n    subject:  Subject.\n    jwtID:  JWT ID.\nReturn Value:\n    JWT: JWT.\nDescription:\n    Sign JSON Web Token: Sign a JSON Web Token with a private key.\nParameterSummary: (Sign JWT with Key ${key} using ${algorithm}) Sign JWT with Key ${key} using ${algorithm}\n",
    "ke.bou.GizmoPack.WakeOnLANIntent": "ke.bou.GizmoPack.WakeOnLANIntent(address: String, broadcastAddress: String = \"255.255.255.255\", port: Integer = 9)\nParameters:\n    address:  AB:BC:CD:DE:EF:FA.\n    broadcastAddress:  Broadcast Address.\n    port:  Port.\nDescription:\n    Wake on LAN: Send Wake on LAN request.\nParameterSummary: (Send Wake on LAN to ${address}) Send Wake on LAN to ${address}\n",
    "maccatalyst.com.Christopher-Hannah.Text-Case.TextCaseIntent": "maccatalyst.com.Christopher-Hannah.Text-Case.TextCaseIntent(format: TextCaseFormat(Enum) = \"apTitleCase\", text: String) -> Formatted Text\n                            : String\nParameters:\n    format:  Format. Format. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"apTitleCase\"(Title Case (AP)), \"urlEncoded\"(URL Encoded), \"urlDecoded\"(URL Decoded), \"uppercase\"(Uppercase), \"lowercase\"(Lowercase), \"capitalise\"(Capitalise), \"capitaliseWords\"(Capitalise Words), \"reversed\"(Reversed), \"camelCase\"(Camel Case), \"snakeCase\"(Snake Case), \"pascalCase\"(Pascal Case), \"hashtags\"(Hashtags), \"mockingSpongebob\"(Mocking Spongebob), \"sentenceCase\"(Sentence Case), \"kebabCase\"(Kebab Case), \"stripHTML\"(Strip HTML), \"base64Encode\"(Base64 Encoded), \"base64Decode\"(Base64 Decoded), \"rot13\"(ROT13), \"textToEmoji\"(Emoji), \"clapCase\"(Clap Case), \"stripWhitespace\"(Strip Whitespace), \"trimWhitespace\"(Trim Whitespace), \"shuffled\"(Shuffled), \"markdownBlockquote\"(Markdown Blockquote), \"markdownOrderedList\"(Markdown Ordered List), \"markdownUnorderedList\"(Markdown Unordered List), \"markdownCodeBlock\"(Markdown Code Block), \"markdownToHTML\"(HTML from Markdown), \"smallCaps\"(Small Caps), \"upsideDown\"(Upside Down), \"smartQuotes\"(Smart Quotes), \"straightQuotes\"(Straight Quotes), \"slug\"(Slug), \"apaTitleCase\"(Title Case (APA)), \"cmosTitleCase\"(Title Case (CMOS)), \"mlaTitleCase\"(Title Case (MLA)), \"guardianTitleCase\"(Title Case (Guardian)), \"boldSerif\"(Bold (Serif)), \"boldSans\"(Bold (Sans-serif)), \"italicBoldSerif\"(Italic Bold (Serif)), \"italicBoldSans\"(Italic Bold (Sans-serif)), \"script\"(Script), \"gothic\"(Gothic), \"squaresFilled\"(Letters in Squares (Filled)), \"squaresOutline\"(Letters in Squares (Outline)), \"circlesFilled\"(Letters in Circles (Filled)), \"circlesOutline\"(Letters in Circles (Outline)), \"italic\"(Italic), \"amaTitleCase\"(Title Case (AMA)), \"wikipediaTitleCase\"(Title Case (Wikipedia)), \"nytTitleCase\"(Title Case (New York Times)), \"bluebookTitleCase\"(Title Case (Bluebook)), \"countChars\"(Count Characters), \"countCharsExcWhitespace\"(Count Characters (Excl. Whitespace)), \"countWords\"(Count Words), \"countLines\"(Count Lines), \"countLinesExclBlanks\"(Count Lines (Excl. Blanks)), \"removeLineBreaks\"(Remove Line Breaks), \"md2\"(MD2), \"md4\"(MD4), \"md5\"(MD5), \"sha1\"(SHA1), \"sha224\"(SHA224), \"sha256\"(SHA256), \"sha384\"(SHA384), \"sha512\"(SHA512), \"formatJSON\"(Format JSON), \"minifyJSON\"(Minify JSON), \"strikethrough\"(Strikethrough).\n    text:  Text.\nReturn Value:\n    Formatted Text: Formatted Text.\nDescription:\n    Format Text: Format text using a specific format.\nParameterSummary: (Format ${text} using ${format} ) Format ${text} using ${format} \n",
    "maccatalyst.com.Christopher-Hannah.Text-Case.FormatWithFlowIntent": "maccatalyst.com.Christopher-Hannah.Text-Case.FormatWithFlowIntent(text: String, flow: IntentFlow(Object)) -> Formatted Text\n                            : String\nParameters:\n    text:  Text.\n    flow:  Flow. Flow.\nReturn Value:\n    Formatted Text: Formatted Text.\nDescription:\n    Format Text with Flow: Format text using a custom Flow.\nParameterSummary: (Format ${text} using ${flow}) Format ${text} using ${flow}\n",
    "maccatalyst.com.Christopher-Hannah.Text-Case.ReplaceIntent": "maccatalyst.com.Christopher-Hannah.Text-Case.ReplaceIntent(mode: Mode(Enum) = \"all\", match: String, replacement: String, text: String) -> Formatted Text\n                            : String\nParameters:\n    mode:  Mode. Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"all\"(All), \"first\"(First), \"last\"(Last).\n    match:  Text.\n    replacement:  Text.\n    text:  Text.\nReturn Value:\n    Formatted Text: Formatted Text.\nDescription:\n    Replace: Replace occurrences of a string in a piece of text.\nParameterSummary: (Replace ${mode} occurrence of ${match}with ${replacement} in ${text}) Replace ${mode} occurrence(s) of ${match}with ${replacement} in ${text}\n",
    "maccatalyst.com.Christopher-Hannah.Text-Case.RemoveIntent": "maccatalyst.com.Christopher-Hannah.Text-Case.RemoveIntent(mode: Mode(Enum) = \"all\", match: String, text: String) -> Formatted Text\n                            : String\nParameters:\n    mode:  Mode. Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"all\"(All), \"first\"(First), \"last\"(Last).\n    match:  Text.\n    text:  Text.\nReturn Value:\n    Formatted Text: Formatted Text.\nDescription:\n    Remove: Remove occurrences of a string in a piece of text.\nParameterSummary: (Remove ${mode} occurrence of ${match} in ${text}) Remove ${mode} occurrence(s) of ${match} in ${text}\n",
    "maccatalyst.com.Christopher-Hannah.Text-Case.AddPrefixIntent": "maccatalyst.com.Christopher-Hannah.Text-Case.AddPrefixIntent(prefix: String, text: String) -> Formatted Text\n                            : String\nParameters:\n    prefix:  Prefix.\n    text:  Text.\nReturn Value:\n    Formatted Text: Formatted Text.\nDescription:\n    Add Prefix: Add a string of text to the beginning of another string of text.\nParameterSummary: (Add prefix ${prefix}to ${text}) Add prefix ${prefix}to ${text}\n",
    "maccatalyst.com.Christopher-Hannah.Text-Case.AddSuffixIntent": "maccatalyst.com.Christopher-Hannah.Text-Case.AddSuffixIntent(suffix: String, text: String) -> Formatted Text\n                            : String\nParameters:\n    suffix:  Suffix.\n    text:  Text.\nReturn Value:\n    Formatted Text: Formatted Text.\nDescription:\n    Add Suffix: Add a string of text to the end of another string of text.\nParameterSummary: (Add suffix ${suffix}to ${text}) Add suffix ${suffix}to ${text}\n",
    "maccatalyst.com.Christopher-Hannah.Text-Case.ReplaceWithLineBreaksIntent": "maccatalyst.com.Christopher-Hannah.Text-Case.ReplaceWithLineBreaksIntent(match: String, text: String) -> Formatted Text\n                            : String\nParameters:\n    match:  Replace.\n    text:  Text.\nReturn Value:\n    Formatted Text: Formatted Text.\nDescription:\n    Replace With Line Breaks: Replace occurrences of a string in a piece of text with line breaks.\nParameterSummary: (Replace all ${match} in ${text} with a line break) Replace all ${match} in ${text} with a line break\n",
    "maccatalyst.com.Christopher-Hannah.Text-Case.ReplaceLineBreaksWithIntent": "maccatalyst.com.Christopher-Hannah.Text-Case.ReplaceLineBreaksWithIntent(with: String, text: String) -> Formatted Text\n                            : String\nParameters:\n    with:  With.\n    text:  Text.\nReturn Value:\n    Formatted Text: Formatted Text.\nDescription:\n    Replace Line Breaks With: Replace Line Breaks with a specific string of text.\nParameterSummary: (Replace all line breaks in ${text} with ${with}) Replace all line breaks in ${text} with ${with}\n",
    "me.damir.dropover-mac.AddToShelfIntent": "me.damir.dropover-mac.AddToShelfIntent(files: File(Object), append: Bool)\nParameters:\n    files:  Files.\n    append:  Append to existing shelf. This value depends on the value of \"files\". This parameter is only valid when \"files has any value.\nDescription:\n    Add File to Shelf: Adds file to a shelf\nParameterSummary: (Add ${files} to a new shelf) Add ${files} to a new shelf; (Add ${files} to a shelf) Add ${files} to a shelf\n",
    "me.damir.dropover-mac.CreateCloudSessionIntent": "me.damir.dropover-mac.CreateCloudSessionIntent(files: File(Object), title: String, copyToClipboard: Bool, expirationDate: TimeInterval(Object) = 7.0, createsZip: Bool) -> URL\n                            : String\nParameters:\n    files:  Files.\n    title:  Title. This value depends on the value of \"files\". This parameter is only valid when \"files has any value.\n    copyToClipboard:  Copy link to clipboard. This value depends on the value of \"files\". This parameter is only valid when \"files has any value.\n    expirationDate:  Expiration Date. This value depends on the value of \"files\". This parameter is only valid when \"files has any value.\n    createsZip:  Create single ZIP file. This value depends on the value of \"files\". This parameter is only valid when \"files has any value.\nReturn Value:\n    URL: URL.\nDescription:\n    Upload to Dropover Cloud: Upload files to Dropover Cloud\nParameterSummary: (Upload ${files} to Dropover Cloud and returns a shareable link) Upload ${files} to Dropover Cloud and returns a shareable link; (Upload ${files} to Dropover Cloud and returns a shareable link) Upload ${files} to Dropover Cloud and returns a shareable link\n",
    "me.damir.dropover-mac.GetFilesFromShelfIntent": "me.damir.dropover-mac.GetFilesFromShelfIntent(closeShelf: Bool) -> Files\n                            : File(Object)\nParameters:\n    closeShelf:  Close shelf when Shortcut is completed.\nReturn Value:\n    Files: Files.\nDescription:\n    Get File From Shelf: Gets the file from the current opened shelf\nParameterSummary: (Gets file from Shelf) Gets file from Shelf\n",
    "me.damir.dropover-mac.OpenRecentShelfIntent": "me.damir.dropover-mac.OpenRecentShelfIntent()\nDescription:\n    Open Recent Shelf: Opens the most recently closed Dropover shelf\nParameterSummary: (Open recent Dropover shelf) Open recent Dropover shelf\n",
    "net.shinyfrog.bear-iOS.SFCreateNoteIntent": "net.shinyfrog.bear-iOS.SFCreateNoteIntent(title: String = \"New note\", text: String = \"text\", tags: String = \"tag\") -> Note\n                            : IntentNote(Object)\nParameters:\n    title:  Title.\n    text:  Text.\n    tags:  Tags.\nReturn Value:\n    Note: Note. Note.\nDescription:\n    Create Note: Create a new note, optionally with a title, text, and tags\nParameterSummary: (Create a note with ${text}) Create a note with ${text}\n",
    "net.shinyfrog.bear-iOS.SFCreateNoteFromURLIntent": "net.shinyfrog.bear-iOS.SFCreateNoteFromURLIntent(URL: String, tags: String) -> Note\n                            : IntentNote(Object)\nParameters:\n    URL:  Web Page.\n    tags:  Tags. This value depends on the value of \"URL\". This parameter is only valid when \"URL has any value.\nReturn Value:\n    Note: Note. Note.\nDescription:\n    Create note from URL: Create a new note with the content of a web page\nParameterSummary: (Create note from ${URL}) Create note from ${URL}; (Create note from ${URL}) Create note from ${URL}\n",
    "net.shinyfrog.bear-iOS.SFGetNoteIntent": "net.shinyfrog.bear-iOS.SFGetNoteIntent(title: String) -> Note\n                            : IntentNote(Object)\nParameters:\n    title:  Identifier or title.\nReturn Value:\n    Note: Note. Note.\nDescription:\n    Get note: Get a note via its title or identifier\nParameterSummary: (Get note ${title}) Get note ${title}\n",
    "net.shinyfrog.bear-iOS.SFAddToNoteIntent": "net.shinyfrog.bear-iOS.SFAddToNoteIntent(note: IntentNote(Object), text: String = \"text\", insert: InsertionMode(Enum) = \"append\", header: String, timestamp: Bool) -> Note\n                            : IntentNote(Object)\nParameters:\n    note:  Note. Note.\n    text:  Text.\n    insert:  Insert. Insertion Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"append\"(At the end), \"prepend\"(At the start), \"replace\"(Replace the note text but not the title), \"replaceAll\"(Replace the note text).\n    header:  Limited to header.\n    timestamp:  Add Timestamp.\nReturn Value:\n    Note: Note. Note.\nDescription:\n    Add text to a note: Add text to a selected note\nParameterSummary: (Add ${text} to ${note}) Add ${text} to ${note}\n",
    "net.shinyfrog.bear-iOS.SFTrashNoteIntent": "net.shinyfrog.bear-iOS.SFTrashNoteIntent(note: IntentNote(Object))\nParameters:\n    note:  Note. Note.\nDescription:\n    Trash note: Trash a selected note\nParameterSummary: (Trash the note: ${note} ) Trash the note: ${note} \n",
    "net.shinyfrog.bear-iOS.SFArchiveNoteIntent": "net.shinyfrog.bear-iOS.SFArchiveNoteIntent(note: IntentNote(Object))\nParameters:\n    note:  Note. Note.\nDescription:\n    Archive note: Archive a selected note\nParameterSummary: (Archive the note: ${note}) Archive the note: ${note}\n",
    "net.shinyfrog.bear-iOS.SFPinNoteIntent": "net.shinyfrog.bear-iOS.SFPinNoteIntent(note: IntentNote(Object), pin: Bool = True)\nParameters:\n    note:  Note. Note.\n    pin:  Pin.\nDescription:\n    Pin note: Set a selected note as pinned\nParameterSummary: (Set pin state for ${note} to ${pin}) Set pin state for ${note} to ${pin}\n",
    "net.shinyfrog.bear-iOS.SFSearchNotesIntent": "net.shinyfrog.bear-iOS.SFSearchNotesIntent(term: String = \"search\", limit: Bool, searchLimit: Integer = 10, openInBear: Bool) -> Notes\n                            : IntentNote(Object)\nParameters:\n    term:  Term.\n    limit:  Limit.\n    searchLimit:  Number of notes. This value depends on the value of \"limit\". This parameter is only valid when the value of \"limit\" is True.\n    openInBear:  Open In Bear.\nReturn Value:\n    Notes: Notes. Note.\nDescription:\n    Search notes: Return notes that match a search term\nParameterSummary: (Search notes containing ${term}) Search notes containing ${term}; (Search notes containing ${term}) Search notes containing ${term}\n",
    "net.shinyfrog.bear-iOS.SFSearchTagsIntent": "net.shinyfrog.bear-iOS.SFSearchTagsIntent(term: String = \"tag\", limit: Bool, searchLimit: Integer = 10) -> Tags\n                            : IntentTag(Object)\nParameters:\n    term:  Term.\n    limit:  Limit.\n    searchLimit:  Number of tags. This value depends on the value of \"limit\". This parameter is only valid when the value of \"limit\" is True.\nReturn Value:\n    Tags: Tags. Tag.\nDescription:\n    Search tags: Return tags that match a search term\nParameterSummary: (Search tags containing ${term}) Search tags containing ${term}; (Search tags containing ${term}) Search tags containing ${term}\n",
    "net.shinyfrog.bear-iOS.SFOpenNoteIntent": "net.shinyfrog.bear-iOS.SFOpenNoteIntent(note: IntentNote(Object))\nParameters:\n    note:  Note. Note.\nDescription:\n    Open note: Open a selected note in Bear\nParameterSummary: (Open the note: ${note}) Open the note: ${note}\n",
    "net.shinyfrog.bear-iOS.SFOpenTagIntent": "net.shinyfrog.bear-iOS.SFOpenTagIntent(tag: String = \"tag\")\nParameters:\n    tag:  Tag.\nDescription:\n    Open Tag: Open a selected tag in Bear\nParameterSummary: (Open the tag: ${tag}) Open the tag: ${tag}\n",
    "net.shinyfrog.bear-iOS.SFOpenLocationIntent": "net.shinyfrog.bear-iOS.SFOpenLocationIntent(location: LocationType(Enum) = \"notes\")\nParameters:\n    location:  Section. Sidebar Location. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"notes\"(Notes), \"untagged\"(Untagged), \"todo\"(Todo), \"today\"(Today), \"locked\"(Locked).\nDescription:\n    Open section: Open the following sidebar locations in Bear: Notes, Untagged, ToDo, Today, and Locked\nParameterSummary: (Open the section: ${location}) Open the section: ${location}\n",
    "net.shinyfrog.bear-iOS.SFGetTagIntent": "net.shinyfrog.bear-iOS.SFGetTagIntent(tag: String) -> Tag\n                            : IntentTag(Object)\nParameters:\n    tag:  Tag.\nReturn Value:\n    Tag: Tag. Tag.\nDescription:\n    Get tag: Get a tag\nParameterSummary: (Get the tag: ${tag}) Get the tag: ${tag}\n",
    "net.shinyfrog.bear-iOS.SFAddFilesToNoteIntent": "net.shinyfrog.bear-iOS.SFAddFilesToNoteIntent(files: File(Object), note: IntentNote(Object), insert: InsertionMode(Enum) = \"append\") -> Note\n                            : IntentNote(Object)\nParameters:\n    files:  Files.\n    note:  Note. Note.\n    insert:  Insert. Insertion Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"append\"(At the end), \"prepend\"(At the start), \"replace\"(Replace the note text but not the title), \"replaceAll\"(Replace the note text).\nReturn Value:\n    Note: Note. Note.\nDescription:\n    Add files to note: Add files to a selected note\nParameterSummary: (Add ${files}to ${note}) Add ${files}to ${note}\n",
    "net.shinyfrog.bear-iOS.SFAddTagsToNoteIntent": "net.shinyfrog.bear-iOS.SFAddTagsToNoteIntent(note: IntentNote(Object), tags: String) -> note\n                            : IntentNote(Object)\nParameters:\n    note:  Note. Note.\n    tags:  Tags.\nReturn Value:\n    note: note. Note.\nDescription:\n    Add tags to note: Add tags to a selected note\nParameterSummary: (Add ${tags}to ${note}) Add ${tags}to ${note}\n",
    "net.shinyfrog.bear-iOS.SFGetNoteFilesIntent": "net.shinyfrog.bear-iOS.SFGetNoteFilesIntent(note: IntentNote(Object)) -> Files\n                            : File(Object)\nParameters:\n    note:  Note. Note.\nReturn Value:\n    Files: Files.\nDescription:\n    Get note files: Get the files attached to a specific note\nParameterSummary: (Get files of ${note}) Get files of ${note}\n",
    "net.shinyfrog.bear-iOS.SFRemoveTagIntent": "net.shinyfrog.bear-iOS.SFRemoveTagIntent(tag: String, note: IntentNote(Object))\nParameters:\n    tag:  Tag.\n    note:  Note. Note.\nDescription:\n    Remove Tag: Removes a selected tag from a note\nParameterSummary: (Remove tag ${tag} from ${note}) Remove tag ${tag} from ${note}\n",
    "net.shinyfrog.bear-iOS.SFExportNoteIntent": "net.shinyfrog.bear-iOS.SFExportNoteIntent(note: IntentNote(Object), format: ExportType(Enum)) -> File\n                            : File(Object)\nParameters:\n    note:  Note. Note.\n    format:  Format. Export Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"Markdown\"(markdown), \"TextBundle\"(text bundle), \"HTML\"(html), \"RTF\"(rtf), \"JPG\"(jpg), \"DOCX\"(docx), \"ePub\"(e pub), \"Bear\"(bear).\nReturn Value:\n    File: File.\nDescription:\n    Export Note: Export a note in different formats\nParameterSummary: (Export ${note}as ${format}) Export ${note}as ${format}\n",
    "org.joinmastodon.app.SendPostIntent": "org.joinmastodon.app.SendPostIntent(content: String, accounts: Account(Object), visibility: PostVisibility(Enum) = \"public\") -> Posts\n                            : Post(Object)\nParameters:\n    content:  Text Content.\n    accounts:  Accounts. Account.\n    visibility:  Visibility. Post Visibility. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"public\"(Public), \"followersOnly\"(Followers Only).\nReturn Value:\n    Posts: Posts. Post.\nDescription:\n    Post on Mastodon: Send Post with text content\nParameterSummary: (Post ${content} on Mastodon) Post ${content} on Mastodon\n",
    "AsheKube.app.a-Shell-mini.ExecuteCommandIntent": "AsheKube.app.a-Shell-mini.ExecuteCommandIntent(command: String = \" \", openWindow: Enum(Enum) = \"default\", keepGoing: Bool) -> output\n                            : String\nParameters:\n    command:  shell command(s).\n    openWindow:  Open the app to execute the commands?. openWindow. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"default\"(default (depends on commands)), \"close\"(no (run in extension)), \"open\"(yes).\n    keepGoing:  Keep going after an error.\nReturn Value:\n    output: output.\nDescription:\n    Execute Command: Run the following command in a-Shell\nParameterSummary: (Execute ${command}) Execute ${command}\n",
    "AsheKube.app.a-Shell-mini.GetFileIntent": "AsheKube.app.a-Shell-mini.GetFileIntent(fileName: String, errorIfNotFound: Bool = True) -> File\n                            : File(Object)\nParameters:\n    fileName:  file name.\n    errorIfNotFound:  Error if not found.\nReturn Value:\n    File: File.\nDescription:\n    Get file: Get file from a-Shell\nParameterSummary: (Get ${fileName} from a-Shell) Get ${fileName} from a-Shell\n",
    "AsheKube.app.a-Shell-mini.PutFileIntent": "AsheKube.app.a-Shell-mini.PutFileIntent(file: File(Object), overwrite: Bool = True)\nParameters:\n    file:  file.\n    overwrite:  Overwrite existing file?.\nDescription:\n    Put File: Copy file to a-Shell\nParameterSummary: (Copy ${file} to a-Shell) Copy ${file} to a-Shell\n",
    "AsheKube.app.a-Shell.ExecuteCommandIntent": "AsheKube.app.a-Shell.ExecuteCommandIntent(command: String = \" \", openWindow: Enum(Enum) = \"default\", keepGoing: Bool) -> output\n                            : String\nParameters:\n    command:  shell command(s).\n    openWindow:  Open the app to execute the commands?. openWindow. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"default\"(default (depends on commands)), \"close\"(no (run in extension)), \"open\"(yes).\n    keepGoing:  Keep going after an error.\nReturn Value:\n    output: output.\nDescription:\n    Execute Command: Run the following command in a-Shell\nParameterSummary: (Execute ${command}) Execute ${command}\n",
    "AsheKube.app.a-Shell.GetFileIntent": "AsheKube.app.a-Shell.GetFileIntent(fileName: String, errorIfNotFound: Bool = True) -> File\n                            : File(Object)\nParameters:\n    fileName:  file name.\n    errorIfNotFound:  Error if not found.\nReturn Value:\n    File: File.\nDescription:\n    Get file: Get file from a-Shell\nParameterSummary: (Get ${fileName} from a-Shell) Get ${fileName} from a-Shell\n",
    "AsheKube.app.a-Shell.PutFileIntent": "AsheKube.app.a-Shell.PutFileIntent(file: File(Object), overwrite: Bool = True)\nParameters:\n    file:  file.\n    overwrite:  Overwrite existing file?.\nDescription:\n    Put File: Copy file to a-Shell\nParameterSummary: (Copy ${file} to a-Shell) Copy ${file} to a-Shell\n",
    "com.flexibits.fantastical2.iphone.FKRUpcomingCalendarItemIntent": "com.flexibits.fantastical2.iphone.FKRUpcomingCalendarItemIntent(itemType: IntentItemType(Enum) = \"unspecified\") -> Upcoming Item\n                            : IntentCalendarItem(Object)\nParameters:\n    itemType: Item. Item Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"unknown\"(Unknown), \"event\"(Event), \"reminder\"(Task), \"unspecified\"(Event or Task).\nReturn Value:\n    Upcoming Item: Fantastical Calendar Item.\nDescription:\n    Upcoming Item: Shows the next upcoming item\nParameterSummary: (itemType) Upcoming ${itemType}\n",
    "com.flexibits.fantastical2.iphone.FKRShowScheduleIntent": "com.flexibits.fantastical2.iphone.FKRShowScheduleIntent(day: IntentScheduleDay(Enum), date: String) -> Show Schedule\n                            : array(IntentCalendarItem(Object))\nParameters:\n    day: day. Fantastical Schedule Day. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"today\"(today), \"tomorrow\"(tomorrow), \"specificDate\"(specific date).\n    date: date.\nReturn Value:\n    Show Schedule: \nDescription:\n    Show Schedule: Shows the schedule for a customizable date.\nParameterSummary: (date) Schedule for ${date}; (day,date) Schedule for ${day}\n",
    "com.flexibits.fantastical2.iphone.FKROverdueRemindersIntent": "com.flexibits.fantastical2.iphone.FKROverdueRemindersIntent() -> Calendar Items\n                            : IntentCalendarItem(Object)\nReturn Value:\n    Calendar Items: Calendar Items. Fantastical Calendar Item.\nDescription:\n    Overdue Tasks: Shows all tasks that are overdue\nParameterSummary: (Overdue tasks) Overdue tasks\n",
    "com.flexibits.fantastical2.iphone.FKRShowCalendarIntent": "com.flexibits.fantastical2.iphone.FKRShowCalendarIntent(calendar: (Object), calendarName: String, date: String) -> Calendar\n                            : Object\nParameters:\n    calendar:  Calendar.\n    calendarName:  Calendar Name.\n    date:  Date.\nReturn Value:\n    Calendar: Calendar.\nDescription:\n    Show Calendar: Shows upcoming events on a specific calendar\nParameterSummary: (Show “${calendarName}” calendar) Show “${calendarName}” calendar\n",
    "com.flexibits.fantastical2.iphone.FKRShowListIntent": "com.flexibits.fantastical2.iphone.FKRShowListIntent(list: (Object), listName: String, date: String) -> List \n                            : Object\nParameters:\n    list:  List.\n    listName:  List Name.\n    date:  Date.\nReturn Value:\n    List : List .\nDescription:\n    Show List: Shows all tasks on a specific list\nParameterSummary: (Show \"${listName}\" list) Show \"${listName}\" list\n",
    "com.flexibits.fantastical2.iphone.FKRCreateFromClipboardIntent": "com.flexibits.fantastical2.iphone.FKRCreateFromClipboardIntent() -> Calendar Item Title\n                            : String\nReturn Value:\n    Calendar Item Title: Calendar Item Title.\nDescription:\n    Create from Clipboard: Creates a new event or task from the contents of the clipboard\nParameterSummary: () Create from Clipboard\n",
    "com.flexibits.fantastical2.iphone.FKRCreateFromInputIntent": "com.flexibits.fantastical2.iphone.FKRCreateFromInputIntent(input: String, notes: String) -> Create From Input\n                            : IntentCalendarItem(Object)\nParameters:\n    input: Input.\n    notes: Notes.\nReturn Value:\n    Create From Input: Fantastical Calendar Item.\nDescription:\n    Create From Input: Creates a new event or task from a given input.\nParameterSummary: () Create event or task\n",
    "com.flexibits.fantastical2.iphone.FKROpenOnDateIntent": "com.flexibits.fantastical2.iphone.FKROpenOnDateIntent(date: String)\nParameters:\n    date: Date.\nDescription:\n    Open to Date: Open Fantastical on the specified date.\nParameterSummary: (date) Open Fantastical to ${date}\n",
    "com.flexibits.fantastical2.iphone.FKRChangeCalendarSetIntent": "com.flexibits.fantastical2.iphone.FKRChangeCalendarSetIntent(calendarSet: CalendarSetEntity(Object))\nParameters:\n    calendarSet: Calendar Set. Fantastical Calendar Set.\nDescription:\n    Change Calendar Set: Changes the currently active calendar set\nParameterSummary: (calendarSet) Change active calendar set to ${calendarSet}\n",
    "com.flexibits.fantastical2.iphone.FKRDateWidgetConfigIntent": "com.flexibits.fantastical2.iphone.FKRDateWidgetConfigIntent(theme: IntentWidgetTheme(Enum) = \"mirrorSystem\", showMonth: Bool = True, showWeather: Bool)\nParameters:\n    theme:  Appearance. Fantastical Widget Theme. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"mirrorSystem\"(Mirror System), \"fantastical\"(Fantastical), \"light\"(Light), \"dark\"(Dark), \"black\"(Black).\n    showMonth:  Show Month.\n    showWeather:  Show Weather.\nDescription:\n    Date Widget Configuration: Configuration for the Date Widget\nParameterSummary: () Date Widget Configuration\n",
    "com.flexibits.fantastical2.iphone.FKRUpNextWidgetConfigIntent": "com.flexibits.fantastical2.iphone.FKRUpNextWidgetConfigIntent(theme: IntentWidgetTheme(Enum) = \"mirrorSystem\", calendarSet: IntentCalendarSet(Object), includeEvents: Bool = True, includeTasks: Bool = True, showWeather: Bool = True, todayOnly: Bool)\nParameters:\n    theme:  Appearance. Fantastical Widget Theme. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"mirrorSystem\"(Mirror System), \"fantastical\"(Fantastical), \"light\"(Light), \"dark\"(Dark), \"black\"(Black).\n    calendarSet:  Calendar Set. Fantastical Calendar Set.\n    includeEvents:  Show Events.\n    includeTasks:  Show Tasks.\n    showWeather:  Show Weather.\n    todayOnly:  Show Today Only.\nDescription:\n    Up Next Widget Configuration: Configuration for the Up Next Widget\nParameterSummary: () Up Next Widget Configuration\n",
    "com.flexibits.fantastical2.iphone.FKREventListWidgetConfigIntent": "com.flexibits.fantastical2.iphone.FKREventListWidgetConfigIntent(theme: IntentWidgetTheme(Enum) = \"mirrorSystem\", calendarSet: IntentCalendarSet(Object), eventTypes: IntentShowEventType(Enum) = \"all\", taskTypes: IntentShowTaskType(Enum) = \"all\", showWeather: Bool = True, action: IntentOptionalActionType(Enum) = \"addEvent\")\nParameters:\n    theme:  Appearance. Fantastical Widget Theme. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"mirrorSystem\"(Mirror System), \"fantastical\"(Fantastical), \"light\"(Light), \"dark\"(Dark), \"black\"(Black).\n    calendarSet:  Calendar Set. Fantastical Calendar Set.\n    eventTypes:  Show Events. Intent Show Event Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"all\"(All Events), \"timed\"(Timed Events Only), \"none\"(None).\n    taskTypes:  Show Tasks. Intent Show Task Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"all\"(All Tasks), \"timed\"(Timed Tasks Only), \"none\"(None).\n    showWeather:  Show Weather.\n    action:  Quick Action. Fantastical Optional Action Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"addEvent\"(Add Event), \"addTask\"(Add Task), \"search\"(Search), \"none\"(None).\nDescription:\n    Event List Widget Configuration: Configuration for the Event List Widget\nParameterSummary: () Event List Widget Configuration\n",
    "com.flexibits.fantastical2.iphone.FKRDateCalendarWidgetConfigIntent": "com.flexibits.fantastical2.iphone.FKRDateCalendarWidgetConfigIntent(theme: IntentWidgetTheme(Enum) = \"mirrorSystem\", showEvents: Bool = True, indicatorType: IntentEventIndicatorType(Enum) = \"heatmap\", calendarSet: IntentCalendarSet(Object), showWeather: Bool = True)\nParameters:\n    theme:  Appearance. Fantastical Widget Theme. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"mirrorSystem\"(Mirror System), \"fantastical\"(Fantastical), \"light\"(Light), \"dark\"(Dark), \"black\"(Black).\n    showEvents:  Show Item Indicators.\n    indicatorType:  Indicator Style. Intent Event Indicator Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"heatmap\"(Heatmap), \"dots\"(Dots). This value depends on the value of \"showEvents\". This parameter is only valid when the value of \"showEvents\" is True.\n    calendarSet:  Calendar Set. Fantastical Calendar Set. This value depends on the value of \"showEvents\". This parameter is only valid when the value of \"showEvents\" is True.\n    showWeather:  Show Weather.\nDescription:\n    Date Calendar Widget Configuration: Configuration for the Date/Calendar Widget\nParameterSummary: () Date Calendar Widget Configuration\n",
    "com.flexibits.fantastical2.iphone.FKRCalendarWidgetConfigIntent": "com.flexibits.fantastical2.iphone.FKRCalendarWidgetConfigIntent(theme: IntentWidgetTheme(Enum) = \"mirrorSystem\", showEvents: Bool = True, indicatorType: IntentEventIndicatorType(Enum) = \"heatmap\", calendarSet: IntentCalendarSet(Object))\nParameters:\n    theme:  Appearance. Fantastical Widget Theme. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"mirrorSystem\"(Mirror System), \"fantastical\"(Fantastical), \"light\"(Light), \"dark\"(Dark), \"black\"(Black).\n    showEvents:  Show Item Indicators.\n    indicatorType:  Indicator Style. Intent Event Indicator Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"heatmap\"(Heatmap), \"dots\"(Dots). This value depends on the value of \"showEvents\". This parameter is only valid when the value of \"showEvents\" is True.\n    calendarSet:  Calendar Set. Fantastical Calendar Set. This value depends on the value of \"showEvents\". This parameter is only valid when the value of \"showEvents\" is True.\nDescription:\n    Calendar Widget Configuration: Configuration for the Calendar Widget\nParameterSummary: () Calendar Widget Configuration\n",
    "com.flexibits.fantastical2.iphone.FKREventListCalendarWidgetConfigIntent": "com.flexibits.fantastical2.iphone.FKREventListCalendarWidgetConfigIntent(theme: IntentWidgetTheme(Enum) = \"mirrorSystem\", calendarSet: IntentCalendarSet(Object), eventTypes: IntentShowEventType(Enum) = \"all\", taskTypes: IntentShowTaskType(Enum) = \"all\", showHeatmap: Bool = True, indicatorType: IntentEventIndicatorType(Enum) = \"heatmap\", showWeather: Bool = True, action: IntentOptionalActionType(Enum) = \"addEvent\")\nParameters:\n    theme:  Appearance. Fantastical Widget Theme. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"mirrorSystem\"(Mirror System), \"fantastical\"(Fantastical), \"light\"(Light), \"dark\"(Dark), \"black\"(Black).\n    calendarSet:  Calendar Set. Fantastical Calendar Set.\n    eventTypes:  Show Events. Intent Show Event Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"all\"(All Events), \"timed\"(Timed Events Only), \"none\"(None).\n    taskTypes:  Show Tasks. Intent Show Task Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"all\"(All Tasks), \"timed\"(Timed Tasks Only), \"none\"(None).\n    showHeatmap:  Show Item Indicators.\n    indicatorType:  Indicator Style. Intent Event Indicator Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"heatmap\"(Heatmap), \"dots\"(Dots). This value depends on the value of \"showHeatmap\". This parameter is only valid when the value of \"showHeatmap\" is True.\n    showWeather:  Show Weather.\n    action:  Quick Action. Fantastical Optional Action Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"addEvent\"(Add Event), \"addTask\"(Add Task), \"search\"(Search), \"none\"(None).\nDescription:\n    Event List Calendar Widget Configuration: Configuration for the Event List Calendar Widget.\nParameterSummary: () Event List Calendar Widget Configuration\n",
    "com.flexibits.fantastical2.iphone.FKREventListSmallWidgetConfigIntent": "com.flexibits.fantastical2.iphone.FKREventListSmallWidgetConfigIntent(theme: IntentWidgetTheme(Enum) = \"mirrorSystem\", calendarSet: IntentCalendarSet(Object), eventTypes: IntentShowEventType(Enum) = \"all\", taskTypes: IntentShowTaskType(Enum) = \"all\", showWeather: Bool = True)\nParameters:\n    theme:  Appearance. Fantastical Widget Theme. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"mirrorSystem\"(Mirror System), \"fantastical\"(Fantastical), \"light\"(Light), \"dark\"(Dark), \"black\"(Black).\n    calendarSet:  Calendar Set. Fantastical Calendar Set.\n    eventTypes:  Show Events. Intent Show Event Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"all\"(All Events), \"timed\"(Timed Events Only), \"none\"(None).\n    taskTypes:  Show Tasks. Intent Show Task Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"all\"(All Tasks), \"timed\"(Timed Tasks Only), \"none\"(None).\n    showWeather:  Show Weather.\nDescription:\n    Event List Small Widget Config: Configuration for the Small Event List Widget\nParameterSummary: () Event List Small Widget Config\n",
    "com.flexibits.fantastical2.iphone.FKRActionWidgetConfigIntent": "com.flexibits.fantastical2.iphone.FKRActionWidgetConfigIntent(theme: IntentWidgetTheme(Enum) = \"mirrorSystem\", action: IntentActionType(Enum) = \"addEvent\")\nParameters:\n    theme:  Appearance. Fantastical Widget Theme. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"mirrorSystem\"(Mirror System), \"fantastical\"(Fantastical), \"light\"(Light), \"dark\"(Dark), \"black\"(Black).\n    action:  Action. Fantastical Action Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"addEvent\"(Add Event), \"addTask\"(Add Task), \"search\"(Search), \"launch\"(Open Fantastical).\nDescription:\n    Action Widget Config: Configuration for the Action Widget\nParameterSummary: () Action Widget Config\n",
    "com.flexibits.fantastical2.iphone.FKRGetAttendeesFromEventIntent": "com.flexibits.fantastical2.iphone.FKRGetAttendeesFromEventIntent(calendarItem: IntentCalendarItem(Object)) -> Get Invitees from Event\n                            : array(IntentAttendee(Object))\nParameters:\n    calendarItem: Event. Fantastical Calendar Item.\nReturn Value:\n    Get Invitees from Event: \nDescription:\n    Get Invitees from Event: Retrieve the invitees from a Fantastical Event\nParameterSummary: (calendarItem) Get invitees from ${calendarItem}\n",
    "com.flexibits.fantastical2.iphone.FKRChangeCalendarViewIntent": "com.flexibits.fantastical2.iphone.FKRChangeCalendarViewIntent(view: IntentCalendarView(Enum))\nParameters:\n    view: View. Intent Calendar View. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"day\"(Day), \"week\"(Week), \"month\"(Month), \"quarter\"(Quarter), \"year\"(Year), \"tasks\"(Tasks), \"ticker\"(DayTicker), \"calendar\"(Calendar).\nDescription:\n    Change View: Switch to a different view\nParameterSummary: (view) Switch to ${view}\n",
    "com.flexibits.fantastical2.iphone.FKRUpNextLockScreenWidgetConfigIntent": "com.flexibits.fantastical2.iphone.FKRUpNextLockScreenWidgetConfigIntent(calendarSet: IntentCalendarSet(Object), eventTypes: IntentShowEventType(Enum) = \"timed\", taskTypes: IntentShowTaskType(Enum) = \"timed\")\nParameters:\n    calendarSet:  Calendar Set. Fantastical Calendar Set.\n    eventTypes:  Show Events. Intent Show Event Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"all\"(All Events), \"timed\"(Timed Events Only), \"none\"(None).\n    taskTypes:  Show Tasks. Intent Show Task Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"all\"(All Tasks), \"timed\"(Timed Tasks Only), \"none\"(None).\nDescription:\n    Up Next Lock Screen Widget Config: Configuration for the Up Next Widget on the Lock Screen\nParameterSummary: () Up Next Lock Screen Widget Config\n",
    "com.flexibits.fantastical2.iphone.FKRActionLockScreenWidgetConfigIntent": "com.flexibits.fantastical2.iphone.FKRActionLockScreenWidgetConfigIntent(action: IntentActionType(Enum) = \"addEvent\")\nParameters:\n    action:  Action. Fantastical Action Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"addEvent\"(Add Event), \"addTask\"(Add Task), \"search\"(Search), \"launch\"(Open Fantastical).\nDescription:\n    Action Lock Screen Widget Config: Configuration for the Action Widget\nParameterSummary: () Action Lock Screen Widget Config\n",
    "com.flexibits.fantastical2.iphone.FKRCalendarLockScreenWidgetConfigIntent": "com.flexibits.fantastical2.iphone.FKRCalendarLockScreenWidgetConfigIntent()\nDescription:\n    Calendar Lock Screen Widget Config: Configuration for the calendar widget\nParameterSummary: () Calendar Lock Screen Widget Config\n",
    "com.flexibits.fantastical2.iphone.FantasticalFocusFilterIntent": "com.flexibits.fantastical2.iphone.FantasticalFocusFilterIntent(selectedCalendarSets: array(CalendarSetEntity(Object)))\nParameters:\n    selectedCalendarSets: Calendar Sets.\nDescription:\n    Filter Calendar Sets: Select which calendar sets are visible when this Focus is active.\nParameterSummary: () Filter Calendar Sets\n",
    "com.omnigroup.OmniFocus3.MacAppStore.RunOmniJSIntent": "com.omnigroup.OmniFocus3.MacAppStore.RunOmniJSIntent(script: String, input: String, associatedFiles: File(Object)) -> Omni Automation Result\n                            : String\nParameters:\n    script:  Script.\n    input:  Input.\n    associatedFiles:  Associated Files.\nReturn Value:\n    Omni Automation Result: Omni Automation Result.\nDescription:\n    Omni Automation Script: Runs an Omni Automation Script\nParameterSummary: (Run a script with ${input} via Omni Automation) Run a script with ${input} via Omni Automation\n",
    "com.omnigroup.OmniFocus3.MacAppStore.RunPlugInIntent": "com.omnigroup.OmniFocus3.MacAppStore.RunPlugInIntent(pluginAction: PlugInActionIntentRef(Object))\nParameters:\n    pluginAction:  Plug-In Action. Plug-In Action.\nDescription:\n    Omni Automation Plug-In: Runs an action from an Omni Automation plug-in\nParameterSummary: (Run the ${pluginAction} Omni Automation Plug-In) Run the ${pluginAction} Omni Automation Plug-In\n",
    "com.omnigroup.OmniFocus3.MacAppStore.AddTaskIntent": "com.omnigroup.OmniFocus3.MacAppStore.AddTaskIntent(title: String, project: Project(Object), tags: Tag(Object), flagged: Bool, estimatedMinutes: Integer, deferDate: String, dueDate: String, attachments: File(Object), note: String) -> Item\n                            : Task(Object)\nParameters:\n    title:  Item.\n    project:  Project. Project.\n    tags:  Tags. Tag.\n    flagged:  Flagged.\n    estimatedMinutes:  Estimated Minutes.\n    deferDate:  Defer Date.\n    dueDate:  Due Date.\n    attachments:  Attachments.\n    note:  Note.\nReturn Value:\n    Item: Item. Item.\nDescription:\n    Add Item: Adds a new item to OmniFocus with the specified details.\nParameterSummary: (Add ${title} to ${project} ) Add ${title} to ${project} \n",
    "com.omnigroup.OmniFocus3.MacAppStore.FindTasksIntent": "com.omnigroup.OmniFocus3.MacAppStore.FindTasksIntent(projectCriteriaType: ProjectCriteriaType(Enum) = \"ignored\", project: Project(Object), tagCriteriaType: TagCriteriaType(Enum) = \"ignored\", anyOfTags: Tag(Object), allOfTags: Tag(Object), noneOfTags: Tag(Object), availabilityType: AvailabilityType(Enum) = \"remaining\", flaggedStatusType: FlaggedStatusType(Enum) = \"ignored\", terms: String, limitByDates: Bool, deferUntilLowerBound: String, deferUntilUpperBound: String, dueDateLowerBound: String, dueDateUpperBound: String, completionDateLowerBound: String, completionDateUpperBound: String, taskSortType: TaskSortType(Enum) = \"parentsLastRankPath\", limitItemsCount: Integer = 25) -> Items\n                            : Task(Object)\nParameters:\n    projectCriteriaType:  Project is. Project Criteria Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"ignored\"(Ignored), \"project\"(Project), \"inbox\"(Inbox).\n    project:  Project. Project. This value depends on the value of \"projectCriteriaType\". This parameter is only valid when the value of \"projectCriteriaType\" is \"project\".\n    tagCriteriaType:  Tags are. Tag Criteria Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"ignored\"(Ignored), \"anyOf\"(Any of), \"allOf\"(All of), \"noneOf\"(None of), \"untagged\"(Untagged).\n    anyOfTags:  Tags. Tag. This value depends on the value of \"tagCriteriaType\". This parameter is only valid when the value of \"tagCriteriaType\" is \"anyOf\".\n    allOfTags:  Tags. Tag. This value depends on the value of \"tagCriteriaType\". This parameter is only valid when the value of \"tagCriteriaType\" is \"allOf\".\n    noneOfTags:  Tags. Tag. This value depends on the value of \"tagCriteriaType\". This parameter is only valid when the value of \"tagCriteriaType\" is \"noneOf\".\n    availabilityType:  Availability is. Availability Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"firstAvailable\"(First Available), \"available\"(Available), \"remaining\"(Remaining), \"dropped\"(Dropped), \"completed\"(Completed).\n    flaggedStatusType:  Flagged is. Flagged Status Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"ignored\"(Ignored), \"flagged\"(Flagged), \"unflagged\"(Unflagged).\n    terms:  Matches search terms.\n    limitByDates:  Filter By Dates.\n    deferUntilLowerBound:  Defer Date is on or after. This value depends on the value of \"limitByDates\". This parameter is only valid when the value of \"limitByDates\" is True.\n    deferUntilUpperBound:  Defer Date is before. This value depends on the value of \"limitByDates\". This parameter is only valid when the value of \"limitByDates\" is True.\n    dueDateLowerBound:  Due Date is on or after. This value depends on the value of \"limitByDates\". This parameter is only valid when the value of \"limitByDates\" is True.\n    dueDateUpperBound:  Due Date is before. This value depends on the value of \"limitByDates\". This parameter is only valid when the value of \"limitByDates\" is True.\n    completionDateLowerBound:  Completed on or after. This value depends on the value of \"limitByDates\". This parameter is only valid when the value of \"limitByDates\" is True.\n    completionDateUpperBound:  Completed before. This value depends on the value of \"limitByDates\". This parameter is only valid when the value of \"limitByDates\" is True.\n    taskSortType:  Sort by. Task Sort Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"parentsLastRankPath\"(Projects Order), \"added\"(Added), \"due\"(Due), \"deferDate\"(Defer Date), \"completed\"(Completed).\n    limitItemsCount:  Limit.\nReturn Value:\n    Items: Items. Item.\nDescription:\n    Find Items: Searches for the items in your OmniFocus database that match the given criteria.\nParameterSummary: (Find ${availabilityType} Items with Dates) Find ${availabilityType} Items with Dates; (Find ${availabilityType} Items) Find ${availabilityType} Items; (Find ${availabilityType} Items with Dates) Find ${availabilityType} Items with Dates; (Find ${availabilityType} Items) Find ${availabilityType} Items; (Find ${availabilityType} Items with Dates) Find ${availabilityType} Items with Dates; (Find ${availabilityType} Items) Find ${availabilityType} Items; (Find ${availabilityType} Items with Dates) Find ${availabilityType} Items with Dates; (Find ${availabilityType} Items) Find ${availabilityType} Items; (Find ${availabilityType} Items with Dates) Find ${availabilityType} Items with Dates; (Find ${availabilityType} Items) Find ${availabilityType} Items; (Find ${availabilityType} Items with Dates) Find ${availabilityType} Items with Dates; (Find ${availabilityType} Items) Find ${availabilityType} Items; (Find ${availabilityType} Items with Dates) Find ${availabilityType} Items with Dates; (Find ${availabilityType} Items) Find ${availabilityType} Items; (Find ${availabilityType} Items with Dates) Find ${availabilityType} Items with Dates; (Find ${availabilityType} Items) Find ${availabilityType} Items\n",
    "com.omnigroup.OmniFocus3.MacAppStore.GetDatabaseObjectFromInputIntent": "com.omnigroup.OmniFocus3.MacAppStore.GetDatabaseObjectFromInputIntent(input: String = \"{ \"type\": \"project\", \"primaryKey\": \"pwanCgZeLXG\", \"version\": 1.0}\") -> Database Object Result\n                            : DatabaseObjectResult(Object)\nParameters:\n    input:  Input.\nReturn Value:\n    Database Object Result: Database Object Result. Database Object Result.\nDescription:\n    Get Database Object Result from Input: Returns a “Database Object Result“ containing one of “Item”, “Project”, “Folder”, “Tag”, or “Perspective”, depending on the input. These objects can be used in the pickers found in other OmniFocus shortcut actions. Accepts JSON-formatted text passed in as input. The JSON attributes are “type” (with values “task”, “project”, “folder”, “tag”, or “perspective”) and “primaryKey”. You may recognize these attributes from their use in omnifocus:// URLs.\nParameterSummary: (Process ${input} into a Database Object Result) Process ${input} into a Database Object Result\n",
    "com.omnigroup.OmniFocus3.MacAppStore.ShowFromChoiceIntent": "com.omnigroup.OmniFocus3.MacAppStore.ShowFromChoiceIntent(chooseFromListType: ChooseFromListType(Enum), project: Project(Object), folder: Folder(Object), tag: Tag(Object), perspective: Perspective(Object), task: Task(Object))\nParameters:\n    chooseFromListType:  Type. Choose From List Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"project\"(Project), \"folder\"(Folder), \"tag\"(Tag), \"perspective\"(Perspective), \"task\"(Item).\n    project:  Project. Project. This value depends on the value of \"chooseFromListType\". This parameter is only valid when the value of \"chooseFromListType\" is \"project\".\n    folder:  Folder. Folder. This value depends on the value of \"chooseFromListType\". This parameter is only valid when the value of \"chooseFromListType\" is \"folder\".\n    tag:  Tag. Tag. This value depends on the value of \"chooseFromListType\". This parameter is only valid when the value of \"chooseFromListType\" is \"tag\".\n    perspective:  Perspective. Perspective. This value depends on the value of \"chooseFromListType\". This parameter is only valid when the value of \"chooseFromListType\" is \"perspective\".\n    task:  Item. Item. This value depends on the value of \"chooseFromListType\". This parameter is only valid when the value of \"chooseFromListType\" is \"task\".\nDescription:\n    Show in OmniFocus: Shows a project, folder, tag, or perspective chosen from a list, or an item passed from the previous action. The latter is useful in combination with the Find Items action.\nParameterSummary: (Show ${chooseFromListType} in OmniFocus) Show ${chooseFromListType} in OmniFocus; (Show ${chooseFromListType} ${folder} in OmniFocus) Show ${chooseFromListType} ${folder} in OmniFocus; (Show ${chooseFromListType} ${perspective} in OmniFocus) Show ${chooseFromListType} ${perspective} in OmniFocus; (Show ${chooseFromListType} ${project} in OmniFocus) Show ${chooseFromListType} ${project} in OmniFocus; (Show ${chooseFromListType} ${tag} in OmniFocus) Show ${chooseFromListType} ${tag} in OmniFocus; (Show ${chooseFromListType} ${task} in OmniFocus) Show ${chooseFromListType} ${task} in OmniFocus\n",
    "com.omnigroup.OmniFocus3.MacAppStore.AddTaskPaperIntent": "com.omnigroup.OmniFocus3.MacAppStore.AddTaskPaperIntent(taskPaperInput: String, targetType: TaskPaperTargetType(Enum) = \"inbox\", targetFolder: String, targetProject: String, targetTask: String) -> Items\n                            : Task(Object)\nParameters:\n    taskPaperInput:  TaskPaper.\n    targetType:  target. TaskPaper Target Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"inbox\"(Inbox), \"projects\"(Projects), \"folder\"(Folder), \"project\"(Project), \"task\"(Task).\n    targetFolder:  Name. This value depends on the value of \"targetType\". This parameter is only valid when the value of \"targetType\" is \"folder\".\n    targetProject:  Name. This value depends on the value of \"targetType\". This parameter is only valid when the value of \"targetType\" is \"project\".\n    targetTask:  Identifier. This value depends on the value of \"targetType\". This parameter is only valid when the value of \"targetType\" is \"task\".\nReturn Value:\n    Items: Items. Item.\nDescription:\n    Add TaskPaper: Adds the TaskPaper passed as input into OmniFocus.\nParameterSummary: (Add ${taskPaperInput} to ${targetType} ${targetTask}) Add ${taskPaperInput} to ${targetType} ${targetTask}; (Add ${taskPaperInput} to ${targetType}) Add ${taskPaperInput} to ${targetType}; (Add ${taskPaperInput} to ${targetType} ${targetFolder}) Add ${taskPaperInput} to ${targetType} ${targetFolder}; (Add ${taskPaperInput} to ${targetType} ${targetProject}) Add ${taskPaperInput} to ${targetType} ${targetProject}\n",
    "com.omnigroup.OmniFocus3.MacAppStore.TodaysForecastIntent": "com.omnigroup.OmniFocus3.MacAppStore.TodaysForecastIntent(sections: ForecastSection(Object)) -> Items\n                            : Task(Object)\nParameters:\n    sections:  Sections. Forecast Section.\nReturn Value:\n    Items: Items. Item.\nDescription:\n    Today's Forecast: Gets items for today from your OmniFocus Forecast, including tagged and deferred items if those options are selected in Forecast View Options. Items added via extensions won’t be returned by shortcuts unless OmniFocus has been opened in the meantime.\nParameterSummary: (Today's Forecast) Today's Forecast\n",
    "com.omnigroup.OmniFocus3.MacAppStore.FindTagsIntent": "com.omnigroup.OmniFocus3.MacAppStore.FindTagsIntent(title: String) -> Tags\n                            : Tag(Object)\nParameters:\n    title:  anything.\nReturn Value:\n    Tags: Tags. Tag.\nDescription:\n    Find Tags: Searches for the tags in your OmniFocus database that match the given criteria.\nParameterSummary: (Find Tags where title contains ${title}) Find Tags where title contains ${title}\n",
    "com.omnigroup.OmniFocus3.MacAppStore.FindProjectsIntent": "com.omnigroup.OmniFocus3.MacAppStore.FindProjectsIntent(title: String, folders: Folder(Object)) -> Projects\n                            : Project(Object)\nParameters:\n    title:  anything.\n    folders:  Contained within folder. Folder.\nReturn Value:\n    Projects: Projects. Project.\nDescription:\n    Find Projects: Searches for the projects in your OmniFocus database that match the given criteria.\nParameterSummary: (Find Projects where title contains ${title}) Find Projects where title contains ${title}\n",
    "com.omnigroup.OmniFocus3.MacAppStore.SelectPerspectiveIntent": "com.omnigroup.OmniFocus3.MacAppStore.SelectPerspectiveIntent(perspective: Perspective(Object), fontSize: Integer = 14, linesPerItem: Integer = 1, hideQuickEntry: Bool) -> Perspective\n                            : Perspective(Object)\nParameters:\n    perspective:  Perspective. Perspective.\n    fontSize:  Font Size.\n    linesPerItem:  Lines Per Item.\n    hideQuickEntry:  Hide Quick Entry.\nReturn Value:\n    Perspective: Perspective. Perspective.\nDescription:\n    Select Perspective: Pick a perspective and passes the selection to the next action.\nParameterSummary: () Select Perspective\n",
    "com.omnigroup.OmniFocus3.MacAppStore.ConfigureForecastWidgetIntent": "com.omnigroup.OmniFocus3.MacAppStore.ConfigureForecastWidgetIntent(hideQuickEntry: Bool, showTaskTitles: Bool = True, fontSize: Integer = 14, linesPerItem: Integer = 1)\nParameters:\n    hideQuickEntry:  Hide Quick Entry.\n    showTaskTitles:  Show Task Titles.\n    fontSize:  Font Size. This value depends on the value of \"showTaskTitles\". This parameter is only valid when \"showTaskTitles has any value.\n    linesPerItem:  Lines Per Item. This value depends on the value of \"showTaskTitles\". This parameter is only valid when \"showTaskTitles has any value.\nDescription:\n    Configure Forecast Widget: Pick from several configuration choices to control a Forecast widget's display.\nParameterSummary: () Configure Forecast Widget\n",
    "com.omnigroup.OmniFocus3.MacAppStore.SelectPerspectiveLockScreenIntent": "com.omnigroup.OmniFocus3.MacAppStore.SelectPerspectiveLockScreenIntent(perspective: Perspective(Object))\nParameters:\n    perspective:  Perspective. Perspective.\nDescription:\n    Select Perspective: Pick a perspective and passes the selection to the next action.\nParameterSummary: () Select Perspective\n",
    "com.omnigroup.OmniFocus3.iOS.RunOmniJSIntent": "com.omnigroup.OmniFocus3.iOS.RunOmniJSIntent(script: String, input: String, associatedFiles: File(Object)) -> Omni Automation Result\n                            : String\nParameters:\n    script:  Script.\n    input:  Input.\n    associatedFiles:  Associated Files.\nReturn Value:\n    Omni Automation Result: Omni Automation Result.\nDescription:\n    Omni Automation Script: Runs an Omni Automation Script\nParameterSummary: (Run a script with ${input} via Omni Automation) Run a script with ${input} via Omni Automation\n",
    "com.omnigroup.OmniFocus3.iOS.RunPlugInIntent": "com.omnigroup.OmniFocus3.iOS.RunPlugInIntent(pluginAction: PlugInActionIntentRef(Object))\nParameters:\n    pluginAction:  Plug-In Action. Plug-In Action.\nDescription:\n    Omni Automation Plug-In: Runs an action from an Omni Automation plug-in\nParameterSummary: (Run the ${pluginAction} Omni Automation Plug-In) Run the ${pluginAction} Omni Automation Plug-In\n",
    "com.omnigroup.OmniFocus3.iOS.AddTaskIntent": "com.omnigroup.OmniFocus3.iOS.AddTaskIntent(title: String, project: Project(Object), tags: Tag(Object), flagged: Bool, estimatedMinutes: Integer, deferDate: String, dueDate: String, attachments: File(Object), note: String) -> Item\n                            : Task(Object)\nParameters:\n    title:  Item.\n    project:  Project. Project.\n    tags:  Tags. Tag.\n    flagged:  Flagged.\n    estimatedMinutes:  Estimated Minutes.\n    deferDate:  Defer Date.\n    dueDate:  Due Date.\n    attachments:  Attachments.\n    note:  Note.\nReturn Value:\n    Item: Item. Item.\nDescription:\n    Add Item: Adds a new item to OmniFocus with the specified details.\nParameterSummary: (Add ${title} to ${project} ) Add ${title} to ${project} \n",
    "com.omnigroup.OmniFocus3.iOS.FindTasksIntent": "com.omnigroup.OmniFocus3.iOS.FindTasksIntent(projectCriteriaType: ProjectCriteriaType(Enum) = \"ignored\", project: Project(Object), tagCriteriaType: TagCriteriaType(Enum) = \"ignored\", anyOfTags: Tag(Object), allOfTags: Tag(Object), noneOfTags: Tag(Object), availabilityType: AvailabilityType(Enum) = \"remaining\", flaggedStatusType: FlaggedStatusType(Enum) = \"ignored\", terms: String, limitByDates: Bool, deferUntilLowerBound: String, deferUntilUpperBound: String, dueDateLowerBound: String, dueDateUpperBound: String, completionDateLowerBound: String, completionDateUpperBound: String, taskSortType: TaskSortType(Enum) = \"parentsLastRankPath\", limitItemsCount: Integer = 25) -> Items\n                            : Task(Object)\nParameters:\n    projectCriteriaType:  Project is. Project Criteria Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"ignored\"(Ignored), \"project\"(Project), \"inbox\"(Inbox).\n    project:  Project. Project. This value depends on the value of \"projectCriteriaType\". This parameter is only valid when the value of \"projectCriteriaType\" is \"project\".\n    tagCriteriaType:  Tags are. Tag Criteria Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"ignored\"(Ignored), \"anyOf\"(Any of), \"allOf\"(All of), \"noneOf\"(None of), \"untagged\"(Untagged).\n    anyOfTags:  Tags. Tag. This value depends on the value of \"tagCriteriaType\". This parameter is only valid when the value of \"tagCriteriaType\" is \"anyOf\".\n    allOfTags:  Tags. Tag. This value depends on the value of \"tagCriteriaType\". This parameter is only valid when the value of \"tagCriteriaType\" is \"allOf\".\n    noneOfTags:  Tags. Tag. This value depends on the value of \"tagCriteriaType\". This parameter is only valid when the value of \"tagCriteriaType\" is \"noneOf\".\n    availabilityType:  Availability is. Availability Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"firstAvailable\"(First Available), \"available\"(Available), \"remaining\"(Remaining), \"dropped\"(Dropped), \"completed\"(Completed).\n    flaggedStatusType:  Flagged is. Flagged Status Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"ignored\"(Ignored), \"flagged\"(Flagged), \"unflagged\"(Unflagged).\n    terms:  Matches search terms.\n    limitByDates:  Filter By Dates.\n    deferUntilLowerBound:  Defer Date is on or after. This value depends on the value of \"limitByDates\". This parameter is only valid when the value of \"limitByDates\" is True.\n    deferUntilUpperBound:  Defer Date is before. This value depends on the value of \"limitByDates\". This parameter is only valid when the value of \"limitByDates\" is True.\n    dueDateLowerBound:  Due Date is on or after. This value depends on the value of \"limitByDates\". This parameter is only valid when the value of \"limitByDates\" is True.\n    dueDateUpperBound:  Due Date is before. This value depends on the value of \"limitByDates\". This parameter is only valid when the value of \"limitByDates\" is True.\n    completionDateLowerBound:  Completed on or after. This value depends on the value of \"limitByDates\". This parameter is only valid when the value of \"limitByDates\" is True.\n    completionDateUpperBound:  Completed before. This value depends on the value of \"limitByDates\". This parameter is only valid when the value of \"limitByDates\" is True.\n    taskSortType:  Sort by. Task Sort Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"parentsLastRankPath\"(Projects Order), \"added\"(Added), \"due\"(Due), \"deferDate\"(Defer Date), \"completed\"(Completed).\n    limitItemsCount:  Limit.\nReturn Value:\n    Items: Items. Item.\nDescription:\n    Find Items: Searches for the items in your OmniFocus database that match the given criteria.\nParameterSummary: (Find ${availabilityType} Items with Dates) Find ${availabilityType} Items with Dates; (Find ${availabilityType} Items) Find ${availabilityType} Items; (Find ${availabilityType} Items with Dates) Find ${availabilityType} Items with Dates; (Find ${availabilityType} Items) Find ${availabilityType} Items; (Find ${availabilityType} Items with Dates) Find ${availabilityType} Items with Dates; (Find ${availabilityType} Items) Find ${availabilityType} Items; (Find ${availabilityType} Items with Dates) Find ${availabilityType} Items with Dates; (Find ${availabilityType} Items) Find ${availabilityType} Items; (Find ${availabilityType} Items with Dates) Find ${availabilityType} Items with Dates; (Find ${availabilityType} Items) Find ${availabilityType} Items; (Find ${availabilityType} Items with Dates) Find ${availabilityType} Items with Dates; (Find ${availabilityType} Items) Find ${availabilityType} Items; (Find ${availabilityType} Items with Dates) Find ${availabilityType} Items with Dates; (Find ${availabilityType} Items) Find ${availabilityType} Items; (Find ${availabilityType} Items with Dates) Find ${availabilityType} Items with Dates; (Find ${availabilityType} Items) Find ${availabilityType} Items\n",
    "com.omnigroup.OmniFocus3.iOS.GetDatabaseObjectFromInputIntent": "com.omnigroup.OmniFocus3.iOS.GetDatabaseObjectFromInputIntent(input: String = \"{ \"type\": \"project\", \"primaryKey\": \"pwanCgZeLXG\", \"version\": 1.0}\") -> Database Object Result\n                            : DatabaseObjectResult(Object)\nParameters:\n    input:  Input.\nReturn Value:\n    Database Object Result: Database Object Result. Database Object Result.\nDescription:\n    Get Database Object Result from Input: Returns a “Database Object Result“ containing one of “Item”, “Project”, “Folder”, “Tag”, or “Perspective”, depending on the input. These objects can be used in the pickers found in other OmniFocus shortcut actions. Accepts JSON-formatted text passed in as input. The JSON attributes are “type” (with values “task”, “project”, “folder”, “tag”, or “perspective”) and “primaryKey”. You may recognize these attributes from their use in omnifocus:// URLs.\nParameterSummary: (Process ${input} into a Database Object Result) Process ${input} into a Database Object Result\n",
    "com.omnigroup.OmniFocus3.iOS.ShowFromChoiceIntent": "com.omnigroup.OmniFocus3.iOS.ShowFromChoiceIntent(chooseFromListType: ChooseFromListType(Enum), project: Project(Object), folder: Folder(Object), tag: Tag(Object), perspective: Perspective(Object), task: Task(Object))\nParameters:\n    chooseFromListType:  Type. Choose From List Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"project\"(Project), \"folder\"(Folder), \"tag\"(Tag), \"perspective\"(Perspective), \"task\"(Item).\n    project:  Project. Project. This value depends on the value of \"chooseFromListType\". This parameter is only valid when the value of \"chooseFromListType\" is \"project\".\n    folder:  Folder. Folder. This value depends on the value of \"chooseFromListType\". This parameter is only valid when the value of \"chooseFromListType\" is \"folder\".\n    tag:  Tag. Tag. This value depends on the value of \"chooseFromListType\". This parameter is only valid when the value of \"chooseFromListType\" is \"tag\".\n    perspective:  Perspective. Perspective. This value depends on the value of \"chooseFromListType\". This parameter is only valid when the value of \"chooseFromListType\" is \"perspective\".\n    task:  Item. Item. This value depends on the value of \"chooseFromListType\". This parameter is only valid when the value of \"chooseFromListType\" is \"task\".\nDescription:\n    Show in OmniFocus: Shows a project, folder, tag, or perspective chosen from a list, or an item passed from the previous action. The latter is useful in combination with the Find Items action.\nParameterSummary: (Show ${chooseFromListType} in OmniFocus) Show ${chooseFromListType} in OmniFocus; (Show ${chooseFromListType} ${folder} in OmniFocus) Show ${chooseFromListType} ${folder} in OmniFocus; (Show ${chooseFromListType} ${perspective} in OmniFocus) Show ${chooseFromListType} ${perspective} in OmniFocus; (Show ${chooseFromListType} ${project} in OmniFocus) Show ${chooseFromListType} ${project} in OmniFocus; (Show ${chooseFromListType} ${tag} in OmniFocus) Show ${chooseFromListType} ${tag} in OmniFocus; (Show ${chooseFromListType} ${task} in OmniFocus) Show ${chooseFromListType} ${task} in OmniFocus\n",
    "com.omnigroup.OmniFocus3.iOS.AddTaskPaperIntent": "com.omnigroup.OmniFocus3.iOS.AddTaskPaperIntent(taskPaperInput: String, targetType: TaskPaperTargetType(Enum) = \"inbox\", targetFolder: String, targetProject: String, targetTask: String) -> Items\n                            : Task(Object)\nParameters:\n    taskPaperInput:  TaskPaper.\n    targetType:  target. TaskPaper Target Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"inbox\"(Inbox), \"projects\"(Projects), \"folder\"(Folder), \"project\"(Project), \"task\"(Task).\n    targetFolder:  Name. This value depends on the value of \"targetType\". This parameter is only valid when the value of \"targetType\" is \"folder\".\n    targetProject:  Name. This value depends on the value of \"targetType\". This parameter is only valid when the value of \"targetType\" is \"project\".\n    targetTask:  Identifier. This value depends on the value of \"targetType\". This parameter is only valid when the value of \"targetType\" is \"task\".\nReturn Value:\n    Items: Items. Item.\nDescription:\n    Add TaskPaper: Adds the TaskPaper passed as input into OmniFocus.\nParameterSummary: (Add ${taskPaperInput} to ${targetType} ${targetTask}) Add ${taskPaperInput} to ${targetType} ${targetTask}; (Add ${taskPaperInput} to ${targetType}) Add ${taskPaperInput} to ${targetType}; (Add ${taskPaperInput} to ${targetType} ${targetFolder}) Add ${taskPaperInput} to ${targetType} ${targetFolder}; (Add ${taskPaperInput} to ${targetType} ${targetProject}) Add ${taskPaperInput} to ${targetType} ${targetProject}\n",
    "com.omnigroup.OmniFocus3.iOS.TodaysForecastIntent": "com.omnigroup.OmniFocus3.iOS.TodaysForecastIntent(sections: ForecastSection(Object)) -> Items\n                            : Task(Object)\nParameters:\n    sections:  Sections. Forecast Section.\nReturn Value:\n    Items: Items. Item.\nDescription:\n    Today's Forecast: Gets items for today from your OmniFocus Forecast, including tagged and deferred items if those options are selected in Forecast View Options. Items added via extensions won’t be returned by shortcuts unless OmniFocus has been opened in the meantime.\nParameterSummary: (Today's Forecast) Today's Forecast\n",
    "com.omnigroup.OmniFocus3.iOS.FindTagsIntent": "com.omnigroup.OmniFocus3.iOS.FindTagsIntent(title: String) -> Tags\n                            : Tag(Object)\nParameters:\n    title:  anything.\nReturn Value:\n    Tags: Tags. Tag.\nDescription:\n    Find Tags: Searches for the tags in your OmniFocus database that match the given criteria.\nParameterSummary: (Find Tags where title contains ${title}) Find Tags where title contains ${title}\n",
    "com.omnigroup.OmniFocus3.iOS.FindProjectsIntent": "com.omnigroup.OmniFocus3.iOS.FindProjectsIntent(title: String, folders: Folder(Object)) -> Projects\n                            : Project(Object)\nParameters:\n    title:  anything.\n    folders:  Contained within folder. Folder.\nReturn Value:\n    Projects: Projects. Project.\nDescription:\n    Find Projects: Searches for the projects in your OmniFocus database that match the given criteria.\nParameterSummary: (Find Projects where title contains ${title}) Find Projects where title contains ${title}\n",
    "com.omnigroup.OmniFocus3.iOS.SelectPerspectiveIntent": "com.omnigroup.OmniFocus3.iOS.SelectPerspectiveIntent(perspective: Perspective(Object), fontSize: Integer = 14, linesPerItem: Integer = 2, hideQuickEntry: Bool) -> Perspective\n                            : Perspective(Object)\nParameters:\n    perspective:  Perspective. Perspective.\n    fontSize:  Font Size.\n    linesPerItem:  Lines Per Item.\n    hideQuickEntry:  Hide Quick Entry.\nReturn Value:\n    Perspective: Perspective. Perspective.\nDescription:\n    Select Perspective: Pick a perspective and passes the selection to the next action.\nParameterSummary: () Select Perspective\n",
    "com.omnigroup.OmniFocus3.iOS.ConfigureForecastWidgetIntent": "com.omnigroup.OmniFocus3.iOS.ConfigureForecastWidgetIntent(fontSize: Integer = 14, linesPerItem: Integer = 2, hideQuickEntry: Bool)\nParameters:\n    fontSize:  Font Size.\n    linesPerItem:  Lines Per Item.\n    hideQuickEntry:  Hide Quick Entry.\nDescription:\n    Configure Forecast Widget: Pick from several configuration choices to control a Forecast widget's display.\nParameterSummary: () Configure Forecast Widget\n",
    "codes.rambo.AirBuddyHelper.GetDeviceStatusIntent": "codes.rambo.AirBuddyHelper.GetDeviceStatusIntent(device: IntentDevice(Object), failureMode: IntentFailureMode(Enum)) -> Device\n                            : IntentDeviceStatus(Object)\nParameters:\n    device:  Device. Device.\n    failureMode:  If Device Can't be Found. Failure Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"doNothing\"(Do Nothing), \"fail\"(Fail).\nReturn Value:\n    Device: Device. Device Status.\nDescription:\n    Get Device State: Get the current state for one of your devices. You can use AirBuddy's other actions to extract specific data such as battery level and more.\nParameterSummary: (Get ${device}) Get ${device}\n",
    "codes.rambo.AirBuddyHelper.GetDeviceBatteryIntent": "codes.rambo.AirBuddyHelper.GetDeviceBatteryIntent(device: IntentDeviceStatus(Object), battery: IntentBatteryPosition(Enum) = \"main\") -> Battery\n                            : IntentBattery(Object)\nParameters:\n    device:  Device. Device Status.\n    battery:  Battery. Battery Position. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"leftBud\"(Left Bud), \"rightBud\"(Right Bud), \"chargingCase\"(Charging Case), \"main\"(Main).\nReturn Value:\n    Battery: Battery. Battery.\nDescription:\n    Get Device Battery Information: Gets information about a device's battery.\nParameterSummary: (Get ${device} ${battery} battery) Get ${device} ${battery} battery\n",
    "codes.rambo.AirBuddyHelper.GetHeadsetStateDetailsIntent": "codes.rambo.AirBuddyHelper.GetHeadsetStateDetailsIntent(device: IntentDeviceStatus(Object), property: IntentHeadsetStateProperty(Enum) = \"anyBudInEar\") -> Result\n                            : Bool\nParameters:\n    device:  Device. Device Status.\n    property:  Headset State Property. Headset State Property. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"leftBudInEar\"(left bud in ear), \"rightBudInEar\"(right bud in ear), \"leftBudInChargingCase\"(left bud in charging case), \"rightBudInChargingCase\"(right bud in charging case), \"chargingCaseLidClosed\"(charging case lid closed), \"onHead\"(on head), \"inSmartCase\"(in smart case), \"anyBudInEar\"(any bud in ear), \"anyBudInChargingCase\"(any bud in charging case).\nReturn Value:\n    Result: Result.\nDescription:\n    Get Device Headset State Details: Extract specific details from a device's headset state such as which buds are currently in-ear.\nParameterSummary: (Get ${property} from ${device}) Get ${property} from ${device}\n",
    "codes.rambo.AirBuddyHelper.ConnectHeadsetIntent": "codes.rambo.AirBuddyHelper.ConnectHeadsetIntent(headset: IntentDevice(Object), listeningMode: IntentHeadsetListeningMode(Enum), micMode: IntentHeadsetMicState(Enum)) -> Headset\n                            : IntentDeviceStatus(Object)\nParameters:\n    headset:  Headset. Device.\n    listeningMode:  Listening Mode. Headset Listening Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"off\"(off), \"noiseCancellation\"(noise cancellation), \"transparency\"(transparency). This value depends on the value of \"headset\". This parameter is only valid when \"headset has any value.\n    micMode:  Microphone Input. Headset Mic State. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"enabled\"(enabled), \"disabled\"(disabled). This value depends on the value of \"headset\". This parameter is only valid when \"headset has any value.\nReturn Value:\n    Headset: Headset. Device Status.\nDescription:\n    Connect Headset: Connects a nearby headset to this Mac.\nParameterSummary: (Connect to ${headset}) Connect to ${headset}; (Connect to ${headset} with listening mode ${listeningMode} and microphone ${micMode}) Connect to ${headset} with listening mode ${listeningMode} and microphone ${micMode}\n",
    "codes.rambo.AirBuddyHelper.DisconnectHeadsetIntent": "codes.rambo.AirBuddyHelper.DisconnectHeadsetIntent(target: IntentDisconnectTarget(Enum), headset: IntentDevice(Object), failureMode: IntentFailureMode(Enum)) -> Headset\n                            : IntentDevice(Object)\nParameters:\n    target:  Target. Disconnect Target. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"specific\"(Specific Headset), \"currentlyConnected\"(Currently Connected Headset).\n    headset:  Headset. Device. This value depends on the value of \"target\". This parameter is only valid when the value of \"target\" is \"specific\".\n    failureMode:  If Device Can't be Found. Failure Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"doNothing\"(Do Nothing), \"fail\"(Fail).\nReturn Value:\n    Headset: Headset. Device.\nDescription:\n    Disconnect Headset: Disconnects a headset from the Mac.\nParameterSummary: (Disconnect from the currently connected headset) Disconnect from the currently connected headset; (Disconnect from ${headset}) Disconnect from ${headset}\n",
    "codes.rambo.AirBuddyHelper.GetDevicesListIntent": "codes.rambo.AirBuddyHelper.GetDevicesListIntent(deviceKind: IntentDeviceKind(Enum), connectionState: IntentConnectionFilter(Enum), nearbyState: IntentNearbyFilter(Enum)) -> Devices\n                            : IntentDevice(Object)\nParameters:\n    deviceKind:  Device Kind. Device Kind. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"headset\"(headset), \"mobile\"(mobile), \"accessory\"(accessory), \"mac\"(mac).\n    connectionState:  Connection State. Connection Filter. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"notConnected\"(not connected), \"connected\"(connected).\n    nearbyState:  Nearby State. Nearby Filter. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"all\"(all), \"nearby\"(nearby).\nReturn Value:\n    Devices: Devices. Device.\nDescription:\n    Get Devices List: Gets a list of your devices from AirBuddy.\nParameterSummary: (Get list of ${nearbyState} ${deviceKind} devices with connection state ${connectionState}) Get list of ${nearbyState} ${deviceKind} devices with connection state ${connectionState}\n",
    "codes.rambo.AirBuddyHelper.DevicesWidgetConfigurationIntent": "codes.rambo.AirBuddyHelper.DevicesWidgetConfigurationIntent(devices: IntentDevice(Object), style: IntentWidgetStyle(Object))\nParameters:\n    devices:  Devices. Device.\n    style:  Theme. Widget Theme.\nDescription:\n    Devices Widget Configuration\nParameterSummary: () Devices Widget Configuration\n",
    "codes.rambo.AirBuddyHelper.GetFirmwareVersionIntent": "codes.rambo.AirBuddyHelper.GetFirmwareVersionIntent(device: IntentDevice(Object), failureMode: IntentFailureMode(Enum)) -> Device Model\n                            : IntentDeviceModel(Object)\nParameters:\n    device:  Device. Device.\n    failureMode:  If Firmware Version Can't be Found. Failure Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"doNothing\"(Do Nothing), \"fail\"(Fail).\nReturn Value:\n    Device Model: Device Model. Device Model.\nDescription:\n    Get Device Firmware Version: Returns the firmware version for one of your headsets. Only some Apple and Beats devices are supported.\nParameterSummary: (Get ${device} firmware version) Get ${device} firmware version\n",
    "codes.rambo.AirBuddyHelper.GetLatestFirmwareVersionIntent": "codes.rambo.AirBuddyHelper.GetLatestFirmwareVersionIntent(model: IntentDeviceModel(Object)) -> Device Model\n                            : IntentDeviceModel(Object)\nParameters:\n    model:  Device Model. Device Model.\nReturn Value:\n    Device Model: Device Model. Device Model.\nDescription:\n    Get Latest Firmware Version: Returns the latest firmware version that's available for a given headset model. Only some Apple and Beats devices are supported.\nParameterSummary: (Get latest ${model} firmware version) Get latest ${model} firmware version\n",
    "codes.rambo.AirBuddyHelper.SetSpatialAudioModeIntent": "codes.rambo.AirBuddyHelper.SetSpatialAudioModeIntent(spatialAudioEnabled: Bool, spatialAudioMode: IntentSpatialAudioMode(Enum) = \"fixed\", spatializeStereoEnabled: Bool)\nParameters:\n    spatialAudioEnabled:  State.\n    spatialAudioMode:  Spatial Audio Mode. Spatial Audio Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"fixed\"(Fixed), \"headTracked\"(Head Tracked). This value depends on the value of \"spatialAudioEnabled\". This parameter is only valid when the value of \"spatialAudioEnabled\" is True.\n    spatializeStereoEnabled:  State. This value depends on the value of \"spatialAudioEnabled\". This parameter is only valid when the value of \"spatialAudioEnabled\" is True.\nDescription:\n    Set Spatial Audio Mode: Allows you to configure Spatial Audio modes for the currently connected headset.\nParameterSummary: (Set Spatial Audio to ${spatialAudioEnabled} with mode ${spatialAudioMode} and spatialize stereo ${spatializeStereoEnabled}) Set Spatial Audio to ${spatialAudioEnabled} with mode ${spatialAudioMode} and spatialize stereo ${spatializeStereoEnabled}\n",
    "codes.rambo.AirBuddyHelper.GetSpatialAudioModeIntent": "codes.rambo.AirBuddyHelper.GetSpatialAudioModeIntent() -> State\n                            : IntentSpatialAudioState(Object)\nReturn Value:\n    State: State. Spatial Audio State.\nDescription:\n    Get Spatial Audio State: Outputs information about the current state of Spatial Audio, including its availability, codec, and head tracking mode.\nParameterSummary: (Get Spatial Audio Mode) Get Spatial Audio Mode\n",
    "codes.rambo.AirBuddyHelper.AirPodsWidgetConfigurationIntent": "codes.rambo.AirBuddyHelper.AirPodsWidgetConfigurationIntent(automatic: Bool = True, device: IntentDevice(Object), action: IntentDeviceAction(Object), style: IntentWidgetStyle(Object))\nParameters:\n    automatic:  Select Device Automatically.\n    device:  Device. Device. This value depends on the value of \"automatic\". This parameter is only valid when the value of \"automatic\" is False.\n    action:  Action When Clicked. Device Action.\n    style:  Theme. Widget Theme.\nDescription:\n    AirPods Widget Configuration\nParameterSummary: () AirPods Widget Configuration\n",
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleZoomIntent": "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleZoomIntent(operation: Operation(Enum) = \"turn\", state: State(Enum) = \"on\")\nParameters:\n    operation:  Operation. Operation. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"turn\"(Turn), \"toggle\"(Toggle).\n    state:  State. State. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"on\"(On), \"off\"(Off). This value depends on the value of \"operation\". This parameter is only valid when the value of \"operation\" is \"turn\".\nDescription:\n    Set Zoom: Zoom magnifies the entire screen. Zoom can also be enabled under Accessibility in Settings.\nParameterSummary: (${operation} Zoom) ${operation} Zoom; (${operation} Zoom ${state}) ${operation} Zoom ${state}\n",
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleVoiceOverIntent": "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleVoiceOverIntent(operation: Operation(Enum) = \"turn\", state: State(Enum) = \"on\")\nParameters:\n    operation:  Operation. Operation. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"turn\"(Turn), \"toggle\"(Toggle).\n    state:  State. State. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"on\"(On), \"off\"(Off). This value depends on the value of \"operation\". This parameter is only valid when the value of \"operation\" is \"turn\".\nDescription:\n    Set VoiceOver: VoiceOver speaks items on the screen. VoiceOver can also be enabled under Accessibility in Settings.\nParameterSummary: (${operation} VoiceOver) ${operation} VoiceOver; (${operation} VoiceOver ${state}) ${operation} VoiceOver ${state}\n",
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXStartSpeakScreenIntent": "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXStartSpeakScreenIntent()\nDescription:\n    Start Speak Screen : Speak Screen allows you to hear the content of the screen. Speak Screen can also be enabled under Accessibility in Settings.\nParameterSummary: (Start Speak Screen) Start Speak Screen\n",
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXStartMagnifierIntent": "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXStartMagnifierIntent()\nDescription:\n    Open Magnifier: Magnifier lets you use your device’s camera to magnify your surroundings. Magnifier can also be enabled under Accessibility in Settings.\nParameterSummary: (Open Magnifier) Open Magnifier\n",
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleVoiceControlIntent": "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleVoiceControlIntent(operation: Operation(Enum) = \"turn\", state: State(Enum) = \"on\")\nParameters:\n    operation:  Operation. Operation. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"turn\"(Turn), \"toggle\"(Toggle).\n    state:  State. State. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"on\"(On), \"off\"(Off). This value depends on the value of \"operation\". This parameter is only valid when the value of \"operation\" is \"turn\".\nDescription:\n    Set Voice Control: Voice Control allows you to use your voice to control your iOS device. Voice Control can also be enabled under Accessibility in Settings.\nParameterSummary: (${operation} Voice Control) ${operation} Voice Control; (${operation} Voice Control ${state}) ${operation} Voice Control ${state}\n",
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleSwitchControlIntent": "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleSwitchControlIntent(operation: Operation(Enum) = \"turn\", state: State(Enum) = \"on\")\nParameters:\n    operation:  Operation. Operation. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"turn\"(Turn), \"toggle\"(Toggle).\n    state:  State. State. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"on\"(On), \"off\"(Off). This value depends on the value of \"operation\". This parameter is only valid when the value of \"operation\" is \"turn\".\nDescription:\n    Set Switch Control: Switch Control highlights items on the screen to control through an adaptive accessory. Switch Control can also be enabled under Accessibility in Settings.\nParameterSummary: (${operation} Switch Control) ${operation} Switch Control; (${operation} Switch Control ${state}) ${operation} Switch Control ${state}\n",
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXStartGuidedAccessIntent": "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXStartGuidedAccessIntent()\nDescription:\n    Start Guided Access: Guided Access keeps your iOS device in a single app. Set up Guided Access under Accessibility in Settings.\nParameterSummary: (Start Guided Access ) Start Guided Access \n",
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleAssistiveTouchIntent": "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleAssistiveTouchIntent(operation: Operation(Enum) = \"turn\", state: State(Enum) = \"on\")\nParameters:\n    operation:  Operation. Operation. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"turn\"(Turn), \"toggle\"(Toggle).\n    state:  State. State. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"on\"(On), \"off\"(Off). This value depends on the value of \"operation\". This parameter is only valid when the value of \"operation\" is \"turn\".\nDescription:\n    Set AssistiveTouch: AssistiveTouch allows you to use your device if you have difficulty touching the screen or if you require an adaptive accessory. AssistiveTouch can also be enabled under Accessibility in Settings.\nParameterSummary: (${operation} AssistiveTouch) ${operation} AssistiveTouch; (${operation} AssistiveTouch ${state}) ${operation} AssistiveTouch ${state}\n",
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleSmartInvertIntent": "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleSmartInvertIntent(operation: Operation(Enum) = \"turn\", state: State(Enum) = \"on\")\nParameters:\n    operation:  Operation. Operation. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"turn\"(Turn), \"toggle\"(Toggle).\n    state:  State. State. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"on\"(On), \"off\"(Off). This value depends on the value of \"operation\". This parameter is only valid when the value of \"operation\" is \"turn\".\nDescription:\n    Set Smart Invert: Reverses the colors of the display except for images, media and some apps that use dark color styles. Smart Invert can also be enabled under Accessibility in Settings.\nParameterSummary: (${operation} Smart Invert) ${operation} Smart Invert; (${operation} Smart Invert ${state}) ${operation} Smart Invert ${state}\n",
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleClassicInvertIntent": "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleClassicInvertIntent(operation: Operation(Enum) = \"turn\", state: State(Enum) = \"on\")\nParameters:\n    operation:  Operation. Operation. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"turn\"(Turn), \"toggle\"(Toggle).\n    state:  State. State. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"on\"(On), \"off\"(Off). This value depends on the value of \"operation\". This parameter is only valid when the value of \"operation\" is \"turn\".\nDescription:\n    Set Classic Invert: Reverses the colors of the display. Classic Invert can also be enabled under Accessibility in Settings.\nParameterSummary: (${operation} Classic Invert) ${operation} Classic Invert; (${operation} Classic Invert ${state}) ${operation} Classic Invert ${state}\n",
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleTransparencyIntent": "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleTransparencyIntent(operation: Operation(Enum) = \"turn\", state: State(Enum) = \"on\")\nParameters:\n    operation:  Operation. Operation. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"turn\"(Turn), \"toggle\"(Toggle).\n    state:  State. State. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"on\"(On), \"off\"(Off). This value depends on the value of \"operation\". This parameter is only valid when the value of \"operation\" is \"turn\".\nDescription:\n    Set Reduce Transparency: Improve contrast by reducing transparency and blurs on some backgrounds to increase legibility. Reduce Transparency can also be enabled under Accessibility in Settings.\nParameterSummary: (${operation} Reduce Transparency) ${operation} Reduce Transparency; (${operation} Reduce Transparency ${state}) ${operation} Reduce Transparency ${state}\n",
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleContrastIntent": "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleContrastIntent(operation: Operation(Enum) = \"turn\", state: State(Enum) = \"on\")\nParameters:\n    operation:  Operation. Operation. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"turn\"(Turn), \"toggle\"(Toggle).\n    state:  State. State. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"on\"(On), \"off\"(Off). This value depends on the value of \"operation\". This parameter is only valid when the value of \"operation\" is \"turn\".\nDescription:\n    Set Increase Contrast: Increase color contrast between app foreground and background colors. Increase Contrast can also be enabled under Accessibility in Settings.\nParameterSummary: (${operation} Increase Contrast) ${operation} Increase Contrast; (${operation} Increase Contrast ${state}) ${operation} Increase Contrast ${state}\n",
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleWhitePointIntent": "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleWhitePointIntent(operation: Operation(Enum) = \"turn\", state: State(Enum) = \"on\")\nParameters:\n    operation:  Operation. Operation. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"turn\"(Turn), \"toggle\"(Toggle).\n    state:  State. State. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"on\"(On), \"off\"(Off). This value depends on the value of \"operation\". This parameter is only valid when the value of \"operation\" is \"turn\".\nDescription:\n    Set White Point: Reduce White Point lowers the intensity of bright colors. Reduce White Point can also be enabled under Accessibility in Settings.\nParameterSummary: (${operation} White Point) ${operation} White Point; (${operation} White Point ${state}) ${operation} White Point ${state}\n",
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleMonoAudioIntent": "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleMonoAudioIntent(operation: Operation(Enum) = \"turn\", state: State(Enum) = \"on\")\nParameters:\n    operation:  Operation. Operation. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"turn\"(Turn), \"toggle\"(Toggle).\n    state:  State. State. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"on\"(On), \"off\"(Off). This value depends on the value of \"operation\". This parameter is only valid when the value of \"operation\" is \"turn\".\nDescription:\n    Set Mono Audio: Mono Audio enables the left and right speakers to play the same content. Mono Audio can also be enabled under Accessibility in Settings.\nParameterSummary: (${operation} Mono Audio) ${operation} Mono Audio; (${operation} Mono Audio ${state}) ${operation} Mono Audio ${state}\n",
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleLEDFlashIntent": "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleLEDFlashIntent(operation: Operation(Enum) = \"turn\", state: State(Enum) = \"on\")\nParameters:\n    operation:  Operation. Operation. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"turn\"(Turn), \"toggle\"(Toggle).\n    state:  State. State. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"on\"(On), \"off\"(Off). This value depends on the value of \"operation\". This parameter is only valid when the value of \"operation\" is \"turn\".\nDescription:\n    Set LED Flash: LED flashes for alerts. LED Flash can also be enabled under Accessibility in Settings.\nParameterSummary: (${operation} LED Flash) ${operation} LED Flash; (${operation} LED Flash ${state}) ${operation} LED Flash ${state}\n",
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleAudioDescriptionsIntent": "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleAudioDescriptionsIntent(operation: Operation(Enum) = \"turn\", state: State(Enum) = \"on\")\nParameters:\n    operation:  Operation. Operation. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"turn\"(Turn), \"toggle\"(Toggle).\n    state:  State. State. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"on\"(On), \"off\"(Off). This value depends on the value of \"operation\". This parameter is only valid when the value of \"operation\" is \"turn\".\nDescription:\n    Set Audio Descriptions: Automatically play audio descriptions. Audio Descriptions can also be enabled under Accessibility in Settings.\nParameterSummary: (${operation} Audio Descriptions) ${operation} Audio Descriptions; (${operation} Audio Descriptions ${state}) ${operation} Audio Descriptions ${state}\n",
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleCaptionsIntent": "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleCaptionsIntent(operation: Operation(Enum) = \"turn\", state: State(Enum) = \"on\")\nParameters:\n    operation:  Operation. Operation. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"turn\"(Turn), \"toggle\"(Toggle).\n    state:  State. State. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"on\"(On), \"off\"(Off). This value depends on the value of \"operation\". This parameter is only valid when the value of \"operation\" is \"turn\".\nDescription:\n    Set Closed Captions+SDH: Use closed captions for the deaf and hard of hearing. Closed captions can also be enabled under Accessibility in Settings.\nParameterSummary: (${operation} Closed Captions+SDH) ${operation} Closed Captions+SDH; (${operation} Closed Captions+SDH ${state}) ${operation} Closed Captions+SDH ${state}\n",
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXSetLargeTextIntent": "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXSetLargeTextIntent(textSize: Enum(Enum) = \"ExtraSmall\")\nParameters:\n    textSize:  Text Size. Text Size. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"ExtraSmall\"(Extra Small), \"Small\"(Small), \"Medium\"(Medium), \"Default\"(Default), \"ExtraLarge\"(Extra Large), \"ExtraExtraLarge\"(Extra Extra Large), \"ExtraExtraExtraLarge\"(Extra Extra Extra Large), \"AXMedium\"(Accessibility Medium), \"AXLarge\"(Accessibility Large), \"AXExtraLarge\"(Accessibility Extra Large), \"AXExtraExtraLarge\"(Accessibility Extra Extra Large), \"AXExtraExtraExtraLarge\"(Accessibility Extra Extra Extra Large).\nDescription:\n    Set Text Size: Customize your text size with extended accessibility sizes. Large Text can also be enabled under Accessibility in Settings.\nParameterSummary: (Set text size to ${textSize}) Set text size to ${textSize}\n",
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleReduceMotionIntent": "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleReduceMotionIntent(operation: Operation(Enum) = \"turn\", state: State(Enum) = \"on\")\nParameters:\n    operation:  Operation. Operation. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"turn\"(Turn), \"toggle\"(Toggle).\n    state:  State. State. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"on\"(On), \"off\"(Off). This value depends on the value of \"operation\". This parameter is only valid when the value of \"operation\" is \"turn\".\nDescription:\n    Set Reduce Motion: Reduce the motion of the user interface, including the parallax effect of icons. Reduce Motion can also be enabled under Accessibility in Settings.\nParameterSummary: (${operation} Reduce Motion) ${operation} Reduce Motion; (${operation} Reduce Motion ${state}) ${operation} Reduce Motion ${state}\n",
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleSoundDetectionIntent": "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleSoundDetectionIntent(operation: SoundDetectionOperation(Enum) = \"start\")\nParameters:\n    operation:  Operation. SoundDetectionOperation. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"toggle\"(Toggle), \"start\"(Activate), \"pause\"(Pause).\nDescription:\n    Set Sound Recognition: Sound Recognition will continuously listen for certain sounds, and using on-device intelligence, will notify you when sounds may be recognized. Sound Recognition can also be enabled under Accessibility in Settings.\nParameterSummary: (${operation} Sound Recognition) ${operation} Sound Recognition\n",
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXSetSoundDetectorIntent": "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXSetSoundDetectorIntent(parameter: Sound(Object), operation: Operation(Enum) = \"turn\", state: State(Enum) = \"on\")\nParameters:\n    parameter:  Sound. Sound.\n    operation:  Operation. Operation. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"turn\"(Turn), \"toggle\"(Toggle).\n    state:  State. State. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"on\"(On), \"off\"(Off). This value depends on the value of \"operation\". This parameter is only valid when the value of \"operation\" is \"turn\".\nDescription:\n    Set Recognized Sound: Select which sound you’d like to be detected when Sound Recognition is enabled. When this sound is recognized, you will receive a notification. Recognized Sounds can be configured at any time under Accessibility in Settings.\nParameterSummary: (${operation} sound recognizer for ${parameter}) ${operation} sound recognizer for ${parameter}; (${operation} ${state} sound recognizer for ${parameter}) ${operation} ${state} sound recognizer for ${parameter}\n",
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleBackgroundSoundsIntent": "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleBackgroundSoundsIntent(operation: Operation(Enum) = \"turn\", state: State(Enum) = \"on\", setting: BackgroundSoundsSetting(Enum) = \"backgroundSounds\")\nParameters:\n    operation:  Operation. Operation. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"turn\"(Turn), \"toggle\"(Toggle).\n    state:  State. State. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"on\"(On), \"off\"(Off). This value depends on the value of \"operation\". This parameter is only valid when the value of \"operation\" is \"turn\".\n    setting:  Setting. Background Sounds Setting. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"backgroundSounds\"(Background Sounds), \"whenMediaIsPlaying\"(Background Sounds When Media Is Playing).\nDescription:\n    Set Background Sounds: Turns background sounds on or off. Background sounds mask unwanted environmental noise and can be used when media is playing. Background sounds can also be enabled under Accessibility in Settings.\nParameterSummary: (${operation} ${setting}) ${operation} ${setting}; (${operation} ${setting} ${state}) ${operation} ${setting} ${state}\n",
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXSetBackgroundSoundIntent": "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXSetBackgroundSoundIntent(backgroundSound: BackgroundSounds(Enum) = \"BalancedNoise\")\nParameters:\n    backgroundSound:  Background Sound. Background Sounds. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"BalancedNoise\"(Balanced Noise), \"BrightNoise\"(Bright Noise), \"DarkNoise\"(Dark Noise), \"Ocean\"(Ocean), \"Rain\"(Rain), \"Stream\"(Stream).\nDescription:\n    Change Background Sound: Change the background sound that will play when background sounds is turned on. Background sounds mask unwanted environmental noise. Background sounds can also be enabled under Accessibility in Settings.\nParameterSummary: (Change background sound to ${backgroundSound}) Change background sound to ${backgroundSound}\n",
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXSetBackgroundSoundVolumeIntent": "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXSetBackgroundSoundVolumeIntent(volumeValue: Float = 10.0, volumeType: BackgroundSoundsVolume(Enum) = \"volume\")\nParameters:\n    volumeValue:  volume.\n    volumeType:  Volume Type. Background Sounds Volume. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"volume\"(Volume), \"volumeWhenMediaIsPlaying\"(Volume When Media Is Playing).\nDescription:\n    Set Background Sounds Volume: Sets the volume for background sounds. Background sounds mask unwanted environmental noise and can be used when media is playing. Background sounds can also be enabled under Accessibility in Settings.\nParameterSummary: (Set background sounds ${volumeType} to ${volumeValue}) Set background sounds ${volumeType} to ${volumeValue}\n",
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleLiveCaptionsIntent": "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleLiveCaptionsIntent(operation: Operation(Enum) = \"turn\", state: State(Enum) = \"on\")\nParameters:\n    operation:  Operation. Operation. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"turn\"(Turn), \"toggle\"(Toggle).\n    state:  State. State. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"on\"(On), \"off\"(Off). This value depends on the value of \"operation\". This parameter is only valid when the value of \"operation\" is \"turn\".\nDescription:\n    Set Live Captions: Use on-device intelligence to automatically display captions. Live Captions can also be enabled under Accessibility in Settings.\nParameterSummary: (${operation} Live Captions) ${operation} Live Captions; (${operation} Live Captions ${state}) ${operation} Live Captions ${state}\n",
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleColorFiltersIntent": "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleColorFiltersIntent(operation: Operation(Enum) = \"turn\", state: State(Enum) = \"on\")\nParameters:\n    operation:  Operation. Operation. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"turn\"(Turn), \"toggle\"(Toggle).\n    state:  State. State. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"on\"(On), \"off\"(Off). This value depends on the value of \"operation\". This parameter is only valid when the value of \"operation\" is \"turn\".\nDescription:\n    Set Color Filters: Color filters can be used to differentiate colors by users who are color blind and aid users who have difficulty reading text on the display. Color filters can also be enabled under Accessibility in Settings.\nParameterSummary: (${operation} color filters) ${operation} color filters; (${operation} color filters ${state}) ${operation} color filters ${state}\n",
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXStartRemoteWatchScreenIntent": "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXStartRemoteWatchScreenIntent()\nDescription:\n    Start Apple Watch Remote Screen: Fully control Apple Watch from iPhone and use Switch Control, Voice Control, or any other assistive features on iPhone to get the most out of your Apple Watch.\nParameterSummary: (Start Apple Watch remote screen) Start Apple Watch remote screen\n",
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleAutoAnswerCallsIntent": "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXToggleAutoAnswerCallsIntent(operation: Operation(Enum) = \"turn\", state: State(Enum) = \"on\")\nParameters:\n    operation:  Operation. Operation. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"turn\"(Turn), \"toggle\"(Toggle).\n    state:  State. State. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"on\"(On), \"off\"(Off). This value depends on the value of \"operation\". This parameter is only valid when the value of \"operation\" is \"turn\".\nDescription:\n    Auto-Answer Calls: Toggle whether calls are automatically answered\nParameterSummary: (${operation} Auto-Answer Calls) ${operation} Auto-Answer Calls; (${operation} Auto-Answer Calls ${state}) ${operation} Auto-Answer Calls ${state}\n",
    "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXSetLeftRightBalanceIntent": "com.apple.AccessibilityUtilities.AXSettingsShortcuts.AXSetLeftRightBalanceIntent(operation: LeftRightBalanceOperation(Enum) = \"toggle\", parameter: State(Enum), value: Float)\nParameters:\n    operation:  Operation. Left/Right Balance Operation. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"toggle\"(Toggle), \"set\"(Set).\n    parameter:  Parameter. State. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"on\"(On), \"off\"(Off). This value depends on the value of \"operation\". This parameter is only valid when the value of \"operation\" is \"set\".\n    value:  Value. This value depends on the value of \"operation\". This parameter is only valid when the value of \"operation\" is \"set\".\nDescription:\n    Set Left/Right Balance: Left/Right Balance can be used to adjust the audio volume balance between left and right channels. -1.0 represents full Left balance and 1.0 represents full Right balance. Left/Right Balance can also be enabled under Accessibility in Settings.\nParameterSummary: (${operation} Left/Right Balance) ${operation} Left/Right Balance; (${operation} Left/Right Balance to ${value}) ${operation} Left/Right Balance to ${value}\n",
    "com.apple.Notes.ICNoteIntent": "com.apple.Notes.ICNoteIntent(note: IntentNote(Object)) -> Note\n                            : IntentNote(Object)\nParameters:\n    note:  Note. Note.\nReturn Value:\n    Note: Note. Note.\nDescription:\n    Show Note: Get quick access to one of your notes.\nParameterSummary: () Show Note\n",
    "com.apple.Notes.ICNotesFolderIntent": "com.apple.Notes.ICNotesFolderIntent(folder: IntentNotesFolder(Object)) -> Folder\n                            : IntentNotesFolder(Object)\nParameters:\n    folder:  Folder. Notes Folder.\nReturn Value:\n    Folder: Folder. Notes Folder.\nDescription:\n    Show Notes Folder: Get quick access to one of your Notes folders.\nParameterSummary: (Show folder ${folder}) Show folder ${folder}\n",
    "com.apple.Notes.AddTagsToNotesLinkAction": "com.apple.Notes.AddTagsToNotesLinkAction(notes: array(NoteEntity(Object)), tags: array(TagEntity(Object))) -> Add Tags to Notes\n                            : array(NoteEntity(Object))\nParameters:\n    notes: Notes.\n    tags: Tags.\nReturn Value:\n    Add Tags to Notes: \nDescription:\n    Add Tags to Notes: Ensures each note contains the specified tags, adding them if needed.\nParameterSummary: () Add Tags to Notes\n",
    "com.apple.Notes.AppendToNoteLinkAction": "com.apple.Notes.AppendToNoteLinkAction(entity: NoteEntity(Object), text: 12(Object)) -> Append to Note\n                            : NoteEntity(Object)\nParameters:\n    entity: Note. NOTE_ENTITY_DISPLAY_NAME.\n    text: Text.\nReturn Value:\n    Append to Note: NOTE_ENTITY_DISPLAY_NAME.\nDescription:\n    Append to Note\nParameterSummary: () Append to Note\n",
    "com.apple.Notes.ChangeFolderSettingLinkAction": "com.apple.Notes.ChangeFolderSettingLinkAction(changeOperation: ChangeOperation(Enum), setting: FolderViewSetting(Enum))\nParameters:\n    changeOperation: ChangeOperation. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"disable\"(Disable), \"enable\"(Enable), \"toggle\"(Toggle).\n    setting: Folder View. Folder View. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"galleryView\"(Gallery View), \"listView\"(List View).\nDescription:\n    Change Folder View\nParameterSummary: () Change Folder View\n",
    "com.apple.Notes.ChangeSettingLinkAction": "com.apple.Notes.ChangeSettingLinkAction(changeOperation: ChangeOperation(Enum), setting: NotesSetting(Enum))\nParameters:\n    changeOperation: ChangeOperation. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"disable\"(Disable), \"enable\"(Enable), \"toggle\"(Toggle).\n    setting: Setting. Notes Setting. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"autoConvertToTag\"(Auto Convert to Tag), \"autoSortCheckedItems\"(Auto Sort Checked Items), \"localAccount\"(Local Account), \"mentionNotifications\"(Mention Notifications), \"resumeLastQuickNote\"(Resume Last Quick Note).\nDescription:\n    Change Notes Setting\nParameterSummary: () Change Notes Setting\n",
    "com.apple.Notes.CloseAppLocationLinkAction": "com.apple.Notes.CloseAppLocationLinkAction(target: NotesView(Enum))\nParameters:\n    target: View. Notes View. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"attachmentBrowser\"(Attachment Browser), \"folderList\"(Folder List).\nDescription:\n    Close Notes View\nParameterSummary: () Close Notes View\n",
    "com.apple.Notes.CloseNoteLinkAction": "com.apple.Notes.CloseNoteLinkAction(target: NoteEntity(Object))\nParameters:\n    target: Note. NOTE_ENTITY_DISPLAY_NAME.\nDescription:\n    Close Note\nParameterSummary: () Close Note\n",
    "com.apple.Notes.CreateFolderLinkAction": "com.apple.Notes.CreateFolderLinkAction(name: String) -> Create Folder\n                            : FolderEntity(Object)\nParameters:\n    name: Name.\nReturn Value:\n    Create Folder: FOLDER_ENTITY_DISPLAY_NAME.\nDescription:\n    Create Folder\nParameterSummary: () Create Folder\n",
    "com.apple.Notes.CreateNoteLinkAction": "com.apple.Notes.CreateNoteLinkAction(name: String, contents: 12(Object), folder: FolderEntity(Object)) -> Create Note\n                            : NoteEntity(Object)\nParameters:\n    name: Name.\n    contents: Body.\n    folder: Folder. FOLDER_ENTITY_DISPLAY_NAME.\nReturn Value:\n    Create Note: NOTE_ENTITY_DISPLAY_NAME.\nDescription:\n    Create Note: Creates a note using the content passed as input.\nParameterSummary: () Create Note\n",
    "com.apple.Notes.CreateTagLinkAction": "com.apple.Notes.CreateTagLinkAction(name: String) -> Create Tag\n                            : TagEntity(Object)\nParameters:\n    name: Name.\nReturn Value:\n    Create Tag: TAG_ENTITY_DISPLAY_NAME.\nDescription:\n    Create Tag: Create a new tag with the specified name if it doesn’t exist.\nParameterSummary: () Create Tag\n",
    "com.apple.Notes.DeleteFoldersLinkAction": "com.apple.Notes.DeleteFoldersLinkAction(entities: array(FolderEntity(Object)))\nParameters:\n    entities: Folders.\nDescription:\n    Delete Folders\nParameterSummary: () Delete Folders\n",
    "com.apple.Notes.DeleteNotesLinkAction": "com.apple.Notes.DeleteNotesLinkAction(entities: array(NoteEntity(Object)))\nParameters:\n    entities: Notes.\nDescription:\n    Delete Notes\nParameterSummary: () Delete Notes\n",
    "com.apple.Notes.DeleteTagsLinkAction": "com.apple.Notes.DeleteTagsLinkAction(entities: array(TagEntity(Object)))\nParameters:\n    entities: Tags.\nDescription:\n    Delete Tags\nParameterSummary: () Delete Tags\n",
    "com.apple.Notes.MoveNotesToFolderLinkAction": "com.apple.Notes.MoveNotesToFolderLinkAction(container: FolderEntity(Object), entities: array(NoteEntity(Object)))\nParameters:\n    container: Folder. FOLDER_ENTITY_DISPLAY_NAME.\n    entities: Notes.\nDescription:\n    Move Notes to Folder\nParameterSummary: () Move Notes to Folder\n",
    "com.apple.Notes.OpenAccountLinkAction": "com.apple.Notes.OpenAccountLinkAction(target: AccountEntity(Object))\nParameters:\n    target: Account. ACCOUNT_ENTITY_DISPLAY_NAME.\nDescription:\n    Open Notes Account\nParameterSummary: () Open Notes Account\n",
    "com.apple.Notes.OpenAppLocationLinkAction": "com.apple.Notes.OpenAppLocationLinkAction(target: NotesView(Enum))\nParameters:\n    target: Notes View. Notes View. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"attachmentBrowser\"(Attachment Browser), \"folderList\"(Folder List).\nDescription:\n    Open Notes View\nParameterSummary: () Open Notes View\n",
    "com.apple.Notes.OpenFolderLinkAction": "com.apple.Notes.OpenFolderLinkAction(target: FolderEntity(Object))\nParameters:\n    target: Folder. FOLDER_ENTITY_DISPLAY_NAME.\nDescription:\n    Open Notes Folder\nParameterSummary: () Open Notes Folder\n",
    "com.apple.Notes.OpenNoteLinkAction": "com.apple.Notes.OpenNoteLinkAction(target: NoteEntity(Object))\nParameters:\n    target: Note. NOTE_ENTITY_DISPLAY_NAME.\nDescription:\n    Open Note\nParameterSummary: () Open Note\n",
    "com.apple.Notes.OpenTagLinkAction": "com.apple.Notes.OpenTagLinkAction(target: TagEntity(Object))\nParameters:\n    target: Tag. TAG_ENTITY_DISPLAY_NAME.\nDescription:\n    Open Tag\nParameterSummary: () Open Tag\n",
    "com.apple.Notes.PinNotesLinkAction": "com.apple.Notes.PinNotesLinkAction(operation: FavoriteOperation(Enum), entities: array(NoteEntity(Object))) -> Pin Notes\n                            : array(NoteEntity(Object))\nParameters:\n    operation: FavoriteOperation. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"add\"(Add), \"remove\"(Remove).\n    entities: Notes.\nReturn Value:\n    Pin Notes: \nDescription:\n    Pin Notes\nParameterSummary: () Pin Notes\n",
    "com.apple.Notes.RemoveTagsFromNotesLinkAction": "com.apple.Notes.RemoveTagsFromNotesLinkAction(notes: array(NoteEntity(Object)), tags: array(TagEntity(Object))) -> Remove Tags from Notes\n                            : array(NoteEntity(Object))\nParameters:\n    notes: Notes.\n    tags: Tags.\nReturn Value:\n    Remove Tags from Notes: \nDescription:\n    Remove Tags from Notes: Removes tags from each specified note, if the tags are present.\nParameterSummary: () Remove Tags from Notes\n",
    "com.apple.clock.OpenTab": "com.apple.clock.OpenTab(tab: MTAppIntentsTab(Enum))\nParameters:\n    tab: INTENT_TAB. INTENT_TAB. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"clock\"(WORLD_CLOCK), \"alarm\"(ALARM_CLOCK), \"stopwatch\"(STOP_WATCH), \"timer\"(TIMER).\nDescription:\n    INTENT_OPEN_TAB\nParameterSummary: (tab) Open ${tab}\n",
    "com.apple.iBooksX.BookReaderChangePageNavigationIntent": "com.apple.iBooksX.BookReaderChangePageNavigationIntent(changeOperation: ChangeOperation(Enum), setting: BookPageNavigationSetting(Enum) = \"pageTurning\")\nParameters:\n    changeOperation: ChangeOperation. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"disable\"(Disable), \"enable\"(Enable), \"toggle\"(Toggle).\n    setting: Page Navigation. Page Navigation. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"continuousScroll\"(Continuous Scrolling), \"pageTurning\"(Page Turning).\nDescription:\n    Change Page Navigation: Navigate an open book by turning pages or scrolling continuously.\nParameterSummary: (changeOperation,setting) ${changeOperation} ${setting}\n",
    "com.apple.iBooksX.BookReaderChangeThemeIntent": "com.apple.iBooksX.BookReaderChangeThemeIntent(changeOperation: ChangeOperation(Enum), setting: BookThemeSetting(Enum) = \"lightMode\")\nParameters:\n    changeOperation: ChangeOperation. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"disable\"(Disable), \"enable\"(Enable), \"toggle\"(Toggle).\n    setting: Book Appearance. Book Appearance. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"lightMode\"(Light Mode), \"darkMode\"(Dark Mode), \"theme1\"(Original Theme), \"theme2\"(Quiet Theme), \"theme3\"(Paper Theme), \"theme4\"(Bold Theme), \"theme5\"(Calm Theme), \"theme6\"(Focus Theme).\nDescription:\n    Change Book Appearance: Change appearance and theme for an open book.\nParameterSummary: (changeOperation,setting) ${changeOperation} ${setting}\n",
    "com.apple.iBooksX.BookReaderNavigatePagesIntent": "com.apple.iBooksX.BookReaderNavigatePagesIntent(direction: NavigateSequentiallyDirection(Enum))\nParameters:\n    direction: NavigateSequentiallyDirection. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"next\"(Next), \"previous\"(Previous).\nDescription:\n    Turn Page: Turn to the next or previous page in an open book.\nParameterSummary: (direction) Turn to ${direction} page\n",
    "com.apple.iBooksX.OpenBookIntent": "com.apple.iBooksX.OpenBookIntent(mode: OpenMode(Enum) = \"mostRecent\", target: BookAppEntity(Object))\nParameters:\n    mode: Open Mode. Open Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"mostRecent\"(Current Book), \"specific\"(Specific Book).\n    target: Book. Book.\nDescription:\n    Open Book: Open a book.\nParameterSummary: (mode) Open ${mode}; (mode,target) Open ${mode} ${target}\n",
    "com.apple.iBooksX.OpenDefaultCollectionIntent": "com.apple.iBooksX.OpenDefaultCollectionIntent(target: DefaultCollectionItem(Enum))\nParameters:\n    target: Collection. Standard Collection. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"libraryAll\"(All), \"wantToRead\"(Want to Read), \"finished\"(Finished), \"books\"(Books), \"audiobooks\"(Audiobooks), \"pdfs\"(PDFs), \"mySamples\"(My Samples), \"downloaded\"(Downloaded).\nDescription:\n    Open Collection: Open a standard collection in the Books app.\nParameterSummary: (target) Open ${target}\n",
    "com.apple.iBooksX.OpenTabBarItemIntent": "com.apple.iBooksX.OpenTabBarItemIntent(target: TabBarItem(Enum))\nParameters:\n    target: OPEN_TAB_BAR_ITEM_TARGET_PARAMETER_TITLE. TAB_BAR_ITEM_TYPE_DISPLAY_REPRESENTATION. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"readingNow\"(Reading Now), \"library\"(Library), \"bookStore\"(Book Store), \"audiobookStore\"(Audiobook Store), \"search\"(Search), \"manga\"(Manga Store).\nDescription:\n    Change View in Books: Change the tab or sidebar view in the Books app.\nParameterSummary: (target) Change app view to ${target}\n",
    "com.apple.iBooksX.PlayAudiobookIntent": "com.apple.iBooksX.PlayAudiobookIntent(mode: PlayMode(Enum) = \"mostRecent\", target: AudiobookAppEntity(Object))\nParameters:\n    mode: Play Mode. Play Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"mostRecent\"(Current Audiobook), \"specific\"(Specific Audiobook).\n    target: Audiobook. Audiobook.\nDescription:\n    Play Audiobook: Play an audiobook in the background.\nParameterSummary: (mode) Play ${mode}; (mode,target) Play ${mode} ${target}\n",
    "com.apple.iBooksX.SearchBooksIntent": "com.apple.iBooksX.SearchBooksIntent(searchPhrase: String)\nParameters:\n    searchPhrase: Title or Author.\nDescription:\n    Search in Books: Search for books and audiobooks in the store and your library by author or title.\nParameterSummary: (searchPhrase) Search ${searchPhrase} in Books\n",
    "com.charliemonroe.Downie-4.XUDownloadURLsIntent": "com.charliemonroe.Downie-4.XUDownloadURLsIntent(urls: String, postprocessing: Postprocessing(Enum), destination: File(Object))\nParameters:\n    urls:  URLs.\n    postprocessing:  Postprocessing. Postprocessing. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"none\"(None), \"mp4\"(MP4), \"audio\"(Audio Only), \"permute\"(Send to Permute), \"custom\"(Custom).\n    destination:  Custom Destination (optional).\nDescription:\n    Download URLs: Download URLs using Downie.\nParameterSummary: (Download ${urls} using Downie.) Download ${urls} using Downie.\n",
    "com.charliemonroe.Downie-4.XUDownloadURLsInTextIntent": "com.charliemonroe.Downie-4.XUDownloadURLsInTextIntent(text: String, postprocessing: Postprocessing(Enum), destination: File(Object))\nParameters:\n    text:  Text.\n    postprocessing:  Postprocessing. Postprocessing. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"none\"(None), \"mp4\"(MP4), \"audio\"(Audio Only), \"permute\"(Send to Permute), \"custom\"(Custom).\n    destination:  Destination (optional).\nDescription:\n    Download URLs In Text: Download URLs in Text - Downie extracts links that are contained in the text.\nParameterSummary: (Download URLs in text using Downie.) Download URLs in text using Downie.\n",
    "com.hegenberg.BetterTouchTool.ActivateHoveredAppInDockIntent": "com.hegenberg.BetterTouchTool.ActivateHoveredAppInDockIntent()\nDescription:\n    Activate Hovered App In Dock\nParameterSummary: () Activate Hovered App In Dock\n",
    "com.hegenberg.BetterTouchTool.BluetoothDeviceConnectionIntent": "com.hegenberg.BetterTouchTool.BluetoothDeviceConnectionIntent(action: BluetoothActionAppEnum(Enum) = \"connectDevice\", deviceSelectionConnect: BluetoothDeviceAppEntity(Object), manualDeviceNameOrAddressConnect: String, manualDeviceNameOrAddressDisconnect: String, deviceSelectionDisconnect: BluetoothDeviceAppEntity(Object), inputDictionaryJSON: String)\nParameters:\n    action: Bluetooth Action. Bluetooth Action. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"enable\"(Enable Bluetooth), \"disable\"(Disable Bluetooth), \"toggle\"(Toggle Bluetooth on/off), \"connectDevice\"(Connect device), \"disconnectDevice\"(Disconnect device).\n    deviceSelectionConnect: Device Selection Connect. BluetoothDevice.\n    manualDeviceNameOrAddressConnect: Device Name or Address.\n    manualDeviceNameOrAddressDisconnect: Device Name or Address.\n    deviceSelectionDisconnect: Device Selection Disconnect. BluetoothDevice.\n    inputDictionaryJSON: Input Dictionary JSON.\nDescription:\n    Manage Bluetooth State & Connected Devices: You can also provide the configuration using via the inputDictionaryJSON (e.g. {\"action\": \"connectDevice\", \"deviceAddressOrName\":\"test\"})\nParameterSummary: (action,deviceSelectionConnect,manualDeviceNameOrAddressConnect) Connect Bluetooth Device:; (action,deviceSelectionDisconnect,manualDeviceNameOrAddressConnect) Disconnect Bluetooth Device:; (action,inputDictionaryJSON) Connect / Disconnect Bluetooth device (\\\"show more\\\" for config)\n",
    "com.hegenberg.BetterTouchTool.CallBetterTouchToolScriptingInterfaceIntent": "com.hegenberg.BetterTouchTool.CallBetterTouchToolScriptingInterfaceIntent(scriptingFunction: ScriptingFunctionAppEnum(Enum), inputJSON: String = \"{}\") -> Call BetterTouchTool Scripting Interface\n                            : String\nParameters:\n    scriptingFunction: Scripting Function. Scripting Function. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"is_app_running\"(is_app_running), \"get_dock_badge_for\"(get_dock_badge_for), \"get_active_touch_bar_group\"(get_active_touch_bar_group), \"is_true_tone_enabled\"(is_true_tone_enabled), \"get_location\"(get_location), \"set_persistent_string_variable\"(set_persistent_string_variable), \"set_string_variable\"(set_string_variable), \"set_persistent_number_variable\"(set_persistent_number_variable), \"set_number_variable\"(set_number_variable), \"get_number_variable\"(get_number_variable), \"get_string_variable\"(get_string_variable), \"delete_trigger\"(delete_trigger), \"execute_assigned_actions_for_trigger\"(execute_assigned_actions_for_trigger), \"trigger_named\"(trigger_named), \"trigger_named_async_without_response\"(trigger_named_async_without_response), \"get_trigger\"(get_trigger), \"add_new_trigger\"(add_new_trigger), \"trigger_action\"(trigger_action), \"update_trigger\"(update_trigger (update or creates a trigger)), \"refresh_widget\"(refresh_widget), \"update_touch_bar_widget\"(update_touch_bar_widget), \"update_stream_deck_widget\"(update_stream_deck_widget), \"export_preset\"(export_preset), \"get_triggers\"(get_triggers), \"delete_triggers\"(delete_triggers), \"run_shortcut_async_without_response\"(run_shortcut_async_without_response), \"cancel_delayed_named_trigger_execution\"(cancel_delayed_named_trigger_execution), \"chat_gpt\"(chat_gpt), \"set_menu_item_value\"(set_menu_item_value), \"update_menubar_item\"(update_menubar_item), \"webview_menu_item_load_html_url_js\"(webview_menu_item_load_html_url_js), \"get_menu_item_value\"(get_menu_item_value), \"update_menu_item\"(update_menu_item), \"display_notification\"(display_notification), \"get_clipboard_content\"(get_clipboard_content), \"set_clipboard_content\"(set_clipboard_content), \"paste_text\"(paste_text), \"get_menu_item_details\"(get_menu_item_details).\n    inputJSON: Input JSON.\nReturn Value:\n    Call BetterTouchTool Scripting Interface: \nDescription:\n    Call BetterTouchTool Scripting Interface: This allows you to call any of the scripting interface functions of BetterTouchTool (https://docs.folivora.ai/docs/1106_java_script.html)\nParameterSummary: (scriptingFunction,inputJSON) Trigger the BTT scripting function: ${scriptingFunction} use this JSON input: ${inputJSON}\n",
    "com.hegenberg.BetterTouchTool.CloseAllNotificationsIntent": "com.hegenberg.BetterTouchTool.CloseAllNotificationsIntent()\nDescription:\n    Close All Notifications: Trys to close all visible Notifications\nParameterSummary: () Close All Notifications\n",
    "com.hegenberg.BetterTouchTool.CloseWindowUnderCursorIntent": "com.hegenberg.BetterTouchTool.CloseWindowUnderCursorIntent()\nDescription:\n    Close Window Under Cursor\nParameterSummary: () Close Window Under Cursor\n",
    "com.hegenberg.BetterTouchTool.ConnectBluetoothMidiDeviceIntent": "com.hegenberg.BetterTouchTool.ConnectBluetoothMidiDeviceIntent(connectType: BTMidiConnectTypeAppEnum(Enum) = \"showAvailable\", deviceName: String)\nParameters:\n    connectType: connect to. BT Midi Connect Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"showAvailable\"(Show Available Bluetooth MIDI Devices), \"connectAllAvailableBluetoothMidiDevices\"(Connect all Available Bluetooth MIDI Devices), \"connectToSpecificBluetoothMidiDevices\"(Connect to Specific Bluetooth MIDI Devices).\n    deviceName: Device Name.\nDescription:\n    Connect Bluetooth Midi Device\nParameterSummary: (connectType) Do ${connectType}; (deviceName,connectType) Connect to bluetooth MIDI devices matching this name: ${deviceName} (can include wildcards *)\n",
    "com.hegenberg.BetterTouchTool.ControlCenterIntent": "com.hegenberg.BetterTouchTool.ControlCenterIntent()\nDescription:\n    Control Center\nParameterSummary: () Control Center\n",
    "com.hegenberg.BetterTouchTool.ConvertFileOutputToJSONIntent": "com.hegenberg.BetterTouchTool.ConvertFileOutputToJSONIntent(input: None, includeFileContentAsBase64: Bool) -> File JSON\n                            : String\nParameters:\n    input: Input.\n    includeFileContentAsBase64: Include File Content As Base 64.\nReturn Value:\n    File JSON: \nDescription:\n    Input File & Output JSON (Convert File => JSON): When given one or multiple File as input, this returns a JSON like this: [{\"filename\": \"TestFile\", \"fileURL\": \"/Users/testuser/Documents/testfile.png\", \"typeIdentifier\": \"png\", \"data\":\"base64data\"}]\nParameterSummary: (input,includeFileContentAsBase64) Convert the given input files to a JSON structure for usage in following actions.\n",
    "com.hegenberg.BetterTouchTool.ConvertInputListToJSONArrayIntent": "com.hegenberg.BetterTouchTool.ConvertInputListToJSONArrayIntent(inputList: String) -> JSON Array String\n                            : String\nParameters:\n    inputList: Input List.\nReturn Value:\n    JSON Array String: \nDescription:\n    Convert Input List To JSON Array: This shortcut takes a list as input and outputs a JSON Array string.\nParameterSummary: () Convert Input List To JSON Array\n",
    "com.hegenberg.BetterTouchTool.ConvertJSONOutputToFileIntent": "com.hegenberg.BetterTouchTool.ConvertJSONOutputToFileIntent(inputJSON: String)\nParameters:\n    inputJSON: Input JSON.\nDescription:\n    Input JSON & Output File (Convert JSON  => File): Converts JSON like this: {\"filename\": \"TestFile\", \"fileURL\": \"/Users/testuser/Documents/testfile.png\", \"typeIdentifier\": \"png\", \"data\":\"base64data\"} to a File, which can be used as input for other actions.\nParameterSummary: (inputJSON) Convert input JSON to file  for usage in next action\n",
    "com.hegenberg.BetterTouchTool.CustomMoveResizeIntent": "com.hegenberg.BetterTouchTool.CustomMoveResizeIntent(name: String, windowToUse: CustomMoveWindowAppEnum(Enum) = \"0\", windowTitle: String, windowAnchorToReposition: CustomMoveWindowAnchorPointAppEnum(Enum) = \"topLeftCornerOfWindow\", moveFromMonitorPosition: CustomMoveResizeScreenAnchorPointAppEnum(Enum) = \"topLeftCornerOfScreen\", moveByScreens: CustomMoveByScreensAppEnum(Enum) = \"0\", moveDirection: CustomMoveDirectionAppEnum(Enum) = \"right\", startScreen: CustomMoveStartScreenAppEnum(Enum) = \"relativeToWindowScreen\", moveWindowAnchorX: Bool = \"1\", moveXUnit: CustomMoveXUnitAppEnum(Enum) = \"px\", moveXBy: Float, moveWindowAnchorY: Bool = \"1\", moveYUnit: CustomMoveYUnitAppEnum(Enum) = \"px\", moveYBy: Float, changeWindowWidth: CustomMoveChangeWidthAppEnum(Enum), fixedWidth: Integer, percentageOfScreenWidth: String, addOrSubstractFromCurrentWidth: String, changeWindowHeight: CustomMoveChangeHeightAppEnum(Enum), fixedHeight: String, percentageOfScreenHeight: String, addOrSubstractFromCurrentHeight: String, takeDockAndMenubarIntoAccount: Bool = \"1\")\nParameters:\n    name: Name of the move/resize action.\n    windowToUse: 0.) Use this window. Custom Move Window. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"0\"(active window), \"1\"(window under cursor), \"2\"(window with title).\n    windowTitle: Window Title.\n    windowAnchorToReposition: 1.) Assume this window anchor is moved. Custom Move Window Anchor Point. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"centerOfWindow\"(center of window), \"topLeftCornerOfWindow\"(top left corner of window), \"topRightCornerOfWindow\"(top right corner of window), \"bottomLeftCornerOfWindow\"(bottom left corner of window), \"bottomRightCornerOfWindow\"(bottom right corner of window).\n    moveFromMonitorPosition: 2.) ... to this monitor position. Custom Move Resize Screen Anchor Point. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"centerOfScreen\"(center of screen), \"topLeftCornerOfScreen\"(top left corner of screen), \"topRightCornerOfScreen\"(top right corner of screen), \"bottomLeftCornerOfScreen\"(bottom left corner of screen), \"bottomRightCornerOfScreen\"(bottom right corner of screen), \"originalAnchorPointOfWindowItself\"(original anchor point of window itself), \"mouseCursorPosition\"(mouse cursor position).\n    moveByScreens: 3.) ... on the screen. Custom Move By Screens. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"0\"(which is 0 screens ...), \"1\"(which is 1 screen ...), \"2\"(which is 2 screens ...), \"3\"(which is 3 screen  ...), \"4\"(which is 4 screens  ...).\n    moveDirection:  ->. Custom Move Direction. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"left\"(left), \"right\"(right), \"up\"(up), \"down\"(down).\n    startScreen: -> . CustomMoveStartScreen. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"relativeToWindowScreen\"(from screen with active window), \"relativeToMainScreen\"(from main screen), \"relativeToMouseScreen\"(from screen with mouse cursor).\n    moveWindowAnchorX: 4.) Now really change the X position to the chosen anchor position, then move again.\n    moveXUnit: Move X Unit. Custom Move X Unit. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"px\"(px), \"percentageOfScreenWidth\"(percentage of screen width).\n    moveXBy: Move X By.\n    moveWindowAnchorY: 5.) ... also really the Y position.\n    moveYUnit: Move Y Unit. Custom Move Y Unit. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"px\"(px), \"percentageOfScreenHeight\"(percentage of screen height).\n    moveYBy: Move Y By.\n    changeWindowWidth: Change Window Width. Custom Move Change Width. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"fixedValueInPixel\"(fixed value in pixel), \"percentageOfScreenWidth\"(percentage of screen width), \"fillRemainingSpaceToLeft\"(fill remaining space to left), \"fillRemainingSpaceToRight\"(fill remaining space to right), \"addOrSubstractFromCurrent\"(add or substract from current).\n    fixedWidth: Fixed Width.\n    percentageOfScreenWidth: Percentage Of Screen Width.\n    addOrSubstractFromCurrentWidth: Add Or Substract From Current Width.\n    changeWindowHeight: Change Window Height. Custom Move Change Height. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"fixedValueInPixel\"(fixed value in pixel), \"percentageOfSceenHeight\"(percentage of sceen height), \"fillToBottom\"(fill to bottom), \"fillToTop\"(fill to top), \"addOrSubstractFromCurrent\"(add or substract from current).\n    fixedHeight: Fixed Height.\n    percentageOfScreenHeight: Percentage Of Screen Height.\n    addOrSubstractFromCurrentHeight: Add Or Substract From Current Height.\n    takeDockAndMenubarIntoAccount: Take Dock And Menu Bar Into Account.\nDescription:\n    Custom Move Resize\nParameterSummary: () Custom Move Resize\n",
    "com.hegenberg.BetterTouchTool.FindImageOnScreenIntent": "com.hegenberg.BetterTouchTool.FindImageOnScreenIntent(image: 12(Object), moveMouse: ImageFoundMoveMouseAppEnum(Enum), searchOn: SearchPictureOnAppEnum(Enum), treshold: Float = \"60\") -> Find Image On Screen\n                            : array(String)\nParameters:\n    image: Image to search for.\n    moveMouse: Move mouse if image has been found. Image Found Move Mouse. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"doNotMove\"(do not move), \"topLeft\"(move to top left of recognized area), \"topRight\"(move to top right of recognized area), \"center\"(move to center of recognized area), \"bottomLeft\"(move to bottom left of recognized area), \"bottomRight\"(move to bottom right of recognized area).\n    searchOn: Search On. Search Picture On. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"screenWithMouse\"(screen with mouse cursor), \"mainScreen\"(main screen), \"screenWithoutMouse\"(screen WITHOUT mouse cursor), \"screenWithFocusedWindow\"(screen with focused window).\n    treshold: Precision.\nReturn Value:\n    Find Image On Screen: \nDescription:\n    Find Image On Screen: Tries to find the given image on the screen and return its position. This will return a list of strings describing the positions it found (at the moment it stops after the first match though). The format of the returned positions is \"{x:123, y:123}\".\nParameterSummary: () Find Image On Screen\n",
    "com.hegenberg.BetterTouchTool.FloatOnTopDisableAllIntent": "com.hegenberg.BetterTouchTool.FloatOnTopDisableAllIntent()\nDescription:\n    Disable \"Float on Top\" for all windows\nParameterSummary: () Disable \"Float on Top\" for all windows\n",
    "com.hegenberg.BetterTouchTool.FloatOnTopIntent": "com.hegenberg.BetterTouchTool.FloatOnTopIntent()\nDescription:\n    Pin/Unpin Focused Window To Float On Top: Makes a specific window float on top of all other windows\nParameterSummary: () Pin/Unpin Focused Window To Float On Top\n",
    "com.hegenberg.BetterTouchTool.FloatingWebViewIntent": "com.hegenberg.BetterTouchTool.FloatingWebViewIntent(urlOrHTML: UrlOrHTMLAppEnum(Enum) = \"renderHTML\", html: String, url: String, windowBackground: WebviewBackgroundAppEnum(Enum) = \"transparent\", width: Integer = \"400\", height: Integer = \"400\", resizable: Bool = \"1\", position: RelativeWebViewPositioningAppEnum(Enum) = \"mouse_pos\", offsetX: String, offsetY: String, movable: FloatingHTMLMovableAppEnum(Enum) = \"byDraggingAndHoldingCMD\", updatePosition: Bool, titlebar: WebviewTitlebarStyleAppEnum(Enum) = \"standardTitlebar\", windowShadow: Bool = \"1\", ignoreMouseEvents: Bool, closeWhenClickingOutside: Bool, showBTTDockIcon: Bool, zIndex: FloatingWebViewLevelAppEnum(Enum) = \"above_all\", zIndexManual: Integer, whenRunMultipleTimes: WhenRunningMultipleTimesAppEnum(Enum) = \"toggleBetweenVisibleAndHidden\", doNotKeepActiveInBackground: Bool, userAgent: String, systemBrowserPrefix: String, closeAfterSystemBrowserOpen: Bool, userScript: String, identifierW: String = \"PLEASE ENTER A NAME\", input: String, sharedSecret: String, variable1: String, variable2: String, variable3: String, variable4: String, variable5: String, variable6: String, variable7: String)\nParameters:\n    urlOrHTML: URL Or HTML. Url Or HTML. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"openURL\"(Display contents of URL:), \"renderHTML\"(Render HTML).\n    html: HTML.\n    url: URL.\n    windowBackground: Window background. Webview Background. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"transparent\"(transparent), \"white\"(white).\n    width: Width.\n    height: Height.\n    resizable: Resizable.\n    position: Show window at position. Relative Web View Positioning. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"bottom_left_main\"(bottom left corner of main screen), \"mouse_pos\"(current mouse position), \"center_mouse_screen\"(center of screen with mouse), \"top_left_webview_top_left_mouse_screen\"(top left of screen with mouse), \"top_right_webview_top_right_mouse_screen\"(top right of screen with mouse), \"bottom_left_webview_bottom_left_mouse_screen\"(bottom left of screen with mouse), \"bottom_right_webview_bottom_right_mouse_screen\"(bottom right of screen with mouse).\n    offsetX: Offset X.\n    offsetY: Offset Y.\n    movable: Window Movable. Floating HTML Movable. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"byDragging\"(by dragging anywhere), \"byDraggingAndHoldingCMD\"(by dragging anywhere while holding cmd).\n    updatePosition: Save updated position after manually moving the view.\n    titlebar: Titlebar Style. WebiewTitlebarStyle. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"standardTitlebar\"(standard titlebar), \"titlebarAboveContent\"(titlebar overlays content), \"transparentTitlebar\"(transparent titlebar), \"noTitlebar\"(no titlebar).\n    windowShadow: Draw window shadow.\n    ignoreMouseEvents: Ignore mouse events / click through.\n    closeWhenClickingOutside: Close when clicking outside.\n    showBTTDockIcon: Show BTT Dock icon.\n    zIndex: Z Index. Floating Web View Level. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"above_all\"(Float above all other windows), \"stick_to_desktop\"(Stick to desktop, behind all other windows), \"manual\"(Specify window z-index / level manually), \"standard\"(behave like standard window).\n    zIndexManual: Z Index Manual.\n    whenRunMultipleTimes: When Run Multiple Times. When Running Multiple Times. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"toggleBetweenVisibleAndHidden\"(toggle between visible and hidden), \"keepVisibleButRefreshContent\"(keep visible but refresh content).\n    doNotKeepActiveInBackground: Do NOT keep active In background.\n    userAgent: Use Custom User Agent.\n    systemBrowserPrefix: Open links with prefix (e.g. http) in system browser.\n    closeAfterSystemBrowserOpen: Close after system browser open.\n    userScript: User Script to execute after content has loaded.\n    identifierW: Unique Name.\n    input: Input.\n    sharedSecret: Shared Secret (please specify if opening untrusted URLs or HTML).\n    variable1: @Variable1@.\n    variable2: @Variable2@.\n    variable3: @Variable3@.\n    variable4: @Variable4@.\n    variable5: @Variable5@.\n    variable6: @Variable6@.\n    variable7: @Variable7@.\nDescription:\n    Display scriptable HTML or Website in floating web view: This is a very powerful action that allows you to display a floating webview that has all the power to run BetterTouchTool actions, shortcuts and even apple or shell scripts. Find more information on http://docs.folivora.ai/docs/10_0_floating_html_menu.html\nParameterSummary: (urlOrHTML,input,identifierW,html,windowBackground,width,height,resizable,movable,updatePosition,windowShadow,ignoreMouseEvents,closeWhenClickingOutside,showBTTDockIcon,zIndex,position,doNotKeepActiveInBackground,userAgent,systemBrowserPrefix,userScript,sharedSecret,titlebar,variable1,variable2,variable3,variable4,variable5,variable6,variable7,whenRunMultipleTimes) ${urlOrHTML} specified under 'more'. Optionally replace any occurence of @ShortcutInput@ with ${input} . Use this identifier to persist settings: ${identifierW}. ; (urlOrHTML,input,identifierW,windowBackground,width,height,resizable,movable,updatePosition,windowShadow,ignoreMouseEvents,closeWhenClickingOutside,showBTTDockIcon,zIndex,position,doNotKeepActiveInBackground,userAgent,systemBrowserPrefix,closeAfterSystemBrowserOpen,userScript,sharedSecret,html,titlebar,variable1,variable2,variable3,variable4,variable5,variable6,variable7,whenRunMultipleTimes) ${urlOrHTML} specified under 'more'. Optionally replace any occurence of @ShortcutInput@ with ${input} . Use this identifier to persist settings: ${identifierW}. ; (urlOrHTML,input,identifierW,html,windowBackground,width,height,resizable,movable,updatePosition,windowShadow,ignoreMouseEvents,closeWhenClickingOutside,showBTTDockIcon,zIndex,zIndexManual,position,doNotKeepActiveInBackground,userAgent,systemBrowserPrefix,userScript,sharedSecret,titlebar,variable1,variable2,variable3,variable4,variable5,variable6,variable7,whenRunMultipleTimes) ${urlOrHTML} specified under 'more'. Optionally replace any occurence of @ShortcutInput@ with ${input} . Use this identifier to persist settings: ${identifierW}. ; (urlOrHTML,input,identifierW,windowBackground,width,height,resizable,movable,updatePosition,windowShadow,ignoreMouseEvents,closeWhenClickingOutside,showBTTDockIcon,zIndex,zIndexManual,position,doNotKeepActiveInBackground,userAgent,systemBrowserPrefix,closeAfterSystemBrowserOpen,userScript,sharedSecret,html,titlebar,variable1,variable2,variable3,variable4,variable5,variable6,variable7,whenRunMultipleTimes) ${urlOrHTML} specified under 'more'. Optionally replace any occurence of @ShortcutInput@ with ${input} . Use this identifier to persist settings: ${identifierW}. ; (urlOrHTML,input,identifierW,html,windowBackground,width,height,resizable,movable,updatePosition,windowShadow,ignoreMouseEvents,closeWhenClickingOutside,showBTTDockIcon,zIndex,position,offsetX,offsetY,doNotKeepActiveInBackground,userAgent,systemBrowserPrefix,userScript,sharedSecret,titlebar,variable1,variable2,variable3,variable4,variable5,variable6,variable7,whenRunMultipleTimes) ${urlOrHTML} specified under 'more'. Optionally replace any occurence of @ShortcutInput@ with ${input} . Use this identifier to persist settings: ${identifierW}. ; (urlOrHTML,input,identifierW,windowBackground,width,height,resizable,movable,updatePosition,windowShadow,ignoreMouseEvents,closeWhenClickingOutside,showBTTDockIcon,zIndex,position,offsetX,offsetY,doNotKeepActiveInBackground,userAgent,systemBrowserPrefix,closeAfterSystemBrowserOpen,userScript,sharedSecret,html,titlebar,variable1,variable2,variable3,variable4,variable5,variable6,variable7,whenRunMultipleTimes) ${urlOrHTML} specified under 'more'. Optionally replace any occurence of @ShortcutInput@ with ${input} . Use this identifier to persist settings: ${identifierW}. ; (urlOrHTML,input,identifierW,html,windowBackground,width,height,resizable,movable,updatePosition,windowShadow,ignoreMouseEvents,closeWhenClickingOutside,showBTTDockIcon,zIndex,zIndexManual,position,offsetX,offsetY,doNotKeepActiveInBackground,userAgent,systemBrowserPrefix,userScript,sharedSecret,titlebar,variable1,variable2,variable3,variable4,variable5,variable6,variable7,whenRunMultipleTimes) ${urlOrHTML} specified under 'more'. Optionally replace any occurence of @ShortcutInput@ with ${input} . Use this identifier to persist settings: ${identifierW}. ; (urlOrHTML,input,identifierW,windowBackground,width,height,resizable,movable,updatePosition,windowShadow,ignoreMouseEvents,closeWhenClickingOutside,showBTTDockIcon,zIndex,zIndexManual,position,offsetX,offsetY,doNotKeepActiveInBackground,userAgent,systemBrowserPrefix,closeAfterSystemBrowserOpen,userScript,sharedSecret,html,titlebar,variable1,variable2,variable3,variable4,variable5,variable6,variable7,whenRunMultipleTimes) ${urlOrHTML} specified under 'more'. Optionally replace any occurence of @ShortcutInput@ with ${input} . Use this identifier to persist settings: ${identifierW}. ; (urlOrHTML,url,input,identifierW,windowBackground,width,height,resizable,movable,updatePosition,windowShadow,ignoreMouseEvents,closeWhenClickingOutside,showBTTDockIcon,zIndex,position,doNotKeepActiveInBackground,userAgent,systemBrowserPrefix,userScript,sharedSecret,titlebar,variable1,variable2,variable3,variable4,variable5,variable6,variable7,whenRunMultipleTimes) ${urlOrHTML} ${url}. Optionally replace any occurence of @ShortcutInput@ with ${input} . Use this identifier to persist settings: ${identifierW}. ; (urlOrHTML,url,input,identifierW,windowBackground,width,height,resizable,movable,updatePosition,windowShadow,ignoreMouseEvents,closeWhenClickingOutside,showBTTDockIcon,zIndex,position,doNotKeepActiveInBackground,userAgent,systemBrowserPrefix,closeAfterSystemBrowserOpen,userScript,sharedSecret,titlebar,variable1,variable2,variable3,variable4,variable5,variable6,variable7,whenRunMultipleTimes) ${urlOrHTML} ${url}. Optionally replace any occurence of @ShortcutInput@ with ${input} . Use this identifier to persist settings: ${identifierW}. ; (urlOrHTML,url,input,identifierW,windowBackground,width,height,resizable,movable,updatePosition,windowShadow,ignoreMouseEvents,closeWhenClickingOutside,showBTTDockIcon,zIndex,zIndexManual,position,doNotKeepActiveInBackground,userAgent,systemBrowserPrefix,userScript,sharedSecret,titlebar,variable1,variable2,variable3,variable4,variable5,variable6,variable7,whenRunMultipleTimes) ${urlOrHTML} ${url}. Optionally replace any occurence of @ShortcutInput@ with ${input} . Use this identifier to persist settings: ${identifierW}. ; (urlOrHTML,url,input,identifierW,windowBackground,width,height,resizable,movable,updatePosition,windowShadow,ignoreMouseEvents,closeWhenClickingOutside,showBTTDockIcon,zIndex,zIndexManual,position,doNotKeepActiveInBackground,userAgent,systemBrowserPrefix,closeAfterSystemBrowserOpen,userScript,sharedSecret,titlebar,variable1,variable2,variable3,variable4,variable5,variable6,variable7,whenRunMultipleTimes) ${urlOrHTML} ${url}. Optionally replace any occurence of @ShortcutInput@ with ${input} . Use this identifier to persist settings: ${identifierW}. ; (urlOrHTML,url,input,identifierW,windowBackground,width,height,resizable,movable,updatePosition,windowShadow,ignoreMouseEvents,closeWhenClickingOutside,showBTTDockIcon,zIndex,position,offsetX,offsetY,doNotKeepActiveInBackground,userAgent,systemBrowserPrefix,userScript,sharedSecret,titlebar,variable1,variable2,variable3,variable4,variable5,variable6,variable7,whenRunMultipleTimes) ${urlOrHTML} ${url}. Optionally replace any occurence of @ShortcutInput@ with ${input} . Use this identifier to persist settings: ${identifierW}. ; (urlOrHTML,url,input,identifierW,windowBackground,width,height,resizable,movable,updatePosition,windowShadow,ignoreMouseEvents,closeWhenClickingOutside,showBTTDockIcon,zIndex,position,offsetX,offsetY,doNotKeepActiveInBackground,userAgent,systemBrowserPrefix,closeAfterSystemBrowserOpen,userScript,sharedSecret,titlebar,variable1,variable2,variable3,variable4,variable5,variable6,variable7,whenRunMultipleTimes) ${urlOrHTML} ${url}. Optionally replace any occurence of @ShortcutInput@ with ${input} . Use this identifier to persist settings: ${identifierW}. ; (urlOrHTML,url,input,identifierW,windowBackground,width,height,resizable,movable,updatePosition,windowShadow,ignoreMouseEvents,closeWhenClickingOutside,showBTTDockIcon,zIndex,zIndexManual,position,offsetX,offsetY,doNotKeepActiveInBackground,userAgent,systemBrowserPrefix,userScript,sharedSecret,titlebar,variable1,variable2,variable3,variable4,variable5,variable6,variable7,whenRunMultipleTimes) ${urlOrHTML} ${url}. Optionally replace any occurence of @ShortcutInput@ with ${input} . Use this identifier to persist settings: ${identifierW}. ; (urlOrHTML,url,input,identifierW,windowBackground,width,height,resizable,movable,updatePosition,windowShadow,ignoreMouseEvents,closeWhenClickingOutside,showBTTDockIcon,zIndex,zIndexManual,position,offsetX,offsetY,doNotKeepActiveInBackground,userAgent,systemBrowserPrefix,closeAfterSystemBrowserOpen,userScript,sharedSecret,titlebar,variable1,variable2,variable3,variable4,variable5,variable6,variable7,whenRunMultipleTimes) ${urlOrHTML} ${url}. Optionally replace any occurence of @ShortcutInput@ with ${input} . Use this identifier to persist settings: ${identifierW}. ; (urlOrHTML,input,identifierW,windowBackground,width,height,resizable,movable,updatePosition,windowShadow,ignoreMouseEvents,closeWhenClickingOutside,showBTTDockIcon,zIndex,position,doNotKeepActiveInBackground,userAgent,systemBrowserPrefix,userScript,sharedSecret,titlebar,variable1,variable2,variable3,variable4,variable5,variable6,variable7,whenRunMultipleTimes) ${urlOrHTML} Optionally replace any occurence of @ShortcutInput@ with ${input} . Use this identifier to persist settings: ${identifierW}. ; (urlOrHTML,input,identifierW,windowBackground,width,height,resizable,movable,updatePosition,windowShadow,ignoreMouseEvents,closeWhenClickingOutside,showBTTDockIcon,zIndex,position,doNotKeepActiveInBackground,userAgent,systemBrowserPrefix,closeAfterSystemBrowserOpen,userScript,sharedSecret,titlebar,variable1,variable2,variable3,variable4,variable5,variable6,variable7,whenRunMultipleTimes) ${urlOrHTML} Optionally replace any occurence of @ShortcutInput@ with ${input} . Use this identifier to persist settings: ${identifierW}. ; (urlOrHTML,input,identifierW,windowBackground,width,height,resizable,movable,updatePosition,windowShadow,ignoreMouseEvents,closeWhenClickingOutside,showBTTDockIcon,zIndex,zIndexManual,position,doNotKeepActiveInBackground,userAgent,systemBrowserPrefix,userScript,sharedSecret,titlebar,variable1,variable2,variable3,variable4,variable5,variable6,variable7,whenRunMultipleTimes) ${urlOrHTML} Optionally replace any occurence of @ShortcutInput@ with ${input} . Use this identifier to persist settings: ${identifierW}. ; (urlOrHTML,input,identifierW,windowBackground,width,height,resizable,movable,updatePosition,windowShadow,ignoreMouseEvents,closeWhenClickingOutside,showBTTDockIcon,zIndex,zIndexManual,position,doNotKeepActiveInBackground,userAgent,systemBrowserPrefix,closeAfterSystemBrowserOpen,userScript,sharedSecret,titlebar,variable1,variable2,variable3,variable4,variable5,variable6,variable7,whenRunMultipleTimes) ${urlOrHTML} Optionally replace any occurence of @ShortcutInput@ with ${input} . Use this identifier to persist settings: ${identifierW}. ; (urlOrHTML,input,identifierW,windowBackground,width,height,resizable,movable,updatePosition,windowShadow,ignoreMouseEvents,closeWhenClickingOutside,showBTTDockIcon,zIndex,position,offsetX,offsetY,doNotKeepActiveInBackground,userAgent,systemBrowserPrefix,userScript,sharedSecret,titlebar,variable1,variable2,variable3,variable4,variable5,variable6,variable7,whenRunMultipleTimes) ${urlOrHTML} Optionally replace any occurence of @ShortcutInput@ with ${input} . Use this identifier to persist settings: ${identifierW}. ; (urlOrHTML,input,identifierW,windowBackground,width,height,resizable,movable,updatePosition,windowShadow,ignoreMouseEvents,closeWhenClickingOutside,showBTTDockIcon,zIndex,position,offsetX,offsetY,doNotKeepActiveInBackground,userAgent,systemBrowserPrefix,closeAfterSystemBrowserOpen,userScript,sharedSecret,titlebar,variable1,variable2,variable3,variable4,variable5,variable6,variable7,whenRunMultipleTimes) ${urlOrHTML} Optionally replace any occurence of @ShortcutInput@ with ${input} . Use this identifier to persist settings: ${identifierW}. ; (urlOrHTML,input,identifierW,windowBackground,width,height,resizable,movable,updatePosition,windowShadow,ignoreMouseEvents,closeWhenClickingOutside,showBTTDockIcon,zIndex,zIndexManual,position,offsetX,offsetY,doNotKeepActiveInBackground,userAgent,systemBrowserPrefix,closeAfterSystemBrowserOpen,userScript,sharedSecret,titlebar,variable1,variable2,variable3,variable4,variable5,variable6,variable7,whenRunMultipleTimes) ${urlOrHTML} Optionally replace any occurence of @ShortcutInput@ with ${input} . Use this identifier to persist settings: ${identifierW}. \n",
    "com.hegenberg.BetterTouchTool.GetSelectedTextIntent": "com.hegenberg.BetterTouchTool.GetSelectedTextIntent() -> Get Selected Text\n                            : String\nReturn Value:\n    Get Selected Text: \nDescription:\n    Get Selected Text\nParameterSummary: () Get Selected Text\n",
    "com.hegenberg.BetterTouchTool.HapticFeedbackIntent": "com.hegenberg.BetterTouchTool.HapticFeedbackIntent(feedbackType: HapticFeedbackTypeAppEnum(Enum))\nParameters:\n    feedbackType: Feedback Type. Feedback Intensity. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"0\"(very light), \"1\"(light), \"2\"(strong), \"3\"(light then strong), \"4\"(double strong), \"5\"(double light), \"6\"(spring light), \"7\"(spring strong), \"8\"(triple strong), \"9\"(triple light), \"10\"(light 2), \"11\"(default normal click), \"12\"(default force click), \"13\"(silent normal click), \"14\"(silent force click).\nDescription:\n    Haptic Feedback\nParameterSummary: (feedbackType) Perform haptic feedback on trackpad with intensity ${feedbackType}\n",
    "com.hegenberg.BetterTouchTool.MinimizeWindowUnderCursorIntent": "com.hegenberg.BetterTouchTool.MinimizeWindowUnderCursorIntent()\nDescription:\n    Minimize Window Under Cursor\nParameterSummary: () Minimize Window Under Cursor\n",
    "com.hegenberg.BetterTouchTool.MissionControlIntent": "com.hegenberg.BetterTouchTool.MissionControlIntent()\nDescription:\n    Mission Control and preview desktops: Launches Mission Control and immediately opens the desktop previews\nParameterSummary: () Opens Mission Control and Shows Previews\n",
    "com.hegenberg.BetterTouchTool.MouseClicksIntent": "com.hegenberg.BetterTouchTool.MouseClicksIntent(clickType: ClickTypeAppEnum(Enum) = \"0\", clickAmount: ClickAmountAppEnum(Enum), useCurrentlyPressedModifiers: ModifiersMouseClickAppEnum(Enum) = \"0\", shift: Bool, fn: Bool, ctrl: Bool, opt: Bool, cmd: Bool, upDown: DownUpClickAppEnum(Enum) = \"0\")\nParameters:\n    clickType: Click Type. Click Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"0\"(left mouse button), \"1\"(middle mouse button), \"2\"(right mouse button), \"3\"(button 4), \"4\"(button 5), \"5\"(button 6), \"6\"(button 7), \"7\"(button 8).\n    clickAmount: Click Amount. Click Amount. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"1\"(single click), \"2\"(double click), \"3\"(triple click).\n    useCurrentlyPressedModifiers: Use Currently Pressed Modifiers. ModifiersMouseClick. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"0\"(use currently pressed modifier keys), \"1\"(specify modifier keys manually).\n    shift: Shift.\n    fn: Fn.\n    ctrl: Ctrl.\n    opt: Opt.\n    cmd: Cmd.\n    upDown: Trigger Dow & Up?. Down Up Click. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"0\"(mouse up and down), \"1\"(only mouse down), \"2\"(only mouse up).\nDescription:\n    Mouse Clicks\nParameterSummary: (clickAmount,clickType,useCurrentlyPressedModifiers,upDown) Perform ${clickAmount}with ${clickType}.\n",
    "com.hegenberg.BetterTouchTool.MoveMouseIntent": "com.hegenberg.BetterTouchTool.MoveMouseIntent(x: Integer, y: Integer, anchorPoint: RelativeMouseMovementsAppEnum(Enum) = \"0\", combinedXY: String = \"{0,0}\", moveType: MoveTypeAppEnum(Enum))\nParameters:\n    x: X.\n    y: Y.\n    anchorPoint: anchor point. Relative Mouse Movements. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"0\"(global position (origin top left corner of main monitor)), \"1\"(top right corner of main screen), \"2\"(bottom left corner of main screen), \"3\"(bottom right corner of main screen), \"4\"(top left corner of screen with mouse), \"5\"(top right corner of screen with mouse), \"6\"(bottom left corner of screen with mouse), \"7\"(bottom right corner of screen with mouse), \"8\"(top left corner of active window), \"9\"(top right corner of active window), \"10\"(bottom left corner of active window), \"11\"(bottom right corner of active window), \"12\"(current mouse position), \"13\"(top left of focused element), \"14\"(top right of focused element), \"15\"(bottom left of focused element), \"16\"(bottom right of focused element), \"17\"(center of focused element), \"18\"(window default button center (if any)), \"19\"(window cancel button center (if any)), \"20\"(center of active window).\n    combinedXY: Combined XY.\n    moveType: Move Type. Move Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"0\"(Move mouse), \"1\"(Drag mouse with left mouse button), \"2\"(Drag mouse with middle mouse button).\nDescription:\n    Move / Drag Mouse: Move or drag the mouse cursor to a position. You can specify x and y separately or use the combinedXY parameter which needs to be input in this format: {X,Y}\nParameterSummary: (moveType,x,y,anchorPoint,combinedXY)  ${moveType} right by: ${x} down by: ${y} relative to: ${anchorPoint} (You can use negative nubers to move left / up)\n",
    "com.hegenberg.BetterTouchTool.NightShiftIntent": "com.hegenberg.BetterTouchTool.NightShiftIntent()\nDescription:\n    Night Shift\nParameterSummary: () Night Shift\n",
    "com.hegenberg.BetterTouchTool.PastePreviousClipboardItemsIntent": "com.hegenberg.BetterTouchTool.PastePreviousClipboardItemsIntent(itemsToPaste: String, pasteStyle: PasteStyleAppEnum(Enum) = \"1\")\nParameters:\n    itemsToPaste: Items To Paste (comma separated, e.g. 2, 4, 5).\n    pasteStyle: Paste Style. Paste Style. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"1\"(paste with format), \"2\"(paste plain text), \"3\"(type content), \"4\"(paste as one line plain text), \"5\"(paste as file), \"6\"(just copy to clipboard).\nDescription:\n    Paste Previous Clipboard Items\nParameterSummary: () Paste Previous Clipboard Items\n",
    "com.hegenberg.BetterTouchTool.RestoreSavedMousePosIntent": "com.hegenberg.BetterTouchTool.RestoreSavedMousePosIntent()\nDescription:\n    Restore Saved Mouse Pos\nParameterSummary: () Restore Saved Mouse Pos\n",
    "com.hegenberg.BetterTouchTool.RestoreWindowLayoutIntent": "com.hegenberg.BetterTouchTool.RestoreWindowLayoutIntent(layoutName: String)\nParameters:\n    layoutName: Layout Name.\nDescription:\n    Restore Window Layout: Restores a previously saved window layout with the provided name.\nParameterSummary: (layoutName) Restore saved window layout with name: ${layoutName}\n",
    "com.hegenberg.BetterTouchTool.RunRealJavaScriptIntent": "com.hegenberg.BetterTouchTool.RunRealJavaScriptIntent(javascript: String = \"let input = @ShortcutInput@;\n#Insert script code here\noutputToShortcuts('please call the outputToShortcuts function somwhere in your script');\", input: String) -> Run Real Java Script\n                            : String\nParameters:\n    javascript: Javascript.\n    input: Input.\nReturn Value:\n    Run Real Java Script: \nDescription:\n    Run Real Java Script: Usage examples can be found here: https://docs.folivora.ai/docs/1106_java_script.html\nParameterSummary: (input,javascript) Run BTT Java Script (configured under \\\"show more\\\"). Replace occurences of @ShortcutInput@ in script with ${input}\n",
    "com.hegenberg.BetterTouchTool.SaveMousePosIntent": "com.hegenberg.BetterTouchTool.SaveMousePosIntent()\nDescription:\n    Save Mouse Pos\nParameterSummary: () Save Mouse Pos\n",
    "com.hegenberg.BetterTouchTool.SaveWindowLayoutIntent": "com.hegenberg.BetterTouchTool.SaveWindowLayoutIntent(layoutName: String)\nParameters:\n    layoutName: Layout Name.\nDescription:\n    Save Current Window Layout: Saves the current window positions under the provided name, so the layout can be restored at a later point.\nParameterSummary: (layoutName) Save the current window layout under this name: ${layoutName}\n",
    "com.hegenberg.BetterTouchTool.SendKeyboardShortcutIntent": "com.hegenberg.BetterTouchTool.SendKeyboardShortcutIntent(cmd: Bool, ctrl: Bool, opt: Bool, shift: Bool, fn: Bool, keyOrKeyCode: KeyOrKeycodeAppEnum(Enum) = \"character\", character: String, keyCode: Integer, app: AppAppEntity(Object), bringAppToFront: Bool, switchBackAfterSending: Bool)\nParameters:\n    cmd: Cmd.\n    ctrl: Ctrl.\n    opt: Opt.\n    shift: Shift.\n    fn: Fn.\n    keyOrKeyCode: Key Or Key Code. Key Or Keycode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"character\"(Character), \"keyCode\"(Key Code).\n    character: Character.\n    keyCode: Key Code.\n    app: App. App.\n    bringAppToFront: Bring app to front before sending.\n    switchBackAfterSending: Switch back after sending.\nDescription:\n    Send Keyboard Shortcut\nParameterSummary: (cmd,ctrl,opt,shift,fn,keyOrKeyCode,character,app,bringAppToFront) Send shortcut cmd: ${cmd} ctrl: ${ctrl} opt: ${opt} shift: ${shift} fn: ${fn} ${keyOrKeyCode} ${character} to app: ${app}; (cmd,ctrl,opt,shift,fn,keyOrKeyCode,character,app,bringAppToFront,switchBackAfterSending) Send shortcut cmd: ${cmd} ctrl: ${ctrl} opt: ${opt} shift: ${shift} fn: ${fn} ${keyOrKeyCode} ${character} to app: ${app}; (cmd,ctrl,opt,shift,fn,keyOrKeyCode,keyCode,app,bringAppToFront) Send shortcut cmd: ${cmd} ctrl: ${ctrl} opt: ${opt} shift: ${shift} fn: ${fn} ${keyOrKeyCode} ${keyCode} to app: ${app}; (cmd,ctrl,opt,shift,fn,keyOrKeyCode,keyCode,app,bringAppToFront,switchBackAfterSending) Send shortcut cmd: ${cmd} ctrl: ${ctrl} opt: ${opt} shift: ${shift} fn: ${fn} ${keyOrKeyCode} ${keyCode} to app: ${app}; (cmd,ctrl,opt,shift,fn,keyOrKeyCode,app,bringAppToFront) Send shortcut cmd: ${cmd} ctrl: ${ctrl} opt: ${opt} shift: ${shift} fn: ${fn} ${keyOrKeyCode}  to app: ${app}; (cmd,ctrl,opt,shift,fn,keyOrKeyCode,app,bringAppToFront,switchBackAfterSending) Send shortcut cmd: ${cmd} ctrl: ${ctrl} opt: ${opt} shift: ${shift} fn: ${fn} ${keyOrKeyCode}  to app: ${app}\n",
    "com.hegenberg.BetterTouchTool.ShowClipboardManagerIntent": "com.hegenberg.BetterTouchTool.ShowClipboardManagerIntent()\nDescription:\n    Show Clipboard Manager: Shows the BetterTouchTool Clipboard Manager\nParameterSummary: () Show Clipboard Manager\n",
    "com.hegenberg.BetterTouchTool.ShowHUDIntent": "com.hegenberg.BetterTouchTool.ShowHUDIntent(backgroundColor: String = \"30,30,30,180\", duration: Float, direction: HudDirectionAppEnum(Enum), imageOrText: HudTypeAppEnum(Enum) = \"ShowText\", title: String, subTitle: String, imageFile: 12(Object), inputTitle: String)\nParameters:\n    backgroundColor: Background Color (R,G,B,A).\n    duration: Show Duration.\n    direction: Fade Away Direction. HUDDirection. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"0\"(up), \"1\"(down), \"2\"(left), \"3\"(right).\n    imageOrText: Image Or Text. HUDType. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"ShowImage\"(image), \"ShowText\"(use text or emoji:).\n    title: Title.\n    subTitle: Sub Title.\n    imageFile: Image File.\n    inputTitle: Input Title.\nDescription:\n    Show HUD\nParameterSummary: (imageOrText,imageFile,backgroundColor,duration,direction,inputTitle) Show HUD Overlay, ${imageOrText} ${imageFile}; (imageOrText,backgroundColor,duration,direction,inputTitle) Show HUD Overlay, ${imageOrText}\n",
    "com.hegenberg.BetterTouchTool.ShowHideCursorIntent": "com.hegenberg.BetterTouchTool.ShowHideCursorIntent(action: HideCursorActionAppEnum(Enum) = \"toggle\")\nParameters:\n    action: Action. HideCursorAction. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"toggle\"(toggle between hidden and visible cursor), \"hide\"(hide cursor), \"show\"(show cursor).\nDescription:\n    Show Hide Cursor\nParameterSummary: () Show Hide Cursor\n",
    "com.hegenberg.BetterTouchTool.ShowMenubarInContextMenuIntent": "com.hegenberg.BetterTouchTool.ShowMenubarInContextMenuIntent()\nDescription:\n    Show Menubar In Context Menu\nParameterSummary: () Show Menubar In Context Menu\n",
    "com.hegenberg.BetterTouchTool.SleepDisplayIntent": "com.hegenberg.BetterTouchTool.SleepDisplayIntent()\nDescription:\n    Sleep Display\nParameterSummary: () Sleep Display\n",
    "com.hegenberg.BetterTouchTool.SwitchToLoginscreenIntent": "com.hegenberg.BetterTouchTool.SwitchToLoginscreenIntent()\nDescription:\n    Switch To Loginscreen\nParameterSummary: () Switch To Loginscreen\n",
    "com.hegenberg.BetterTouchTool.ToggleCursorSizeIntent": "com.hegenberg.BetterTouchTool.ToggleCursorSizeIntent(cursorSize: Float = \"350\")\nParameters:\n    cursorSize: Cursor Size (%%).\nDescription:\n    Toggle Cursor Size\nParameterSummary: () Toggle Cursor Size\n",
    "com.hegenberg.BetterTouchTool.TriggerContextMenuItemIntent": "com.hegenberg.BetterTouchTool.TriggerContextMenuItemIntent(contextMenuTrigger: String, howToUse: String = \"Using this you can trigger context-menu items or sub-items for the current mouse-cursor position in any application. To do this just enter the path to the item separated by ;\n\nFor example, if you want to trigger the \"Open Link in New Tab\" item that is available in Safari when right-clicking a link, just enter \"Open Link in New Tab\" (without the quotes!).\nIf you want to trigger the \"Share => Mail\" item in Finder you'd enter \"Share;Mail;\"\n\nYou can also trigger an item by it's position (e.g. if the title varies). For example: \"Share;(2)\" will trigger the second item in the Share menu in Safari. \"(1);(2)\" will select the first context-menu item and if it has a sub-menu it will trigger its second item. Just always put the position in parentheses.\n\nIf an item can have multiple names based on it's state (e.g. hide and show), or if you want to trigger a similar item in different applications where it may have slightly different names, you can use || to trigger either one of them. For example Reload||Reload Page; will work in Safari and Chrome\n\nAdditionally you can also use a wildcard * if a menu-item has variable parts.\")\nParameters:\n    contextMenuTrigger: Context Menu Trigger.\n    howToUse: How To Use.\nDescription:\n    Trigger Context Menu Item\nParameterSummary: (contextMenuTrigger,howToUse) Trigger context menu item ${contextMenuTrigger}\n",
    "com.hegenberg.BetterTouchTool.TriggerMenubarItemIntent": "com.hegenberg.BetterTouchTool.TriggerMenubarItemIntent(menubarTrigger: String, howToUse: String = \"How to use:\nEnter the path to the menubar item you want to click in the textfield above, separated by semicolons. For example: \"File;New;Window\" (without the quotes!) will trigger the menubar item named \"Window\"\n\nYou can also trigger a menu-item by it's position (e.g. if the title varies). For example: \"File;(2)\" will trigger the second item in the File menu. \"(2);(2)\" will trigger the second item in the File menu. Just always put the position in parentheses.\n\nIf you want to trigger an item from the Apple menu, use \"apple\". For example: \"apple;Dock;Turn Hiding On\".\n\nIf an item can have multiple names based on it's state (e.g. hide and show) you can use || to toggle one of them. For example Edit;Start Dictation||Cancel Dictation will either start or cancel dictation :-)\n\nAdditionally you can also use a wildcard * if a menu-item has variable parts.\")\nParameters:\n    menubarTrigger: Menubar trigger path.\n    howToUse: How To Use.\nDescription:\n    Trigger Menu Bar Item\nParameterSummary: (menubarTrigger,howToUse) Trigger menubar menu item ${menubarTrigger}\n",
    "com.hegenberg.BetterTouchTool.TriggerNamedTriggerIntent": "com.hegenberg.BetterTouchTool.TriggerNamedTriggerIntent(namedTriggerName: String) -> Execute Named Trigger in BetterTouchTool\n                            : String\nParameters:\n    namedTriggerName: Named Trigger Name.\nReturn Value:\n    Execute Named Trigger in BetterTouchTool: \nDescription:\n    Execute Named Trigger in BetterTouchTool: This triggers a Named Trigger configured in the \"Named & Other Triggers\" section in BetterTouchTool.\nParameterSummary: (namedTriggerName) Execute Named Trigger: ${namedTriggerName}\n",
    "com.hegenberg.BetterTouchTool.TypeOrPasteTextIntent": "com.hegenberg.BetterTouchTool.TypeOrPasteTextIntent(text: String, format: PasteFormatAppEnum(Enum) = \"0\", insertBy: InsertTextByAppEnum(Enum), defaultString: Bool, moveTextCursor: Integer, richtext: Bool)\nParameters:\n    text: Text.\n    format: Paste Format. Paste Format. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"0\"(plain), \"1\"(rich), \"2\"(Interpret entered text as HTML source), \"3\"(Interpret entered text as RTF source), \"4\"(Interpret entered text as RTFD source), \"5\"(Interpret entered text as file URL), \"6\"(Interpret entered text as internet URL), \"7\"(Interpret entered base64 text as PNG), \"8\"(Interpret entered base64 text as PDF), \"9\"(Interpret entered text as color).\n    insertBy: Insert By. Insert Text By. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"pasting\"(pasting), \"typing\"(typing).\n    defaultString: Paste as plaintext if app does not support selected format.\n    moveTextCursor: Move text cursor X places left after pasting/typing.\n    richtext: Richtext (deprected use paste format instead).\nDescription:\n    Type Or Paste Custom Text: Type or paste the provided text, you can use different output formats.\nParameterSummary: () Type Or Paste Custom Text\n",
    "com.hegenberg.BetterTouchTool.UploadToIMGURIntent": "com.hegenberg.BetterTouchTool.UploadToIMGURIntent(picture: 12(Object)) -> Upload To Imgur.com\n                            : String\nParameters:\n    picture: Picture.\nReturn Value:\n    Upload To Imgur.com: \nDescription:\n    Upload To Imgur.com: Uploads the given picture to imgur.com\nParameterSummary: (picture) Upload the given picture to Imgur.com\n",
    "com.hegenberg.BetterTouchTool.ZoomWindowUnderCursorIntent": "com.hegenberg.BetterTouchTool.ZoomWindowUnderCursorIntent()\nDescription:\n    Zoom Window Under Cursor\nParameterSummary: () Zoom Window Under Cursor\n",
    "fyi.lunar.Lunar.AdjustHardwareColorsIntent": "fyi.lunar.Lunar.AdjustHardwareColorsIntent(screen: Screen(Object), red: Integer = \"50\", green: Integer = \"50\", blue: Integer = \"50\", delayBetween: Bool = \"0\")\nParameters:\n    screen: Screen. Screen.\n    red: Red. The red color gain value..\n    green: Green. The green color gain value..\n    blue: Blue. The blue color gain value..\n    delayBetween: Add a small delay between sending each color.\nDescription:\n    Adjust Colors of a Screen (in hardware): Adjusts screen colors by changing the Color Gain values for Red, Green and Blue using DDC. The adjustments are stored in the monitor memory and should persist over different ports.\n\nOn most monitors, 50 is the default value, but this can vary and is not easily detectable. Use the \"Reset Color Adjustments (in hardware)\" action if you need to reset these values to default.\n\nNote: not all monitors support color gain control through DDC and value effect can vary a lot.\nParameterSummary: (red,green,blue,screen,delayBetween) Adjust color gain to（${red} Red｜${green} Green｜${blue} Blue）for ${screen}\n",
    "fyi.lunar.Lunar.AdjustSoftwareColorsAdvancesIntent": "fyi.lunar.Lunar.AdjustSoftwareColorsAdvancesIntent(screen: Screen(Object), minRed: Float = \"0\", minGreen: Float = \"0\", minBlue: Float = \"0\", maxRed: Float = \"1\", maxGreen: Float = \"1\", maxBlue: Float = \"1\", redFactor: Float = \"1\", greenFactor: Float = \"1\", blueFactor: Float = \"1\")\nParameters:\n    screen: Screen. Screen.\n    minRed: Min Red.\n    minGreen: Min Green.\n    minBlue: Min Blue.\n    maxRed: Max Red.\n    maxGreen: Max Green.\n    maxBlue: Max Blue.\n    redFactor: Red Factor.\n    greenFactor: Green Factor.\n    blueFactor: Blue Factor.\nDescription:\n    Adjust Advanced Colors of a Screen (in software): Adjusts screen colors by changing the min, max and Gamma factor values for Red, Green and Blue. The adjustments stick as long as Lunar is running (not persistent), but they are re-applied when Lunar is relaunched.\nParameterSummary: (minRed,minGreen,minBlue,maxRed,maxGreen,maxBlue,redFactor,greenFactor,blueFactor,screen) Adjust Gamma to（${minRed} Min Red｜${minGreen} Min Green｜${minBlue} Min Blue,（${maxRed} Max Red｜${maxGreen} Max Green｜${maxBlue} Max Blue）and（${redFactor} Red Factor｜${greenFactor} Green Factor｜${blueFactor} Blue Factor）for ${screen}\n",
    "fyi.lunar.Lunar.AdjustSoftwareColorsIntent": "fyi.lunar.Lunar.AdjustSoftwareColorsIntent(screen: Screen(Object), red: Float = \"0.5\", green: Float = \"0.5\", blue: Float = \"0.5\")\nParameters:\n    screen: Screen. Screen.\n    red: Red. The red component of the Gamma curve\n    at 0.5: no adjustment\n    below 0.5: decrease red\n    above 0.5: add more red.\n    green: Green. The green component of the Gamma curve\n    at 0.5: no adjustment\n    below 0.5: decrease green\n    above 0.5: add more green.\n    blue: Blue. The blue component of the Gamma curve\n    at 0.5: no adjustment\n    below 0.5: decrease blue\n    above 0.5: add more blue.\nDescription:\n    Adjust Colors of a Screen (in software): Adjusts screen colors by changing the Gamma curve for Red, Green and Blue. The adjustments stick as long as Lunar is running (not persistent), but they are re-applied when Lunar is relaunched.\nParameterSummary: (red,green,blue,screen) Adjust Gamma to（${red} Red｜${green} Green｜${blue} Blue）for ${screen}\n",
    "fyi.lunar.Lunar.ApplyPresetIntent": "fyi.lunar.Lunar.ApplyPresetIntent(preset: String)\nParameters:\n    preset: Preset.\nDescription:\n    Apply Lunar Preset: Applies a custom preset from the ones saved through the Lunar UI.\nParameterSummary: (preset) Apply Preset ${preset}\n",
    "fyi.lunar.Lunar.ChangeAdaptiveModeIntent": "fyi.lunar.Lunar.ChangeAdaptiveModeIntent(mode: AdaptiveModeKeyForIntent(Enum))\nParameters:\n    mode: Mode. Adaptive Mode. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"location\"(Location Mode), \"sync\"(Sync Mode), \"manual\"(Manual Mode), \"sensor\"(Sensor Mode), \"clock\"(Clock Mode), \"auto\"(Auto (let Lunar choose the best mode)).\nDescription:\n    Change Adaptive Mode: Changes adaptive mode to Sync/Sensor/Location/Clock/Manual.\nParameterSummary: (mode) Change Adaptive Mode to ${mode}\n",
    "fyi.lunar.Lunar.CleaningModeIntent": "fyi.lunar.Lunar.CleaningModeIntent(deactivateAutomatically: Bool = \"1\", deactivateAfter: Float = \"120\")\nParameters:\n    deactivateAutomatically: Deactivate automatically.\n    deactivateAfter: Auto-deactivation duration.\nDescription:\n    Cleaning Mode: Activates \"Cleaning Mode\" to allow cleaning the screens and the keyboard without triggering any actions.\n\nWARNING: this will make all your screens black and completely disable the keyboard for the duration of its activation.\n\nPress the ⌘ Command key more than 8 times in a row to force deactivation of this mode.\nParameterSummary: (deactivateAutomatically) Activate cleaning mode and ${deactivateAutomatically}   (press the `⌘ Command` key more than 8 times in a row to deactivate); (deactivateAutomatically,deactivateAfter) Activate cleaning mode and ${deactivateAutomatically} ${deactivateAfter}   (press the `⌘ Command` key more than 8 times in a row to force deactivation)\n",
    "fyi.lunar.Lunar.ConnectSidecarIntent": "fyi.lunar.Lunar.ConnectSidecarIntent(sidecar: Sidecar(Object))\nParameters:\n    sidecar: Sidecar. Sidecar.\nDescription:\n    Connect to Sidecar: (only available on Apple Silicon)\n\nInitiate a connection to a Sidecar device.\n\nYou can use the \"Disconnect Screen\" action to disconnect a Sidecar.\nParameterSummary: (sidecar) Connect to ${sidecar}\n",
    "fyi.lunar.Lunar.ControlScreenValueBool": "fyi.lunar.Lunar.ControlScreenValueBool(property: DisplayProperty(Object), screen: Screen(Object), state: ScreenToggleState(Enum), skipMissingScreen: Bool) -> Control a boolean Screen Value\n                            : Bool\nParameters:\n    property: Property. Screen Property.\n    screen: Screen. Screen.\n    state: State. State. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"on\"(On), \"off\"(Off), \"toggle\"(Toggle).\n    skipMissingScreen: Skip action if screen is missing.\nReturn Value:\n    Control a boolean Screen Value: \nDescription:\n    Control a boolean Screen Value: Configure any screen property that supports a boolean value.\nParameterSummary: (property,screen,state,skipMissingScreen) Set ${property} of ${screen} to ${state}\n",
    "fyi.lunar.Lunar.ControlScreenValueFloatNumeric": "fyi.lunar.Lunar.ControlScreenValueFloatNumeric(property: DisplayProperty(Object), screen: Screen(Object), value: Float, skipMissingScreen: Bool) -> Control a floating point Screen Value\n                            : Float\nParameters:\n    property: Property. Screen Property.\n    screen: Screen. Screen.\n    value: Value.\n    skipMissingScreen: Skip action if screen is missing.\nReturn Value:\n    Control a floating point Screen Value: \nDescription:\n    Control a floating point Screen Value: Configure any screen property that supports a numeric value with a floating point.\nParameterSummary: (property,screen,value,skipMissingScreen) Set ${property} of ${screen} to ${value}\n",
    "fyi.lunar.Lunar.ControlScreenValueNumeric": "fyi.lunar.Lunar.ControlScreenValueNumeric(property: DisplayProperty(Object), screen: Screen(Object), value: Integer, skipMissingScreen: Bool) -> Control an integer Screen Value\n                            : Integer\nParameters:\n    property: Property. Screen Property.\n    screen: Screen. Screen.\n    value: Value.\n    skipMissingScreen: Skip action if screen is missing.\nReturn Value:\n    Control an integer Screen Value: \nDescription:\n    Control an integer Screen Value: Configure any screen property that supports an integer numeric value.\nParameterSummary: (property,screen,value,skipMissingScreen) Set ${property} of ${screen} to ${value}\n",
    "fyi.lunar.Lunar.DisconnectScreenIntent": "fyi.lunar.Lunar.DisconnectScreenIntent(screen: Screen(Object))\nParameters:\n    screen: Screen. Screen.\nDescription:\n    Disconnect screen: (only available on Apple Silicon)\n\nDisconnects a screen and removes it from the list of screens that can be drawn on, effectively powering them off or moving them to a Standby state.\n\nFor MacBook screens, this is the same as closing the laptop lid, but without actually closing it.\n\nTo bring back the screen try any one of the following:\n\n• Use the \"Reconnect Screen\" action\n• Close and open the MacBook lid (for the internal screen)\n• Disconnect and reconnect the cable (for external screens)\nParameterSummary: (screen) Disconnect ${screen}\n",
    "fyi.lunar.Lunar.FixMonitorArrangementIntent": "fyi.lunar.Lunar.FixMonitorArrangementIntent(onlySameUUID: Bool = \"1\", wait: Bool = \"0\")\nParameters:\n    onlySameUUID: Only for monitors with same UUID.\n    wait: Wait for operation to finish.\nDescription:\n    Fix monitor arrangement: Arrange external monitors horizontally in a specific order.\n\nHelpful in setups with 3 or more monitors that get swapped around by the system.\n\nHow it works:\n• on each monitor you'll see a number\n• type the numbers on the keyboard from left to right\n    • start with the number on the leftmost monitor\n• Lunar will arrange the monitors in the order of the typed numbers\n\nPress `Esc` to cancel or `Enter` to partially arrange the monitors selected so far.\nParameterSummary: (onlySameUUID,wait) Fix monitor arrangement for ${onlySameUUID}\n",
    "fyi.lunar.Lunar.HorizontalMonitorLayoutIntent": "fyi.lunar.Lunar.HorizontalMonitorLayoutIntent(screenLeft: Screen(Object), screenRight: Screen(Object))\nParameters:\n    screenLeft: Left Screen. The screen that will be placed at the left.. Screen.\n    screenRight: Right Screen. The screen that will be placed at the right.. Screen.\nDescription:\n    Arrange 2 Screens Horizontally ⫍⃮݄⫎⃯: Arrange screens in a horizontal layout, one beside the other. Helpful for setups with exactly two external monitors.\nParameterSummary: (screenLeft,screenRight) Arrange ${screenLeft} to the left and ${screenRight} to the right\n",
    "fyi.lunar.Lunar.HorizontalMonitorThreeLayoutIntent": "fyi.lunar.Lunar.HorizontalMonitorThreeLayoutIntent(screenLeft: Screen(Object), screenMiddle: Screen(Object), screenRight: Screen(Object))\nParameters:\n    screenLeft: Left Screen. The screen that will be placed at the left.. Screen.\n    screenMiddle: Middle Screen. The screen that will be placed in the middle.. Screen.\n    screenRight: Right Screen. The screen that will be placed at the right.. Screen.\nDescription:\n    Arrange 3 Screens Horizontally ⫍⃮▬̲⫎⃯: Arrange 3 screens in a horizontal layout, one on the left, one in the middle and one to the right. Helpful for setups with exactly three external monitors.\nParameterSummary: (screenLeft,screenMiddle,screenRight) Arrange ${screenLeft} to the left, ${screenMiddle} in the middle and ${screenRight} to the right\n",
    "fyi.lunar.Lunar.MakeMonitorMainIntent": "fyi.lunar.Lunar.MakeMonitorMainIntent(screen: Screen(Object), skipMissingScreen: Bool)\nParameters:\n    screen: Screen. Screen.\n    skipMissingScreen: Skip action if screen is missing.\nDescription:\n    Set Screen as Main: Set a screen as Main Display instead of Extended Display.\nParameterSummary: (screen,skipMissingScreen) Set main screen to ${screen}\n",
    "fyi.lunar.Lunar.MirrorSetIntent": "fyi.lunar.Lunar.MirrorSetIntent(skipMissingScreen: Bool, mirrorMaster: Screen(Object), mirrors: array(Screen(Object)))\nParameters:\n    skipMissingScreen: Skip action if screen is missing.\n    mirrorMaster: Screen. Screen.\n    mirrors: Screens.\nDescription:\n    Mirror Screens: Set up mirror sets of any combination of screens.\nParameterSummary: (mirrorMaster,mirrors,skipMissingScreen) Mirror ${mirrorMaster} onto ${mirrors}\n",
    "fyi.lunar.Lunar.NightModeIntent": "fyi.lunar.Lunar.NightModeIntent(state: Bool = \"1\", toggle: Bool = \"0\")\nParameters:\n    state: State.\n    toggle: ToggleState.\nDescription:\n    Night Mode: Activates \"Night Mode\" to reduce eye strain at night.\n\nThis will lower the white point and increase the contrast of all screens,\nmaking white regions on dark backgrounds appear less bright while still\npreserving most colors.\nParameterSummary: (toggle,state) ${toggle} Night Mode ${state}; (toggle) ${toggle} Night Mode\n",
    "fyi.lunar.Lunar.PowerOffIntent": "fyi.lunar.Lunar.PowerOffIntent(screen: Screen(Object), skipMissingScreen: Bool)\nParameters:\n    screen: Screen. Screen.\n    skipMissingScreen: Skip action if screen is missing.\nDescription:\n    Power off screen (in hardware): Powers off the screen using DDC. This is equivalent to pressing the screen's physical power button\"\n\nNote: a screen can't also be powered on using this method because a powered off screen is disconnected and doesn't accept DDC commands.\nParameterSummary: (screen,skipMissingScreen) Power off ${screen}\n",
    "fyi.lunar.Lunar.PowerOffSoftwareIntent": "fyi.lunar.Lunar.PowerOffSoftwareIntent(skipMissingScreen: Bool, screen: Screen(Object), visibleScreen: Screen(Object), disableScreen: Bool = \"1\")\nParameters:\n    skipMissingScreen: Skip action if screen is missing.\n    screen: Screen. Screen.\n    visibleScreen: Visible Screen. Screen.\n    disableScreen: Disable Screen.\nDescription:\n    Power off screen (in software): Power off a screen by:\n  - setting its brightness and contrast to 0\n  - altering the Gamma curve so all the colors become pitch black\n  - (optional) mirroring the screen so that it becomes disabled\n    - also moves windows away to other visible screens\n  - spawning a background task to keep the above conditions in check\nParameterSummary: (screen,disableScreen,skipMissingScreen) Power off ${screen} and ${disableScreen} (only make it black, without mirroring or disconnecting); (screen,disableScreen,visibleScreen,skipMissingScreen) Power off ${screen} and ${disableScreen} by mirroring from ${visibleScreen}\n",
    "fyi.lunar.Lunar.PowerOnSoftwareIntent": "fyi.lunar.Lunar.PowerOnSoftwareIntent(skipMissingScreen: Bool, screen: Screen(Object))\nParameters:\n    skipMissingScreen: Skip action if screen is missing.\n    screen: Screen. Screen.\nDescription:\n    Power on screen (in software): Power on a screen if it was previously powered off using BlackOut.\nParameterSummary: (screen,skipMissingScreen) Power on ${screen}\n",
    "fyi.lunar.Lunar.ReadDDCIntent": "fyi.lunar.Lunar.ReadDDCIntent(screen: Screen(Object), vcp: Integer) -> DDC Read Value from Screen\n                            : String\nParameters:\n    screen: Screen. Screen.\n    vcp: VCP.\nReturn Value:\n    DDC Read Value from Screen: \nDescription:\n    DDC Read Value from Screen: Sends a DDC read command to a specific screen and returns the value read.\n\nNote: DDC reads rarely work and can return wrong values.\nParameterSummary: (vcp,screen) Read DDC ${vcp} from ${screen}\n",
    "fyi.lunar.Lunar.ReadHardwareColorsIntent": "fyi.lunar.Lunar.ReadHardwareColorsIntent(skipMissingScreen: Bool, screen: Screen(Object)) -> Read Color Gain Values (in hardware)\n                            : ScreenColorGain(Object)\nParameters:\n    skipMissingScreen: Skip action if screen is missing.\n    screen: Screen. Screen.\nReturn Value:\n    Read Color Gain Values (in hardware): Color Gain.\nDescription:\n    Read Color Gain Values (in hardware): Tries to read the Red, Green and Blue color gain values from the monitor memory using DDC.\n\nNote: very few monitors implement this functionality\nParameterSummary: (screen,skipMissingScreen) Read color gain values from ${screen}\n",
    "fyi.lunar.Lunar.ReadSoftwareColorsIntent": "fyi.lunar.Lunar.ReadSoftwareColorsIntent(skipMissingScreen: Bool, screen: Screen(Object)) -> Read Color Gamma Tables (in software)\n                            : ScreenGammaTable(Object)\nParameters:\n    skipMissingScreen: Skip action if screen is missing.\n    screen: Screen. Screen.\nReturn Value:\n    Read Color Gamma Tables (in software): Gamma Table.\nDescription:\n    Read Color Gamma Tables (in software): Reads the Red, Green and Blue gamma color values from the system.\nParameterSummary: (screen,skipMissingScreen) Read color Gamma values from ${screen}\n",
    "fyi.lunar.Lunar.ReconnectScreenIntent": "fyi.lunar.Lunar.ReconnectScreenIntent(screen: Screen(Object)) -> Reconnect screen\n                            : String\nParameters:\n    screen: Screen. Screen.\nReturn Value:\n    Reconnect screen: \nDescription:\n    Reconnect screen: (only available on Apple Silicon)\n\nReconnects a screen that was previously disconnected using Lunar's \"Disconnect screen\" action.\n\nIf the action fails, try any one of the following to bring back the screen:\n\n• Close and open the MacBook lid (for the internal screen)\n• Disconnect and reconnect the cable (for external screens)\nParameterSummary: (screen) Reconnect ${screen}\n",
    "fyi.lunar.Lunar.ResetColorGainIntent": "fyi.lunar.Lunar.ResetColorGainIntent(screen: Screen(Object))\nParameters:\n    screen: Screen. Screen.\nDescription:\n    Reset Color Adjustments (in hardware): Resets the adjusted color gain values using DDC. This is equivalent to resetting the screen's colors from its OSD menu.\nParameterSummary: (screen) Reset color gain adjustments on ${screen}\n",
    "fyi.lunar.Lunar.ResetColorGammaIntent": "fyi.lunar.Lunar.ResetColorGammaIntent(screen: Screen(Object))\nParameters:\n    screen: Screen. Screen.\nDescription:\n    Reset Color Adjustments (in software): Resets the Gamma color adjustments for a specific screen. This is equivalent to resetting Gamma from the Lunar preferences.\nParameterSummary: (screen) Reset Gamma color adjustments on ${screen}\n",
    "fyi.lunar.Lunar.RotateScreenIntent": "fyi.lunar.Lunar.RotateScreenIntent(screen: Screen(Object), rotation: ScreenRotationDegrees(Enum), skipMissingScreen: Bool) -> Rotate Screen\n                            : Integer\nParameters:\n    screen: Screen. Screen.\n    rotation: Degrees. Rotation Degrees. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"normal\"(No rotation (0°)), \"portraitToLeft\"(Portrait to left (90°)), \"upsideDown\"(Upside down (180°)), \"portraitToRight\"(Portrait to right (270°)).\n    skipMissingScreen: Skip action if screen is missing.\nReturn Value:\n    Rotate Screen: \nDescription:\n    Rotate Screen: Sets screen rotation/orientation to 0°/90°/180°/270°.\nParameterSummary: (screen,rotation,skipMissingScreen) Rotate ${screen} to ${rotation}\n",
    "fyi.lunar.Lunar.SetBrightnessContrastIntent": "fyi.lunar.Lunar.SetBrightnessContrastIntent(screen: Screen(Object), value: Float, skipMissingScreen: Bool) -> Set Brightness & Contrast\n                            : Float\nParameters:\n    screen: Screen. Screen.\n    value: Value.\n    skipMissingScreen: Skip action if screen is missing.\nReturn Value:\n    Set Brightness & Contrast: \nDescription:\n    Set Brightness & Contrast: Sets the Brightness and Contrast of a screen to specific values. The percentage will compute a value between the Min and Max Brightness and Contrast of the screen.\nParameterSummary: (screen,value,skipMissingScreen) Set ${screen} combined brightness & contrast to ${value}\n",
    "fyi.lunar.Lunar.SetBrightnessIntent": "fyi.lunar.Lunar.SetBrightnessIntent(screen: Screen(Object), value: Float, skipMissingScreen: Bool) -> Set Brightness\n                            : Float\nParameters:\n    screen: Screen. Screen.\n    value: Value.\n    skipMissingScreen: Skip action if screen is missing.\nReturn Value:\n    Set Brightness: \nDescription:\n    Set Brightness: Sets the Brightness of a screen to a specific value. The percentage will compute a value between the Min and Max Brightness of the screen.\nParameterSummary: (screen,value,skipMissingScreen) Set ${screen} brightness to ${value}\n",
    "fyi.lunar.Lunar.SetContrastIntent": "fyi.lunar.Lunar.SetContrastIntent(screen: Screen(Object), value: Float, skipMissingScreen: Bool) -> Set Contrast\n                            : Float\nParameters:\n    screen: Screen. Screen.\n    value: Value.\n    skipMissingScreen: Skip action if screen is missing.\nReturn Value:\n    Set Contrast: \nDescription:\n    Set Contrast: Sets the Contrast of a screen to a specific value. The percentage will compute a value between the Min and Max Contrast of the screen.\nParameterSummary: (screen,value,skipMissingScreen) Set ${screen} contrast to ${value}\n",
    "fyi.lunar.Lunar.SetInputIntent": "fyi.lunar.Lunar.SetInputIntent(screen: Screen(Object), input: Integer, skipMissingScreen: Bool) -> Change Video Input Source\n                            : Integer\nParameters:\n    screen: Screen. Screen.\n    input: Input.\n    skipMissingScreen: Skip action if screen is missing.\nReturn Value:\n    Change Video Input Source: \nDescription:\n    Change Video Input Source: Changes screen input to a specific value (HDMI/DP/USB-C).\n\nNote: Not all inputs are supported by all monitors, and some monitors may use non-standard input values.\nParameterSummary: (screen,input,skipMissingScreen) Change ${screen} input to ${input}\n",
    "fyi.lunar.Lunar.SetPanelModeIntent": "fyi.lunar.Lunar.SetPanelModeIntent(mode: PanelMode(Object))\nParameters:\n    mode: Screen Mode. Screen Mode.\nDescription:\n    Change Screen Resolution: Change the current resolution and/or frame rate of a specific screen.\nParameterSummary: (mode) Change resolution to ${mode}\n",
    "fyi.lunar.Lunar.SetPanelPresetIntent": "fyi.lunar.Lunar.SetPanelPresetIntent(unlockBrightnessControl: Bool, unlockAdaptiveBrightness: Bool, unlockNightShift: Bool, unlockTrueTone: Bool, minBrightness: Integer = \"4\", maxBrightness: Integer = \"500\", preset: PanelPreset(Object))\nParameters:\n    unlockBrightnessControl: Unlock brightness control.\n    unlockAdaptiveBrightness: Unlock Adaptive Brightness.\n    unlockNightShift: Unlock Night Shift.\n    unlockTrueTone: Unlock True Tone.\n    minBrightness: Min brightness (in nits).\n    maxBrightness: Max brightness (in nits).\n    preset: Screen Preset. Screen Preset.\nDescription:\n    Change Screen Preset: Change the current preset of a specific screen (with possibility of unlocking brightness control, Night Shift and True Tone for reference presets).\nParameterSummary: (preset,unlockBrightnessControl,unlockNightShift,unlockTrueTone) Change preset to ${preset}; (preset,unlockBrightnessControl,minBrightness,maxBrightness,unlockAdaptiveBrightness,unlockNightShift,unlockTrueTone) Change preset to ${preset}\n",
    "fyi.lunar.Lunar.SetSubZeroDimmingIntent": "fyi.lunar.Lunar.SetSubZeroDimmingIntent(screen: Screen(Object), value: Float, skipMissingScreen: Bool) -> Set Sub-zero Dimming\n                            : Float\nParameters:\n    screen: Screen. Screen.\n    value: Value.\n    skipMissingScreen: Skip action if screen is missing.\nReturn Value:\n    Set Sub-zero Dimming: \nDescription:\n    Set Sub-zero Dimming: Sets the Sub-zero Dimming of a screen to specific value. 0%% means as black as possible while 100%% means no dimming is applied.\nParameterSummary: (screen,value,skipMissingScreen) Set ${screen} Sub-zero Dimming to ${value}\n",
    "fyi.lunar.Lunar.SetVolumeIntent": "fyi.lunar.Lunar.SetVolumeIntent(screen: Screen(Object), value: Float, skipMissingScreen: Bool) -> Set Volume\n                            : Float\nParameters:\n    screen: Screen. Screen.\n    value: Value.\n    skipMissingScreen: Skip action if screen is missing.\nReturn Value:\n    Set Volume: \nDescription:\n    Set Volume: Sets the Volume of a screen to specific value if it supports the volume control.\nParameterSummary: (screen,value,skipMissingScreen) Set ${screen} volume to ${value}\n",
    "fyi.lunar.Lunar.SetXDRBrightnessIntent": "fyi.lunar.Lunar.SetXDRBrightnessIntent(screen: Screen(Object), value: Float, skipMissingScreen: Bool) -> Set XDR Brightness\n                            : Float\nParameters:\n    screen: Screen. Screen.\n    value: Value.\n    skipMissingScreen: Skip action if screen is missing.\nReturn Value:\n    Set XDR Brightness: \nDescription:\n    Set XDR Brightness: Sets the XDR Brightness of a screen to specific value if it supports brightness higher than 500 nits.\nParameterSummary: (screen,value,skipMissingScreen) Set ${screen} XDR Brightness to ${value}\n",
    "fyi.lunar.Lunar.SleepMacIntent": "fyi.lunar.Lunar.SleepMacIntent()\nDescription:\n    Sleep the Mac: Enters Sleep mode, same as clicking on Apple icon in the menu bar and clicking on 'Sleep'\nParameterSummary: () Sleep the Mac\n",
    "fyi.lunar.Lunar.StopMirroringIntent": "fyi.lunar.Lunar.StopMirroringIntent(skipMissingScreen: Bool, mirrorMaster: Screen(Object))\nParameters:\n    skipMissingScreen: Skip action if screen is missing.\n    mirrorMaster: Screen. Screen.\nDescription:\n    Stop Mirroring: Disable mirroring for specific screens.\nParameterSummary: (mirrorMaster,skipMissingScreen) Stop mirroring for ${mirrorMaster}.\n",
    "fyi.lunar.Lunar.SwapMonitorsIntent": "fyi.lunar.Lunar.SwapMonitorsIntent(screen1: Screen(Object), screen2: Screen(Object), swapOrientations: Bool = \"1\")\nParameters:\n    screen1: Screen. Screen.\n    screen2: Screen. Screen.\n    swapOrientations: Swap orientations.\nDescription:\n    Swap Screen Positions: Swap 2 screens between each other. Useful for when the system confuses the screens and positions them wrongly.\nParameterSummary: (screen1,screen2,swapOrientations) Swap screen ${screen1} with ${screen2}\n",
    "fyi.lunar.Lunar.ThreeAboveOneMonitorLayoutIntent": "fyi.lunar.Lunar.ThreeAboveOneMonitorLayoutIntent(screenLeft: Screen(Object), screenMiddle: Screen(Object), screenRight: Screen(Object), screenBottom: Screen(Object))\nParameters:\n    screenLeft: Left Screen. The screen that will be placed at the left.. Screen.\n    screenMiddle: Middle Screen. The screen that will be placed in the middle.. Screen.\n    screenRight: Right Screen. The screen that will be placed at the right.. Screen.\n    screenBottom: Bottom Screen. The screen that will be placed at the bottom.. Screen.\nDescription:\n    Arrange 4 Screens in a 3-above-1 configuration ⫍⃮■̳̻⫎⃯: Arrange 4 screens with 3 in a horizontal layout [left|middle|right] and one in the middle below the other three. Helpful for a MacBook with three external monitors.\nParameterSummary: (screenLeft,screenMiddle,screenRight,screenBottom) Arrange ${screenLeft} to the left, ${screenMiddle} in the middle, ${screenRight} to the right and ${screenBottom} at the bottom\n",
    "fyi.lunar.Lunar.ToggleAudioMuteIntent": "fyi.lunar.Lunar.ToggleAudioMuteIntent(screen: Screen(Object), state: ScreenToggleState(Enum), skipMissingScreen: Bool) -> Toggle Audio Mute\n                            : Bool\nParameters:\n    screen: Screen. Screen.\n    state: State. State. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"on\"(On), \"off\"(Off), \"toggle\"(Toggle).\n    skipMissingScreen: Skip action if screen is missing.\nReturn Value:\n    Toggle Audio Mute: \nDescription:\n    Toggle Audio Mute: Toggles audio mute on a screen if it supports audio control.\nParameterSummary: (screen,state,skipMissingScreen) Toggle audio mute of ${screen} to ${state}\n",
    "fyi.lunar.Lunar.ToggleBlackOutIntent": "fyi.lunar.Lunar.ToggleBlackOutIntent(screen: Screen(Object), state: ScreenToggleState(Enum), allowMirroring: Bool = \"0\", skipMissingScreen: Bool) -> Toggle Power (BlackOut)\n                            : Bool\nParameters:\n    screen: Screen. Screen.\n    state: State. State. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"on\"(On), \"off\"(Off), \"toggle\"(Toggle).\n    allowMirroring: Allow mirroring.\n    skipMissingScreen: Skip action if screen is missing.\nReturn Value:\n    Toggle Power (BlackOut): \nDescription:\n    Toggle Power (BlackOut): Toggles Power on/off for a screen using Lunar's BlackOut function.\nParameterSummary: (screen,state,allowMirroring,skipMissingScreen) Toggle power of ${screen} to ${state}\n",
    "fyi.lunar.Lunar.ToggleFacelightIntent": "fyi.lunar.Lunar.ToggleFacelightIntent(screen: Screen(Object), state: ScreenToggleState(Enum), skipMissingScreen: Bool) -> Toggle Facelight\n                            : Bool\nParameters:\n    screen: Screen. Screen.\n    state: State. State. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"on\"(On), \"off\"(Off), \"toggle\"(Toggle).\n    skipMissingScreen: Skip action if screen is missing.\nReturn Value:\n    Toggle Facelight: \nDescription:\n    Toggle Facelight: Toggles Facelight on/off for a screen.\nParameterSummary: (screen,state,skipMissingScreen) Toggle Facelight for ${screen} to ${state}\n",
    "fyi.lunar.Lunar.ToggleGammaIntent": "fyi.lunar.Lunar.ToggleGammaIntent(screen: Screen(Object), state: ScreenToggleState(Enum))\nParameters:\n    screen: Screen. Screen.\n    state: State. State. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"on\"(On), \"off\"(Off), \"toggle\"(Toggle).\nDescription:\n    Toggle Color Adjustments (in software): Toggles on/off the Gamma color adjustments while keeping the red/green/blue values stored in settings.\nParameterSummary: (screen,state) Toggle Gamma color adjustments on ${screen} to ${state}\n",
    "fyi.lunar.Lunar.ToggleHDRIntent": "fyi.lunar.Lunar.ToggleHDRIntent(screen: Screen(Object), state: ScreenToggleState(Enum), skipMissingScreen: Bool) -> Toggle HDR\n                            : Bool\nParameters:\n    screen: Screen. Screen.\n    state: State. State. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"on\"(On), \"off\"(Off), \"toggle\"(Toggle).\n    skipMissingScreen: Skip action if screen is missing.\nReturn Value:\n    Toggle HDR: \nDescription:\n    Toggle HDR: Toggles HDR on/off for a screen if it supports high dynamic range.\nParameterSummary: (screen,state,skipMissingScreen) Toggle HDR for ${screen} to ${state}\n",
    "fyi.lunar.Lunar.ToggleScreenConnectionIntent": "fyi.lunar.Lunar.ToggleScreenConnectionIntent(screen: Screen(Object)) -> Toggle screen connection\n                            : String\nParameters:\n    screen: Screen. Screen.\nReturn Value:\n    Toggle screen connection: \nDescription:\n    Toggle screen connection: (only available on Apple Silicon)\n\nDisconnects a connected screen, or reconnects it if it was previously disconnected using Lunar.\n\nIf the reconnect action fails, try any one of the following to bring back the screen:\n\n• Close and open the MacBook lid (for the internal screen)\n• Disconnect and reconnect the cable (for external screens)\nParameterSummary: (screen) Toggle connected state for ${screen}\n",
    "fyi.lunar.Lunar.ToggleSubZeroIntent": "fyi.lunar.Lunar.ToggleSubZeroIntent(screen: Screen(Object), state: ScreenToggleState(Enum), skipMissingScreen: Bool) -> Toggle Sub-zero Dimming\n                            : Bool\nParameters:\n    screen: Screen. Screen.\n    state: State. State. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"on\"(On), \"off\"(Off), \"toggle\"(Toggle).\n    skipMissingScreen: Skip action if screen is missing.\nReturn Value:\n    Toggle Sub-zero Dimming: \nDescription:\n    Toggle Sub-zero Dimming: Toggles Sub-zero Dimming on/off for a screen.\nParameterSummary: (screen,state,skipMissingScreen) Toggle Sub-zero Dimming to ${screen} to ${state}\n",
    "fyi.lunar.Lunar.ToggleSystemAdaptiveBrightnessIntent": "fyi.lunar.Lunar.ToggleSystemAdaptiveBrightnessIntent(screen: Screen(Object), state: ScreenToggleState(Enum), skipMissingScreen: Bool) -> Toggle System Adaptive Brightness\n                            : Bool\nParameters:\n    screen: Screen. Screen.\n    state: State. State. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"on\"(On), \"off\"(Off), \"toggle\"(Toggle).\n    skipMissingScreen: Skip action if screen is missing.\nReturn Value:\n    Toggle System Adaptive Brightness: \nDescription:\n    Toggle System Adaptive Brightness: Toggles the \"Automatically adjust brightness\" checkbox in System Settings for a specific screen.\nParameterSummary: (screen,state,skipMissingScreen) Toggle system adaptive brightness for ${screen} to ${state}\n",
    "fyi.lunar.Lunar.ToggleXDRIntent": "fyi.lunar.Lunar.ToggleXDRIntent(screen: Screen(Object), state: ScreenToggleState(Enum), skipMissingScreen: Bool) -> Toggle XDR Brightness\n                            : Bool\nParameters:\n    screen: Screen. Screen.\n    state: State. State. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"on\"(On), \"off\"(Off), \"toggle\"(Toggle).\n    skipMissingScreen: Skip action if screen is missing.\nReturn Value:\n    Toggle XDR Brightness: \nDescription:\n    Toggle XDR Brightness: Toggles XDR Brightness on/off for a screen if it supports brightness higher than 500 nits.\nParameterSummary: (screen,state,skipMissingScreen) Toggle XDR Brightness for ${screen} to ${state}\n",
    "fyi.lunar.Lunar.TwoAboveOneMonitorLayoutIntent": "fyi.lunar.Lunar.TwoAboveOneMonitorLayoutIntent(screenLeft: Screen(Object), screenMiddle: Screen(Object), screenRight: Screen(Object))\nParameters:\n    screenLeft: Left Screen. The screen that will be placed at the left.. Screen.\n    screenMiddle: Middle Screen. The screen that will be placed in the middle at the bottom.. Screen.\n    screenRight: Right Screen. The screen that will be placed at the right.. Screen.\nDescription:\n    Arrange 3 Screens in a 2-above-1 configuration ⫍‗⫎: Arrange 3 screens with 2 in a horizontal layout [left|right] and one in the middle below the other two. Helpful for a MacBook with two external monitors.\nParameterSummary: (screenLeft,screenMiddle,screenRight) Arrange ${screenLeft} to the left, ${screenMiddle} at the bottom and ${screenRight} to the right\n",
    "fyi.lunar.Lunar.VerticalMonitorLayoutIntent": "fyi.lunar.Lunar.VerticalMonitorLayoutIntent(screenTop: Screen(Object), screenBottom: Screen(Object))\nParameters:\n    screenTop: Top Screen. The screen that will be placed at the top.. Screen.\n    screenBottom: Bottom Screen. The screen that will be placed at the bottom.. Screen.\nDescription:\n    Arrange 2 Screens Vertically ■̳̲: Arrange screens in a vertical layout, one above the other. Helpful for a MacBook with one external monitor.\nParameterSummary: (screenTop,screenBottom) Arrange ${screenTop} at the top and ${screenBottom} at the bottom\n",
    "fyi.lunar.Lunar.WriteDDCIntent": "fyi.lunar.Lunar.WriteDDCIntent(screen: Screen(Object), vcp: Integer, value: Integer)\nParameters:\n    screen: Screen. Screen.\n    vcp: VCP.\n    value: Value.\nDescription:\n    DDC Write Value to Screen: Sends a DDC write command to a specific screen.\nParameterSummary: (vcp,value,screen) Write DDC ${vcp} ${value} to ${screen}\n",
    "com.flexibits.fantastical2.FKRUpcomingCalendarItemIntent": "com.flexibits.fantastical2.FKRUpcomingCalendarItemIntent(itemType: IntentItemType(Enum) = \"unspecified\") -> Upcoming Item\n                            : IntentCalendarItem(Object)\nParameters:\n    itemType: Item. Item Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"unknown\"(Unknown), \"event\"(Event), \"reminder\"(Task), \"unspecified\"(Event or Task).\nReturn Value:\n    Upcoming Item: Fantastical Calendar Item.\nDescription:\n    Upcoming Item: Shows the next upcoming item\nParameterSummary: (itemType) Upcoming ${itemType}\n",
    "com.flexibits.fantastical2.FKRShowScheduleIntent": "com.flexibits.fantastical2.FKRShowScheduleIntent(day: IntentScheduleDay(Enum), date: String) -> Show Schedule\n                            : array(IntentCalendarItem(Object))\nParameters:\n    day: day. Fantastical Schedule Day. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"today\"(today), \"tomorrow\"(tomorrow), \"specificDate\"(specific date).\n    date: date.\nReturn Value:\n    Show Schedule: \nDescription:\n    Show Schedule: Shows the schedule for a customizable date.\nParameterSummary: (date) Schedule for ${date}; (day,date) Schedule for ${day}\n",
    "com.flexibits.fantastical2.FKROverdueRemindersIntent": "com.flexibits.fantastical2.FKROverdueRemindersIntent() -> Calendar Items\n                            : IntentCalendarItem(Object)\nReturn Value:\n    Calendar Items: Calendar Items. Fantastical Calendar Item.\nDescription:\n    Overdue Tasks: Shows all tasks that are overdue\nParameterSummary: (Overdue tasks) Overdue tasks\n",
    "com.flexibits.fantastical2.FKRShowCalendarIntent": "com.flexibits.fantastical2.FKRShowCalendarIntent(calendar: (Object), calendarName: String, date: String) -> Calendar\n                            : Object\nParameters:\n    calendar:  Calendar.\n    calendarName:  Calendar Name.\n    date:  Date.\nReturn Value:\n    Calendar: Calendar.\nDescription:\n    Show Calendar: Shows upcoming events on a specific calendar\nParameterSummary: (Show “${calendarName}” calendar) Show “${calendarName}” calendar\n",
    "com.flexibits.fantastical2.FKRShowListIntent": "com.flexibits.fantastical2.FKRShowListIntent(list: (Object), listName: String, date: String) -> List \n                            : Object\nParameters:\n    list:  List.\n    listName:  List Name.\n    date:  Date.\nReturn Value:\n    List : List .\nDescription:\n    Show List: Shows all tasks on a specific list\nParameterSummary: (Show \"${listName}\" list) Show \"${listName}\" list\n",
    "com.flexibits.fantastical2.FKRCreateFromClipboardIntent": "com.flexibits.fantastical2.FKRCreateFromClipboardIntent() -> Calendar Item Title\n                            : String\nReturn Value:\n    Calendar Item Title: Calendar Item Title.\nDescription:\n    Create from Clipboard: Creates a new event or task from the contents of the clipboard\nParameterSummary: () Create from Clipboard\n",
    "com.flexibits.fantastical2.FKRCreateFromInputIntent": "com.flexibits.fantastical2.FKRCreateFromInputIntent(input: String, notes: String) -> Create From Input\n                            : IntentCalendarItem(Object)\nParameters:\n    input: Input.\n    notes: Notes.\nReturn Value:\n    Create From Input: Fantastical Calendar Item.\nDescription:\n    Create From Input: Creates a new event or task from a given input.\nParameterSummary: () Create event or task\n",
    "com.flexibits.fantastical2.FKROpenOnDateIntent": "com.flexibits.fantastical2.FKROpenOnDateIntent(date: String)\nParameters:\n    date: Date.\nDescription:\n    Open to Date: Open Fantastical on the specified date.\nParameterSummary: (date) Open Fantastical to ${date}\n",
    "com.flexibits.fantastical2.FKRChangeCalendarSetIntent": "com.flexibits.fantastical2.FKRChangeCalendarSetIntent(calendarSet: CalendarSetEntity(Object))\nParameters:\n    calendarSet: Calendar Set. Fantastical Calendar Set.\nDescription:\n    Change Calendar Set: Changes the currently active calendar set\nParameterSummary: (calendarSet) Change active calendar set to ${calendarSet}\n",
    "com.flexibits.fantastical2.FKRDateWidgetConfigIntent": "com.flexibits.fantastical2.FKRDateWidgetConfigIntent(theme: IntentWidgetTheme(Enum) = \"mirrorSystem\", showMonth: Bool = True, showWeather: Bool)\nParameters:\n    theme:  Appearance. Fantastical Widget Theme. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"mirrorSystem\"(Mirror System), \"fantastical\"(Fantastical), \"light\"(Light), \"dark\"(Dark), \"black\"(Black).\n    showMonth:  Show Month.\n    showWeather:  Show Weather.\nDescription:\n    Date Widget Configuration: Configuration for the Date Widget\nParameterSummary: () Date Widget Configuration\n",
    "com.flexibits.fantastical2.FKRUpNextWidgetConfigIntent": "com.flexibits.fantastical2.FKRUpNextWidgetConfigIntent(theme: IntentWidgetTheme(Enum) = \"mirrorSystem\", calendarSet: IntentCalendarSet(Object), includeEvents: Bool = True, includeTasks: Bool = True, showWeather: Bool = True, todayOnly: Bool)\nParameters:\n    theme:  Appearance. Fantastical Widget Theme. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"mirrorSystem\"(Mirror System), \"fantastical\"(Fantastical), \"light\"(Light), \"dark\"(Dark), \"black\"(Black).\n    calendarSet:  Calendar Set. Fantastical Calendar Set.\n    includeEvents:  Show Events.\n    includeTasks:  Show Tasks.\n    showWeather:  Show Weather.\n    todayOnly:  Show Today Only.\nDescription:\n    Up Next Widget Configuration: Configuration for the Up Next Widget\nParameterSummary: () Up Next Widget Configuration\n",
    "com.flexibits.fantastical2.FKREventListWidgetConfigIntent": "com.flexibits.fantastical2.FKREventListWidgetConfigIntent(theme: IntentWidgetTheme(Enum) = \"mirrorSystem\", calendarSet: IntentCalendarSet(Object), eventTypes: IntentShowEventType(Enum) = \"all\", taskTypes: IntentShowTaskType(Enum) = \"all\", showWeather: Bool = True, action: IntentOptionalActionType(Enum) = \"addEvent\")\nParameters:\n    theme:  Appearance. Fantastical Widget Theme. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"mirrorSystem\"(Mirror System), \"fantastical\"(Fantastical), \"light\"(Light), \"dark\"(Dark), \"black\"(Black).\n    calendarSet:  Calendar Set. Fantastical Calendar Set.\n    eventTypes:  Show Events. Intent Show Event Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"all\"(All Events), \"timed\"(Timed Events Only), \"none\"(None).\n    taskTypes:  Show Tasks. Intent Show Task Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"all\"(All Tasks), \"timed\"(Timed Tasks Only), \"none\"(None).\n    showWeather:  Show Weather.\n    action:  Quick Action. Fantastical Optional Action Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"addEvent\"(Add Event), \"addTask\"(Add Task), \"search\"(Search), \"none\"(None).\nDescription:\n    Event List Widget Configuration: Configuration for the Event List Widget\nParameterSummary: () Event List Widget Configuration\n",
    "com.flexibits.fantastical2.FKRDateCalendarWidgetConfigIntent": "com.flexibits.fantastical2.FKRDateCalendarWidgetConfigIntent(theme: IntentWidgetTheme(Enum) = \"mirrorSystem\", showEvents: Bool = True, indicatorType: IntentEventIndicatorType(Enum) = \"heatmap\", calendarSet: IntentCalendarSet(Object), showWeather: Bool = True)\nParameters:\n    theme:  Appearance. Fantastical Widget Theme. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"mirrorSystem\"(Mirror System), \"fantastical\"(Fantastical), \"light\"(Light), \"dark\"(Dark), \"black\"(Black).\n    showEvents:  Show Item Indicators.\n    indicatorType:  Indicator Style. Intent Event Indicator Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"heatmap\"(Heatmap), \"dots\"(Dots). This value depends on the value of \"showEvents\". This parameter is only valid when the value of \"showEvents\" is True.\n    calendarSet:  Calendar Set. Fantastical Calendar Set. This value depends on the value of \"showEvents\". This parameter is only valid when the value of \"showEvents\" is True.\n    showWeather:  Show Weather.\nDescription:\n    Date Calendar Widget Configuration: Configuration for the Date/Calendar Widget\nParameterSummary: () Date Calendar Widget Configuration\n",
    "com.flexibits.fantastical2.FKRCalendarWidgetConfigIntent": "com.flexibits.fantastical2.FKRCalendarWidgetConfigIntent(theme: IntentWidgetTheme(Enum) = \"mirrorSystem\", showEvents: Bool = True, indicatorType: IntentEventIndicatorType(Enum) = \"heatmap\", calendarSet: IntentCalendarSet(Object))\nParameters:\n    theme:  Appearance. Fantastical Widget Theme. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"mirrorSystem\"(Mirror System), \"fantastical\"(Fantastical), \"light\"(Light), \"dark\"(Dark), \"black\"(Black).\n    showEvents:  Show Item Indicators.\n    indicatorType:  Indicator Style. Intent Event Indicator Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"heatmap\"(Heatmap), \"dots\"(Dots). This value depends on the value of \"showEvents\". This parameter is only valid when the value of \"showEvents\" is True.\n    calendarSet:  Calendar Set. Fantastical Calendar Set. This value depends on the value of \"showEvents\". This parameter is only valid when the value of \"showEvents\" is True.\nDescription:\n    Calendar Widget Configuration: Configuration for the Calendar Widget\nParameterSummary: () Calendar Widget Configuration\n",
    "com.flexibits.fantastical2.FKREventListCalendarWidgetConfigIntent": "com.flexibits.fantastical2.FKREventListCalendarWidgetConfigIntent(theme: IntentWidgetTheme(Enum) = \"mirrorSystem\", calendarSet: IntentCalendarSet(Object), eventTypes: IntentShowEventType(Enum) = \"all\", taskTypes: IntentShowTaskType(Enum) = \"all\", showHeatmap: Bool = True, indicatorType: IntentEventIndicatorType(Enum) = \"heatmap\", showWeather: Bool = True, action: IntentOptionalActionType(Enum) = \"addEvent\")\nParameters:\n    theme:  Appearance. Fantastical Widget Theme. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"mirrorSystem\"(Mirror System), \"fantastical\"(Fantastical), \"light\"(Light), \"dark\"(Dark), \"black\"(Black).\n    calendarSet:  Calendar Set. Fantastical Calendar Set.\n    eventTypes:  Show Events. Intent Show Event Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"all\"(All Events), \"timed\"(Timed Events Only), \"none\"(None).\n    taskTypes:  Show Tasks. Intent Show Task Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"all\"(All Tasks), \"timed\"(Timed Tasks Only), \"none\"(None).\n    showHeatmap:  Show Item Indicators.\n    indicatorType:  Indicator Style. Intent Event Indicator Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"heatmap\"(Heatmap), \"dots\"(Dots). This value depends on the value of \"showHeatmap\". This parameter is only valid when the value of \"showHeatmap\" is True.\n    showWeather:  Show Weather.\n    action:  Quick Action. Fantastical Optional Action Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"addEvent\"(Add Event), \"addTask\"(Add Task), \"search\"(Search), \"none\"(None).\nDescription:\n    Event List Calendar Widget Configuration: Configuration for the Event List Calendar Widget.\nParameterSummary: () Event List Calendar Widget Configuration\n",
    "com.flexibits.fantastical2.FKREventListSmallWidgetConfigIntent": "com.flexibits.fantastical2.FKREventListSmallWidgetConfigIntent(theme: IntentWidgetTheme(Enum) = \"mirrorSystem\", calendarSet: IntentCalendarSet(Object), eventTypes: IntentShowEventType(Enum) = \"all\", taskTypes: IntentShowTaskType(Enum) = \"all\", showWeather: Bool = True)\nParameters:\n    theme:  Appearance. Fantastical Widget Theme. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"mirrorSystem\"(Mirror System), \"fantastical\"(Fantastical), \"light\"(Light), \"dark\"(Dark), \"black\"(Black).\n    calendarSet:  Calendar Set. Fantastical Calendar Set.\n    eventTypes:  Show Events. Intent Show Event Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"all\"(All Events), \"timed\"(Timed Events Only), \"none\"(None).\n    taskTypes:  Show Tasks. Intent Show Task Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"all\"(All Tasks), \"timed\"(Timed Tasks Only), \"none\"(None).\n    showWeather:  Show Weather.\nDescription:\n    Event List Small Widget Config: Configuration for the Small Event List Widget\nParameterSummary: () Event List Small Widget Config\n",
    "com.flexibits.fantastical2.FKRActionWidgetConfigIntent": "com.flexibits.fantastical2.FKRActionWidgetConfigIntent(theme: IntentWidgetTheme(Enum) = \"mirrorSystem\", action: IntentActionType(Enum) = \"addEvent\")\nParameters:\n    theme:  Appearance. Fantastical Widget Theme. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"mirrorSystem\"(Mirror System), \"fantastical\"(Fantastical), \"light\"(Light), \"dark\"(Dark), \"black\"(Black).\n    action:  Action. Fantastical Action Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"addEvent\"(Add Event), \"addTask\"(Add Task), \"search\"(Search), \"launch\"(Open Fantastical).\nDescription:\n    Action Widget Config: Configuration for the Action Widget\nParameterSummary: () Action Widget Config\n",
    "com.flexibits.fantastical2.FKRGetAttendeesFromEventIntent": "com.flexibits.fantastical2.FKRGetAttendeesFromEventIntent(calendarItem: IntentCalendarItem(Object)) -> Get Invitees from Event\n                            : array(IntentAttendee(Object))\nParameters:\n    calendarItem: Event. Fantastical Calendar Item.\nReturn Value:\n    Get Invitees from Event: \nDescription:\n    Get Invitees from Event: Retrieve the invitees from a Fantastical Event\nParameterSummary: (calendarItem) Get invitees from ${calendarItem}\n",
    "com.flexibits.fantastical2.FKRChangeCalendarViewIntent": "com.flexibits.fantastical2.FKRChangeCalendarViewIntent(view: IntentCalendarView(Enum))\nParameters:\n    view: View. Intent Calendar View. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"day\"(Day), \"week\"(Week), \"month\"(Month), \"quarter\"(Quarter), \"year\"(Year), \"tasks\"(Tasks).\nDescription:\n    Change View: Switch to a different view\nParameterSummary: (view) Switch to ${view}\n",
    "com.flexibits.fantastical2.FKRUpNextLockScreenWidgetConfigIntent": "com.flexibits.fantastical2.FKRUpNextLockScreenWidgetConfigIntent(calendarSet: IntentCalendarSet(Object), eventTypes: IntentShowEventType(Enum) = \"timed\", taskTypes: IntentShowTaskType(Enum) = \"timed\")\nParameters:\n    calendarSet:  Calendar Set. Fantastical Calendar Set.\n    eventTypes:  Show Events. Intent Show Event Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"all\"(All Events), \"timed\"(Timed Events Only), \"none\"(None).\n    taskTypes:  Show Tasks. Intent Show Task Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"all\"(All Tasks), \"timed\"(Timed Tasks Only), \"none\"(None).\nDescription:\n    Up Next Lock Screen Widget Config: Configuration for the Up Next Widget on the Lock Screen\nParameterSummary: () Up Next Lock Screen Widget Config\n",
    "com.flexibits.fantastical2.FKRActionLockScreenWidgetConfigIntent": "com.flexibits.fantastical2.FKRActionLockScreenWidgetConfigIntent(action: IntentActionType(Enum) = \"addEvent\")\nParameters:\n    action:  Action. Fantastical Action Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"addEvent\"(Add Event), \"addTask\"(Add Task), \"search\"(Search), \"launch\"(Open Fantastical).\nDescription:\n    Action Lock Screen Widget Config: Configuration for the Action Widget\nParameterSummary: () Action Lock Screen Widget Config\n",
    "com.flexibits.fantastical2.FKRCalendarLockScreenWidgetConfigIntent": "com.flexibits.fantastical2.FKRCalendarLockScreenWidgetConfigIntent()\nDescription:\n    Calendar Lock Screen Widget Config: Configuration for the calendar widget\nParameterSummary: () Calendar Lock Screen Widget Config\n",
    "com.flexibits.fantastical2.FBUpcomingCalendarItemIntent": "com.flexibits.fantastical2.FBUpcomingCalendarItemIntent(itemType: IntentItemType(Enum) = \"unspecified\") -> Title\n                            : String\nParameters:\n    itemType:  Item. Fantastical Item Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"event\"(event), \"reminder\"(task), \"unspecified\"(item).\nReturn Value:\n    Title: Title.\nDescription:\n    Upcoming Item: Shows the next upcoming item\nParameterSummary: (Upcoming ${itemType}) Upcoming ${itemType}\n",
    "com.flexibits.fantastical2.FBShowScheduleIntent": "com.flexibits.fantastical2.FBShowScheduleIntent(day: IntentScheduleDay(Enum) = \"today\", date: String) -> Calendar Item Title\n                            : String\nParameters:\n    day:  day. Fantastical Schedule Day. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"today\"(today), \"tomorrow\"(tomorrow), \"specificDate\"(specific date).\n    date:  date. This value depends on the value of \"day\". This parameter is only valid when the value of \"day\" is \"specificDate\".\nReturn Value:\n    Calendar Item Title: Calendar Item Title.\nDescription:\n    Show Schedule: Shows the schedule for a customizable date.\nParameterSummary: (Schedule for ${day}) Schedule for ${day}; (Schedule for ${day}) Schedule for ${day}\n",
    "com.flexibits.fantastical2.FBOverdueRemindersIntent": "com.flexibits.fantastical2.FBOverdueRemindersIntent() -> Calendar Items\n                            : IntentCalendarItem(Object)\nReturn Value:\n    Calendar Items: Calendar Items. Fantastical Calendar Item.\nDescription:\n    Overdue Tasks: Shows all tasks that are overdue\nParameterSummary: (Overdue tasks) Overdue tasks\n",
    "com.flexibits.fantastical2.FBShowCalendarIntent": "com.flexibits.fantastical2.FBShowCalendarIntent(calendar: (Object), calendarName: String, date: String) -> Calendar\n                            : Object\nParameters:\n    calendar:  Calendar.\n    calendarName:  Calendar Name.\n    date:  Date.\nReturn Value:\n    Calendar: Calendar.\nDescription:\n    Show Calendar: Shows upcoming events on a specific calendar\nParameterSummary: (Show “${calendarName}” calendar) Show “${calendarName}” calendar\n",
    "com.flexibits.fantastical2.FBShowListIntent": "com.flexibits.fantastical2.FBShowListIntent(list: (Object), listName: String, date: String) -> List \n                            : Object\nParameters:\n    list:  List.\n    listName:  List Name.\n    date:  Date.\nReturn Value:\n    List : List .\nDescription:\n    Show List: Shows all tasks on a specific list\nParameterSummary: (Show \"${listName}\" list) Show \"${listName}\" list\n",
    "com.flexibits.fantastical2.FBCreateFromClipboardIntent": "com.flexibits.fantastical2.FBCreateFromClipboardIntent() -> Calendar Item Title\n                            : String\nReturn Value:\n    Calendar Item Title: Calendar Item Title.\nDescription:\n    Create from Clipboard: Creates a new event or task from the contents of the clipboard\nParameterSummary: () Create from Clipboard\n",
    "com.flexibits.fantastical2.FBCreateFromInputIntent": "com.flexibits.fantastical2.FBCreateFromInputIntent(input: String) -> Calendar Item Title\n                            : String\nParameters:\n    input:  Input.\nReturn Value:\n    Calendar Item Title: Calendar Item Title.\nDescription:\n    Create From Input: Creates a new event or task from a given input.\nParameterSummary: (Create event or task from: \"${input}\") Create event or task from: \"${input}\"\n",
    "com.flexibits.fantastical2.FBOpenOnDateIntent": "com.flexibits.fantastical2.FBOpenOnDateIntent(date: String)\nParameters:\n    date:  Date.\nDescription:\n    Open On Date: Open Fantastical on the specified date.\nParameterSummary: (Open Fantastical on ${date}) Open Fantastical on ${date}\n",
    "com.flexibits.fantastical2.FBChangeCalendarSetIntent": "com.flexibits.fantastical2.FBChangeCalendarSetIntent(calendarSetName: String)\nParameters:\n    calendarSetName:  Calendar Set Name.\nDescription:\n    Change Calendar Set: Changes the currently active calendar set\nParameterSummary: (Change active calendar set to ${calendarSetName}) Change active calendar set to ${calendarSetName}\n",
    "com.flexibits.fantastical2.FBDateWidgetConfigIntent": "com.flexibits.fantastical2.FBDateWidgetConfigIntent(theme: IntentWidgetTheme(Enum) = \"mirrorSystem\", showMonth: Bool = True, showWeather: Bool)\nParameters:\n    theme:  Appearance. Fantastical Widget Theme. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"mirrorSystem\"(Mirror System), \"fantastical\"(Fantastical), \"light\"(Light), \"dark\"(Dark), \"black\"(Black).\n    showMonth:  Show Month.\n    showWeather:  Show Weather.\nDescription:\n    Date Widget Configuration: Configuration for the Date Widget\nParameterSummary: () Date Widget Configuration\n",
    "com.flexibits.fantastical2.FBUpNextWidgetConfigIntent": "com.flexibits.fantastical2.FBUpNextWidgetConfigIntent(theme: IntentWidgetTheme(Enum) = \"mirrorSystem\", calendarSet: IntentCalendarSet(Object), includeEvents: Bool = True, includeTasks: Bool = True, showWeather: Bool = True, todayOnly: Bool)\nParameters:\n    theme:  Appearance. Fantastical Widget Theme. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"mirrorSystem\"(Mirror System), \"fantastical\"(Fantastical), \"light\"(Light), \"dark\"(Dark), \"black\"(Black).\n    calendarSet:  Calendar Set. Fantastical Calendar Set.\n    includeEvents:  Show Events.\n    includeTasks:  Show Tasks.\n    showWeather:  Show Weather.\n    todayOnly:  Show Today Only.\nDescription:\n    Up Next Widget Configuration: Configuration for the Up Next Widget\nParameterSummary: () Up Next Widget Configuration\n",
    "com.flexibits.fantastical2.FBEventListWidgetConfigIntent": "com.flexibits.fantastical2.FBEventListWidgetConfigIntent(theme: IntentWidgetTheme(Enum) = \"mirrorSystem\", calendarSet: IntentCalendarSet(Object), eventTypes: IntentShowEventType(Enum) = \"all\", taskTypes: IntentShowTaskType(Enum) = \"all\", showWeather: Bool = True, action: IntentOptionalActionType(Enum) = \"addEvent\")\nParameters:\n    theme:  Appearance. Fantastical Widget Theme. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"mirrorSystem\"(Mirror System), \"fantastical\"(Fantastical), \"light\"(Light), \"dark\"(Dark), \"black\"(Black).\n    calendarSet:  Calendar Set. Fantastical Calendar Set.\n    eventTypes:  Show Events. Intent Show Event Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"all\"(All Events), \"timed\"(Timed Events Only), \"none\"(None).\n    taskTypes:  Show Tasks. Intent Show Task Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"all\"(All Tasks), \"timed\"(Timed Tasks Only), \"none\"(None).\n    showWeather:  Show Weather.\n    action:  Quick Action. Fantastical Optional Action Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"addEvent\"(Add Event), \"addTask\"(Add Task), \"search\"(Search), \"none\"(None).\nDescription:\n    Event List Widget Configuration: Configuration for the Event List Widget\nParameterSummary: () Event List Widget Configuration\n",
    "com.flexibits.fantastical2.FBDateCalendarWidgetConfigIntent": "com.flexibits.fantastical2.FBDateCalendarWidgetConfigIntent(theme: IntentWidgetTheme(Enum) = \"mirrorSystem\", showEvents: Bool = True, indicatorType: IntentEventIndicatorType(Enum) = \"heatmap\", calendarSet: IntentCalendarSet(Object), showWeather: Bool = True)\nParameters:\n    theme:  Appearance. Fantastical Widget Theme. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"mirrorSystem\"(Mirror System), \"fantastical\"(Fantastical), \"light\"(Light), \"dark\"(Dark), \"black\"(Black).\n    showEvents:  Show Item Indicators.\n    indicatorType:  Indicator Style. Intent Event Indicator Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"heatmap\"(Heatmap), \"dots\"(Dots). This value depends on the value of \"showEvents\". This parameter is only valid when the value of \"showEvents\" is True.\n    calendarSet:  Calendar Set. Fantastical Calendar Set. This value depends on the value of \"showEvents\". This parameter is only valid when the value of \"showEvents\" is True.\n    showWeather:  Show Weather.\nDescription:\n    Date Calendar Widget Configuration: Configuration for the Date/Calendar Widget\nParameterSummary: () Date Calendar Widget Configuration\n",
    "com.flexibits.fantastical2.FBCalendarWidgetConfigIntent": "com.flexibits.fantastical2.FBCalendarWidgetConfigIntent(theme: IntentWidgetTheme(Enum) = \"mirrorSystem\", showEvents: Bool = True, indicatorType: IntentEventIndicatorType(Enum) = \"heatmap\", calendarSet: IntentCalendarSet(Object))\nParameters:\n    theme:  Appearance. Fantastical Widget Theme. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"mirrorSystem\"(Mirror System), \"fantastical\"(Fantastical), \"light\"(Light), \"dark\"(Dark), \"black\"(Black).\n    showEvents:  Show Item Indicators.\n    indicatorType:  Indicator Style. Intent Event Indicator Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"heatmap\"(Heatmap), \"dots\"(Dots). This value depends on the value of \"showEvents\". This parameter is only valid when the value of \"showEvents\" is True.\n    calendarSet:  Calendar Set. Fantastical Calendar Set. This value depends on the value of \"showEvents\". This parameter is only valid when the value of \"showEvents\" is True.\nDescription:\n    Calendar Widget Configuration: Configuration for the Calendar Widget\nParameterSummary: () Calendar Widget Configuration\n",
    "com.flexibits.fantastical2.FBEventListCalendarWidgetConfigIntent": "com.flexibits.fantastical2.FBEventListCalendarWidgetConfigIntent(theme: IntentWidgetTheme(Enum) = \"mirrorSystem\", calendarSet: IntentCalendarSet(Object), eventTypes: IntentShowEventType(Enum) = \"all\", taskTypes: IntentShowTaskType(Enum) = \"all\", showHeatmap: Bool = True, indicatorType: IntentEventIndicatorType(Enum) = \"heatmap\", showWeather: Bool = True, action: IntentOptionalActionType(Enum) = \"addEvent\")\nParameters:\n    theme:  Appearance. Fantastical Widget Theme. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"mirrorSystem\"(Mirror System), \"fantastical\"(Fantastical), \"light\"(Light), \"dark\"(Dark), \"black\"(Black).\n    calendarSet:  Calendar Set. Fantastical Calendar Set.\n    eventTypes:  Show Events. Intent Show Event Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"all\"(All Events), \"timed\"(Timed Events Only), \"none\"(None).\n    taskTypes:  Show Tasks. Intent Show Task Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"all\"(All Tasks), \"timed\"(Timed Tasks Only), \"none\"(None).\n    showHeatmap:  Show Item Indicators.\n    indicatorType:  Indicator Style. Intent Event Indicator Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"heatmap\"(Heatmap), \"dots\"(Dots). This value depends on the value of \"showHeatmap\". This parameter is only valid when the value of \"showHeatmap\" is True.\n    showWeather:  Show Weather.\n    action:  Quick Action. Fantastical Optional Action Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"addEvent\"(Add Event), \"addTask\"(Add Task), \"search\"(Search), \"none\"(None).\nDescription:\n    Event List Calendar Widget Configuration: Configuration for the Event List Calendar Widget.\nParameterSummary: () Event List Calendar Widget Configuration\n",
    "com.flexibits.fantastical2.FBEventListSmallWidgetConfigIntent": "com.flexibits.fantastical2.FBEventListSmallWidgetConfigIntent(theme: IntentWidgetTheme(Enum) = \"mirrorSystem\", calendarSet: IntentCalendarSet(Object), eventTypes: IntentShowEventType(Enum) = \"all\", taskTypes: IntentShowTaskType(Enum) = \"all\", showWeather: Bool = True)\nParameters:\n    theme:  Appearance. Fantastical Widget Theme. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"mirrorSystem\"(Mirror System), \"fantastical\"(Fantastical), \"light\"(Light), \"dark\"(Dark), \"black\"(Black).\n    calendarSet:  Calendar Set. Fantastical Calendar Set.\n    eventTypes:  Show Events. Intent Show Event Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"all\"(All Events), \"timed\"(Timed Events Only), \"none\"(None).\n    taskTypes:  Show Tasks. Intent Show Task Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"all\"(All Tasks), \"timed\"(Timed Tasks Only), \"none\"(None).\n    showWeather:  Show Weather.\nDescription:\n    Event List Small Widget Config: Configuration for the Small Event List Widget\nParameterSummary: () Event List Small Widget Config\n",
    "com.flexibits.fantastical2.FBActionWidgetConfigIntent": "com.flexibits.fantastical2.FBActionWidgetConfigIntent(theme: IntentWidgetTheme(Enum) = \"mirrorSystem\", action: IntentActionType(Enum) = \"addEvent\")\nParameters:\n    theme:  Appearance. Fantastical Widget Theme. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"mirrorSystem\"(Mirror System), \"fantastical\"(Fantastical), \"light\"(Light), \"dark\"(Dark), \"black\"(Black).\n    action:  Action. Fantastical Action Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"addEvent\"(Add Event), \"addTask\"(Add Task), \"search\"(Search), \"launch\"(Open Fantastical).\nDescription:\n    Action Widget Config: Configuration for the Action Widget\nParameterSummary: () Action Widget Config\n",
    "com.flexibits.fantastical2.FBGetAttendeesFromEventIntent": "com.flexibits.fantastical2.FBGetAttendeesFromEventIntent(calendarItem: IntentCalendarItem(Object)) -> Invitees\n                            : IntentAttendee(Object)\nParameters:\n    calendarItem:  Event. Fantastical Calendar Item.\nReturn Value:\n    Invitees: Invitees. Fantastical Attendee.\nDescription:\n    Get Invitees from Event: Retrieve the invitees from a Fantastical Event\nParameterSummary: (Get invitees from ${calendarItem}) Get invitees from ${calendarItem}\n",
    "com.flexibits.fantastical2.FBChangeCalendarViewIntent": "com.flexibits.fantastical2.FBChangeCalendarViewIntent(view: IntentCalendarView(Enum))\nParameters:\n    view:  View. Intent Calendar View. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"day\"(Day), \"week\"(Week), \"month\"(Month), \"quarter\"(Quarter), \"year\"(Year).\nDescription:\n    Change View: Switch to a different view\nParameterSummary: (Switch to ${view}) Switch to ${view}\n",
    "com.flexibits.fantastical2.FBUpNextLockScreenWidgetConfigIntent": "com.flexibits.fantastical2.FBUpNextLockScreenWidgetConfigIntent(calendarSet: IntentCalendarSet(Object), eventTypes: IntentShowEventType(Enum) = \"timed\", taskTypes: IntentShowTaskType(Enum) = \"timed\")\nParameters:\n    calendarSet:  Calendar Set. Fantastical Calendar Set.\n    eventTypes:  Show Events. Intent Show Event Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"all\"(All Events), \"timed\"(Timed Events Only), \"none\"(None).\n    taskTypes:  Show Tasks. Intent Show Task Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"all\"(All Tasks), \"timed\"(Timed Tasks Only), \"none\"(None).\nDescription:\n    Up Next Lock Screen Widget Config: Configuration for the Up Next Widget on the Lock Screen\nParameterSummary: () Up Next Lock Screen Widget Config\n",
    "com.flexibits.fantastical2.FBActionLockScreenWidgetConfigIntent": "com.flexibits.fantastical2.FBActionLockScreenWidgetConfigIntent(action: IntentActionType(Enum) = \"addEvent\")\nParameters:\n    action:  Action. Fantastical Action Type. The value of this Enum must be one of the following values (The text in parentheses describes the value): \"addEvent\"(Add Event), \"addTask\"(Add Task), \"search\"(Search), \"launch\"(Open Fantastical).\nDescription:\n    Action Lock Screen Widget Config: Configuration for the Action Widget\nParameterSummary: () Action Lock Screen Widget Config\n",
    "com.flexibits.fantastical2.FBCalendarLockScreenWidgetConfigIntent": "com.flexibits.fantastical2.FBCalendarLockScreenWidgetConfigIntent()\nDescription:\n    Calendar Lock Screen Widget Config: Configuration for the calendar widget\nParameterSummary: () Calendar Lock Screen Widget Config\n",
    "com.flexibits.fantastical2.FantasticalFocusFilterIntent": "com.flexibits.fantastical2.FantasticalFocusFilterIntent(selectedCalendarSets: array(CalendarSetEntity(Object)))\nParameters:\n    selectedCalendarSets: Calendar Sets.\nDescription:\n    Filter Calendar Sets: Select which calendar sets are visible when this Focus is active.\nParameterSummary: () Filter Calendar Sets\n"
}